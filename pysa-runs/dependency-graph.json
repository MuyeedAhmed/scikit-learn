{
  "click._winconsole._get_windows_console_stream.func": [
    "click._winconsole._get_windows_console_stream"
  ],
  "click.core.Command.get_help_option.show_help": [
    "click.core.Command.get_help_option"
  ],
  "click.core.Context.lookup_default.value": [
    "click.core.Context.lookup_default"
  ],
  "click.core.MultiCommand.invoke._process_result": [
    "click.core.MultiCommand.invoke"
  ],
  "click.core.Option.get_help_record._write_opts": [
    "click.core.Option.get_help_record"
  ],
  "click.core.Parameter.get_default.value": [
    "click.core.Parameter.get_default"
  ],
  "click.core.Parameter.type_cast_value.check_iter": [
    "click.core.Parameter.type_cast_value",
    "click.core.Parameter.type_cast_value.convert"
  ],
  "click.core.Parameter.type_cast_value.convert": [
    "click.core.Parameter.type_cast_value"
  ],
  "click.core.iter_params_for_processing.sort_key": [
    "click.core.iter_params_for_processing"
  ],
  "click.formatting.wrap_text._flush_par": [
    "click.formatting.wrap_text"
  ],
  "click.parser._unpack_args._fetch": [
    "click.parser._unpack_args"
  ],
  "click.termui.visible_prompt_func": [
    "click.termui.confirm"
  ],
  "click.termui.prompt.prompt_func": [
    "click.termui.prompt"
  ],
  "click.termui.prompt.prompt_func.f": [
    "click.termui.prompt.prompt_func"
  ],
  "click.utils.safecall.wrapper": [
    "click.utils.safecall"
  ],
  "doc.sphinxext.add_toctree_functions.add_toctree_functions.get_nav_object": [
    "doc.sphinxext.add_toctree_functions.add_toctree_functions"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__iadd__.addoffset": [
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__iadd__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asDict.toItem": [
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asDict",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asDict.toItem"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement._FifoCache.__init__.cache_len": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._FifoCache.__init__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement._FifoCache.__init__.clear": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._FifoCache.__init__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement._FifoCache.__init__.get": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._FifoCache.__init__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement._FifoCache.__init__.set": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._FifoCache.__init__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement._UnboundedCache.__init__.cache_len": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._UnboundedCache.__init__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement._UnboundedCache.__init__.clear": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._UnboundedCache.__init__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement._UnboundedCache.__init__.get": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._UnboundedCache.__init__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement._UnboundedCache.__init__.set": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._UnboundedCache.__init__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__.makeOptionalList": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__.makeOptionalList"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.addCondition.pa": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.addCondition"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Word.__str__.charsAsStr": [
    "doc.tutorial.machine_learning_map.pyparsing.Word.__str__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing._trim_arity.extract_stack": [
    "doc.tutorial.machine_learning_map.pyparsing._trim_arity"
  ],
  "doc.tutorial.machine_learning_map.pyparsing._trim_arity.extract_tb": [
    "doc.tutorial.machine_learning_map.pyparsing._trim_arity.wrapper"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.countedArray.countFieldParseAction": [
    "doc.tutorial.machine_learning_map.pyparsing.countedArray"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.indentedBlock.checkPeerIndent": [
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.indentedBlock.checkSubIndent": [
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.indentedBlock.checkUnindent": [
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.matchPreviousExpr.copyTokenToRepeater": [
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousExpr"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.matchPreviousExpr.copyTokenToRepeater.mustMatchTheseTokens": [
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousExpr.copyTokenToRepeater"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.matchPreviousLiteral.copyTokenToRepeater": [
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousLiteral"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.oneOf.isequal": [
    "doc.tutorial.machine_learning_map.pyparsing.oneOf"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.oneOf.masks": [
    "doc.tutorial.machine_learning_map.pyparsing.oneOf"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.originalTextFor.extractText": [
    "doc.tutorial.machine_learning_map.pyparsing.originalTextFor"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.srange._expanded": [
    "doc.tutorial.machine_learning_map.pyparsing.srange"
  ],
  "examples.applications.plot_out_of_core_classification.stream_reuters_documents.progress": [
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents"
  ],
  "examples.linear_model.plot_logistic_multinomial.plot_hyperplane.line": [
    "examples.linear_model.plot_logistic_multinomial.plot_hyperplane"
  ],
  "examples.linear_model.plot_sgd_iris.plot_hyperplane.line": [
    "examples.linear_model.plot_sgd_iris.plot_hyperplane"
  ],
  "examples.neural_networks.plot_rbm_logistic_classification.nudge_dataset.shift": [
    "examples.neural_networks.plot_rbm_logistic_classification.nudge_dataset"
  ],
  "jinja2.lexer.Lexer.__init__.c": [
    "jinja2.lexer.Lexer.__init__"
  ],
  "jinja2.nodes.BinExpr.as_const.f": [
    "jinja2.nodes.BinExpr.as_const"
  ],
  "jinja2.nodes.Slice.as_const.const": [
    "jinja2.nodes.Slice.as_const"
  ],
  "jinja2.nodes.UnaryExpr.as_const.f": [
    "jinja2.nodes.UnaryExpr.as_const"
  ],
  "jinja2.parser.Parser.parse_call_args.ensure": [
    "jinja2.parser.Parser.parse_call_args"
  ],
  "jinja2.parser.Parser.subparse.flush_data": [
    "jinja2.parser.Parser.subparse"
  ],
  "pip._vendor.pkg_resources._version_from_file.is_version_line": [
    "pip._vendor.pkg_resources._version_from_file"
  ],
  "pip._vendor.pyparsing._trim_arity.extract_stack": [
    "pip._vendor.pyparsing._trim_arity"
  ],
  "sklearn.base.BaseEstimator._check_feature_names.add_names": [
    "sklearn.base.BaseEstimator._check_feature_names"
  ],
  "sklearn.calibration._sigmoid_calibration.grad": [
    "sklearn.calibration._sigmoid_calibration"
  ],
  "sklearn.calibration._sigmoid_calibration.objective": [
    "sklearn.calibration._sigmoid_calibration"
  ],
  "sklearn.cluster._affinity_propagation._equal_similarities_and_preferences.all_equal_preferences": [
    "sklearn.cluster._affinity_propagation._equal_similarities_and_preferences"
  ],
  "sklearn.cluster._affinity_propagation._equal_similarities_and_preferences.all_equal_similarities": [
    "sklearn.cluster._affinity_propagation._equal_similarities_and_preferences"
  ],
  "sklearn.cluster._bicluster.SpectralBiclustering._fit_best_piecewise.make_piecewise": [
    "sklearn.cluster._bicluster.SpectralBiclustering._fit_best_piecewise"
  ],
  "sklearn.compose._column_transformer.ColumnTransformer._iter.replace_passthrough": [
    "sklearn.compose._column_transformer.ColumnTransformer._iter"
  ],
  "sklearn.conftest.hide_available_pandas.mocked_import": [
    "sklearn.conftest.hide_available_pandas"
  ],
  "sklearn.datasets._arff_parser._liac_arff_parser._io_to_generator": [
    "sklearn.datasets._arff_parser._liac_arff_parser"
  ],
  "sklearn.datasets._arff_parser._pandas_arff_parser.strip_single_quotes": [
    "sklearn.datasets._arff_parser._pandas_arff_parser"
  ],
  "sklearn.datasets._openml._load_arff_response._open_url_and_load_gzip_file": [
    "sklearn.datasets._openml._load_arff_response"
  ],
  "sklearn.datasets._openml._open_openml_url.is_gzip_encoded": [
    "sklearn.datasets._openml._open_openml_url"
  ],
  "sklearn.datasets._samples_generator.make_multilabel_classification.sample_example": [
    "sklearn.datasets._samples_generator.make_multilabel_classification"
  ],
  "sklearn.datasets._species_distributions._load_coverage.make_tuple": [
    "sklearn.datasets._species_distributions._load_coverage"
  ],
  "sklearn.decomposition._factor_analysis.FactorAnalysis.fit.my_svd": [
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit"
  ],
  "sklearn.decomposition._lda.LatentDirichletAllocation._approx_bound._loglikelihood": [
    "sklearn.decomposition._lda.LatentDirichletAllocation._approx_bound"
  ],
  "sklearn.externals._arff.ArffDecoder._decode.stream": [
    "sklearn.externals._arff.ArffDecoder._decode"
  ],
  "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit.obj_func": [
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit"
  ],
  "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit.obj_func": [
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit"
  ],
  "sklearn.gaussian_process.kernels.Matern.__call__.f": [
    "sklearn.gaussian_process.kernels.Matern.__call__"
  ],
  "sklearn.gaussian_process.kernels.PairwiseKernel.__call__.f": [
    "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"
  ],
  "sklearn.impute._knn.KNNImputer.transform.process_chunk": [
    "sklearn.impute._knn.KNNImputer.transform"
  ],
  "sklearn.linear_model._base.LinearRegression.fit.matvec": [
    "sklearn.linear_model._base.LinearRegression.fit"
  ],
  "sklearn.linear_model._base.LinearRegression.fit.rmatvec": [
    "sklearn.linear_model._base.LinearRegression.fit"
  ],
  "sklearn.linear_model._bayes.ARDRegression.fit.update_coeff": [
    "sklearn.linear_model._bayes.ARDRegression.fit"
  ],
  "sklearn.linear_model._ransac.RANSACRegressor.fit.loss_function": [
    "sklearn.linear_model._ransac.RANSACRegressor.fit"
  ],
  "sklearn.linear_model._ridge._get_rescaled_operator.matvec": [
    "sklearn.linear_model._ridge._get_rescaled_operator"
  ],
  "sklearn.linear_model._ridge._get_rescaled_operator.rmatvec": [
    "sklearn.linear_model._ridge._get_rescaled_operator"
  ],
  "sklearn.linear_model._ridge._solve_lbfgs.func": [
    "sklearn.linear_model._ridge._solve_lbfgs"
  ],
  "sklearn.linear_model._ridge._solve_sparse_cg.create_mv": [
    "sklearn.linear_model._ridge._solve_sparse_cg"
  ],
  "sklearn.linear_model.tests.test_huber.test_huber_gradient.grad_func": [
    "sklearn.linear_model.tests.test_huber.test_huber_gradient"
  ],
  "sklearn.linear_model.tests.test_huber.test_huber_gradient.loss_func": [
    "sklearn.linear_model.tests.test_huber.test_huber_gradient"
  ],
  "sklearn.metrics._pairwise_distances_reduction._dispatcher.BaseDistancesReductionDispatcher.is_usable_for.is_numpy_c_ordered": [
    "sklearn.metrics._pairwise_distances_reduction._dispatcher.BaseDistancesReductionDispatcher.is_usable_for"
  ],
  "sklearn.metrics._pairwise_distances_reduction._dispatcher.BaseDistancesReductionDispatcher.is_usable_for.is_valid_sparse_matrix": [
    "sklearn.metrics._pairwise_distances_reduction._dispatcher.BaseDistancesReductionDispatcher.is_usable_for"
  ],
  "sklearn.metrics._ranking.average_precision_score._binary_uninterpolated_average_precision": [
    "sklearn.metrics._ranking.average_precision_score"
  ],
  "sklearn.metrics.cluster._bicluster._check_rows_and_columns.checks": [
    "sklearn.metrics.cluster._bicluster._check_rows_and_columns"
  ],
  "sklearn.model_selection._search.BaseSearchCV._format_results._store": [
    "sklearn.model_selection._search.BaseSearchCV._format_results"
  ],
  "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates": [
    "sklearn.model_selection._search.BaseSearchCV.fit"
  ],
  "sklearn.multioutput._available_if_base_estimator_has._check": [
    "sklearn.multioutput._available_if_base_estimator_has"
  ],
  "sklearn.multioutput._available_if_estimator_has._check": [
    "sklearn.multioutput._available_if_estimator_has"
  ],
  "sklearn.naive_bayes.CategoricalNB._count._update_cat_count": [
    "sklearn.naive_bayes.CategoricalNB._count"
  ],
  "sklearn.naive_bayes.CategoricalNB._count._update_cat_count_dims": [
    "sklearn.naive_bayes.CategoricalNB._count"
  ],
  "sklearn.neighbors._base._kneighbors_from_graph.extract": [
    "sklearn.neighbors._base._kneighbors_from_graph"
  ],
  "sklearn.pipeline.Pipeline._sk_visual_block_._get_name": [
    "sklearn.pipeline.Pipeline._sk_visual_block_"
  ],
  "sklearn.preprocessing._data.PowerTransformer._yeo_johnson_optimize._neg_log_likelihood": [
    "sklearn.preprocessing._data.PowerTransformer._yeo_johnson_optimize"
  ],
  "sklearn.tree._export._compute_depth.compute_depth_": [
    "sklearn.tree._export._compute_depth",
    "sklearn.tree._export._compute_depth.compute_depth_"
  ],
  "sklearn.tree._export.export_text._add_leaf": [
    "sklearn.tree._export.export_text.print_tree_recurse"
  ],
  "sklearn.tree._export.export_text.print_tree_recurse": [
    "sklearn.tree._export.export_text",
    "sklearn.tree._export.export_text.print_tree_recurse"
  ],
  "sklearn.utils._encode._check_unknown.is_valid": [
    "sklearn.utils._encode._check_unknown"
  ],
  "sklearn.utils._pprint._changed_params.has_changed": [
    "sklearn.utils._pprint._changed_params"
  ],
  "sklearn.utils.discovery.all_estimators.is_abstract": [
    "sklearn.utils.discovery.all_estimators"
  ],
  "sklearn.utils.estimator_checks.check_estimator.checks_generator": [
    "sklearn.utils.estimator_checks.check_estimator"
  ],
  "sklearn.utils.estimator_checks.check_parameters_default_constructible.param_filter": [
    "sklearn.utils.estimator_checks.check_parameters_default_constructible"
  ],
  "sklearn.utils.estimator_checks.check_set_output_transform.fit_then_transform": [
    "sklearn.utils.estimator_checks.check_set_output_transform"
  ],
  "sklearn.utils.estimator_checks.check_set_output_transform.fit_transform": [
    "sklearn.utils.estimator_checks.check_set_output_transform"
  ],
  "sklearn.utils.estimator_checks.parametrize_with_checks.checks_generator": [
    "sklearn.utils.estimator_checks.parametrize_with_checks"
  ],
  "sklearn.utils.tests.test_optimize.test_newton_cg.func": [
    "sklearn.utils.tests.test_optimize.test_newton_cg"
  ],
  "sklearn.utils.tests.test_optimize.test_newton_cg.grad": [
    "sklearn.utils.tests.test_optimize.test_newton_cg",
    "sklearn.utils.tests.test_optimize.test_newton_cg.grad_hess"
  ],
  "sklearn.utils.tests.test_optimize.test_newton_cg.grad_hess": [
    "sklearn.utils.tests.test_optimize.test_newton_cg"
  ],
  "sklearn.utils.tests.test_optimize.test_newton_cg.hess": [
    "sklearn.utils.tests.test_optimize.test_newton_cg"
  ],
  "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args": [
    "sklearn.utils.validation._deprecate_positional_args"
  ],
  "sklearn.utils.validation.check_array.is_sparse": [
    "sklearn.utils.validation.check_array"
  ],
  "sklearn.utils.validation.check_scalar.type_name": [
    "sklearn.utils.validation.check_scalar"
  ],
  "traitlets.utils.getargspec.getargspec.orig_func": [
    "traitlets.utils.getargspec.getargspec"
  ],
  "PIL.Image.open": [
    "sklearn.datasets._base.load_sample_images",
    "sklearn.datasets._lfw._load_imgs"
  ],
  "__import__": [
    "doc.sphinxext.github_link._linkcode_resolve",
    "jinja2.utils.import_string",
    "werkzeug.utils.import_string"
  ],
  "_codecs.decode": [
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups"
  ],
  "_codecs.encode": [
    "sklearn.datasets._twenty_newsgroups._download_20newsgroups"
  ],
  "_codecs.lookup": [
    "click._compat.is_ascii_encoding"
  ],
  "_csv.reader": [
    "sklearn.datasets._base.load_csv_data",
    "sklearn.externals._arff._parse_values"
  ],
  "_heapq.heapify": [
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree"
  ],
  "_heapq.heappop": [
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.split_next"
  ],
  "_heapq.heappush": [
    "sklearn.cluster._agglomerative._hc_cut",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._compute_best_split_and_push"
  ],
  "_heapq.heappushpop": [
    "sklearn.cluster._agglomerative._hc_cut"
  ],
  "_operator.eq": [
    "importlib_metadata.EntryPoint.matches"
  ],
  "_operator.ge": [
    "click.types._NumberRangeBase.convert",
    "sklearn.utils._param_validation.Interval.__contains__",
    "sklearn.utils.validation.check_scalar"
  ],
  "_operator.gt": [
    "click.types._NumberRangeBase.convert",
    "sklearn.utils._param_validation.Interval.__contains__",
    "sklearn.utils.validation.check_scalar"
  ],
  "_operator.le": [
    "click.types._NumberRangeBase.convert",
    "sklearn.utils._param_validation.Interval.__contains__",
    "sklearn.utils.validation.check_scalar"
  ],
  "_operator.lt": [
    "click.types._NumberRangeBase.convert",
    "sklearn.utils._param_validation.Interval.__contains__",
    "sklearn.utils.validation.check_scalar"
  ],
  "_operator.mul": [
    "sklearn.model_selection._search.ParameterGrid.__len__"
  ],
  "_stat.S_ISDIR": [
    "click.types.Path.convert"
  ],
  "_stat.S_ISREG": [
    "click.types.Path.convert"
  ],
  "_warnings.warn": [
    "benchmarks.bench_plot_nmf._PGNMF._fit_transform",
    "benchmarks.bench_plot_nmf._nls_subproblem",
    "doc.conf.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.Keyword.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Literal.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__add__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__and__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__or__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__radd__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rand__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__ror__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rsub__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rxor__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__sub__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__xor__",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "pip._vendor.pyparsing.Forward._setResultsName",
    "pip._vendor.pyparsing.Literal.__init__",
    "pip._vendor.pyparsing.MatchFirst._setResultsName",
    "pip._vendor.pyparsing.Or._setResultsName",
    "pip._vendor.pyparsing.ParseExpression._setResultsName",
    "pip._vendor.pyparsing.Regex.__init__",
    "pip._vendor.pyparsing._MultipleMatch._setResultsName",
    "sklearn._build_utils.openmp_helpers.check_openmp_support",
    "sklearn.base.BaseEstimator.__setstate__",
    "sklearn.base.BaseEstimator._check_feature_names",
    "sklearn.base.BaseEstimator.set_params",
    "sklearn.calibration.CalibratedClassifierCV._get_estimator",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.cluster._affinity_propagation.AffinityPropagation.predict",
    "sklearn.cluster._affinity_propagation._affinity_propagation",
    "sklearn.cluster._agglomerative.AgglomerativeClustering._fit",
    "sklearn.cluster._agglomerative._fix_connectivity",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.cluster._birch.Birch._global_clustering",
    "sklearn.cluster._bisect_k_means.BisectingKMeans._warn_mkl_vcomp",
    "sklearn.cluster._feature_agglomeration.AgglomerationTransform.inverse_transform",
    "sklearn.cluster._hdbscan.hdbscan._hdbscan_brute",
    "sklearn.cluster._kmeans.KMeans._check_params_vs_input",
    "sklearn.cluster._kmeans.KMeans._warn_mkl_vcomp",
    "sklearn.cluster._kmeans.KMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans._check_params_vs_input",
    "sklearn.cluster._kmeans.MiniBatchKMeans._warn_mkl_vcomp",
    "sklearn.cluster._kmeans._BaseKMeans._check_params_vs_input",
    "sklearn.cluster._kmeans._BaseKMeans.predict",
    "sklearn.cluster._mean_shift.get_bin_seeds",
    "sklearn.cluster._optics.OPTICS.fit",
    "sklearn.cluster._optics.compute_optics_graph",
    "sklearn.cluster._spectral.SpectralClustering.fit",
    "sklearn.compose._target.TransformedTargetRegressor._fit_transformer",
    "sklearn.covariance._empirical_covariance.empirical_covariance",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.covariance._graph_lasso.graphical_lasso",
    "sklearn.covariance._robust_covariance.MinCovDet.fit",
    "sklearn.covariance._robust_covariance._c_step",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf_shrinkage",
    "sklearn.cross_decomposition._pls._PLS.fit",
    "sklearn.cross_decomposition._pls._get_first_singular_vectors_power_method",
    "sklearn.datasets._openml._get_data_info_by_name",
    "sklearn.datasets._openml._retry_on_network_error.decorator.wrapper",
    "sklearn.datasets._openml._retry_with_clean_cache.decorator.wrapper",
    "sklearn.datasets._openml._verify_target_data_type",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._samples_generator.make_sparse_coded_signal",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning._check_warn_deprecated",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit",
    "sklearn.decomposition._fastica.FastICA._fit_transform",
    "sklearn.decomposition._fastica._ica_par",
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform",
    "sklearn.decomposition._nmf.NMF._check_params",
    "sklearn.decomposition._nmf.NMF._fit_transform",
    "sklearn.decomposition._nmf._BaseNMF._check_params",
    "sklearn.decomposition._nmf._BaseNMF._check_w_h",
    "sklearn.decomposition._nmf._BaseNMF.inverse_transform",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit",
    "sklearn.dummy.DummyClassifier.fit",
    "sklearn.ensemble._bagging.BaggingClassifier._set_oob_score",
    "sklearn.ensemble._bagging.BaggingRegressor._set_oob_score",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._base.BaseEnsemble._validate_estimator",
    "sklearn.ensemble._forest.BaseForest._compute_oob_predictions",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._forest.ForestClassifier._validate_y_class_weight",
    "sklearn.ensemble._gb.BaseGradientBoosting._compute_partial_dependence_recursion",
    "sklearn.ensemble._iforest.IsolationForest.fit",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.fit",
    "sklearn.experimental.enable_hist_gradient_boosting.$toplevel",
    "sklearn.externals._packaging.version.LegacyVersion.__init__",
    "sklearn.feature_extraction.text.CountVectorizer.fit_transform",
    "sklearn.feature_extraction.text.TfidfVectorizer._check_params",
    "sklearn.feature_extraction.text._VectorizerMixin._check_stop_words_consistency",
    "sklearn.feature_extraction.text._VectorizerMixin._warn_for_unused_params",
    "sklearn.feature_selection._base.SelectorMixin._transform",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict",
    "sklearn.gaussian_process.kernels.Kernel._check_bounds_params",
    "sklearn.impute._base.SimpleImputer.transform",
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.isotonic.check_increasing",
    "sklearn.kernel_approximation.Nystroem.fit",
    "sklearn.linear_model._base._deprecate_normalize",
    "sklearn.linear_model._base._pre_fit",
    "sklearn.linear_model._bayes._deprecate_n_iter",
    "sklearn.linear_model._coordinate_descent.ElasticNet.fit",
    "sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.inner_solve",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.line_search",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.solve",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._omp._cholesky_omp",
    "sklearn.linear_model._omp._gram_omp",
    "sklearn.linear_model._quantile.QuantileRegressor.fit",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.linear_model._ridge._BaseRidge.fit",
    "sklearn.linear_model._ridge._solve_cholesky_kernel",
    "sklearn.linear_model._ridge._solve_lbfgs",
    "sklearn.linear_model._ridge._solve_sparse_cg",
    "sklearn.linear_model._sag.sag_solver",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._fit",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._fit",
    "sklearn.linear_model._theil_sen._spatial_median",
    "sklearn.manifold._isomap.Isomap._fit_transform",
    "sklearn.manifold._mds.MDS.fit_transform",
    "sklearn.manifold._mds.smacof",
    "sklearn.manifold._spectral_embedding.SpectralEmbedding._get_affinity_matrix",
    "sklearn.manifold._spectral_embedding.spectral_embedding",
    "sklearn.metrics._classification._check_set_wise_labels",
    "sklearn.metrics._classification._warn_prf",
    "sklearn.metrics._classification.balanced_accuracy_score",
    "sklearn.metrics._classification.class_likelihood_ratios",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._classification.log_loss",
    "sklearn.metrics._ranking.ndcg_score",
    "sklearn.metrics._ranking.precision_recall_curve",
    "sklearn.metrics._ranking.roc_curve",
    "sklearn.metrics._ranking.top_k_accuracy_score",
    "sklearn.metrics._regression.d2_pinball_score",
    "sklearn.metrics._regression.d2_tweedie_score",
    "sklearn.metrics._regression.r2_score",
    "sklearn.metrics._scorer._BaseScorer._warn_overlap",
    "sklearn.metrics.cluster._supervised.check_clusterings",
    "sklearn.metrics.pairwise.manhattan_distances",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.mixture._base.BaseMixture.fit_predict",
    "sklearn.model_selection._plot._BaseCurveDisplay._plot_curve",
    "sklearn.model_selection._search.BaseSearchCV._format_results._store",
    "sklearn.model_selection._search.ParameterSampler.__iter__",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.model_selection._split.StratifiedKFold._make_test_folds",
    "sklearn.model_selection._validation._enforce_prediction_order",
    "sklearn.model_selection._validation._score",
    "sklearn.model_selection._validation._translate_train_sizes",
    "sklearn.model_selection._validation._warn_or_raise_about_fit_failures",
    "sklearn.multiclass._fit_binary",
    "sklearn.naive_bayes._BaseDiscreteNB._check_alpha",
    "sklearn.neighbors._base.NeighborsBase._check_algorithm_metric",
    "sklearn.neighbors._base.NeighborsBase._fit",
    "sklearn.neighbors._base.sort_graph_by_row_values",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba",
    "sklearn.neighbors._lof.LocalOutlierFactor.fit",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.fit",
    "sklearn.neighbors._regression.RadiusNeighborsRegressor.predict",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.preprocessing._data.QuantileTransformer._dense_fit",
    "sklearn.preprocessing._data.QuantileTransformer.fit",
    "sklearn.preprocessing._data.scale",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit",
    "sklearn.preprocessing._encoders.OneHotEncoder.fit",
    "sklearn.preprocessing._encoders._BaseEncoder._transform",
    "sklearn.preprocessing._function_transformer.FunctionTransformer._check_inverse_transform",
    "sklearn.preprocessing._function_transformer.FunctionTransformer.set_output",
    "sklearn.preprocessing._label.MultiLabelBinarizer._transform",
    "sklearn.random_projection.BaseRandomProjection.fit",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.fit",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.fit",
    "sklearn.svm._base.BaseLibSVM._warn_from_fit_status",
    "sklearn.svm._base._fit_liblinear",
    "sklearn.svm._classes._validate_dual_parameter",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.utils._bunch.Bunch.__getitem__",
    "sklearn.utils._metadata_requests.MethodMetadataRequest._check_warnings",
    "sklearn.utils._param_validation._Booleans.is_satisfied_by",
    "sklearn.utils._testing._delete_folder",
    "sklearn.utils.deprecation.deprecated._decorate_class.wrapped",
    "sklearn.utils.deprecation.deprecated._decorate_fun.wrapped",
    "sklearn.utils.deprecation.deprecated._decorate_property.wrapped",
    "sklearn.utils.estimator_checks._construct_instance",
    "sklearn.utils.estimator_checks._yield_all_checks",
    "sklearn.utils.estimator_checks.check_estimator",
    "sklearn.utils.estimator_checks.check_set_params",
    "sklearn.utils.extmath.density",
    "sklearn.utils.extmath.randomized_svd",
    "sklearn.utils.extmath.squared_norm",
    "sklearn.utils.extmath.stable_cumsum",
    "sklearn.utils.get_chunk_n_rows",
    "sklearn.utils.optimize._check_optimize_result",
    "sklearn.utils.optimize._newton_cg",
    "sklearn.utils.parallel._FuncWrapper.__call__",
    "sklearn.utils.parallel._with_config",
    "sklearn.utils.validation._check_psd_eigenvalues",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f",
    "sklearn.utils.validation._ensure_sparse_format",
    "sklearn.utils.validation.check_array",
    "sklearn.utils.validation.check_symmetric",
    "sklearn.utils.validation.column_or_1d",
    "traitlets.traitlets.HasTraits.__init__",
    "traitlets.traitlets._deprecated_method"
  ],
  "_warnings.warn_explicit": [
    "traitlets.traitlets._deprecated_method"
  ],
  "all": [
    "doc.tutorial.machine_learning_map.pyparsing.And.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Each.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.__init__",
    "importlib_metadata.EntryPoint.matches",
    "jinja2.compiler.has_safe_repr",
    "pip._vendor.pyparsing.And.streamline",
    "pip._vendor.pyparsing.Each.streamline",
    "pip._vendor.pyparsing.ParserElement.setParseAction",
    "setup.setup_package",
    "sklearn.compose._column_transformer.ColumnTransformer._hstack",
    "sklearn.compose._column_transformer.ColumnTransformer._sk_visual_block_",
    "sklearn.compose._column_transformer._is_empty_column_selection",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._svmlight_format_io.load_svmlight_files",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.externals._arff.COOData.encode_data",
    "sklearn.inspection._partial_dependence._grid_from_X",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.linear_model._coordinate_descent.ElasticNet.fit",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.model_selection._search.ParameterSampler._is_all_lists",
    "sklearn.multioutput._available_if_base_estimator_has._check",
    "sklearn.multioutput._available_if_estimator_has._check",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit",
    "sklearn.pipeline.FeatureUnion._hstack",
    "sklearn.pipeline.Pipeline._can_inverse_transform",
    "sklearn.preprocessing._function_transformer.FunctionTransformer._check_inverse_transform",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit_transform",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform",
    "sklearn.utils._param_validation.HasMethods.is_satisfied_by",
    "sklearn.utils._testing._create_aligned_memmap_backed_arrays",
    "sklearn.utils.class_weight.compute_class_weight",
    "sklearn.utils.estimator_checks._output_from_fit_transform",
    "sklearn.utils.estimator_checks.check_get_params_invariance",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out",
    "sklearn.utils.validation.check_array"
  ],
  "any": [
    "click._compat.open_stream",
    "click.core.Option.consume_value",
    "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Or.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.dump",
    "packaging.specifiers.SpecifierSet.prereleases",
    "pip._vendor.packaging.specifiers.SpecifierSet.prereleases",
    "pip._vendor.pyparsing.And.streamline",
    "pip._vendor.pyparsing.MatchFirst._setResultsName",
    "pip._vendor.pyparsing.MatchFirst.streamline",
    "pip._vendor.pyparsing.Or._setResultsName",
    "pip._vendor.pyparsing.Or.streamline",
    "sklearn.compose._column_transformer.ColumnTransformer._hstack",
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform",
    "sklearn.compose._column_transformer._is_empty_column_selection",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.dummy.DummyClassifier.fit",
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble._validate_estimators",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._should_stop",
    "sklearn.ensemble._stacking.StackingClassifier._validate_estimators",
    "sklearn.externals._arff._parse_values",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.get_feature_names_out",
    "sklearn.feature_extraction.text.CountVectorizer.fit_transform",
    "sklearn.impute._base.SimpleImputer._validate_input",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.metrics._scorer._MultimetricScorer._use_cache",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.metrics.pairwise._check_chunk_size",
    "sklearn.mixture._gaussian_mixture._check_weights",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.model_selection._split._RepeatedSplits.__init__",
    "sklearn.pipeline.FeatureUnion._hstack",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.utils._array_api._isdtype_single",
    "sklearn.utils._array_api.isdtype",
    "sklearn.utils._in_unstable_openblas_configuration",
    "sklearn.utils._param_validation.MissingValues.is_satisfied_by",
    "sklearn.utils._param_validation._Booleans.is_satisfied_by",
    "sklearn.utils._param_validation._CVObjects.is_satisfied_by",
    "sklearn.utils._param_validation._RandomStates.is_satisfied_by",
    "sklearn.utils._param_validation._VerboseHelper.is_satisfied_by",
    "sklearn.utils._testing._Raises.__exit__",
    "sklearn.utils._testing.create_memmap_backed_data",
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.discovery.all_functions",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_outlier_contamination",
    "sklearn.utils.estimator_checks.check_param_validation",
    "sklearn.utils.estimator_checks.check_requires_y_none",
    "sklearn.utils.estimator_checks.parametrize_with_checks",
    "sklearn.utils.validation.check_array"
  ],
  "ast.literal_eval": [
    "jinja2.lexer.Lexer.wrap"
  ],
  "asv_benchmarks.benchmarks.common.clear_tmp": [
    "asv_benchmarks.benchmarks.common.Estimator.setup_cache"
  ],
  "asv_benchmarks.benchmarks.common.get_estimator_path": [
    "asv_benchmarks.benchmarks.common.Estimator.setup",
    "asv_benchmarks.benchmarks.common.Estimator.setup_cache",
    "asv_benchmarks.benchmarks.common.Predictor.track_same_prediction",
    "asv_benchmarks.benchmarks.common.Transformer.track_same_transform"
  ],
  "asv_benchmarks.benchmarks.common.get_from_config": [
    "asv_benchmarks.benchmarks.common.Benchmark.$class_toplevel"
  ],
  "asv_benchmarks.benchmarks.datasets._20newsgroups_highdim_dataset": [
    "asv_benchmarks.benchmarks.cluster.KMeansBenchmark.make_data",
    "asv_benchmarks.benchmarks.cluster.MiniBatchKMeansBenchmark.make_data",
    "asv_benchmarks.benchmarks.ensemble.GradientBoostingClassifierBenchmark.make_data",
    "asv_benchmarks.benchmarks.ensemble.RandomForestClassifierBenchmark.make_data",
    "asv_benchmarks.benchmarks.linear_model.LogisticRegressionBenchmark.make_data"
  ],
  "asv_benchmarks.benchmarks.datasets._20newsgroups_lowdim_dataset": [
    "asv_benchmarks.benchmarks.ensemble.GradientBoostingClassifierBenchmark.make_data",
    "asv_benchmarks.benchmarks.ensemble.RandomForestClassifierBenchmark.make_data",
    "asv_benchmarks.benchmarks.linear_model.LogisticRegressionBenchmark.make_data",
    "asv_benchmarks.benchmarks.neighbors.KNeighborsClassifierBenchmark.make_data"
  ],
  "asv_benchmarks.benchmarks.datasets._blobs_dataset": [
    "asv_benchmarks.benchmarks.cluster.KMeansBenchmark.make_data",
    "asv_benchmarks.benchmarks.cluster.MiniBatchKMeansBenchmark.make_data"
  ],
  "asv_benchmarks.benchmarks.datasets._digits_dataset": [
    "asv_benchmarks.benchmarks.manifold.TSNEBenchmark.make_data"
  ],
  "asv_benchmarks.benchmarks.datasets._mnist_dataset": [
    "asv_benchmarks.benchmarks.decomposition.PCABenchmark.make_data"
  ],
  "asv_benchmarks.benchmarks.datasets._olivetti_faces_dataset": [
    "asv_benchmarks.benchmarks.decomposition.DictionaryLearningBenchmark.make_data",
    "asv_benchmarks.benchmarks.decomposition.MiniBatchDictionaryLearningBenchmark.make_data"
  ],
  "asv_benchmarks.benchmarks.datasets._random_dataset": [
    "asv_benchmarks.benchmarks.metrics.PairwiseDistancesBenchmark.setup"
  ],
  "asv_benchmarks.benchmarks.datasets._synth_classification_dataset": [
    "asv_benchmarks.benchmarks.ensemble.HistGradientBoostingClassifierBenchmark.make_data",
    "asv_benchmarks.benchmarks.model_selection.CrossValidationBenchmark.setup",
    "asv_benchmarks.benchmarks.model_selection.GridSearchBenchmark.make_data",
    "asv_benchmarks.benchmarks.svm.SVCBenchmark.make_data"
  ],
  "asv_benchmarks.benchmarks.datasets._synth_regression_dataset": [
    "asv_benchmarks.benchmarks.linear_model.ElasticNetBenchmark.make_data",
    "asv_benchmarks.benchmarks.linear_model.LassoBenchmark.make_data",
    "asv_benchmarks.benchmarks.linear_model.LinearRegressionBenchmark.make_data",
    "asv_benchmarks.benchmarks.linear_model.RidgeBenchmark.make_data",
    "asv_benchmarks.benchmarks.linear_model.SGDRegressorBenchmark.make_data"
  ],
  "asv_benchmarks.benchmarks.datasets._synth_regression_sparse_dataset": [
    "asv_benchmarks.benchmarks.linear_model.ElasticNetBenchmark.make_data",
    "asv_benchmarks.benchmarks.linear_model.LassoBenchmark.make_data",
    "asv_benchmarks.benchmarks.linear_model.LinearRegressionBenchmark.make_data",
    "asv_benchmarks.benchmarks.linear_model.RidgeBenchmark.make_data",
    "asv_benchmarks.benchmarks.linear_model.SGDRegressorBenchmark.make_data"
  ],
  "asv_benchmarks.benchmarks.utils.explained_variance_ratio": [
    "asv_benchmarks.benchmarks.utils.make_pca_scorers"
  ],
  "asv_benchmarks.benchmarks.utils.make_dict_learning_scorers": [
    "asv_benchmarks.benchmarks.decomposition.DictionaryLearningBenchmark.make_scorers",
    "asv_benchmarks.benchmarks.decomposition.MiniBatchDictionaryLearningBenchmark.make_scorers"
  ],
  "asv_benchmarks.benchmarks.utils.make_gen_classif_scorers": [
    "asv_benchmarks.benchmarks.ensemble.GradientBoostingClassifierBenchmark.make_scorers",
    "asv_benchmarks.benchmarks.ensemble.HistGradientBoostingClassifierBenchmark.make_scorers",
    "asv_benchmarks.benchmarks.ensemble.RandomForestClassifierBenchmark.make_scorers",
    "asv_benchmarks.benchmarks.linear_model.LogisticRegressionBenchmark.make_scorers",
    "asv_benchmarks.benchmarks.model_selection.GridSearchBenchmark.make_scorers",
    "asv_benchmarks.benchmarks.neighbors.KNeighborsClassifierBenchmark.make_scorers",
    "asv_benchmarks.benchmarks.svm.SVCBenchmark.make_scorers"
  ],
  "asv_benchmarks.benchmarks.utils.make_gen_reg_scorers": [
    "asv_benchmarks.benchmarks.linear_model.ElasticNetBenchmark.make_scorers",
    "asv_benchmarks.benchmarks.linear_model.LassoBenchmark.make_scorers",
    "asv_benchmarks.benchmarks.linear_model.LinearRegressionBenchmark.make_scorers",
    "asv_benchmarks.benchmarks.linear_model.RidgeBenchmark.make_scorers",
    "asv_benchmarks.benchmarks.linear_model.SGDRegressorBenchmark.make_scorers"
  ],
  "asv_benchmarks.benchmarks.utils.make_pca_scorers": [
    "asv_benchmarks.benchmarks.decomposition.PCABenchmark.make_scorers"
  ],
  "asv_benchmarks.benchmarks.utils.neg_mean_data_error": [
    "asv_benchmarks.benchmarks.utils.make_dict_learning_scorers"
  ],
  "asv_benchmarks.benchmarks.utils.neg_mean_inertia": [
    "asv_benchmarks.benchmarks.cluster.KMeansBenchmark.make_scorers",
    "asv_benchmarks.benchmarks.cluster.MiniBatchKMeansBenchmark.make_scorers"
  ],
  "asyncio.events.get_running_loop": [
    "jinja2.environment.Template.render"
  ],
  "asyncio.events.new_event_loop": [
    "jinja2.environment.Template.render"
  ],
  "atexit.register": [
    "sklearn.utils._testing.create_memmap_backed_data"
  ],
  "benchmarks.bench_covertype.load_data": [
    "benchmarks.bench_covertype.$toplevel"
  ],
  "benchmarks.bench_glmnet.bench": [
    "benchmarks.bench_glmnet.$toplevel"
  ],
  "benchmarks.bench_glmnet.rmse": [
    "benchmarks.bench_glmnet.bench"
  ],
  "benchmarks.bench_hist_gradient_boosting.get_estimator_and_data": [
    "benchmarks.bench_hist_gradient_boosting.$toplevel"
  ],
  "benchmarks.bench_hist_gradient_boosting.one_run": [
    "benchmarks.bench_hist_gradient_boosting.$toplevel"
  ],
  "benchmarks.bench_hist_gradient_boosting_adult.fit": [
    "benchmarks.bench_hist_gradient_boosting_adult.$toplevel"
  ],
  "benchmarks.bench_hist_gradient_boosting_adult.predict": [
    "benchmarks.bench_hist_gradient_boosting_adult.$toplevel"
  ],
  "benchmarks.bench_hist_gradient_boosting_categorical_only.fit": [
    "benchmarks.bench_hist_gradient_boosting_categorical_only.$toplevel"
  ],
  "benchmarks.bench_hist_gradient_boosting_categorical_only.predict": [
    "benchmarks.bench_hist_gradient_boosting_categorical_only.$toplevel"
  ],
  "benchmarks.bench_hist_gradient_boosting_higgsboson.fit": [
    "benchmarks.bench_hist_gradient_boosting_higgsboson.$toplevel"
  ],
  "benchmarks.bench_hist_gradient_boosting_higgsboson.load_data": [
    "benchmarks.bench_hist_gradient_boosting_higgsboson.$toplevel"
  ],
  "benchmarks.bench_hist_gradient_boosting_higgsboson.predict": [
    "benchmarks.bench_hist_gradient_boosting_higgsboson.$toplevel"
  ],
  "benchmarks.bench_hist_gradient_boosting_threading.get_estimator_and_data": [
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel"
  ],
  "benchmarks.bench_hist_gradient_boosting_threading.one_run": [
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel"
  ],
  "benchmarks.bench_isolation_forest.print_outlier_ratio": [
    "benchmarks.bench_isolation_forest.$toplevel"
  ],
  "benchmarks.bench_isotonic.bench_isotonic_regression": [
    "benchmarks.bench_isotonic.$toplevel"
  ],
  "benchmarks.bench_isotonic.generate_logistic_dataset": [
    "benchmarks.bench_isotonic.$toplevel"
  ],
  "benchmarks.bench_isotonic.generate_pathological_dataset": [
    "benchmarks.bench_isotonic.$toplevel"
  ],
  "benchmarks.bench_isotonic.generate_perturbed_logarithm_dataset": [
    "benchmarks.bench_isotonic.$toplevel"
  ],
  "benchmarks.bench_lasso.compute_bench": [
    "benchmarks.bench_lasso.$toplevel"
  ],
  "benchmarks.bench_mnist.load_data": [
    "benchmarks.bench_mnist.$toplevel"
  ],
  "benchmarks.bench_multilabel_metrics._plot": [
    "benchmarks.bench_multilabel_metrics.$toplevel"
  ],
  "benchmarks.bench_multilabel_metrics._tabulate": [
    "benchmarks.bench_multilabel_metrics.$toplevel"
  ],
  "benchmarks.bench_multilabel_metrics.benchmark": [
    "benchmarks.bench_multilabel_metrics.$toplevel"
  ],
  "benchmarks.bench_online_ocsvm.autolabel_auc": [
    "benchmarks.bench_online_ocsvm.$toplevel"
  ],
  "benchmarks.bench_online_ocsvm.autolabel_time": [
    "benchmarks.bench_online_ocsvm.$toplevel"
  ],
  "benchmarks.bench_online_ocsvm.print_outlier_ratio": [
    "benchmarks.bench_online_ocsvm.$toplevel"
  ],
  "benchmarks.bench_plot_fastkmeans.compute_bench": [
    "benchmarks.bench_plot_fastkmeans.$toplevel"
  ],
  "benchmarks.bench_plot_fastkmeans.compute_bench_2": [
    "benchmarks.bench_plot_fastkmeans.$toplevel"
  ],
  "benchmarks.bench_plot_hierarchical.compute_bench": [
    "benchmarks.bench_plot_hierarchical.$toplevel"
  ],
  "benchmarks.bench_plot_incremental_pca.benchmark": [
    "benchmarks.bench_plot_incremental_pca.fixed_batch_size_comparison",
    "benchmarks.bench_plot_incremental_pca.variable_batch_size_comparison"
  ],
  "benchmarks.bench_plot_incremental_pca.fixed_batch_size_comparison": [
    "benchmarks.bench_plot_incremental_pca.$toplevel"
  ],
  "benchmarks.bench_plot_incremental_pca.plot_batch_errors": [
    "benchmarks.bench_plot_incremental_pca.variable_batch_size_comparison"
  ],
  "benchmarks.bench_plot_incremental_pca.plot_batch_times": [
    "benchmarks.bench_plot_incremental_pca.variable_batch_size_comparison"
  ],
  "benchmarks.bench_plot_incremental_pca.plot_feature_errors": [
    "benchmarks.bench_plot_incremental_pca.fixed_batch_size_comparison"
  ],
  "benchmarks.bench_plot_incremental_pca.plot_feature_times": [
    "benchmarks.bench_plot_incremental_pca.fixed_batch_size_comparison"
  ],
  "benchmarks.bench_plot_incremental_pca.plot_results": [
    "benchmarks.bench_plot_incremental_pca.plot_batch_errors",
    "benchmarks.bench_plot_incremental_pca.plot_batch_times",
    "benchmarks.bench_plot_incremental_pca.plot_feature_errors",
    "benchmarks.bench_plot_incremental_pca.plot_feature_times"
  ],
  "benchmarks.bench_plot_incremental_pca.variable_batch_size_comparison": [
    "benchmarks.bench_plot_incremental_pca.$toplevel"
  ],
  "benchmarks.bench_plot_lasso_path.compute_bench": [
    "benchmarks.bench_plot_lasso_path.$toplevel"
  ],
  "benchmarks.bench_plot_neighbors.barplot_neighbors": [
    "benchmarks.bench_plot_neighbors.$toplevel"
  ],
  "benchmarks.bench_plot_neighbors.get_data": [
    "benchmarks.bench_plot_neighbors.barplot_neighbors"
  ],
  "benchmarks.bench_plot_nmf._fit_projected_gradient": [
    "benchmarks.bench_plot_nmf._PGNMF._fit_transform"
  ],
  "benchmarks.bench_plot_nmf._nls_subproblem": [
    "benchmarks.bench_plot_nmf._PGNMF._fit_transform",
    "benchmarks.bench_plot_nmf._fit_projected_gradient"
  ],
  "benchmarks.bench_plot_nmf._norm": [
    "benchmarks.bench_plot_nmf._nls_subproblem"
  ],
  "benchmarks.bench_plot_nmf.bench_one": [
    "benchmarks.bench_plot_nmf.run_bench"
  ],
  "benchmarks.bench_plot_nmf.build_clfs": [
    "benchmarks.bench_plot_nmf.$toplevel"
  ],
  "benchmarks.bench_plot_nmf.load_20news": [
    "benchmarks.bench_plot_nmf.$toplevel"
  ],
  "benchmarks.bench_plot_nmf.load_faces": [
    "benchmarks.bench_plot_nmf.$toplevel"
  ],
  "benchmarks.bench_plot_nmf.plot_results": [
    "benchmarks.bench_plot_nmf.run_bench"
  ],
  "benchmarks.bench_plot_nmf.run_bench": [
    "benchmarks.bench_plot_nmf.$toplevel"
  ],
  "benchmarks.bench_plot_omp_lars.compute_bench": [
    "benchmarks.bench_plot_omp_lars.$toplevel"
  ],
  "benchmarks.bench_plot_parallel_pairwise.euclidean_distances": [
    "benchmarks.bench_plot_parallel_pairwise.$toplevel"
  ],
  "benchmarks.bench_plot_parallel_pairwise.plot": [
    "benchmarks.bench_plot_parallel_pairwise.$toplevel"
  ],
  "benchmarks.bench_plot_parallel_pairwise.rbf_kernels": [
    "benchmarks.bench_plot_parallel_pairwise.$toplevel"
  ],
  "benchmarks.bench_plot_randomized_svd.bench_a": [
    "benchmarks.bench_plot_randomized_svd.$toplevel"
  ],
  "benchmarks.bench_plot_randomized_svd.bench_b": [
    "benchmarks.bench_plot_randomized_svd.$toplevel"
  ],
  "benchmarks.bench_plot_randomized_svd.bench_c": [
    "benchmarks.bench_plot_randomized_svd.$toplevel"
  ],
  "benchmarks.bench_plot_randomized_svd.get_data": [
    "benchmarks.bench_plot_randomized_svd.$toplevel",
    "benchmarks.bench_plot_randomized_svd.bench_c"
  ],
  "benchmarks.bench_plot_randomized_svd.handle_missing_dataset": [
    "benchmarks.bench_plot_randomized_svd.get_data"
  ],
  "benchmarks.bench_plot_randomized_svd.norm_diff": [
    "benchmarks.bench_plot_randomized_svd.bench_a",
    "benchmarks.bench_plot_randomized_svd.bench_b",
    "benchmarks.bench_plot_randomized_svd.bench_c",
    "benchmarks.bench_plot_randomized_svd.scalable_frobenius_norm_discrepancy"
  ],
  "benchmarks.bench_plot_randomized_svd.plot_power_iter_vs_s": [
    "benchmarks.bench_plot_randomized_svd.bench_b"
  ],
  "benchmarks.bench_plot_randomized_svd.plot_time_vs_s": [
    "benchmarks.bench_plot_randomized_svd.bench_a"
  ],
  "benchmarks.bench_plot_randomized_svd.scalable_frobenius_norm_discrepancy": [
    "benchmarks.bench_plot_randomized_svd.bench_a",
    "benchmarks.bench_plot_randomized_svd.bench_b",
    "benchmarks.bench_plot_randomized_svd.bench_c"
  ],
  "benchmarks.bench_plot_randomized_svd.scatter_time_vs_s": [
    "benchmarks.bench_plot_randomized_svd.bench_c"
  ],
  "benchmarks.bench_plot_randomized_svd.svd_timing": [
    "benchmarks.bench_plot_randomized_svd.bench_a",
    "benchmarks.bench_plot_randomized_svd.bench_b",
    "benchmarks.bench_plot_randomized_svd.bench_c"
  ],
  "benchmarks.bench_plot_randomized_svd.unpickle": [
    "benchmarks.bench_plot_randomized_svd.get_data"
  ],
  "benchmarks.bench_plot_svd.compute_bench": [
    "benchmarks.bench_plot_svd.$toplevel"
  ],
  "benchmarks.bench_random_projections.bench_scikit_transformer": [
    "benchmarks.bench_random_projections.$toplevel"
  ],
  "benchmarks.bench_random_projections.compute_time": [
    "benchmarks.bench_random_projections.bench_scikit_transformer"
  ],
  "benchmarks.bench_random_projections.make_sparse_random_data": [
    "benchmarks.bench_random_projections.$toplevel"
  ],
  "benchmarks.bench_random_projections.print_row": [
    "benchmarks.bench_random_projections.$toplevel"
  ],
  "benchmarks.bench_random_projections.type_auto_or_float": [
    "benchmarks.bench_random_projections.$toplevel"
  ],
  "benchmarks.bench_random_projections.type_auto_or_int": [
    "benchmarks.bench_random_projections.$toplevel"
  ],
  "benchmarks.bench_rcv1_logreg_convergence.bench": [
    "benchmarks.bench_rcv1_logreg_convergence.$toplevel"
  ],
  "benchmarks.bench_rcv1_logreg_convergence.bench_one": [
    "benchmarks.bench_rcv1_logreg_convergence.bench"
  ],
  "benchmarks.bench_rcv1_logreg_convergence.get_loss": [
    "benchmarks.bench_rcv1_logreg_convergence.bench_one"
  ],
  "benchmarks.bench_rcv1_logreg_convergence.get_max_squared_sum": [
    "benchmarks.bench_rcv1_logreg_convergence.$toplevel"
  ],
  "benchmarks.bench_rcv1_logreg_convergence.plot_dloss": [
    "benchmarks.bench_rcv1_logreg_convergence.$toplevel"
  ],
  "benchmarks.bench_rcv1_logreg_convergence.plot_test_scores": [
    "benchmarks.bench_rcv1_logreg_convergence.$toplevel"
  ],
  "benchmarks.bench_rcv1_logreg_convergence.plot_train_losses": [
    "benchmarks.bench_rcv1_logreg_convergence.$toplevel"
  ],
  "benchmarks.bench_rcv1_logreg_convergence.plot_train_scores": [
    "benchmarks.bench_rcv1_logreg_convergence.$toplevel"
  ],
  "benchmarks.bench_saga._predict_proba": [
    "benchmarks.bench_saga.fit_single"
  ],
  "benchmarks.bench_saga.exp": [
    "benchmarks.bench_saga.$toplevel"
  ],
  "benchmarks.bench_saga.fit_single": [
    "benchmarks.bench_saga.exp"
  ],
  "benchmarks.bench_saga.plot": [
    "benchmarks.bench_saga.$toplevel"
  ],
  "benchmarks.bench_sample_without_replacement.bench_sample": [
    "benchmarks.bench_sample_without_replacement.$toplevel"
  ],
  "benchmarks.bench_sample_without_replacement.compute_time": [
    "benchmarks.bench_sample_without_replacement.bench_sample"
  ],
  "benchmarks.bench_sparsify.benchmark_dense_predict": [
    "benchmarks.bench_sparsify.$toplevel"
  ],
  "benchmarks.bench_sparsify.benchmark_sparse_predict": [
    "benchmarks.bench_sparsify.$toplevel"
  ],
  "benchmarks.bench_sparsify.score": [
    "benchmarks.bench_sparsify.$toplevel"
  ],
  "benchmarks.bench_sparsify.sparsity_ratio": [
    "benchmarks.bench_sparsify.$toplevel"
  ],
  "benchmarks.bench_text_vectorizers.run_vectorizer": [
    "benchmarks.bench_text_vectorizers.$toplevel"
  ],
  "benchmarks.bench_tree.bench_scikit_tree_classifier": [
    "benchmarks.bench_tree.$toplevel"
  ],
  "benchmarks.bench_tree.bench_scikit_tree_regressor": [
    "benchmarks.bench_tree.$toplevel"
  ],
  "benchmarks.bench_tsne_mnist.load_data": [
    "benchmarks.bench_tsne_mnist.$toplevel"
  ],
  "benchmarks.bench_tsne_mnist.nn_accuracy": [
    "benchmarks.bench_tsne_mnist.$toplevel"
  ],
  "benchmarks.bench_tsne_mnist.sanitize": [
    "benchmarks.bench_tsne_mnist.$toplevel"
  ],
  "benchmarks.bench_tsne_mnist.tsne_fit_transform": [
    "benchmarks.bench_tsne_mnist.$toplevel"
  ],
  "build_tools.azure.get_commit_message.get_commit_message": [
    "build_tools.azure.get_commit_message.$toplevel"
  ],
  "build_tools.azure.get_commit_message.parsed_args": [
    "build_tools.azure.get_commit_message.$toplevel"
  ],
  "build_tools.azure.get_selected_tests.get_selected_tests": [
    "build_tools.azure.get_selected_tests.$toplevel"
  ],
  "build_tools.circle.list_versions.get_file_extension": [
    "build_tools.circle.list_versions.$toplevel",
    "build_tools.circle.list_versions.get_file_size"
  ],
  "build_tools.circle.list_versions.get_file_size": [
    "build_tools.circle.list_versions.$toplevel"
  ],
  "build_tools.circle.list_versions.human_readable_data_quantity": [
    "build_tools.circle.list_versions.get_file_size"
  ],
  "build_tools.circle.list_versions.json_urlread": [
    "build_tools.circle.list_versions.$toplevel",
    "build_tools.circle.list_versions.get_file_size"
  ],
  "build_tools.generate_authors_table.generate_list": [
    "build_tools.generate_authors_table.$toplevel"
  ],
  "build_tools.generate_authors_table.generate_table": [
    "build_tools.generate_authors_table.$toplevel"
  ],
  "build_tools.generate_authors_table.get": [
    "build_tools.generate_authors_table.get_contributors",
    "build_tools.generate_authors_table.get_profile"
  ],
  "build_tools.generate_authors_table.get_contributors": [
    "build_tools.generate_authors_table.$toplevel"
  ],
  "build_tools.generate_authors_table.get_profile": [
    "build_tools.generate_authors_table.get_contributors"
  ],
  "build_tools.generate_authors_table.key": [
    "build_tools.generate_authors_table.get_contributors"
  ],
  "build_tools.get_comment.create_or_update_comment": [
    "build_tools.get_comment.$toplevel"
  ],
  "build_tools.get_comment.find_lint_bot_comments": [
    "build_tools.get_comment.$toplevel"
  ],
  "build_tools.get_comment.get_headers": [
    "build_tools.get_comment.create_or_update_comment",
    "build_tools.get_comment.find_lint_bot_comments"
  ],
  "build_tools.get_comment.get_message": [
    "build_tools.get_comment.$toplevel"
  ],
  "build_tools.get_comment.get_step_message": [
    "build_tools.get_comment.get_message"
  ],
  "build_tools.get_comment.get_versions": [
    "build_tools.get_comment.$toplevel"
  ],
  "build_tools.github.vendor.main": [
    "build_tools.github.vendor.$toplevel"
  ],
  "build_tools.github.vendor.make_distributor_init_64_bits": [
    "build_tools.github.vendor.main"
  ],
  "build_tools.update_environments_and_lock_files.check_conda_lock_version": [
    "build_tools.update_environments_and_lock_files.main"
  ],
  "build_tools.update_environments_and_lock_files.check_conda_version": [
    "build_tools.update_environments_and_lock_files.main"
  ],
  "build_tools.update_environments_and_lock_files.conda_lock": [
    "build_tools.update_environments_and_lock_files.create_conda_lock_file"
  ],
  "build_tools.update_environments_and_lock_files.create_conda_lock_file": [
    "build_tools.update_environments_and_lock_files.write_all_conda_lock_files"
  ],
  "build_tools.update_environments_and_lock_files.execute_command": [
    "build_tools.update_environments_and_lock_files.check_conda_lock_version",
    "build_tools.update_environments_and_lock_files.check_conda_version",
    "build_tools.update_environments_and_lock_files.conda_lock",
    "build_tools.update_environments_and_lock_files.get_package_with_constraint",
    "build_tools.update_environments_and_lock_files.pip_compile",
    "build_tools.update_environments_and_lock_files.write_pip_lock_file"
  ],
  "build_tools.update_environments_and_lock_files.get_conda_environment_content": [
    "build_tools.update_environments_and_lock_files.write_conda_environment"
  ],
  "build_tools.update_environments_and_lock_files.get_package_with_constraint": [
    "build_tools.update_environments_and_lock_files.$toplevel"
  ],
  "build_tools.update_environments_and_lock_files.get_pip_requirements_content": [
    "build_tools.update_environments_and_lock_files.write_pip_requirements"
  ],
  "build_tools.update_environments_and_lock_files.pip_compile": [
    "build_tools.update_environments_and_lock_files.write_pip_lock_file"
  ],
  "build_tools.update_environments_and_lock_files.remove_from": [
    "build_tools.update_environments_and_lock_files.$toplevel"
  ],
  "build_tools.update_environments_and_lock_files.write_all_conda_environments": [
    "build_tools.update_environments_and_lock_files.main"
  ],
  "build_tools.update_environments_and_lock_files.write_all_conda_lock_files": [
    "build_tools.update_environments_and_lock_files.main"
  ],
  "build_tools.update_environments_and_lock_files.write_all_pip_lock_files": [
    "build_tools.update_environments_and_lock_files.main"
  ],
  "build_tools.update_environments_and_lock_files.write_all_pip_requirements": [
    "build_tools.update_environments_and_lock_files.main"
  ],
  "build_tools.update_environments_and_lock_files.write_conda_environment": [
    "build_tools.update_environments_and_lock_files.write_all_conda_environments"
  ],
  "build_tools.update_environments_and_lock_files.write_pip_lock_file": [
    "build_tools.update_environments_and_lock_files.write_all_pip_lock_files"
  ],
  "build_tools.update_environments_and_lock_files.write_pip_requirements": [
    "build_tools.update_environments_and_lock_files.write_all_pip_requirements"
  ],
  "calendar.timegm": [
    "pip._vendor.requests.cookies.morsel_to_cookie"
  ],
  "callable": [
    "click.core.Context.lookup_default",
    "click.core.Parameter.__init__",
    "click.core.Parameter.get_default",
    "graphql.pyutils.default_ordered_dict.DefaultOrderedDict.__init__",
    "jinja2.nodes.EvalContext.__init__",
    "pip._vendor.pyparsing.ParserElement.setParseAction",
    "sklearn.cluster._agglomerative.AgglomerativeClustering._fit",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._kmeans._BaseKMeans._check_params_vs_input",
    "sklearn.cluster._kmeans._BaseKMeans._init_centroids",
    "sklearn.cluster._spectral.SpectralClustering.fit",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_column_callables",
    "sklearn.decomposition._fastica.FastICA._fit_transform",
    "sklearn.decomposition._kernel_pca.KernelPCA._get_kernel",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.feature_extraction.text._VectorizerMixin._warn_for_unused_params",
    "sklearn.feature_extraction.text._VectorizerMixin.build_analyzer",
    "sklearn.feature_extraction.text._VectorizerMixin.build_preprocessor",
    "sklearn.feature_selection._base._get_feature_importances",
    "sklearn.feature_selection._from_model.SelectFromModel._check_max_features",
    "sklearn.feature_selection._from_model.SelectFromModel._get_support_mask",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace._constrained_optimization",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor._constrained_optimization",
    "sklearn.inspection._permutation_importance.permutation_importance",
    "sklearn.kernel_approximation.Nystroem._get_kernel_params",
    "sklearn.kernel_ridge.KernelRidge._get_kernel",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.metrics._scorer.check_scoring",
    "sklearn.metrics.pairwise.paired_distances",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.metrics.pairwise.pairwise_kernels",
    "sklearn.model_selection._search.BaseSearchCV._check_refit_for_multimetric",
    "sklearn.model_selection._search.BaseSearchCV._select_best_index",
    "sklearn.model_selection._search.BaseSearchCV.fit",
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._validation.cross_validate",
    "sklearn.neighbors._base.NeighborsBase._check_algorithm_metric",
    "sklearn.neighbors._base.NeighborsBase._fit",
    "sklearn.neighbors._base._get_weights",
    "sklearn.preprocessing._function_transformer.FunctionTransformer.get_feature_names_out",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation._get_kernel",
    "sklearn.svm._base.BaseLibSVM._compute_kernel",
    "sklearn.svm._base.BaseLibSVM._dense_decision_function",
    "sklearn.svm._base.BaseLibSVM._dense_fit",
    "sklearn.svm._base.BaseLibSVM._dense_predict",
    "sklearn.svm._base.BaseLibSVM._sparse_predict",
    "sklearn.svm._base.BaseLibSVM._validate_for_predict",
    "sklearn.svm._base.BaseLibSVM.fit",
    "sklearn.svm._base.BaseSVC._dense_predict_proba",
    "sklearn.svm._base.BaseSVC._sparse_predict_proba",
    "sklearn.utils._param_validation.HasMethods.is_satisfied_by",
    "sklearn.utils._param_validation._Callables.is_satisfied_by",
    "sklearn.utils._plotting._validate_score_name",
    "sklearn.utils._set_output._wrap_in_pandas_container",
    "sklearn.utils._testing.ignore_warnings",
    "sklearn.utils.estimator_checks._get_check_estimator_ids",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.validation._num_samples"
  ],
  "chr": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.srange",
    "sklearn.externals._arff.$toplevel",
    "sklearn.externals._arff._escape_sub_callback"
  ],
  "click._compat._find_binary_reader": [
    "click._compat._force_correct_text_reader",
    "click._compat.get_binary_stdin"
  ],
  "click._compat._find_binary_writer": [
    "click._compat._force_correct_text_writer",
    "click._compat.get_binary_stdout",
    "click.utils.echo"
  ],
  "click._compat._force_correct_text_reader": [
    "click._compat.get_text_stdin"
  ],
  "click._compat._force_correct_text_stream": [
    "click._compat._force_correct_text_reader",
    "click._compat._force_correct_text_writer"
  ],
  "click._compat._force_correct_text_writer": [
    "click._compat.get_text_stderr",
    "click._compat.get_text_stdout"
  ],
  "click._compat._get_argv_encoding": [
    "click.types.StringParamType.convert"
  ],
  "click._compat._is_binary_reader": [
    "click._compat._find_binary_reader",
    "click._compat._force_correct_text_reader"
  ],
  "click._compat._is_binary_writer": [
    "click._compat._find_binary_writer",
    "click._compat._force_correct_text_writer"
  ],
  "click._compat._is_compat_stream_attr": [
    "click._compat._is_compatible_text_stream"
  ],
  "click._compat._is_compatible_text_stream": [
    "click._compat._force_correct_text_stream"
  ],
  "click._compat._is_jupyter_kernel_output": [
    "click._compat.should_strip_ansi"
  ],
  "click._compat._make_text_stream": [
    "click._compat._force_correct_text_stream"
  ],
  "click._compat._stream_is_misconfigured": [
    "click._compat._force_correct_text_stream"
  ],
  "click._compat._wrap_io_open": [
    "click._compat.open_stream"
  ],
  "click._compat.auto_wrap_for_ansi": [
    "click.utils.echo"
  ],
  "click._compat.get_best_encoding": [
    "click._compat._make_text_stream"
  ],
  "click._compat.get_binary_stdin": [
    "click._compat.open_stream"
  ],
  "click._compat.get_binary_stdout": [
    "click._compat.open_stream"
  ],
  "click._compat.get_filesystem_encoding": [
    "click._compat._get_argv_encoding",
    "click.types.StringParamType.convert",
    "click.utils.make_str"
  ],
  "click._compat.get_text_stderr": [
    "click.exceptions.ClickException.show",
    "click.exceptions.UsageError.show"
  ],
  "click._compat.get_text_stdin": [
    "click._compat.open_stream"
  ],
  "click._compat.get_text_stdout": [
    "click._compat.open_stream"
  ],
  "click._compat.is_ascii_encoding": [
    "click._compat._stream_is_misconfigured",
    "click._compat.get_best_encoding"
  ],
  "click._compat.isatty": [
    "click._compat.should_strip_ansi"
  ],
  "click._compat.open_stream": [
    "click.types.File.convert",
    "click.utils.LazyFile.__init__"
  ],
  "click._compat.should_strip_ansi": [
    "click._compat.auto_wrap_for_ansi",
    "click.utils.echo"
  ],
  "click._compat.strip_ansi": [
    "click._compat.term_len",
    "click.utils.echo"
  ],
  "click._compat.term_len": [
    "click.formatting.HelpFormatter.write_dl",
    "click.formatting.HelpFormatter.write_usage",
    "click.formatting.measure_table",
    "click.formatting.wrap_text"
  ],
  "click._winconsole._get_windows_console_stream": [
    "click._compat.get_text_stderr",
    "click._compat.get_text_stdin",
    "click._compat.get_text_stdout"
  ],
  "click._winconsole._is_console": [
    "click._winconsole._get_windows_console_stream"
  ],
  "click.core._check_iter": [
    "click.core.Parameter.__init__",
    "click.core.Parameter.type_cast_value.check_iter"
  ],
  "click.core._check_multicommand": [
    "click.core.CommandCollection.get_command",
    "click.core.Group.add_command"
  ],
  "click.core._complete_visible_commands": [
    "click.core.BaseCommand.shell_complete",
    "click.core.MultiCommand.shell_complete"
  ],
  "click.core.augment_usage_errors": [
    "click.core.Context.invoke",
    "click.core.Parameter.handle_parse_result"
  ],
  "click.core.batch": [
    "click.core.Option.value_from_envvar"
  ],
  "click.core.iter_params_for_processing": [
    "click.core.Command.parse_args"
  ],
  "click.exceptions._join_param_hints": [
    "click.exceptions.BadParameter.format_message",
    "click.exceptions.MissingParameter.format_message"
  ],
  "click.formatting.iter_rows": [
    "click.formatting.HelpFormatter.write_dl"
  ],
  "click.formatting.join_options": [
    "click.core.Option.get_help_record._write_opts"
  ],
  "click.formatting.measure_table": [
    "click.formatting.HelpFormatter.write_dl"
  ],
  "click.formatting.wrap_text": [
    "click.formatting.HelpFormatter.write_dl",
    "click.formatting.HelpFormatter.write_text",
    "click.formatting.HelpFormatter.write_usage"
  ],
  "click.globals.get_current_context": [
    "click.globals.resolve_color_default"
  ],
  "click.globals.push_context": [
    "click.core.Context.__enter__"
  ],
  "click.globals.resolve_color_default": [
    "click.utils.echo"
  ],
  "click.parser._unpack_args": [
    "click.parser.OptionParser._process_args_for_args"
  ],
  "click.parser.normalize_opt": [
    "click.parser.OptionParser._match_short_opt",
    "click.parser.OptionParser._process_opts",
    "click.parser.OptionParser.add_option"
  ],
  "click.parser.split_arg_string": [
    "click.shell_completion.BashComplete.get_completion_args",
    "click.shell_completion.FishComplete.get_completion_args",
    "click.shell_completion.ZshComplete.get_completion_args"
  ],
  "click.parser.split_opt": [
    "click.core.MultiCommand.resolve_command",
    "click.core.Option._parse_decls",
    "click.core.Option.get_help_record",
    "click.formatting.join_options",
    "click.parser.Option.__init__",
    "click.parser.normalize_opt"
  ],
  "click.shell_completion._is_incomplete_argument": [
    "click.shell_completion._resolve_incomplete"
  ],
  "click.shell_completion._is_incomplete_option": [
    "click.shell_completion._resolve_incomplete"
  ],
  "click.shell_completion._resolve_context": [
    "click.shell_completion.ShellComplete.get_completions"
  ],
  "click.shell_completion._resolve_incomplete": [
    "click.shell_completion.ShellComplete.get_completions"
  ],
  "click.shell_completion._start_of_option": [
    "click.shell_completion._is_incomplete_option",
    "click.shell_completion._resolve_incomplete"
  ],
  "click.shell_completion.get_completion_class": [
    "click.shell_completion.shell_complete"
  ],
  "click.shell_completion.shell_complete": [
    "click.core.BaseCommand._main_shell_completion"
  ],
  "click.termui._build_prompt": [
    "click.termui.confirm",
    "click.termui.prompt"
  ],
  "click.termui._format_default": [
    "click.termui._build_prompt"
  ],
  "click.termui._interpret_color": [
    "click.termui.style"
  ],
  "click.termui.confirm": [
    "click.core.Option.prompt_for_value"
  ],
  "click.termui.prompt": [
    "click.core.Option.prompt_for_value"
  ],
  "click.termui.secho": [
    "flask.cli.FlaskGroup.get_command",
    "flask.cli.FlaskGroup.list_commands",
    "flask.cli.load_dotenv"
  ],
  "click.termui.style": [
    "click.core.Command.invoke",
    "click.termui.secho"
  ],
  "click.types.convert_type": [
    "click.core.Option.__init__",
    "click.core.Parameter.__init__",
    "click.termui.prompt",
    "click.types.Tuple.__init__"
  ],
  "click.utils._detect_program_name": [
    "click.core.BaseCommand.main"
  ],
  "click.utils._expand_args": [
    "click.core.BaseCommand.main"
  ],
  "click.utils.echo": [
    "click.core.BaseCommand.main",
    "click.core.Command.get_help_option.show_help",
    "click.core.Command.invoke",
    "click.core.Command.parse_args",
    "click.core.MultiCommand.parse_args",
    "click.exceptions.ClickException.show",
    "click.exceptions.UsageError.show",
    "click.shell_completion.shell_complete",
    "click.termui.confirm",
    "click.termui.prompt",
    "click.termui.prompt.prompt_func",
    "click.termui.secho"
  ],
  "click.utils.make_default_short_help": [
    "click.core.Command.get_short_help_str"
  ],
  "click.utils.make_str": [
    "click.core.MultiCommand.resolve_command"
  ],
  "click.utils.safecall": [
    "click.types.File.convert"
  ],
  "codecs.open": [
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel"
  ],
  "compile": [
    "jinja2.debug.fake_traceback",
    "jinja2.environment.Environment._compile"
  ],
  "copy.copy": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.copy",
    "pip._vendor.pyparsing.ParserElement.copy"
  ],
  "copy.deepcopy": [
    "sklearn.base._clone_parametrized",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.feature_selection._from_model.SelectFromModel.fit",
    "sklearn.feature_selection._from_model.SelectFromModel.partial_fit",
    "sklearn.metrics._scorer._BaseScorer.__call__",
    "sklearn.metrics._scorer.get_scorer",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._more_tags",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.utils._metadata_requests.MetadataRouter.add",
    "sklearn.utils._metadata_requests.MetadataRouter.add_self_request",
    "sklearn.utils._metadata_requests.get_routing_for_object",
    "sklearn.utils.estimator_checks.check_estimators_overwrite_params",
    "sklearn.utils.estimator_checks.check_set_params"
  ],
  "ctypes.byref": [
    "click._winconsole._is_console"
  ],
  "delattr": [
    "jinja2.visitor.NodeTransformer.generic_visit",
    "sklearn.base.BaseEstimator._check_feature_names",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._clear_state",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit"
  ],
  "difflib.get_close_matches": [
    "click.parser.OptionParser._match_long_opt"
  ],
  "difflib.ndiff": [
    "sklearn.utils._testing.check_docstring_parameters"
  ],
  "dir": [
    "doc.tutorial.machine_learning_map.pyparsing.ParseBaseException.__dir__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__dir__",
    "sklearn.gaussian_process.kernels.Kernel.hyperparameters",
    "sklearn.utils.tests.test_estimator_checks.run_tests_without_pytest"
  ],
  "divmod": [
    "sklearn.model_selection._search.ParameterGrid.__getitem__",
    "sklearn.utils.sparsefuncs._get_median"
  ],
  "doc.conf.disable_plot_gallery_for_linkcheck": [
    "doc.conf.setup"
  ],
  "doc.conf.filter_search_index": [
    "doc.conf.setup"
  ],
  "doc.conf.generate_min_dependency_substitutions": [
    "doc.conf.setup"
  ],
  "doc.conf.generate_min_dependency_table": [
    "doc.conf.setup"
  ],
  "doc.conf.make_carousel_thumbs": [
    "doc.conf.setup"
  ],
  "doc.conftest.setup_compose": [
    "doc.conftest.pytest_runtest_setup"
  ],
  "doc.conftest.setup_grid_search": [
    "doc.conftest.pytest_runtest_setup"
  ],
  "doc.conftest.setup_impute": [
    "doc.conftest.pytest_runtest_setup"
  ],
  "doc.conftest.setup_labeled_faces": [
    "doc.conftest.pytest_runtest_setup"
  ],
  "doc.conftest.setup_loading_other_datasets": [
    "doc.conftest.pytest_runtest_setup"
  ],
  "doc.conftest.setup_preprocessing": [
    "doc.conftest.pytest_runtest_setup"
  ],
  "doc.conftest.setup_rcv1": [
    "doc.conftest.pytest_runtest_setup"
  ],
  "doc.conftest.setup_twenty_newsgroups": [
    "doc.conftest.pytest_runtest_setup"
  ],
  "doc.conftest.setup_unsupervised_learning": [
    "doc.conftest.pytest_runtest_setup"
  ],
  "doc.conftest.setup_working_with_text_data": [
    "doc.conftest.pytest_runtest_setup"
  ],
  "doc.conftest.skip_if_cupy_not_installed": [
    "doc.conftest.pytest_runtest_setup"
  ],
  "doc.conftest.skip_if_matplotlib_not_installed": [
    "doc.conftest.pytest_runtest_setup"
  ],
  "doc.sphinxext.add_toctree_functions.add_toctree_functions": [
    "doc.sphinxext.add_toctree_functions.setup"
  ],
  "doc.sphinxext.add_toctree_functions.docutils_node_to_jinja": [
    "doc.sphinxext.add_toctree_functions.add_toctree_functions.get_nav_object",
    "doc.sphinxext.add_toctree_functions.docutils_node_to_jinja"
  ],
  "doc.sphinxext.doi_role.reference_role": [
    "doc.sphinxext.doi_role.setup_link_role"
  ],
  "doc.sphinxext.doi_role.setup_link_role": [
    "doc.sphinxext.doi_role.setup"
  ],
  "doc.sphinxext.github_link._get_git_revision": [
    "doc.sphinxext.github_link.make_linkcode_resolve"
  ],
  "doc.sphinxext.github_link._linkcode_resolve": [
    "doc.sphinxext.github_link.make_linkcode_resolve"
  ],
  "doc.sphinxext.sphinx_issues.cve_role": [
    "doc.sphinxext.sphinx_issues.setup"
  ],
  "doc.sphinxext.sphinx_issues.format_commit_text": [
    "doc.sphinxext.sphinx_issues.$toplevel"
  ],
  "doc.sphinxext.sphinx_issues.user_role": [
    "doc.sphinxext.sphinx_issues.setup"
  ],
  "doc.tutorial.machine_learning_map.parse_path.Arguments": [
    "doc.tutorial.machine_learning_map.parse_path.$toplevel"
  ],
  "doc.tutorial.machine_learning_map.parse_path.Command": [
    "doc.tutorial.machine_learning_map.parse_path.$toplevel"
  ],
  "doc.tutorial.machine_learning_map.parse_path.Sequence": [
    "doc.tutorial.machine_learning_map.parse_path.$toplevel"
  ],
  "doc.tutorial.machine_learning_map.parse_path.convertToFloat": [
    "doc.tutorial.machine_learning_map.parse_path.$toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing._defaultExceptionDebugAction": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setDebug"
  ],
  "doc.tutorial.machine_learning_map.pyparsing._defaultStartDebugAction": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setDebug"
  ],
  "doc.tutorial.machine_learning_map.pyparsing._defaultSuccessDebugAction": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setDebug"
  ],
  "doc.tutorial.machine_learning_map.pyparsing._escapeRegexRangeChars": [
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf"
  ],
  "doc.tutorial.machine_learning_map.pyparsing._flatten": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.transformString",
    "doc.tutorial.machine_learning_map.pyparsing._flatten",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousExpr.copyTokenToRepeater",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousExpr.copyTokenToRepeater.mustMatchTheseTokens",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousLiteral.copyTokenToRepeater"
  ],
  "doc.tutorial.machine_learning_map.pyparsing._makeTags": [
    "doc.tutorial.machine_learning_map.pyparsing.makeHTMLTags",
    "doc.tutorial.machine_learning_map.pyparsing.makeXMLTags"
  ],
  "doc.tutorial.machine_learning_map.pyparsing._trim_arity": [
    "doc.tutorial.machine_learning_map.pyparsing.OnlyOnce.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.addCondition.pa",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.addParseAction",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setParseAction",
    "doc.tutorial.machine_learning_map.pyparsing.traceParseAction"
  ],
  "doc.tutorial.machine_learning_map.pyparsing._ustr": [
    "doc.tutorial.machine_learning_map.pyparsing.And.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Dict.postParse",
    "doc.tutorial.machine_learning_map.pyparsing.Each.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Literal.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.NotAny.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.NotAny.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.OneOrMore.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Optional.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Or.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseBaseException.__repr__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.streamline",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults._asStringList",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asXML",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.dump",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__repr__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.matches",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.scanString",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.transformString",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.SkipTo.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ZeroOrMore.__str__",
    "doc.tutorial.machine_learning_map.pyparsing._defaultExceptionDebugAction",
    "doc.tutorial.machine_learning_map.pyparsing._defaultStartDebugAction",
    "doc.tutorial.machine_learning_map.pyparsing._defaultSuccessDebugAction",
    "doc.tutorial.machine_learning_map.pyparsing._escapeRegexRangeChars",
    "doc.tutorial.machine_learning_map.pyparsing.countedArray",
    "doc.tutorial.machine_learning_map.pyparsing.delimitedList",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousExpr",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousLiteral",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing._xml_escape": [
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asXML"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.col": [
    "doc.tutorial.machine_learning_map.pyparsing.GoToColumn.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.GoToColumn.preParse",
    "doc.tutorial.machine_learning_map.pyparsing.LineStart.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseBaseException.__getattr__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.runTests",
    "doc.tutorial.machine_learning_map.pyparsing._defaultStartDebugAction",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock.checkPeerIndent",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock.checkSubIndent",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock.checkUnindent",
    "doc.tutorial.machine_learning_map.pyparsing.matchOnlyAtCol.verifyCol"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.delimitedList": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.line": [
    "doc.tutorial.machine_learning_map.pyparsing.ParseBaseException.__getattr__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.runTests",
    "doc.tutorial.machine_learning_map.pyparsing.traceParseAction.z"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.lineno": [
    "doc.tutorial.machine_learning_map.pyparsing.ParseBaseException.__getattr__",
    "doc.tutorial.machine_learning_map.pyparsing._defaultStartDebugAction"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.makeHTMLTags": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.removeQuotes": [
    "doc.tutorial.machine_learning_map.pyparsing._makeTags"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.srange": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.tokenMap": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.withAttribute": [
    "doc.tutorial.machine_learning_map.pyparsing.withClass"
  ],
  "eval": [
    "asv_benchmarks.benchmarks.common.get_from_config"
  ],
  "examples.applications.plot_cyclical_feature_engineering.cos_transformer": [
    "examples.applications.plot_cyclical_feature_engineering.$toplevel"
  ],
  "examples.applications.plot_cyclical_feature_engineering.evaluate": [
    "examples.applications.plot_cyclical_feature_engineering.$toplevel"
  ],
  "examples.applications.plot_cyclical_feature_engineering.periodic_spline_transformer": [
    "examples.applications.plot_cyclical_feature_engineering.$toplevel"
  ],
  "examples.applications.plot_cyclical_feature_engineering.sin_transformer": [
    "examples.applications.plot_cyclical_feature_engineering.$toplevel"
  ],
  "examples.applications.plot_digits_denoising.plot_digits": [
    "examples.applications.plot_digits_denoising.$toplevel"
  ],
  "examples.applications.plot_face_recognition.plot_gallery": [
    "examples.applications.plot_face_recognition.$toplevel"
  ],
  "examples.applications.plot_face_recognition.title": [
    "examples.applications.plot_face_recognition.$toplevel"
  ],
  "examples.applications.plot_model_complexity_influence.benchmark_influence": [
    "examples.applications.plot_model_complexity_influence.$toplevel"
  ],
  "examples.applications.plot_model_complexity_influence.generate_data": [
    "examples.applications.plot_model_complexity_influence.$toplevel"
  ],
  "examples.applications.plot_model_complexity_influence.plot_influence": [
    "examples.applications.plot_model_complexity_influence.$toplevel"
  ],
  "examples.applications.plot_out_of_core_classification._not_in_sphinx": [
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents.progress"
  ],
  "examples.applications.plot_out_of_core_classification.autolabel": [
    "examples.applications.plot_out_of_core_classification.$toplevel"
  ],
  "examples.applications.plot_out_of_core_classification.get_minibatch": [
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_out_of_core_classification.iter_minibatches"
  ],
  "examples.applications.plot_out_of_core_classification.iter_minibatches": [
    "examples.applications.plot_out_of_core_classification.$toplevel"
  ],
  "examples.applications.plot_out_of_core_classification.plot_accuracy": [
    "examples.applications.plot_out_of_core_classification.$toplevel"
  ],
  "examples.applications.plot_out_of_core_classification.progress": [
    "examples.applications.plot_out_of_core_classification.$toplevel"
  ],
  "examples.applications.plot_out_of_core_classification.stream_reuters_documents": [
    "examples.applications.plot_out_of_core_classification.$toplevel"
  ],
  "examples.applications.plot_prediction_latency.atomic_benchmark_estimator": [
    "examples.applications.plot_prediction_latency.benchmark_estimator"
  ],
  "examples.applications.plot_prediction_latency.benchmark": [
    "examples.applications.plot_prediction_latency.$toplevel"
  ],
  "examples.applications.plot_prediction_latency.benchmark_estimator": [
    "examples.applications.plot_prediction_latency.benchmark"
  ],
  "examples.applications.plot_prediction_latency.benchmark_throughputs": [
    "examples.applications.plot_prediction_latency.$toplevel"
  ],
  "examples.applications.plot_prediction_latency.boxplot_runtimes": [
    "examples.applications.plot_prediction_latency.benchmark"
  ],
  "examples.applications.plot_prediction_latency.bulk_benchmark_estimator": [
    "examples.applications.plot_prediction_latency.benchmark_estimator",
    "examples.applications.plot_prediction_latency.n_feature_influence"
  ],
  "examples.applications.plot_prediction_latency.generate_dataset": [
    "examples.applications.plot_prediction_latency.benchmark",
    "examples.applications.plot_prediction_latency.benchmark_throughputs",
    "examples.applications.plot_prediction_latency.n_feature_influence"
  ],
  "examples.applications.plot_prediction_latency.n_feature_influence": [
    "examples.applications.plot_prediction_latency.$toplevel"
  ],
  "examples.applications.plot_prediction_latency.plot_benchmark_throughput": [
    "examples.applications.plot_prediction_latency.$toplevel"
  ],
  "examples.applications.plot_prediction_latency.plot_n_features_influence": [
    "examples.applications.plot_prediction_latency.$toplevel"
  ],
  "examples.applications.plot_species_distribution_modeling.construct_grids": [
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution"
  ],
  "examples.applications.plot_species_distribution_modeling.create_species_bunch": [
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution"
  ],
  "examples.applications.plot_species_distribution_modeling.plot_species_distribution": [
    "examples.applications.plot_species_distribution_modeling.$toplevel"
  ],
  "examples.applications.plot_tomography_l1_reconstruction._generate_center_coordinates": [
    "examples.applications.plot_tomography_l1_reconstruction.build_projection_operator"
  ],
  "examples.applications.plot_tomography_l1_reconstruction._weights": [
    "examples.applications.plot_tomography_l1_reconstruction.build_projection_operator"
  ],
  "examples.applications.plot_tomography_l1_reconstruction.build_projection_operator": [
    "examples.applications.plot_tomography_l1_reconstruction.$toplevel"
  ],
  "examples.applications.plot_tomography_l1_reconstruction.generate_synthetic_data": [
    "examples.applications.plot_tomography_l1_reconstruction.$toplevel"
  ],
  "examples.applications.plot_topics_extraction_with_nmf_lda.plot_top_words": [
    "examples.applications.plot_topics_extraction_with_nmf_lda.$toplevel"
  ],
  "examples.applications.svm_gui.get_parser": [
    "examples.applications.svm_gui.main"
  ],
  "examples.applications.svm_gui.main": [
    "examples.applications.svm_gui.$toplevel"
  ],
  "examples.applications.wikipedia_principal_eigenvector.centrality_scores": [
    "examples.applications.wikipedia_principal_eigenvector.$toplevel"
  ],
  "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix": [
    "examples.applications.wikipedia_principal_eigenvector.$toplevel"
  ],
  "examples.applications.wikipedia_principal_eigenvector.get_redirects": [
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix"
  ],
  "examples.applications.wikipedia_principal_eigenvector.index": [
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix"
  ],
  "examples.applications.wikipedia_principal_eigenvector.short_name": [
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects"
  ],
  "examples.bicluster.plot_bicluster_newsgroups.bicluster_ncut": [
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel"
  ],
  "examples.bicluster.plot_bicluster_newsgroups.most_common": [
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel"
  ],
  "examples.bicluster.plot_bicluster_newsgroups.number_normalizer": [
    "examples.bicluster.plot_bicluster_newsgroups.NumberNormalizingVectorizer.build_tokenizer"
  ],
  "examples.classification.plot_lda.generate_data": [
    "examples.classification.plot_lda.$toplevel"
  ],
  "examples.classification.plot_lda_qda.dataset_cov": [
    "examples.classification.plot_lda_qda.$toplevel"
  ],
  "examples.classification.plot_lda_qda.dataset_fixed_cov": [
    "examples.classification.plot_lda_qda.$toplevel"
  ],
  "examples.classification.plot_lda_qda.plot_data": [
    "examples.classification.plot_lda_qda.$toplevel"
  ],
  "examples.classification.plot_lda_qda.plot_ellipse": [
    "examples.classification.plot_lda_qda.plot_lda_cov",
    "examples.classification.plot_lda_qda.plot_qda_cov"
  ],
  "examples.classification.plot_lda_qda.plot_lda_cov": [
    "examples.classification.plot_lda_qda.$toplevel"
  ],
  "examples.classification.plot_lda_qda.plot_qda_cov": [
    "examples.classification.plot_lda_qda.$toplevel"
  ],
  "examples.cluster.plot_adjusted_for_chance_measures.fixed_classes_uniform_labelings_scores": [
    "examples.cluster.plot_adjusted_for_chance_measures.$toplevel"
  ],
  "examples.cluster.plot_adjusted_for_chance_measures.random_labels": [
    "examples.cluster.plot_adjusted_for_chance_measures.fixed_classes_uniform_labelings_scores",
    "examples.cluster.plot_adjusted_for_chance_measures.uniform_labelings_scores"
  ],
  "examples.cluster.plot_adjusted_for_chance_measures.uniform_labelings_scores": [
    "examples.cluster.plot_adjusted_for_chance_measures.$toplevel"
  ],
  "examples.cluster.plot_agglomerative_clustering_metrics.sqr": [
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel"
  ],
  "examples.cluster.plot_agglomerative_dendrogram.plot_dendrogram": [
    "examples.cluster.plot_agglomerative_dendrogram.$toplevel"
  ],
  "examples.cluster.plot_color_quantization.recreate_image": [
    "examples.cluster.plot_color_quantization.$toplevel"
  ],
  "examples.cluster.plot_digits_linkage.plot_clustering": [
    "examples.cluster.plot_digits_linkage.$toplevel"
  ],
  "examples.cluster.plot_hdbscan.plot": [
    "examples.cluster.plot_hdbscan.$toplevel"
  ],
  "examples.cluster.plot_inductive_clustering.plot_scatter": [
    "examples.cluster.plot_inductive_clustering.$toplevel"
  ],
  "examples.cluster.plot_kmeans_digits.bench_k_means": [
    "examples.cluster.plot_kmeans_digits.$toplevel"
  ],
  "examples.cluster.plot_kmeans_stability_low_dim_dense.make_data": [
    "examples.cluster.plot_kmeans_stability_low_dim_dense.$toplevel"
  ],
  "examples.compose.plot_column_transformer.subject_body_extractor": [
    "examples.compose.plot_column_transformer.$toplevel"
  ],
  "examples.compose.plot_column_transformer.text_stats": [
    "examples.compose.plot_column_transformer.$toplevel"
  ],
  "examples.compose.plot_transformed_target.compute_score": [
    "examples.compose.plot_transformed_target.$toplevel"
  ],
  "examples.datasets.plot_random_multilabel_dataset.plot_2d": [
    "examples.datasets.plot_random_multilabel_dataset.$toplevel"
  ],
  "examples.decomposition.plot_faces_decomposition.plot_gallery": [
    "examples.decomposition.plot_faces_decomposition.$toplevel"
  ],
  "examples.decomposition.plot_ica_vs_pca.plot_samples": [
    "examples.decomposition.plot_ica_vs_pca.$toplevel"
  ],
  "examples.decomposition.plot_image_denoising.show_with_diff": [
    "examples.decomposition.plot_image_denoising.$toplevel"
  ],
  "examples.decomposition.plot_pca_3d.pdf": [
    "examples.decomposition.plot_pca_3d.$toplevel"
  ],
  "examples.decomposition.plot_pca_3d.plot_figs": [
    "examples.decomposition.plot_pca_3d.$toplevel"
  ],
  "examples.decomposition.plot_pca_vs_fa_model_selection.compute_scores": [
    "examples.decomposition.plot_pca_vs_fa_model_selection.$toplevel"
  ],
  "examples.decomposition.plot_pca_vs_fa_model_selection.lw_score": [
    "examples.decomposition.plot_pca_vs_fa_model_selection.$toplevel"
  ],
  "examples.decomposition.plot_pca_vs_fa_model_selection.shrunk_cov_score": [
    "examples.decomposition.plot_pca_vs_fa_model_selection.$toplevel"
  ],
  "examples.decomposition.plot_sparse_coding.ricker_function": [
    "examples.decomposition.plot_sparse_coding.ricker_matrix"
  ],
  "examples.decomposition.plot_sparse_coding.ricker_matrix": [
    "examples.decomposition.plot_sparse_coding.$toplevel"
  ],
  "examples.ensemble.plot_bias_variance.f": [
    "examples.ensemble.plot_bias_variance.$toplevel",
    "examples.ensemble.plot_bias_variance.generate"
  ],
  "examples.ensemble.plot_bias_variance.generate": [
    "examples.ensemble.plot_bias_variance.$toplevel"
  ],
  "examples.ensemble.plot_feature_transformation.gbdt_apply": [
    "examples.ensemble.plot_feature_transformation.$toplevel"
  ],
  "examples.ensemble.plot_feature_transformation.rf_apply": [
    "examples.ensemble.plot_feature_transformation.$toplevel"
  ],
  "examples.ensemble.plot_gradient_boosting_categorical.plot_results": [
    "examples.ensemble.plot_gradient_boosting_categorical.$toplevel"
  ],
  "examples.ensemble.plot_gradient_boosting_early_stopping.autolabel": [
    "examples.ensemble.plot_gradient_boosting_early_stopping.$toplevel"
  ],
  "examples.ensemble.plot_gradient_boosting_oob.cv_estimate": [
    "examples.ensemble.plot_gradient_boosting_oob.$toplevel"
  ],
  "examples.ensemble.plot_gradient_boosting_oob.heldout_score": [
    "examples.ensemble.plot_gradient_boosting_oob.$toplevel",
    "examples.ensemble.plot_gradient_boosting_oob.cv_estimate"
  ],
  "examples.ensemble.plot_gradient_boosting_quantile.coverage_fraction": [
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel"
  ],
  "examples.ensemble.plot_gradient_boosting_quantile.f": [
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel"
  ],
  "examples.ensemble.plot_gradient_boosting_quantile.highlight_min": [
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel"
  ],
  "examples.ensemble.plot_stack_predictors.load_ames_housing": [
    "examples.ensemble.plot_stack_predictors.$toplevel"
  ],
  "examples.gaussian_process.plot_gpc_isoprobability.g": [
    "examples.gaussian_process.plot_gpc_isoprobability.$toplevel"
  ],
  "examples.gaussian_process.plot_gpr_noisy.target_generator": [
    "examples.gaussian_process.plot_gpr_noisy.$toplevel"
  ],
  "examples.gaussian_process.plot_gpr_prior_posterior.plot_gpr_samples": [
    "examples.gaussian_process.plot_gpr_prior_posterior.$toplevel"
  ],
  "examples.impute.plot_missing_values.add_missing_values": [
    "examples.impute.plot_missing_values.$toplevel"
  ],
  "examples.impute.plot_missing_values.get_full_score": [
    "examples.impute.plot_missing_values.$toplevel"
  ],
  "examples.impute.plot_missing_values.get_impute_iterative": [
    "examples.impute.plot_missing_values.$toplevel"
  ],
  "examples.impute.plot_missing_values.get_impute_knn_score": [
    "examples.impute.plot_missing_values.$toplevel"
  ],
  "examples.impute.plot_missing_values.get_impute_mean": [
    "examples.impute.plot_missing_values.$toplevel"
  ],
  "examples.impute.plot_missing_values.get_impute_zero_score": [
    "examples.impute.plot_missing_values.$toplevel"
  ],
  "examples.impute.plot_missing_values.get_scores_for_imputer": [
    "examples.impute.plot_missing_values.get_impute_iterative",
    "examples.impute.plot_missing_values.get_impute_knn_score",
    "examples.impute.plot_missing_values.get_impute_mean",
    "examples.impute.plot_missing_values.get_impute_zero_score"
  ],
  "examples.linear_model.plot_bayesian_ridge_curvefit.func": [
    "examples.linear_model.plot_bayesian_ridge_curvefit.$toplevel"
  ],
  "examples.linear_model.plot_lasso_lars_ic.zou_et_al_criterion_rescaling": [
    "examples.linear_model.plot_lasso_lars_ic.$toplevel"
  ],
  "examples.linear_model.plot_lasso_model_selection.highlight_min": [
    "examples.linear_model.plot_lasso_model_selection.$toplevel"
  ],
  "examples.linear_model.plot_ols_3d.plot_figs": [
    "examples.linear_model.plot_ols_3d.$toplevel"
  ],
  "examples.linear_model.plot_poisson_regression_non_normal_loss._mean_frequency_by_risk_group": [
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel"
  ],
  "examples.linear_model.plot_poisson_regression_non_normal_loss.lorenz_curve": [
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel"
  ],
  "examples.linear_model.plot_poisson_regression_non_normal_loss.score_estimator": [
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel"
  ],
  "examples.linear_model.plot_polynomial_interpolation.f": [
    "examples.linear_model.plot_polynomial_interpolation.$toplevel"
  ],
  "examples.linear_model.plot_polynomial_interpolation.g": [
    "examples.linear_model.plot_polynomial_interpolation.$toplevel"
  ],
  "examples.linear_model.plot_sgd_early_stopping.fit_and_score": [
    "examples.linear_model.plot_sgd_early_stopping.$toplevel"
  ],
  "examples.linear_model.plot_sgd_early_stopping.load_mnist": [
    "examples.linear_model.plot_sgd_early_stopping.$toplevel"
  ],
  "examples.linear_model.plot_sgd_iris.plot_hyperplane": [
    "examples.linear_model.plot_sgd_iris.$toplevel"
  ],
  "examples.linear_model.plot_sgd_loss_functions.modified_huber_loss": [
    "examples.linear_model.plot_sgd_loss_functions.$toplevel"
  ],
  "examples.linear_model.plot_tweedie_regression_insurance_claims.load_mtpl2": [
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel"
  ],
  "examples.linear_model.plot_tweedie_regression_insurance_claims.lorenz_curve": [
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel"
  ],
  "examples.linear_model.plot_tweedie_regression_insurance_claims.plot_obs_pred": [
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel"
  ],
  "examples.linear_model.plot_tweedie_regression_insurance_claims.score_estimator": [
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel"
  ],
  "examples.manifold.plot_compare_methods.add_2d_scatter": [
    "examples.manifold.plot_compare_methods.$toplevel",
    "examples.manifold.plot_compare_methods.plot_2d"
  ],
  "examples.manifold.plot_compare_methods.plot_2d": [
    "examples.manifold.plot_compare_methods.$toplevel"
  ],
  "examples.manifold.plot_compare_methods.plot_3d": [
    "examples.manifold.plot_compare_methods.$toplevel"
  ],
  "examples.manifold.plot_lle_digits.plot_embedding": [
    "examples.manifold.plot_lle_digits.$toplevel"
  ],
  "examples.miscellaneous.plot_metadata_routing.check_metadata": [
    "examples.miscellaneous.plot_metadata_routing.ExampleClassifier.fit",
    "examples.miscellaneous.plot_metadata_routing.ExampleClassifier.predict",
    "examples.miscellaneous.plot_metadata_routing.ExampleRegressor.fit",
    "examples.miscellaneous.plot_metadata_routing.ExampleTransformer.fit",
    "examples.miscellaneous.plot_metadata_routing.ExampleTransformer.transform",
    "examples.miscellaneous.plot_metadata_routing.RouterConsumerClassifier.fit",
    "examples.miscellaneous.plot_metadata_routing.WeightedMetaRegressor.fit"
  ],
  "examples.miscellaneous.plot_metadata_routing.print_routing": [
    "examples.miscellaneous.plot_metadata_routing.$toplevel"
  ],
  "examples.miscellaneous.plot_multilabel.plot_hyperplane": [
    "examples.miscellaneous.plot_multilabel.plot_subfigure"
  ],
  "examples.miscellaneous.plot_multilabel.plot_subfigure": [
    "examples.miscellaneous.plot_multilabel.$toplevel"
  ],
  "examples.miscellaneous.plot_outlier_detection_bench.compute_prediction": [
    "examples.miscellaneous.plot_outlier_detection_bench.$toplevel"
  ],
  "examples.miscellaneous.plot_outlier_detection_bench.preprocess_dataset": [
    "examples.miscellaneous.plot_outlier_detection_bench.$toplevel"
  ],
  "examples.mixture.plot_concentration_prior.plot_ellipses": [
    "examples.mixture.plot_concentration_prior.plot_results"
  ],
  "examples.mixture.plot_concentration_prior.plot_results": [
    "examples.mixture.plot_concentration_prior.$toplevel"
  ],
  "examples.mixture.plot_gmm.plot_results": [
    "examples.mixture.plot_gmm.$toplevel"
  ],
  "examples.mixture.plot_gmm_covariances.make_ellipses": [
    "examples.mixture.plot_gmm_covariances.$toplevel"
  ],
  "examples.mixture.plot_gmm_init.get_initial_means": [
    "examples.mixture.plot_gmm_init.$toplevel"
  ],
  "examples.mixture.plot_gmm_selection.gmm_bic_score": [
    "examples.mixture.plot_gmm_selection.$toplevel"
  ],
  "examples.mixture.plot_gmm_sin.plot_results": [
    "examples.mixture.plot_gmm_sin.$toplevel"
  ],
  "examples.mixture.plot_gmm_sin.plot_samples": [
    "examples.mixture.plot_gmm_sin.$toplevel"
  ],
  "examples.model_selection.plot_cv_indices.plot_cv_indices": [
    "examples.model_selection.plot_cv_indices.$toplevel"
  ],
  "examples.model_selection.plot_cv_indices.visualize_groups": [
    "examples.model_selection.plot_cv_indices.$toplevel"
  ],
  "examples.model_selection.plot_grid_search_digits.print_dataframe": [
    "examples.model_selection.plot_grid_search_digits.refit_strategy"
  ],
  "examples.model_selection.plot_grid_search_digits.refit_strategy": [
    "examples.model_selection.plot_grid_search_digits.$toplevel"
  ],
  "examples.model_selection.plot_grid_search_refit_callable.best_low_complexity": [
    "examples.model_selection.plot_grid_search_refit_callable.$toplevel"
  ],
  "examples.model_selection.plot_grid_search_refit_callable.lower_bound": [
    "examples.model_selection.plot_grid_search_refit_callable.$toplevel",
    "examples.model_selection.plot_grid_search_refit_callable.best_low_complexity"
  ],
  "examples.model_selection.plot_grid_search_stats.compute_corrected_ttest": [
    "examples.model_selection.plot_grid_search_stats.$toplevel"
  ],
  "examples.model_selection.plot_grid_search_stats.corrected_std": [
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "examples.model_selection.plot_grid_search_stats.compute_corrected_ttest"
  ],
  "examples.model_selection.plot_grid_search_text_feature_extraction.shorten_param": [
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel"
  ],
  "examples.model_selection.plot_likelihood_ratios.extract_score": [
    "examples.model_selection.plot_likelihood_ratios.$toplevel"
  ],
  "examples.model_selection.plot_likelihood_ratios.scoring": [
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.scoring_on_bootstrap"
  ],
  "examples.model_selection.plot_likelihood_ratios.scoring_on_bootstrap": [
    "examples.model_selection.plot_likelihood_ratios.$toplevel"
  ],
  "examples.model_selection.plot_randomized_search.report": [
    "examples.model_selection.plot_randomized_search.$toplevel"
  ],
  "examples.model_selection.plot_successive_halving_heatmap.make_heatmap": [
    "examples.model_selection.plot_successive_halving_heatmap.$toplevel"
  ],
  "examples.model_selection.plot_underfitting_overfitting.true_fun": [
    "examples.model_selection.plot_underfitting_overfitting.$toplevel"
  ],
  "examples.neighbors.approximate_nearest_neighbors.load_mnist": [
    "examples.neighbors.approximate_nearest_neighbors.$toplevel"
  ],
  "examples.neighbors.plot_kde_1d.format_func": [
    "examples.neighbors.plot_kde_1d.$toplevel"
  ],
  "examples.neighbors.plot_lof_outlier_detection.update_legend_marker_size": [
    "examples.neighbors.plot_lof_outlier_detection.$toplevel"
  ],
  "examples.neighbors.plot_nca_illustration.link_thickness_i": [
    "examples.neighbors.plot_nca_illustration.relate_point"
  ],
  "examples.neighbors.plot_nca_illustration.relate_point": [
    "examples.neighbors.plot_nca_illustration.$toplevel"
  ],
  "examples.neighbors.plot_species_kde.construct_grids": [
    "examples.neighbors.plot_species_kde.$toplevel"
  ],
  "examples.neural_networks.plot_mlp_training_curves.plot_on_dataset": [
    "examples.neural_networks.plot_mlp_training_curves.$toplevel"
  ],
  "examples.neural_networks.plot_rbm_logistic_classification.nudge_dataset": [
    "examples.neural_networks.plot_rbm_logistic_classification.$toplevel"
  ],
  "examples.preprocessing.plot_all_scaling.create_axes": [
    "examples.preprocessing.plot_all_scaling.make_plot"
  ],
  "examples.preprocessing.plot_all_scaling.make_plot": [
    "examples.preprocessing.plot_all_scaling.$toplevel"
  ],
  "examples.preprocessing.plot_all_scaling.plot_distribution": [
    "examples.preprocessing.plot_all_scaling.make_plot"
  ],
  "examples.preprocessing.plot_discretization_classification.get_name": [
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_discretization_classification.get_name"
  ],
  "examples.preprocessing.plot_scaling_importance.fit_and_plot_model": [
    "examples.preprocessing.plot_scaling_importance.$toplevel"
  ],
  "examples.preprocessing.plot_target_encoder.evaluate_model_and_store": [
    "examples.preprocessing.plot_target_encoder.$toplevel"
  ],
  "examples.semi_supervised.plot_semi_supervised_newsgroups.eval_and_print_metrics": [
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel"
  ],
  "examples.svm.plot_custom_kernel.my_kernel": [
    "examples.svm.plot_custom_kernel.$toplevel"
  ],
  "examples.svm.plot_weighted_samples.plot_decision_function": [
    "examples.svm.plot_weighted_samples.$toplevel"
  ],
  "examples.text.plot_document_classification_20newsgroups.benchmark": [
    "examples.text.plot_document_classification_20newsgroups.$toplevel"
  ],
  "examples.text.plot_document_classification_20newsgroups.load_dataset": [
    "examples.text.plot_document_classification_20newsgroups.$toplevel"
  ],
  "examples.text.plot_document_classification_20newsgroups.plot_feature_effects": [
    "examples.text.plot_document_classification_20newsgroups.$toplevel"
  ],
  "examples.text.plot_document_classification_20newsgroups.size_mb": [
    "examples.text.plot_document_classification_20newsgroups.load_dataset"
  ],
  "examples.text.plot_document_clustering.fit_and_evaluate": [
    "examples.text.plot_document_clustering.$toplevel"
  ],
  "examples.text.plot_hashing_vs_dict_vectorizer.n_nonzero_columns": [
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel"
  ],
  "examples.text.plot_hashing_vs_dict_vectorizer.token_freqs": [
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel"
  ],
  "examples.text.plot_hashing_vs_dict_vectorizer.tokenize": [
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "examples.text.plot_hashing_vs_dict_vectorizer.token_freqs"
  ],
  "exec": [
    "jinja2.debug.fake_traceback",
    "jinja2.environment.Template.from_code"
  ],
  "exit": [
    "build_tools.get_comment.$toplevel"
  ],
  "flask.cli.load_dotenv": [
    "flask.cli.FlaskGroup.make_context"
  ],
  "flask.helpers.get_load_dotenv": [
    "flask.cli.FlaskGroup.make_context"
  ],
  "format": [
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_two_way_partial_dependence",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.plot"
  ],
  "functools.reduce": [
    "jinja2.environment.Environment.preprocess",
    "sklearn.inspection._plot.decision_boundary._check_boundary_response_method",
    "sklearn.model_selection._search.ParameterGrid.__len__",
    "sklearn.utils.validation._check_response_method"
  ],
  "functools.update_wrapper": [
    "click.utils.safecall",
    "sklearn.utils._available_if._AvailableIfDescriptor.__init__",
    "sklearn.utils.parallel._FuncWrapper.__init__"
  ],
  "gc.collect": [
    "benchmarks.bench_glmnet.bench",
    "benchmarks.bench_isotonic.bench_isotonic_regression",
    "benchmarks.bench_lasso.compute_bench",
    "benchmarks.bench_plot_incremental_pca.benchmark",
    "benchmarks.bench_plot_lasso_path.compute_bench",
    "benchmarks.bench_plot_omp_lars.compute_bench",
    "benchmarks.bench_plot_randomized_svd.svd_timing",
    "benchmarks.bench_plot_svd.compute_bench",
    "benchmarks.bench_random_projections.bench_scikit_transformer",
    "benchmarks.bench_rcv1_logreg_convergence.bench",
    "benchmarks.bench_sample_without_replacement.bench_sample",
    "benchmarks.bench_sgd_regression.$toplevel",
    "benchmarks.bench_tree.bench_scikit_tree_classifier",
    "benchmarks.bench_tree.bench_scikit_tree_regressor",
    "examples.applications.plot_prediction_latency.benchmark",
    "examples.applications.plot_prediction_latency.generate_dataset",
    "examples.applications.plot_prediction_latency.n_feature_influence"
  ],
  "genericpath.exists": [
    "benchmarks.bench_hist_gradient_boosting_higgsboson.load_data",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "build_tools.github.vendor.main",
    "click.utils._detect_program_name",
    "doc.conf.make_carousel_thumbs",
    "doc.conftest.setup_labeled_faces",
    "doc.conftest.setup_rcv1",
    "doc.conftest.setup_twenty_newsgroups",
    "doc.conftest.setup_working_with_text_data",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.$toplevel",
    "setup.CleanCommand.run",
    "sklearn._build_utils.gen_from_templates",
    "sklearn.datasets._california_housing.fetch_california_housing",
    "sklearn.datasets._covtype.fetch_covtype",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._lfw._check_fetch_lfw",
    "sklearn.datasets._olivetti_faces.fetch_olivetti_faces",
    "sklearn.datasets._openml._open_openml_url",
    "sklearn.datasets._openml._retry_with_clean_cache.decorator.wrapper",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._species_distributions.fetch_species_distributions",
    "sklearn.datasets._twenty_newsgroups._download_20newsgroups",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized",
    "sklearn.utils._testing._delete_folder"
  ],
  "genericpath.isdir": [
    "benchmarks.bench_plot_randomized_svd.handle_missing_dataset",
    "build_tools.github.vendor.main",
    "click._compat.open_stream",
    "sklearn.datasets._base.load_files",
    "sklearn.datasets._lfw._fetch_lfw_people"
  ],
  "genericpath.isfile": [
    "flask.cli.load_dotenv"
  ],
  "getattr": [
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel",
    "benchmarks.bench_multilabel_metrics.$toplevel",
    "click._compat._find_binary_reader",
    "click._compat._find_binary_writer",
    "click._compat._get_argv_encoding",
    "click._compat._is_compat_stream_attr",
    "click._compat._stream_is_misconfigured",
    "click._compat.get_best_encoding",
    "click._compat.open_stream",
    "click._winconsole._get_windows_console_stream",
    "click.core.Context.__init__",
    "click.utils._detect_program_name",
    "doc.sphinxext.sphinx_issues.IssueRole.make_node",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing._trim_arity",
    "doc.tutorial.machine_learning_map.pyparsing.tokenMap",
    "examples.applications.plot_out_of_core_classification.ReutersParser.handle_endtag",
    "examples.applications.plot_out_of_core_classification.ReutersParser.handle_starttag",
    "examples.preprocessing.plot_all_scaling.$toplevel",
    "importlib_metadata.Distribution._discover_resolvers",
    "importlib_metadata.EntryPoint.matches",
    "jinja2.environment.Environment.getattr",
    "jinja2.environment.Environment.getitem",
    "jinja2.nodes.Node.iter_fields",
    "jinja2.nodes._FilterTestCommon.as_const",
    "jinja2.parser.Parser.parse_statement",
    "jinja2.sandbox.SandboxedEnvironment.getattr",
    "jinja2.sandbox.SandboxedEnvironment.getitem",
    "jinja2.utils.import_string",
    "jinja2.visitor.NodeVisitor.get_visitor",
    "pip._vendor.pkg_resources.Distribution.__str__",
    "pip._vendor.pyparsing.ParserElement.scanString",
    "pip._vendor.pyparsing.ParserElement.transformString",
    "pip._vendor.pyparsing._MultipleMatch._setResultsName",
    "pip._vendor.pyparsing._trim_arity",
    "sklearn.base.BaseEstimator.__getstate__",
    "sklearn.base.BaseEstimator._check_feature_names",
    "sklearn.base.BaseEstimator._get_param_names",
    "sklearn.base.BaseEstimator.get_params",
    "sklearn.base.is_classifier",
    "sklearn.base.is_outlier_detector",
    "sklearn.base.is_regressor",
    "sklearn.calibration._get_prediction_method",
    "sklearn.cluster._birch.Birch._fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.partial_fit",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_output",
    "sklearn.compose._column_transformer.ColumnTransformer.set_output",
    "sklearn.ensemble._base.BaseEnsemble._make_estimator",
    "sklearn.ensemble._forest.BaseForest.feature_importances_",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._gb.BaseGradientBoosting._is_initialized",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._compute_partial_dependence_recursion",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._is_fitted",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._raw_predict",
    "sklearn.ensemble._stacking._BaseStacking._transform",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost_discrete",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost_real",
    "sklearn.feature_extraction.text._VectorizerMixin._check_stop_words_consistency",
    "sklearn.feature_selection._from_model.SelectFromModel._get_support_mask",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.gaussian_process.kernels.Kernel.hyperparameters",
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.inspection._partial_dependence._partial_dependence_brute",
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.plot",
    "sklearn.inspection._plot.decision_boundary._check_boundary_response_method",
    "sklearn.kernel_approximation.Nystroem._get_kernel_params",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._least_angle.Lars.fit",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._partial_fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._partial_fit",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._partial_fit",
    "sklearn.metrics._scorer.check_scoring",
    "sklearn.model_selection._search._estimator_has.check",
    "sklearn.model_selection._split._build_repr",
    "sklearn.model_selection._split._yields_constant_splits",
    "sklearn.model_selection._validation._fit_and_predict",
    "sklearn.multioutput.MultiOutputClassifier._check_predict_proba",
    "sklearn.pipeline._final_estimator_has.check",
    "sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform",
    "sklearn.preprocessing._encoders._BaseEncoder._check_X",
    "sklearn.preprocessing._encoders._BaseEncoder._check_infrequent_enabled",
    "sklearn.svm._base.BaseLibSVM._dense_fit",
    "sklearn.svm._base.BaseLibSVM._sparse_decision_function",
    "sklearn.svm._base.BaseLibSVM._sparse_fit",
    "sklearn.svm._base.BaseLibSVM._sparse_predict",
    "sklearn.svm._base.BaseSVC._sparse_predict_proba",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.utils._array_api._ArrayAPIWrapper.__getattr__",
    "sklearn.utils._array_api._NumPyAPIWrapper.__getattr__",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests.MetadataRequest._check_warnings",
    "sklearn.utils._metadata_requests.MetadataRequest._get_param_names",
    "sklearn.utils._metadata_requests.MetadataRequest._route_params",
    "sklearn.utils._metadata_requests.MetadataRequest._serialize",
    "sklearn.utils._metadata_requests.MetadataRouter.add_self_request",
    "sklearn.utils._metadata_requests.RequestMethod.__get__.func",
    "sklearn.utils._metadata_requests._MetadataRequester.__init_subclass__",
    "sklearn.utils._metadata_requests._MetadataRequester._build_request_for_signature",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils._metadata_requests.get_routing_for_object",
    "sklearn.utils._param_validation.HasMethods.is_satisfied_by",
    "sklearn.utils._pprint._changed_params",
    "sklearn.utils._pprint._safe_repr",
    "sklearn.utils._set_output._SetOutputMixin.__init_subclass__",
    "sklearn.utils._set_output._auto_wrap_is_configured",
    "sklearn.utils._set_output._get_output_config",
    "sklearn.utils._set_output._wrap_data_with_container",
    "sklearn.utils.deprecation._is_deprecated",
    "sklearn.utils.estimator_checks._construct_instance",
    "sklearn.utils.estimator_checks._is_pairwise_metric",
    "sklearn.utils.estimator_checks.check_array_api_input",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_decision_function",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.estimator_checks.check_classifiers_predictions",
    "sklearn.utils.estimator_checks.check_clustering",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_dict_unchanged",
    "sklearn.utils.estimator_checks.check_estimators_dtypes",
    "sklearn.utils.estimator_checks.check_estimators_pickle",
    "sklearn.utils.estimator_checks.check_estimators_unfitted",
    "sklearn.utils.estimator_checks.check_fit2d_predict1d",
    "sklearn.utils.estimator_checks.check_fit_idempotent",
    "sklearn.utils.estimator_checks.check_fit_score_takes_y",
    "sklearn.utils.estimator_checks.check_methods_sample_order_invariance",
    "sklearn.utils.estimator_checks.check_methods_subset_invariance",
    "sklearn.utils.estimator_checks.check_n_features_in_after_fitting",
    "sklearn.utils.estimator_checks.check_param_validation",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.estimator_checks.check_pipeline_consistency",
    "sklearn.utils.estimator_checks.check_sample_weights_invariance",
    "sklearn.utils.metaestimators._BaseComposition._get_params",
    "sklearn.utils.metaestimators._BaseComposition._replace_estimator",
    "sklearn.utils.metaestimators._BaseComposition._set_params",
    "sklearn.utils.multiclass._check_partial_fit_first_call",
    "sklearn.utils.parallel._FuncWrapper.__call__",
    "sklearn.utils.tests.test_estimator_checks.run_tests_without_pytest",
    "sklearn.utils.validation._check_feature_names_in",
    "sklearn.utils.validation._check_large_sparse",
    "sklearn.utils.validation._check_response_method",
    "sklearn.utils.validation.check_array",
    "sklearn.utils.validation.check_symmetric",
    "traitlets.traitlets.HasTraits._notify_observers",
    "traitlets.traitlets.HasTraits.has_trait",
    "traitlets.traitlets.HasTraits.hold_trait_notifications",
    "traitlets.traitlets.HasTraits.set_trait",
    "werkzeug.utils.ImportStringError.__init__",
    "werkzeug.utils.import_string"
  ],
  "getpass.getpass": [
    "build_tools.generate_authors_table.$toplevel"
  ],
  "gettext.gettext": [
    "click.core.BaseCommand.main",
    "click.core.Command.format_help_text",
    "click.core.Command.format_options",
    "click.core.Command.get_help_option",
    "click.core.Command.get_short_help_str",
    "click.core.Command.invoke",
    "click.core.MultiCommand.format_commands",
    "click.core.MultiCommand.invoke",
    "click.core.MultiCommand.resolve_command",
    "click.core.Option.get_help_record",
    "click.core.Parameter.type_cast_value.check_iter",
    "click.exceptions.BadParameter.format_message",
    "click.exceptions.ClickException.show",
    "click.exceptions.FileError.format_message",
    "click.exceptions.MissingParameter.format_message",
    "click.exceptions.NoSuchOption.__init__",
    "click.exceptions.UsageError.show",
    "click.formatting.HelpFormatter.write_usage",
    "click.parser.Argument.process",
    "click.parser.OptionParser._match_long_opt",
    "click.shell_completion.BashComplete._check_version",
    "click.termui.confirm",
    "click.termui.prompt",
    "click.types.BoolParamType.convert",
    "click.types.Path.convert",
    "click.types.UUIDParameterType.convert",
    "click.types._NumberParamTypeBase.convert",
    "click.types._NumberRangeBase.convert"
  ],
  "gettext.ngettext": [
    "click.core.Command.parse_args",
    "click.core.Parameter.type_cast_value.convert",
    "click.exceptions.NoSuchOption.format_message",
    "click.parser.OptionParser._get_value_from_state",
    "click.types.Choice.convert",
    "click.types.DateTime.convert",
    "click.types.Tuple.convert"
  ],
  "glob.glob": [
    "click.utils._expand_args",
    "sklearn._build_utils.pre_build_helpers.compile_test_program"
  ],
  "globals": [
    "examples.applications.plot_out_of_core_classification._not_in_sphinx",
    "examples.applications.plot_prediction_latency._not_in_sphinx",
    "sklearn.datasets.__getattr__",
    "werkzeug.utils.import_string"
  ],
  "gzip.open": [
    "sklearn.datasets._base.load_gzip_compressed_csv_data",
    "sklearn.datasets._svmlight_format_io._gen_open"
  ],
  "hasattr": [
    "asv_benchmarks.benchmarks.common.Estimator.track_test_score",
    "asv_benchmarks.benchmarks.common.Estimator.track_train_score",
    "benchmarks.bench_saga._predict_proba",
    "click._winconsole._is_console",
    "click.termui._format_default",
    "click.types.File.convert",
    "doc.tutorial.machine_learning_map.pyparsing.And.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Each.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Forward.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.NotAny.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.OneOrMore.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Optional.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Or.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults._iterkeys",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setBreak",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setName",
    "doc.tutorial.machine_learning_map.pyparsing.ZeroOrMore.__str__",
    "examples.applications.svm_gui.Controller.fit",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_inductive_clustering._classifier_has",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.covariance.plot_sparse_cov.$toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.score_estimator",
    "examples.miscellaneous.plot_johnson_lindenstrauss_bound.$toplevel",
    "examples.neural_networks.plot_mlp_alpha.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.benchmark",
    "jinja2.async_utils.auto_aiter",
    "jinja2.sandbox.is_internal_attribute",
    "jinja2.utils._PassArg.from_obj",
    "markupsafe.Markup.__add__",
    "markupsafe.Markup.__mod__",
    "markupsafe.Markup.__new__",
    "pip._vendor.distlib.compat.OrderedDict.update",
    "pip._vendor.pyparsing.Regex.__init__",
    "pip._vendor.requests.cookies.RequestsCookieJar.set_cookie",
    "sklearn._config._get_threadlocal_config",
    "sklearn.base.BaseEstimator._check_feature_names",
    "sklearn.base.BaseEstimator._check_n_features",
    "sklearn.base.BaseEstimator._get_tags",
    "sklearn.base.BaseEstimator.get_params",
    "sklearn.base._clone_parametrized",
    "sklearn.base.clone",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.calibration._get_prediction_method",
    "sklearn.cluster._affinity_propagation.AffinityPropagation.predict",
    "sklearn.cluster._birch.Birch._check_fit",
    "sklearn.cluster._bisect_k_means.BisectingKMeans._predict_recursive",
    "sklearn.cluster._kmeans.MiniBatchKMeans.partial_fit",
    "sklearn.compose._column_transformer.ColumnTransformer._get_feature_name_out_for_transformer",
    "sklearn.compose._column_transformer.ColumnTransformer._hstack",
    "sklearn.compose._column_transformer.ColumnTransformer._sk_visual_block_",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_transformers",
    "sklearn.compose._column_transformer.ColumnTransformer.transform",
    "sklearn.compose._column_transformer._check_X",
    "sklearn.compose._column_transformer._is_empty_column_selection",
    "sklearn.compose._column_transformer.make_column_selector.__call__",
    "sklearn.compose._target.TransformedTargetRegressor.fit",
    "sklearn.conftest.pytest_collection_modifyitems",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_checkerboard",
    "sklearn.datasets._svmlight_format_io._open_and_load",
    "sklearn.datasets._svmlight_format_io.dump_svmlight_file",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.partial_fit",
    "sklearn.decomposition._dict_learning._BaseSparseCoding._transform",
    "sklearn.decomposition._incremental_pca.IncrementalPCA.partial_fit",
    "sklearn.decomposition._kernel_pca.KernelPCA._fit_inverse_transform",
    "sklearn.decomposition._lda.LatentDirichletAllocation.partial_fit",
    "sklearn.decomposition._nmf.MiniBatchNMF.partial_fit",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba",
    "sklearn.discriminant_analysis._cov",
    "sklearn.ensemble._bagging.BaggingClassifier._set_oob_score",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._bagging._estimator_has.check",
    "sklearn.ensemble._bagging._parallel_predict_proba",
    "sklearn.ensemble._forest.BaseForest._compute_oob_predictions",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._gb.BaseGradientBoosting._clear_state",
    "sklearn.ensemble._gb.BaseGradientBoosting._resize_state",
    "sklearn.ensemble._gb.BaseGradientBoosting.fit",
    "sklearn.ensemble._gb_losses.ClassificationLossFunction.check_init_estimator",
    "sklearn.ensemble._gb_losses.RegressionLossFunction.check_init_estimator",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._clear_state",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.ensemble._stacking._estimator_has",
    "sklearn.ensemble._voting._BaseVoting.fit",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._validate_estimator",
    "sklearn.externals._arff._get_data_object_for_encoding",
    "sklearn.feature_extraction._hash._iteritems",
    "sklearn.feature_extraction.text.TfidfVectorizer.idf_",
    "sklearn.feature_extraction.text.TfidfVectorizer.idf_@setter",
    "sklearn.feature_extraction.text._VectorizerMixin._check_vocabulary",
    "sklearn.feature_selection._base.SelectorMixin._transform",
    "sklearn.feature_selection._base.SelectorMixin.transform",
    "sklearn.feature_selection._base._get_feature_importances",
    "sklearn.feature_selection._from_model.SelectFromModel.fit",
    "sklearn.feature_selection._from_model.SelectFromModel.partial_fit",
    "sklearn.feature_selection._from_model._calculate_threshold",
    "sklearn.feature_selection._from_model._estimator_has",
    "sklearn.feature_selection._rfe._estimator_has",
    "sklearn.feature_selection._variance_threshold.VarianceThreshold.fit",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace._posterior_mode",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict",
    "sklearn.impute._base.MissingIndicator._fit",
    "sklearn.impute._base.MissingIndicator.transform",
    "sklearn.impute._base.SimpleImputer.transform",
    "sklearn.impute._base._BaseImputer._transform_indicator",
    "sklearn.impute._iterative._assign_where",
    "sklearn.inspection._partial_dependence.partial_dependence",
    "sklearn.inspection._pd_utils._check_feature_names",
    "sklearn.inspection._permutation_importance._calculate_permutation_scores",
    "sklearn.inspection._permutation_importance.permutation_importance",
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.from_estimator",
    "sklearn.inspection._plot.decision_boundary._check_boundary_response_method",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.isotonic.IsotonicRegression.__setstate__",
    "sklearn.isotonic.IsotonicRegression._transform",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.transform",
    "sklearn.linear_model._base._pre_fit",
    "sklearn.linear_model._coordinate_descent.ElasticNet.fit",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit",
    "sklearn.linear_model._huber.HuberRegressor.fit",
    "sklearn.linear_model._least_angle.Lars._get_gram",
    "sklearn.linear_model._least_angle.Lars.fit",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveClassifier.partial_fit",
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveRegressor.partial_fit",
    "sklearn.linear_model._ridge._BaseRidgeCV.fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._partial_fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.partial_fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._fit_regressor",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.partial_fit",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._fit",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._partial_fit",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM.partial_fit",
    "sklearn.manifold._isomap.Isomap._fit_transform",
    "sklearn.manifold._isomap.Isomap.transform",
    "sklearn.manifold._locally_linear.null_space",
    "sklearn.manifold._mds.smacof",
    "sklearn.metrics._pairwise_distances_reduction._dispatcher.BaseDistancesReductionDispatcher.is_usable_for.is_numpy_c_ordered",
    "sklearn.metrics._scorer._MultimetricScorer._use_cache",
    "sklearn.metrics._scorer.check_scoring",
    "sklearn.metrics.pairwise._check_chunk_size",
    "sklearn.mixture._base.BaseMixture.fit_predict",
    "sklearn.model_selection._search.BaseSearchCV.fit",
    "sklearn.model_selection._search.ParameterSampler.__init__",
    "sklearn.model_selection._search.ParameterSampler.__iter__",
    "sklearn.model_selection._search.ParameterSampler._is_all_lists",
    "sklearn.model_selection._search._estimator_has.check",
    "sklearn.model_selection._split._build_repr",
    "sklearn.model_selection._split.check_cv",
    "sklearn.model_selection._validation._score",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.multiclass.OneVsOneClassifier.partial_fit",
    "sklearn.multiclass.OneVsRestClassifier.fit",
    "sklearn.multiclass.OneVsRestClassifier.partial_fit",
    "sklearn.multiclass.OutputCodeClassifier.fit",
    "sklearn.multiclass._estimators_has",
    "sklearn.multiclass._threshold_for_binary_predict",
    "sklearn.multioutput.MultiOutputClassifier._check_predict_proba",
    "sklearn.multioutput._MultiOutputEstimator.fit",
    "sklearn.multioutput._MultiOutputEstimator.partial_fit",
    "sklearn.multioutput._MultiOutputEstimator.predict",
    "sklearn.multioutput._available_if_base_estimator_has._check",
    "sklearn.multioutput._available_if_estimator_has._check",
    "sklearn.naive_bayes._BaseDiscreteNB.partial_fit",
    "sklearn.neighbors._base._get_weights",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._initialize",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier._validate_input",
    "sklearn.neural_network._rbm.BernoulliRBM.gibbs",
    "sklearn.neural_network._rbm.BernoulliRBM.partial_fit",
    "sklearn.pipeline.FeatureUnion._hstack",
    "sklearn.pipeline.FeatureUnion._validate_transformers",
    "sklearn.pipeline.FeatureUnion.get_feature_names_out",
    "sklearn.pipeline.Pipeline._can_fit_transform",
    "sklearn.pipeline.Pipeline._can_inverse_transform",
    "sklearn.pipeline.Pipeline._can_transform",
    "sklearn.pipeline.Pipeline._fit",
    "sklearn.pipeline.Pipeline._validate_steps",
    "sklearn.pipeline.Pipeline.fit_transform",
    "sklearn.pipeline.Pipeline.get_feature_names_out",
    "sklearn.pipeline._fit_transform_one",
    "sklearn.preprocessing._data.MaxAbsScaler._reset",
    "sklearn.preprocessing._data.MaxAbsScaler.partial_fit",
    "sklearn.preprocessing._data.MinMaxScaler._reset",
    "sklearn.preprocessing._data.MinMaxScaler.partial_fit",
    "sklearn.preprocessing._data.StandardScaler._reset",
    "sklearn.preprocessing._data.StandardScaler.partial_fit",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.get_feature_names_out",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.preprocessing._encoders._BaseEncoder._check_X",
    "sklearn.preprocessing._function_transformer.FunctionTransformer._check_inverse_transform",
    "sklearn.preprocessing._function_transformer.FunctionTransformer.get_feature_names_out",
    "sklearn.preprocessing._function_transformer.FunctionTransformer.set_output",
    "sklearn.preprocessing._label.label_binarize",
    "sklearn.semi_supervised._self_training._estimator_has",
    "sklearn.svm._base.BaseLibSVM._sparse_decision_function",
    "sklearn.svm._base.BaseLibSVM._sparse_fit",
    "sklearn.svm._base.BaseLibSVM.fit",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.utils._array_api._estimator_with_converted_arrays",
    "sklearn.utils._array_api._isdtype_single",
    "sklearn.utils._determine_key_type",
    "sklearn.utils._encode._NaNCounter.__missing__",
    "sklearn.utils._encode._NaNCounter._generate_items",
    "sklearn.utils._encode._nandict.__missing__",
    "sklearn.utils._estimator_html_repr._get_visual_block",
    "sklearn.utils._metadata_requests.MetadataRouter.add_self_request",
    "sklearn.utils._metadata_requests._MetadataRequester._build_request_for_signature",
    "sklearn.utils._metadata_requests._MetadataRequester._get_metadata_request",
    "sklearn.utils._metadata_requests.get_routing_for_object",
    "sklearn.utils._metadata_requests.process_routing",
    "sklearn.utils._safe_assign",
    "sklearn.utils._safe_indexing",
    "sklearn.utils._set_output._SetOutputMixin.__init_subclass__",
    "sklearn.utils._set_output._SetOutputMixin.set_output",
    "sklearn.utils._set_output._auto_wrap_is_configured",
    "sklearn.utils._set_output._safe_set_output",
    "sklearn.utils._set_output._wrap_method_output.wrapped",
    "sklearn.utils._tags._safe_tags",
    "sklearn.utils._testing.assert_no_warnings",
    "sklearn.utils.discovery.all_estimators.is_abstract",
    "sklearn.utils.estimator_checks._check_transformer",
    "sklearn.utils.estimator_checks._get_check_estimator_ids",
    "sklearn.utils.estimator_checks._output_from_fit_transform",
    "sklearn.utils.estimator_checks._set_checking_parameters",
    "sklearn.utils.estimator_checks._yield_all_checks",
    "sklearn.utils.estimator_checks._yield_checks",
    "sklearn.utils.estimator_checks._yield_clustering_checks",
    "sklearn.utils.estimator_checks._yield_outliers_checks",
    "sklearn.utils.estimator_checks.check_class_weight_balanced_classifiers",
    "sklearn.utils.estimator_checks.check_class_weight_balanced_linear_classifier",
    "sklearn.utils.estimator_checks.check_class_weight_classifiers",
    "sklearn.utils.estimator_checks.check_classifier_multioutput",
    "sklearn.utils.estimator_checks.check_classifiers_predictions",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.estimator_checks.check_clusterer_compute_labels_predict",
    "sklearn.utils.estimator_checks.check_clustering",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_decision_proba_consistency",
    "sklearn.utils.estimator_checks.check_dict_unchanged",
    "sklearn.utils.estimator_checks.check_dont_overwrite_parameters",
    "sklearn.utils.estimator_checks.check_dtype_object",
    "sklearn.utils.estimator_checks.check_estimator_get_tags_default_keys",
    "sklearn.utils.estimator_checks.check_estimator_sparse_data",
    "sklearn.utils.estimator_checks.check_estimators_dtypes",
    "sklearn.utils.estimator_checks.check_estimators_nan_inf",
    "sklearn.utils.estimator_checks.check_estimators_partial_fit_n_features",
    "sklearn.utils.estimator_checks.check_estimators_pickle",
    "sklearn.utils.estimator_checks.check_estimators_unfitted",
    "sklearn.utils.estimator_checks.check_fit1d",
    "sklearn.utils.estimator_checks.check_fit2d_1feature",
    "sklearn.utils.estimator_checks.check_fit2d_1sample",
    "sklearn.utils.estimator_checks.check_fit2d_predict1d",
    "sklearn.utils.estimator_checks.check_fit_idempotent",
    "sklearn.utils.estimator_checks.check_methods_sample_order_invariance",
    "sklearn.utils.estimator_checks.check_methods_subset_invariance",
    "sklearn.utils.estimator_checks.check_n_features_in",
    "sklearn.utils.estimator_checks.check_n_features_in_after_fitting",
    "sklearn.utils.estimator_checks.check_no_attributes_set_in_init",
    "sklearn.utils.estimator_checks.check_non_transformer_estimators_n_iter",
    "sklearn.utils.estimator_checks.check_outlier_contamination",
    "sklearn.utils.estimator_checks.check_outliers_fit_predict",
    "sklearn.utils.estimator_checks.check_outliers_train",
    "sklearn.utils.estimator_checks.check_param_validation",
    "sklearn.utils.estimator_checks.check_regressors_no_decision_function",
    "sklearn.utils.estimator_checks.check_regressors_train",
    "sklearn.utils.estimator_checks.check_sample_weights_invariance",
    "sklearn.utils.estimator_checks.check_set_output_transform",
    "sklearn.utils.estimator_checks.check_transformer_n_iter",
    "sklearn.utils.extmath.density",
    "sklearn.utils.extmath.randomized_range_finder",
    "sklearn.utils.extmath.safe_sparse_dot",
    "sklearn.utils.fixes._get_threadpool_controller",
    "sklearn.utils.metaestimators._BaseComposition._get_params",
    "sklearn.utils.metaestimators._safe_split",
    "sklearn.utils.multiclass._unique_multiclass",
    "sklearn.utils.multiclass.is_multilabel",
    "sklearn.utils.multiclass.type_of_target",
    "sklearn.utils.parallel._with_config",
    "sklearn.utils.resample",
    "sklearn.utils.safe_mask",
    "sklearn.utils.tests.test_estimator_checks.PartialFitChecksName.partial_fit",
    "sklearn.utils.validation._check_monotonic_cst",
    "sklearn.utils.validation._ensure_no_complex_data",
    "sklearn.utils.validation._ensure_sparse_format",
    "sklearn.utils.validation._get_feature_names",
    "sklearn.utils.validation._is_arraylike",
    "sklearn.utils.validation._is_extension_array_dtype",
    "sklearn.utils.validation._is_fitted",
    "sklearn.utils.validation._is_pandas_df",
    "sklearn.utils.validation._make_indexable",
    "sklearn.utils.validation._num_features",
    "sklearn.utils.validation._num_samples",
    "sklearn.utils.validation.check_array",
    "sklearn.utils.validation.check_is_fitted",
    "sklearn.utils.validation.check_memory",
    "traitlets.traitlets.HasTraits._notify_observers",
    "traitlets.utils.getargspec.getargspec"
  ],
  "hash": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__hash__",
    "sklearn.externals._packaging._structures.InfinityType.__hash__",
    "sklearn.externals._packaging._structures.NegativeInfinityType.__hash__",
    "sklearn.externals._packaging.version._BaseVersion.__hash__"
  ],
  "hashlib.md5": [
    "sklearn.datasets._openml._load_arff_response"
  ],
  "hashlib.sha256": [
    "doc.tutorial.text_analytics.data.movie_reviews.fetch_data.$toplevel",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents",
    "sklearn.datasets._base._sha256"
  ],
  "hex": [
    "doc.tutorial.machine_learning_map.pyparsing._ustr",
    "pip._vendor.pyparsing._ustr"
  ],
  "html.escape": [
    "sklearn.utils._estimator_html_repr._write_label_html",
    "sklearn.utils._estimator_html_repr.estimator_html_repr"
  ],
  "id": [
    "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__hash__",
    "pip._vendor.distlib.compat.OrderedDict.__repr__",
    "pip._vendor.tenacity.BaseRetrying.__repr__",
    "sklearn.feature_extraction.text._VectorizerMixin._check_stop_words_consistency",
    "sklearn.utils._pprint._safe_repr",
    "testslide.mock_constructor._get_class_or_mock",
    "testslide.strict_mock.StrictMock.__repr__"
  ],
  "importlib.import_module": [
    "setup.check_package_status",
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.discovery.all_functions",
    "sklearn.utils.estimator_checks.check_array_api_input",
    "sklearn.utils.tests.test_estimator_checks.test_check_array_api_input"
  ],
  "importlib.metadata.version": [
    "build_tools.update_environments_and_lock_files.check_conda_lock_version",
    "sklearn.utils._show_versions._get_deps_info"
  ],
  "importlib.resources.contents": [
    "sklearn.utils.fixes._contents"
  ],
  "importlib.resources.is_resource": [
    "sklearn.utils.fixes._is_resource"
  ],
  "importlib.resources.open_binary": [
    "sklearn.utils.fixes._open_binary"
  ],
  "importlib.resources.open_text": [
    "sklearn.utils.fixes._open_text"
  ],
  "importlib.resources.path": [
    "sklearn.utils.fixes._path"
  ],
  "importlib.resources.read_text": [
    "sklearn.utils.fixes._read_text"
  ],
  "importlib_metadata.compat.py39.ep_matches": [
    "importlib_metadata.EntryPoints.select"
  ],
  "importlib_metadata.distributions": [
    "importlib_metadata.entry_points"
  ],
  "importlib_metadata.entry_points": [
    "flask.cli.FlaskGroup._load_plugin_commands"
  ],
  "input": [
    "build_tools.generate_authors_table.$toplevel",
    "sklearn.cluster._affinity_propagation.AffinityPropagation.fit"
  ],
  "inspect.cleandoc": [
    "click.core.Command.format_epilog",
    "click.core.Command.format_help_text",
    "click.core.Command.get_short_help_str",
    "click.core.Option.__init__"
  ],
  "inspect.getfullargspec": [
    "traitlets.utils.getargspec.getargspec"
  ],
  "inspect.getmembers": [
    "pip._vendor.tenacity._utils.visible_attrs",
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.discovery.all_functions"
  ],
  "inspect.getmodule": [
    "sklearn.utils._testing._get_func_name"
  ],
  "inspect.getmro": [
    "sklearn.base.BaseEstimator._get_tags",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "traitlets.traitlets._deprecated_method"
  ],
  "inspect.getsourcefile": [
    "doc.sphinxext.github_link._linkcode_resolve",
    "traitlets.traitlets._deprecated_method"
  ],
  "inspect.getsourcelines": [
    "doc.sphinxext.github_link._linkcode_resolve",
    "traitlets.traitlets._deprecated_method"
  ],
  "inspect.isclass": [
    "sklearn.base.clone",
    "sklearn.utils._estimator_html_repr._get_visual_block",
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.validation.check_is_fitted"
  ],
  "inspect.iscoroutinefunction": [
    "jinja2.nodes._FilterTestCommon.as_const"
  ],
  "inspect.isdatadescriptor": [
    "sklearn.utils._testing.check_docstring_parameters"
  ],
  "inspect.isfunction": [
    "click.core.Option.get_help_record",
    "sklearn.utils._metadata_requests._MetadataRequester._build_request_for_signature",
    "sklearn.utils.discovery._is_checked_function",
    "traitlets.utils.getargspec.getargspec"
  ],
  "inspect.ismethod": [
    "traitlets.utils.getargspec.getargspec"
  ],
  "inspect.signature": [
    "sklearn.base.BaseEstimator._get_param_names",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.metrics._scorer._BaseScorer._get_pos_label",
    "sklearn.model_selection._split._build_repr",
    "sklearn.utils._metadata_requests._MetadataRequester._build_request_for_signature",
    "sklearn.utils._param_validation.validate_params.decorator.wrapper",
    "sklearn.utils._pprint._changed_params",
    "sklearn.utils._testing._get_args",
    "sklearn.utils.estimator_checks.check_fit_score_takes_y",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args",
    "sklearn.utils.validation.has_fit_parameter"
  ],
  "inspect.unwrap": [
    "doc.sphinxext.github_link._linkcode_resolve"
  ],
  "isinstance": [
    "benchmarks.bench_plot_nmf._PGNMF._fit_transform",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "click._compat._is_binary_reader",
    "click._compat._is_jupyter_kernel_output",
    "click._compat.open_stream",
    "click.core.BaseCommand.main",
    "click.core.BaseCommand.shell_complete",
    "click.core.Command.shell_complete",
    "click.core.Context.command_path",
    "click.core.Context.invoke",
    "click.core.Option.__init__",
    "click.core.Option.get_help_record",
    "click.core.Parameter.resolve_envvar_value",
    "click.core.Parameter.shell_complete",
    "click.core._check_iter",
    "click.core._check_multicommand",
    "click.core.augment_usage_errors",
    "click.exceptions._join_param_hints",
    "click.globals.get_current_context",
    "click.parser.OptionParser._get_value_from_state",
    "click.shell_completion._is_incomplete_argument",
    "click.shell_completion._is_incomplete_option",
    "click.shell_completion._resolve_context",
    "click.termui._build_prompt",
    "click.termui._format_default",
    "click.termui._interpret_color",
    "click.termui.prompt",
    "click.termui.secho",
    "click.termui.style",
    "click.types.DateTime.convert",
    "click.types.File.convert",
    "click.types.Path.coerce_path_result",
    "click.types.StringParamType.convert",
    "click.types.UUIDParameterType.convert",
    "click.types.convert_type",
    "click.utils.echo",
    "click.utils.make_str",
    "doc.sphinxext.add_toctree_functions.add_toctree_functions.get_nav_object",
    "doc.tutorial.machine_learning_map.parse_path.convertToFloat",
    "doc.tutorial.machine_learning_map.pyparsing.And.__iadd__",
    "doc.tutorial.machine_learning_map.pyparsing.And.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Dict.postParse",
    "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Forward.__lshift__",
    "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.__ior__",
    "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Or.__ixor__",
    "doc.tutorial.machine_learning_map.pyparsing.Or.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.ignore",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.ignore",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.streamline",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__delitem__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__getitem__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__iadd__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__new__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__radd__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults._asStringList",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asDict.toItem",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asList",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asXML",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.dump",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.extend",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.pop",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__add__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__and__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__eq__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__or__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__radd__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rand__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__ror__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rsub__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rxor__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__sub__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__xor__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._parseCache",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._parseNoCache",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.ignore",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseFile",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseString",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.runTests",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.scanString",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.searchString",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.transformString",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.SkipTo.__init__",
    "doc.tutorial.machine_learning_map.pyparsing._MultipleMatch.__init__",
    "doc.tutorial.machine_learning_map.pyparsing._flatten",
    "doc.tutorial.machine_learning_map.pyparsing._makeTags",
    "doc.tutorial.machine_learning_map.pyparsing._ustr",
    "doc.tutorial.machine_learning_map.pyparsing.infixNotation",
    "doc.tutorial.machine_learning_map.pyparsing.nestedExpr",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.convertToDate.cvt_fn",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.convertToDatetime.cvt_fn",
    "doc.tutorial.machine_learning_map.pyparsing.srange",
    "doc.tutorial.machine_learning_map.pyparsing.traceParseAction.z",
    "examples.applications.svm_gui.View.remove_surface",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.score_estimator",
    "examples.miscellaneous.plot_metadata_routing.$toplevel",
    "flask.cli.CertParamType.convert",
    "flask.cli.FlaskGroup.get_command",
    "flask.cli.FlaskGroup.list_commands",
    "jinja2.compiler.generate",
    "jinja2.debug.rewrite_traceback_stack",
    "jinja2.environment.Environment._tokenize",
    "jinja2.environment.Environment.compile",
    "jinja2.environment.Environment.getitem",
    "jinja2.environment.load_extensions",
    "jinja2.ext.InternationalizationExtension.parse",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.lexer.Lexer.wrap",
    "jinja2.nodes.BinExpr.as_const",
    "jinja2.nodes.Compare.as_const",
    "jinja2.nodes.Getattr.as_const",
    "jinja2.nodes.Getitem.as_const",
    "jinja2.nodes.Node.iter_child_nodes",
    "jinja2.nodes.UnaryExpr.as_const",
    "jinja2.nodes._FilterTestCommon.as_const",
    "jinja2.nodes.args_as_const",
    "jinja2.optimizer.Optimizer.generic_visit",
    "jinja2.parser.Parser.parse_call_block",
    "jinja2.parser.Parser.subparse",
    "jinja2.sandbox.SandboxedEnvironment.getitem",
    "jinja2.sandbox.is_internal_attribute",
    "jinja2.sandbox.modifies_known_mutable",
    "jinja2.visitor.NodeTransformer.generic_visit",
    "markupsafe.Markup.__add__",
    "markupsafe.Markup.__mod__",
    "markupsafe.Markup.__mul__",
    "packaging.version._BaseVersion.__ge__",
    "packaging.version._BaseVersion.__gt__",
    "packaging.version._BaseVersion.__le__",
    "packaging.version._BaseVersion.__lt__",
    "packaging.version._cmpkey",
    "parso.utils.PythonVersionInfo.__eq__",
    "parso.utils.PythonVersionInfo.__gt__",
    "pip._vendor.distlib.compat.OrderedDict.__eq__",
    "pip._vendor.distlib.compat.OrderedDict.update",
    "pip._vendor.packaging.version._cmpkey",
    "pip._vendor.pyparsing.And.streamline",
    "pip._vendor.pyparsing.Forward.__lshift__",
    "pip._vendor.pyparsing.MatchFirst._setResultsName",
    "pip._vendor.pyparsing.Or._setResultsName",
    "pip._vendor.pyparsing.ParseElementEnhance.__init__",
    "pip._vendor.pyparsing.ParseExpression._setResultsName",
    "pip._vendor.pyparsing.ParseExpression.streamline",
    "pip._vendor.pyparsing.ParseResults.asList",
    "pip._vendor.pyparsing.ParserElement.scanString",
    "pip._vendor.pyparsing.ParserElement.transformString",
    "pip._vendor.pyparsing.Regex.__init__",
    "pip._vendor.pyparsing._MultipleMatch._setResultsName",
    "pip._vendor.pyparsing._flatten",
    "pip._vendor.pyparsing._ustr",
    "pip._vendor.requests.cookies.RequestsCookieJar.set",
    "pip._vendor.tenacity.BaseRetrying.iter",
    "pip._vendor.tenacity.Retrying.__call__",
    "pip._vendor.tenacity._asyncio.AsyncRetrying.__call__",
    "pip._vendor.tenacity.tornadoweb.TornadoRetrying.__call__",
    "prompt_toolkit.layout.utils._ExplodedList.__setitem__",
    "prompt_toolkit.layout.utils.explode_text_fragments",
    "sklearn.__check_build.$toplevel",
    "sklearn._build_utils._check_cython_version",
    "sklearn._build_utils.openmp_helpers.check_openmp_support",
    "sklearn.base.BaseEstimator._check_n_features",
    "sklearn.base.BaseEstimator._validate_data",
    "sklearn.base.BaseEstimator.get_params",
    "sklearn.base._clone_parametrized",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._bicluster.SpectralBiclustering._check_parameters",
    "sklearn.cluster._birch.Birch._global_clustering",
    "sklearn.cluster._kmeans._BaseKMeans._check_params_vs_input",
    "sklearn.cluster._kmeans._BaseKMeans._init_centroids",
    "sklearn.cluster._kmeans._BaseKMeans.predict",
    "sklearn.compose._column_transformer.ColumnTransformer._fit_transform",
    "sklearn.compose._column_transformer.ColumnTransformer._hstack",
    "sklearn.compose._column_transformer.ColumnTransformer._sk_visual_block_",
    "sklearn.compose._column_transformer.ColumnTransformer.transform",
    "sklearn.compose._column_transformer._is_empty_column_selection",
    "sklearn.compose._target.TransformedTargetRegressor.n_features_in_",
    "sklearn.conftest._fetch_fixture.wrapped",
    "sklearn.conftest.pytest_collection_modifyitems",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.covariance._robust_covariance.select_candidates",
    "sklearn.cross_decomposition._pls._PLS.fit",
    "sklearn.cross_decomposition._pls._get_first_singular_vectors_power_method",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._arff_parser._pandas_arff_parser",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._kddcup99._mkdirp",
    "sklearn.datasets._openml._get_json_content_from_openml_api",
    "sklearn.datasets._openml._load_arff_response",
    "sklearn.datasets._openml._retry_on_network_error.decorator.wrapper",
    "sklearn.datasets._openml._retry_with_clean_cache.decorator.wrapper",
    "sklearn.datasets._openml._verify_target_data_type",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_circles",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.datasets._samples_generator.make_moons",
    "sklearn.datasets._svmlight_format_io._gen_open",
    "sklearn.datasets._svmlight_format_io.dump_svmlight_file",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized",
    "sklearn.datasets.tests.test_olivetti_faces.test_olivetti_faces",
    "sklearn.decomposition._nmf._beta_loss_to_float",
    "sklearn.decomposition._pca.PCA._fit_truncated",
    "sklearn.discriminant_analysis._cov",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._base._fit_single_estimator",
    "sklearn.ensemble._forest.ForestClassifier._validate_y_class_weight",
    "sklearn.ensemble._forest._get_n_samples_bootstrap",
    "sklearn.ensemble._gb.BaseGradientBoosting._check_params",
    "sklearn.ensemble._gb.BaseGradientBoosting.fit",
    "sklearn.ensemble._gb.GradientBoostingClassifier.predict_proba",
    "sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict_proba",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_interaction_cst",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.__init__",
    "sklearn.ensemble._iforest.IsolationForest.fit",
    "sklearn.ensemble._stacking.StackingClassifier.predict",
    "sklearn.ensemble._stacking.StackingClassifier.predict_proba",
    "sklearn.ensemble._stacking._BaseStacking._concatenate_predictions",
    "sklearn.ensemble._stacking._BaseStacking._method_name",
    "sklearn.ensemble._stacking._BaseStacking.n_features_in_",
    "sklearn.ensemble._voting.VotingClassifier.fit",
    "sklearn.ensemble._voting._BaseVoting.n_features_in_",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.feature_importances_",
    "sklearn.externals._arff.ArffDecoder._decode",
    "sklearn.externals._arff.ArffDecoder._decode_attribute",
    "sklearn.externals._arff.ArffDecoder.decode",
    "sklearn.externals._arff.ArffEncoder._encode_attribute",
    "sklearn.externals._arff.ArffEncoder.iter_encode",
    "sklearn.externals._arff.COOData.decode_rows",
    "sklearn.externals._arff.DenseGeneratorData._decode_values",
    "sklearn.externals._arff.DenseGeneratorData.decode_rows",
    "sklearn.externals._arff.LODGeneratorData.decode_rows",
    "sklearn.externals._arff._get_data_object_for_encoding",
    "sklearn.externals._packaging._structures.InfinityType.__eq__",
    "sklearn.externals._packaging._structures.InfinityType.__ne__",
    "sklearn.externals._packaging._structures.NegativeInfinityType.__eq__",
    "sklearn.externals._packaging._structures.NegativeInfinityType.__ne__",
    "sklearn.externals._packaging.version._BaseVersion.__eq__",
    "sklearn.externals._packaging.version._BaseVersion.__ge__",
    "sklearn.externals._packaging.version._BaseVersion.__gt__",
    "sklearn.externals._packaging.version._BaseVersion.__le__",
    "sklearn.externals._packaging.version._BaseVersion.__lt__",
    "sklearn.externals._packaging.version._BaseVersion.__ne__",
    "sklearn.externals._packaging.version._cmpkey",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._add_iterable_element",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._transform",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.get_feature_names_out",
    "sklearn.feature_extraction._hash.FeatureHasher.transform",
    "sklearn.feature_extraction.image._compute_n_patches",
    "sklearn.feature_extraction.image._extract_patches",
    "sklearn.feature_extraction.text.CountVectorizer.fit_transform",
    "sklearn.feature_extraction.text.CountVectorizer.transform",
    "sklearn.feature_extraction.text.HashingVectorizer.fit",
    "sklearn.feature_extraction.text.HashingVectorizer.transform",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.feature_extraction.text._VectorizerMixin.decode",
    "sklearn.feature_extraction.text._check_stop_list",
    "sklearn.feature_selection._base._get_feature_importances",
    "sklearn.feature_selection._from_model.SelectFromModel._get_support_mask",
    "sklearn.feature_selection._from_model.SelectFromModel.fit",
    "sklearn.feature_selection._from_model.SelectFromModel.n_features_in_",
    "sklearn.feature_selection._from_model.SelectFromModel.partial_fit",
    "sklearn.feature_selection._from_model._calculate_threshold",
    "sklearn.feature_selection._mutual_info._estimate_mi",
    "sklearn.feature_selection._rfe.RFE._fit",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector.fit",
    "sklearn.feature_selection._univariate_selection.SelectKBest._check_params",
    "sklearn.feature_selection._univariate_selection._BaseFilter.fit",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.gaussian_process.kernels.Hyperparameter.__new__",
    "sklearn.gaussian_process.kernels.Kernel.__add__",
    "sklearn.gaussian_process.kernels.Kernel.__mul__",
    "sklearn.gaussian_process.kernels.Kernel.__radd__",
    "sklearn.gaussian_process.kernels.Kernel.__rmul__",
    "sklearn.impute._base.SimpleImputer._validate_input",
    "sklearn.impute._base.SimpleImputer.fit",
    "sklearn.impute._base._check_inputs_dtype",
    "sklearn.inspection._partial_dependence._grid_from_X",
    "sklearn.inspection._partial_dependence._partial_dependence_brute",
    "sklearn.inspection._partial_dependence.partial_dependence",
    "sklearn.inspection._pd_utils._get_feature_index",
    "sklearn.inspection._permutation_importance._calculate_permutation_scores",
    "sklearn.inspection._permutation_importance.permutation_importance",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._get_sample_count",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.kernel_ridge.KernelRidge.fit",
    "sklearn.linear_model._base._pre_fit",
    "sklearn.linear_model._base._preprocess_data",
    "sklearn.linear_model._coordinate_descent.ElasticNet.fit",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._coordinate_descent.enet_path",
    "sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.inner_solve",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.linear_model._ridge._BaseRidgeCV.fit",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.linear_model._ridge._solve_cholesky_kernel",
    "sklearn.manifold._locally_linear.null_space",
    "sklearn.manifold._spectral_embedding.spectral_embedding",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.metrics._classification._check_targets",
    "sklearn.metrics._classification._check_zero_division",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_predictions",
    "sklearn.metrics._ranking.auc",
    "sklearn.metrics._regression._assemble_r2_explained_variance",
    "sklearn.metrics._regression._check_reg_targets",
    "sklearn.metrics._regression.d2_pinball_score",
    "sklearn.metrics._regression.mean_absolute_error",
    "sklearn.metrics._regression.mean_absolute_percentage_error",
    "sklearn.metrics._regression.mean_pinball_loss",
    "sklearn.metrics._regression.mean_squared_error",
    "sklearn.metrics._regression.median_absolute_error",
    "sklearn.metrics._scorer._MultimetricScorer.__call__",
    "sklearn.metrics._scorer._ThresholdScorer._score",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.metrics._scorer.check_scoring",
    "sklearn.metrics._scorer.get_scorer",
    "sklearn.metrics.cluster._supervised.mutual_info_score",
    "sklearn.metrics.pairwise._check_chunk_size",
    "sklearn.metrics.pairwise._return_float_dtype",
    "sklearn.metrics.pairwise.pairwise_kernels",
    "sklearn.model_selection._search.BaseSearchCV._check_refit_for_multimetric",
    "sklearn.model_selection._search.BaseSearchCV._select_best_index",
    "sklearn.model_selection._search.BaseSearchCV.fit",
    "sklearn.model_selection._search.BaseSearchCV.n_features_in_",
    "sklearn.model_selection._search.BaseSearchCV.score",
    "sklearn.model_selection._search.ParameterGrid.__init__",
    "sklearn.model_selection._search.ParameterSampler.__init__",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._check_input_parameters",
    "sklearn.model_selection._split._BaseKFold.__init__",
    "sklearn.model_selection._split._RepeatedSplits.__init__",
    "sklearn.model_selection._split._yields_constant_splits",
    "sklearn.model_selection._split.check_cv",
    "sklearn.model_selection._validation._aggregate_score_dicts",
    "sklearn.model_selection._validation._fit_and_predict",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._insert_error_scores",
    "sklearn.model_selection._validation._normalize_score_results",
    "sklearn.model_selection._validation._score",
    "sklearn.model_selection._validation.cross_val_predict",
    "sklearn.model_selection._validation.cross_validate",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.naive_bayes._BaseDiscreteNB._check_alpha",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors",
    "sklearn.neighbors._base.NeighborsBase._fit",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.fit",
    "sklearn.neighbors._graph.kneighbors_graph",
    "sklearn.neighbors._graph.radius_neighbors_graph",
    "sklearn.neighbors._kde.KernelDensity.fit",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._initialize",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.fit",
    "sklearn.pipeline.FeatureUnion.__getitem__",
    "sklearn.pipeline.Pipeline.__getitem__",
    "sklearn.pipeline._name_estimators",
    "sklearn.preprocessing._data._handle_zeros_in_scale",
    "sklearn.preprocessing._discretization.KBinsDiscretizer._validate_n_bins",
    "sklearn.preprocessing._encoders.OneHotEncoder._check_get_feature_name_combiner",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.preprocessing._encoders._BaseEncoder._identify_infrequent",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit_transform",
    "sklearn.preprocessing._label.label_binarize",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.fit",
    "sklearn.preprocessing._polynomial.SplineTransformer.fit",
    "sklearn.svm._base.BaseLibSVM.fit",
    "sklearn.tests.test_init.$toplevel",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._export._BaseTreeExporter.get_fill_color",
    "sklearn.tree._export._BaseTreeExporter.node_to_str",
    "sklearn.tree._export._DOTTreeExporter.export",
    "sklearn.tree._export._MPLTreeExporter.export",
    "sklearn.tree._export.export_graphviz",
    "sklearn.tree._export.export_text",
    "sklearn.tree._export.export_text._add_leaf",
    "sklearn.utils._array_api._NumPyAPIWrapper.reshape",
    "sklearn.utils._array_api._estimator_with_converted_arrays",
    "sklearn.utils._array_api._isdtype_single",
    "sklearn.utils._array_api.device",
    "sklearn.utils._array_api.isdtype",
    "sklearn.utils._array_indexing",
    "sklearn.utils._determine_key_type",
    "sklearn.utils._encode._encode",
    "sklearn.utils._estimator_html_repr._get_visual_block",
    "sklearn.utils._get_column_indices",
    "sklearn.utils._list_indexing",
    "sklearn.utils._metadata_requests.MetadataRouter.add",
    "sklearn.utils._metadata_requests.request_is_alias",
    "sklearn.utils._mocking.CheckingClassifier._check_X_y",
    "sklearn.utils._pandas_indexing",
    "sklearn.utils._param_validation.HasMethods.__init__",
    "sklearn.utils._param_validation.Interval.__str__",
    "sklearn.utils._param_validation.Interval._check_params",
    "sklearn.utils._param_validation.Interval.is_satisfied_by",
    "sklearn.utils._param_validation.Options.is_satisfied_by",
    "sklearn.utils._param_validation._Booleans.is_satisfied_by",
    "sklearn.utils._param_validation._InstancesOf.is_satisfied_by",
    "sklearn.utils._param_validation._IterablesNotString.is_satisfied_by",
    "sklearn.utils._param_validation._NanConstraint.is_satisfied_by",
    "sklearn.utils._param_validation._PandasNAConstraint.is_satisfied_by",
    "sklearn.utils._param_validation.generate_invalid_param_val",
    "sklearn.utils._param_validation.generate_valid_param",
    "sklearn.utils._param_validation.make_constraint",
    "sklearn.utils._param_validation.validate_params.decorator.wrapper",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._pprint_key_val_tuple",
    "sklearn.utils._pprint._changed_params.has_changed",
    "sklearn.utils._set_output._SetOutputMixin.__init_subclass__",
    "sklearn.utils._set_output._wrap_in_pandas_container",
    "sklearn.utils._set_output._wrap_method_output.wrapped",
    "sklearn.utils._testing._Raises.__init__",
    "sklearn.utils._testing._create_aligned_memmap_backed_arrays",
    "sklearn.utils._testing.assert_raise_message",
    "sklearn.utils._testing.assert_run_python_script",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils._testing.ignore_warnings",
    "sklearn.utils.check_matplotlib_support",
    "sklearn.utils.check_pandas_support",
    "sklearn.utils.class_weight.compute_sample_weight",
    "sklearn.utils.deprecation._is_deprecated",
    "sklearn.utils.deprecation.deprecated.__call__",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.estimator_checks._check_generated_dataframe",
    "sklearn.utils.estimator_checks._check_transformer",
    "sklearn.utils.estimator_checks._get_check_estimator_ids",
    "sklearn.utils.estimator_checks._maybe_skip",
    "sklearn.utils.estimator_checks._set_checking_parameters",
    "sklearn.utils.estimator_checks._should_be_skipped_or_marked",
    "sklearn.utils.estimator_checks._yield_all_checks",
    "sklearn.utils.estimator_checks.check_array_api_input",
    "sklearn.utils.estimator_checks.check_classifier_multioutput",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_decision_function",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.estimator_checks.check_classifiers_predictions",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_estimator",
    "sklearn.utils.estimator_checks.check_fit_check_is_fitted",
    "sklearn.utils.estimator_checks.check_global_ouptut_transform_pandas",
    "sklearn.utils.estimator_checks.check_outlier_contamination",
    "sklearn.utils.estimator_checks.check_param_validation",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.estimator_checks.check_requires_y_none",
    "sklearn.utils.estimator_checks.check_set_output_transform_pandas",
    "sklearn.utils.estimator_checks.check_set_params",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out_pandas",
    "sklearn.utils.estimator_checks.check_transformer_preserve_dtypes",
    "sklearn.utils.estimator_checks.parametrize_with_checks",
    "sklearn.utils.is_scalar_nan",
    "sklearn.utils.metaestimators._BaseComposition._set_params",
    "sklearn.utils.multiclass.is_multilabel",
    "sklearn.utils.multiclass.type_of_target",
    "sklearn.utils.multiclass.unique_labels",
    "sklearn.utils.sparsefuncs.inplace_swap_row_csc",
    "sklearn.utils.sparsefuncs.inplace_swap_row_csr",
    "sklearn.utils.tests.test_estimator_checks.EstimatorInconsistentForPandas.fit",
    "sklearn.utils.tests.test_estimator_checks.NoSampleWeightPandasSeriesType.fit",
    "sklearn.utils.tests.test_estimator_checks.OneClassSampleErrorClassifier.fit",
    "sklearn.utils.tosequence",
    "sklearn.utils.validation._check_estimator_name",
    "sklearn.utils.validation._check_monotonic_cst",
    "sklearn.utils.validation._check_response_method",
    "sklearn.utils.validation._check_sample_weight",
    "sklearn.utils.validation._ensure_sparse_format",
    "sklearn.utils.validation._is_fitted",
    "sklearn.utils.validation._is_pandas_df",
    "sklearn.utils.validation._num_features",
    "sklearn.utils.validation._num_samples",
    "sklearn.utils.validation._pandas_dtype_needs_early_conversion",
    "sklearn.utils.validation.as_float_array",
    "sklearn.utils.validation.check_array",
    "sklearn.utils.validation.check_array.is_sparse",
    "sklearn.utils.validation.check_memory",
    "sklearn.utils.validation.check_random_state",
    "sklearn.utils.validation.check_scalar",
    "traitlets.config.loader.Config.__setitem__",
    "traitlets.config.loader.Config._ensure_subconfig",
    "traitlets.traitlets.HasTraits.__init__",
    "traitlets.traitlets.HasTraits._notify_observers",
    "traitlets.traitlets.HasTraits.has_trait",
    "traitlets.traitlets.HasTraits.hold_trait_notifications",
    "traitlets.traitlets._CallbackWrapper.__init__",
    "traitlets.traitlets._callback_wrapper",
    "traitlets.traitlets._deprecated_method",
    "werkzeug.utils.import_string"
  ],
  "issubclass": [
    "click.types.convert_type",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.__init__",
    "jinja2.environment._environment_config_check",
    "pip._vendor.pyparsing.ParseElementEnhance.__init__",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit",
    "sklearn.utils._pprint._safe_repr",
    "sklearn.utils._testing._Raises.__exit__",
    "sklearn.utils._testing.ignore_warnings",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.estimator_checks._construct_instance"
  ],
  "iter": [
    "sklearn.cluster._birch.Birch._fit",
    "sklearn.datasets._openml._load_arff_response"
  ],
  "jinja2.async_utils.auto_aiter": [
    "jinja2.runtime.AsyncLoopContext._to_iterator"
  ],
  "jinja2.compiler.generate": [
    "jinja2.environment.Environment._generate"
  ],
  "jinja2.compiler.has_safe_repr": [
    "jinja2.compiler.has_safe_repr",
    "jinja2.nodes.Const.from_untrusted"
  ],
  "jinja2.debug.fake_traceback": [
    "jinja2.debug.rewrite_traceback_stack"
  ],
  "jinja2.debug.get_template_locals": [
    "jinja2.debug.fake_traceback"
  ],
  "jinja2.debug.rewrite_traceback_stack": [
    "jinja2.environment.Environment.handle_exception"
  ],
  "jinja2.environment._environment_config_check": [
    "jinja2.environment.Environment.__init__"
  ],
  "jinja2.environment.create_cache": [
    "jinja2.environment.Environment.__init__"
  ],
  "jinja2.environment.load_extensions": [
    "jinja2.environment.Environment.__init__"
  ],
  "jinja2.lexer._describe_token_type": [
    "jinja2.lexer.describe_token"
  ],
  "jinja2.lexer.compile_rules": [
    "jinja2.lexer.Lexer.__init__"
  ],
  "jinja2.lexer.describe_token": [
    "jinja2.parser.Parser.parse_primary",
    "jinja2.parser.Parser.parse_tuple"
  ],
  "jinja2.lexer.get_lexer": [
    "jinja2.environment.Environment.lexer"
  ],
  "jinja2.nodes.args_as_const": [
    "jinja2.nodes._FilterTestCommon.as_const"
  ],
  "jinja2.nodes.get_eval_context": [
    "jinja2.nodes.And.as_const",
    "jinja2.nodes.BinExpr.as_const",
    "jinja2.nodes.Compare.as_const",
    "jinja2.nodes.Concat.as_const",
    "jinja2.nodes.CondExpr.as_const",
    "jinja2.nodes.Dict.as_const",
    "jinja2.nodes.Getattr.as_const",
    "jinja2.nodes.Getitem.as_const",
    "jinja2.nodes.Keyword.as_const",
    "jinja2.nodes.List.as_const",
    "jinja2.nodes.MarkSafe.as_const",
    "jinja2.nodes.MarkSafeIfAutoescape.as_const",
    "jinja2.nodes.Or.as_const",
    "jinja2.nodes.Pair.as_const",
    "jinja2.nodes.Slice.as_const",
    "jinja2.nodes.TemplateData.as_const",
    "jinja2.nodes.Tuple.as_const",
    "jinja2.nodes.UnaryExpr.as_const",
    "jinja2.nodes._FilterTestCommon.as_const"
  ],
  "jinja2.runtime.new_context": [
    "jinja2.environment.Template.new_context"
  ],
  "jinja2.sandbox.is_internal_attribute": [
    "jinja2.sandbox.SandboxedEnvironment.is_safe_attribute"
  ],
  "jinja2.sandbox.modifies_known_mutable": [
    "jinja2.sandbox.ImmutableSandboxedEnvironment.is_safe_attribute"
  ],
  "jinja2.utils.import_string": [
    "jinja2.environment.load_extensions"
  ],
  "json.dump": [
    "benchmarks.bench_saga.exp",
    "benchmarks.bench_tsne_mnist.$toplevel"
  ],
  "json.load": [
    "benchmarks.bench_saga.plot"
  ],
  "json.loads": [
    "asv_benchmarks.benchmarks.common.get_from_config",
    "build_tools.circle.list_versions.json_urlread",
    "build_tools.update_environments_and_lock_files.check_conda_version",
    "build_tools.update_environments_and_lock_files.write_pip_lock_file",
    "sklearn.datasets._openml._get_json_content_from_openml_api._load_json"
  ],
  "len": [
    "benchmarks.bench_feature_expansions.$toplevel",
    "benchmarks.bench_hist_gradient_boosting.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_adult.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel",
    "benchmarks.bench_isolation_forest.print_outlier_ratio",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "benchmarks.bench_lasso.compute_bench",
    "benchmarks.bench_multilabel_metrics._plot",
    "benchmarks.bench_multilabel_metrics._tabulate",
    "benchmarks.bench_multilabel_metrics.benchmark",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_online_ocsvm.print_outlier_ratio",
    "benchmarks.bench_plot_fastkmeans.compute_bench",
    "benchmarks.bench_plot_fastkmeans.compute_bench_2",
    "benchmarks.bench_plot_hierarchical.compute_bench",
    "benchmarks.bench_plot_incremental_pca.variable_batch_size_comparison",
    "benchmarks.bench_plot_lasso_path.compute_bench",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_plot_nmf.plot_results",
    "benchmarks.bench_plot_nmf.run_bench",
    "benchmarks.bench_plot_omp_lars.compute_bench",
    "benchmarks.bench_plot_randomized_svd.bench_c",
    "benchmarks.bench_plot_svd.compute_bench",
    "benchmarks.bench_plot_ward.$toplevel",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_saga.plot",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "benchmarks.bench_sgd_regression.$toplevel",
    "benchmarks.bench_text_vectorizers.$toplevel",
    "build_tools.circle.list_versions.$toplevel",
    "build_tools.get_comment.find_lint_bot_comments",
    "build_tools.get_comment.get_step_message",
    "build_tools.github.check_wheels.$toplevel",
    "click._compat.term_len",
    "click.core.Argument._parse_decls",
    "click.core.Command.parse_args",
    "click.core.MultiCommand.format_commands",
    "click.core.Option._parse_decls",
    "click.core.Parameter.__init__",
    "click.core.Parameter.type_cast_value.convert",
    "click.exceptions.NoSuchOption.format_message",
    "click.formatting.HelpFormatter.write_dl",
    "click.formatting.iter_rows",
    "click.formatting.join_options",
    "click.parser.Argument.process",
    "click.parser.Option.__init__",
    "click.parser.OptionParser._get_value_from_state",
    "click.parser.OptionParser._match_short_opt",
    "click.parser.OptionParser._process_args_for_options",
    "click.parser._unpack_args",
    "click.shell_completion._is_incomplete_argument",
    "click.types.Choice.convert",
    "click.types.DateTime.convert",
    "click.types.Tuple.convert",
    "click.utils.make_default_short_help",
    "doc.conf.SKExampleTitleSortKey.__call__",
    "doc.conf.generate_min_dependency_table",
    "doc.sphinxext.add_toctree_functions.docutils_node_to_jinja",
    "doc.sphinxext.sphinx_issues.IssueRole.__call__",
    "doc.tutorial.machine_learning_map.pyparsing.And.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.CaselessKeyword.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Dict.postParse",
    "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.GoToColumn.preParse",
    "doc.tutorial.machine_learning_map.pyparsing.Keyword.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Keyword.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.LineEnd.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Literal.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Or.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.streamline",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__delitem__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__iadd__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__len__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.getName",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.pop",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._FifoCache.__init__.cache_len",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._FifoCache.__init__.set",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._UnboundedCache.__init__.cache_len",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._parseNoCache",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.preParse",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.resetCache",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.scanString",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.SkipTo.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.StringEnd.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.White.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__str__.charsAsStr",
    "doc.tutorial.machine_learning_map.pyparsing.Word.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.WordEnd.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.col",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock.checkPeerIndent",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock.checkUnindent",
    "doc.tutorial.machine_learning_map.pyparsing.infixNotation",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousLiteral.copyTokenToRepeater",
    "doc.tutorial.machine_learning_map.pyparsing.nestedExpr",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "doc.tutorial.machine_learning_map.pyparsing.traceParseAction.z",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "doc.tutorial.text_analytics.skeletons.exercise_02_sentiment.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_02_sentiment.$toplevel",
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel",
    "examples.applications.plot_model_complexity_influence.$toplevel",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_out_of_core_classification.get_minibatch",
    "examples.applications.plot_out_of_core_classification.iter_minibatches",
    "examples.applications.plot_prediction_latency.$toplevel",
    "examples.applications.plot_prediction_latency.plot_benchmark_throughput",
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution",
    "examples.applications.svm_gui.Controller.fit",
    "examples.applications.svm_gui.View.remove_surface",
    "examples.applications.svm_gui.View.update",
    "examples.applications.wikipedia_principal_eigenvector.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects",
    "examples.applications.wikipedia_principal_eigenvector.index",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.classification.plot_digits_classification.$toplevel",
    "examples.cluster.plot_adjusted_for_chance_measures.fixed_classes_uniform_labelings_scores",
    "examples.cluster.plot_adjusted_for_chance_measures.uniform_labelings_scores",
    "examples.cluster.plot_affinity_propagation.$toplevel",
    "examples.cluster.plot_agglomerative_dendrogram.plot_dendrogram",
    "examples.cluster.plot_bisect_kmeans.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.cluster.plot_dict_face_patches.$toplevel",
    "examples.cluster.plot_digits_agglomeration.$toplevel",
    "examples.cluster.plot_hdbscan.$toplevel",
    "examples.cluster.plot_hdbscan.plot",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.cluster.plot_mean_shift.$toplevel",
    "examples.cluster.plot_mini_batch_kmeans.$toplevel",
    "examples.cluster.plot_optics.$toplevel",
    "examples.compose.plot_column_transformer.subject_body_extractor",
    "examples.compose.plot_column_transformer.text_stats",
    "examples.compose.plot_compare_reduction.$toplevel",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "examples.decomposition.plot_pca_3d.$toplevel",
    "examples.decomposition.plot_sparse_coding.$toplevel",
    "examples.decomposition.plot_varimax_fa.$toplevel",
    "examples.ensemble.plot_adaboost_multiclass.$toplevel",
    "examples.ensemble.plot_bias_variance.$toplevel",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.ensemble.plot_gradient_boosting_categorical.$toplevel",
    "examples.ensemble.plot_gradient_boosting_early_stopping.$toplevel",
    "examples.exercises.plot_digits_classification_exercise.$toplevel",
    "examples.exercises.plot_iris_exercise.$toplevel",
    "examples.feature_selection.plot_rfe_digits.$toplevel",
    "examples.feature_selection.plot_rfe_with_cross_validation.$toplevel",
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.gaussian_process.plot_gpr_on_structured_data.$toplevel",
    "examples.impute.plot_missing_values.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "examples.linear_model.plot_omp.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss._mean_frequency_by_risk_group",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.lorenz_curve",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.score_estimator",
    "examples.manifold.plot_mds.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_isotonic_regression.$toplevel",
    "examples.miscellaneous.plot_johnson_lindenstrauss_bound.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.miscellaneous.plot_metadata_routing.ExampleClassifier.predict",
    "examples.miscellaneous.plot_metadata_routing.ExampleRegressor.predict",
    "examples.miscellaneous.plot_metadata_routing.check_metadata",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.$toplevel",
    "examples.mixture.plot_concentration_prior.$toplevel",
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.mixture.plot_gmm_init.$toplevel",
    "examples.model_selection.plot_cv_indices.plot_cv_indices",
    "examples.model_selection.plot_cv_indices.visualize_groups",
    "examples.model_selection.plot_grid_search_digits.$toplevel",
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "examples.model_selection.plot_grid_search_stats.corrected_std",
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel",
    "examples.model_selection.plot_randomized_search.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.model_selection.plot_successive_halving_heatmap.make_heatmap",
    "examples.model_selection.plot_underfitting_overfitting.$toplevel",
    "examples.multioutput.plot_classifier_chain_yeast.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.neighbors.plot_lof_outlier_detection.$toplevel",
    "examples.neighbors.plot_nca_dim_reduction.$toplevel",
    "examples.neighbors.plot_nca_illustration.$toplevel",
    "examples.neural_networks.plot_mlp_alpha.$toplevel",
    "examples.preprocessing.plot_discretization.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_discretization_strategies.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.eval_and_print_metrics",
    "examples.svm.plot_rbf_parameters.$toplevel",
    "examples.svm.plot_svm_regression.$toplevel",
    "examples.svm.plot_weighted_samples.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.load_dataset",
    "examples.text.plot_document_classification_20newsgroups.plot_feature_effects",
    "examples.text.plot_document_classification_20newsgroups.size_mb",
    "examples.text.plot_document_clustering.$toplevel",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "examples.text.plot_hashing_vs_dict_vectorizer.n_nonzero_columns",
    "examples.tree.plot_unveil_tree_structure.$toplevel",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.lexer.compile_rules",
    "jinja2.nodes.Node.__init__",
    "jinja2.parser.Parser.parse_concat",
    "jinja2.parser.Parser.parse_subscript",
    "jinja2.runtime.AsyncLoopContext.length",
    "jinja2.runtime.LoopContext.length",
    "maint_tools.sort_whats_new.$toplevel",
    "maint_tools.update_tracking_issue.create_or_update_issue",
    "parso.utils.PythonVersionInfo.__eq__",
    "parso.utils.PythonVersionInfo.__gt__",
    "pip._vendor.distlib.compat.OrderedDict.__eq__",
    "pip._vendor.distlib.compat.OrderedDict.__init__",
    "pip._vendor.distlib.compat.OrderedDict.update",
    "pip._vendor.pyparsing.GoToColumn.preParse",
    "pip._vendor.pyparsing.Literal.__init__",
    "pip._vendor.pyparsing.ParseExpression.streamline",
    "pip._vendor.pyparsing.ParserElement.preParse",
    "pip._vendor.pyparsing.ParserElement.resetCache",
    "pip._vendor.pyparsing.ParserElement.scanString",
    "pip._vendor.pyparsing.col",
    "pip._vendor.urllib3._collections.RecentlyUsedContainer.__setitem__",
    "sklearn._build_utils.openmp_helpers.check_openmp_support",
    "sklearn.base.BaseEstimator.__repr__",
    "sklearn.base.BaseEstimator._check_feature_names",
    "sklearn.base.BiclusterMixin.get_shape",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.calibration.CalibratedClassifierCV.predict_proba",
    "sklearn.calibration._CalibratedClassifier.predict_proba",
    "sklearn.calibration._fit_classifier_calibrator_pair",
    "sklearn.calibration.calibration_curve",
    "sklearn.cluster._agglomerative.AgglomerativeClustering._fit",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.cluster._birch.Birch._global_clustering",
    "sklearn.cluster._birch._CFNode.append_subcluster",
    "sklearn.cluster._birch._CFNode.insert_cf_subcluster",
    "sklearn.cluster._dbscan.DBSCAN.fit",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN._weighted_cluster_center",
    "sklearn.cluster._hdbscan.hdbscan.remap_single_linkage_tree",
    "sklearn.cluster._kmeans.KMeans.fit",
    "sklearn.cluster._mean_shift.MeanShift.fit",
    "sklearn.cluster._mean_shift._mean_shift_single_seed",
    "sklearn.cluster._mean_shift.estimate_bandwidth",
    "sklearn.cluster._mean_shift.get_bin_seeds",
    "sklearn.cluster._optics._extend_region",
    "sklearn.cluster._optics._extract_xi_labels",
    "sklearn.cluster._optics.cluster_optics_dbscan",
    "sklearn.cluster._optics.cluster_optics_xi",
    "sklearn.cluster._spectral.discretize",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.compose._column_transformer.ColumnTransformer._fit_transform",
    "sklearn.compose._column_transformer._is_empty_column_selection",
    "sklearn.covariance._empirical_covariance.EmpiricalCovariance.mahalanobis",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._robust_covariance.MinCovDet.correct_covariance",
    "sklearn.covariance._shrunk_covariance._ledoit_wolf",
    "sklearn.covariance._shrunk_covariance._oas",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf_shrinkage",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._arff_parser._post_process_frame",
    "sklearn.datasets._arff_parser._sparse_data_to_array",
    "sklearn.datasets._base.load_files",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._lfw._fetch_lfw_people",
    "sklearn.datasets._lfw._load_imgs",
    "sklearn.datasets._lfw.fetch_lfw_pairs",
    "sklearn.datasets._lfw.fetch_lfw_people",
    "sklearn.datasets._olivetti_faces.fetch_olivetti_faces",
    "sklearn.datasets._openml._get_data_info_by_name",
    "sklearn.datasets._openml._verify_target_data_type",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_circles",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.datasets._samples_generator.make_multilabel_classification",
    "sklearn.datasets._samples_generator.make_multilabel_classification.sample_example",
    "sklearn.datasets._svmlight_format_io.load_svmlight_files",
    "sklearn.datasets._twenty_newsgroups.strip_newsgroup_footer",
    "sklearn.datasets.tests.test_rcv1.test_fetch_rcv1",
    "sklearn.decomposition._base._BasePCA.get_covariance",
    "sklearn.decomposition._base._BasePCA.get_precision",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._initialize_dict",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning._update_dict",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.get_covariance",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.get_precision",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.transform",
    "sklearn.decomposition._nmf._initialize_nmf",
    "sklearn.decomposition._pca._assess_dimension",
    "sklearn.decomposition._sparse_pca.MiniBatchSparsePCA._fit",
    "sklearn.decomposition._sparse_pca.SparsePCA._fit",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis._decision_function",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit",
    "sklearn.dummy.DummyClassifier.score",
    "sklearn.dummy.DummyRegressor.fit",
    "sklearn.dummy.DummyRegressor.score",
    "sklearn.ensemble._bagging.BaggingClassifier._validate_y",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._bagging.BaseBagging._validate_y",
    "sklearn.ensemble._bagging._parallel_predict_log_proba",
    "sklearn.ensemble._bagging._parallel_predict_proba",
    "sklearn.ensemble._base.BaseEnsemble.__len__",
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble._validate_estimators",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._forest.ForestClassifier.predict_proba",
    "sklearn.ensemble._forest.ForestRegressor._compute_partial_dependence_recursion",
    "sklearn.ensemble._forest.ForestRegressor.predict",
    "sklearn.ensemble._forest._accumulate_prediction",
    "sklearn.ensemble._gb.BaseGradientBoosting._check_params",
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stages",
    "sklearn.ensemble._gb.BaseGradientBoosting._is_initialized",
    "sklearn.ensemble._gb.GradientBoostingClassifier._validate_y",
    "sklearn.ensemble._gb.VerboseReporter.init",
    "sklearn.ensemble._hist_gradient_boosting.binning._find_binning_thresholds",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_interaction_cst",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._is_fitted",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._print_iteration_stats",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._should_stop",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._staged_raw_predict",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.n_iter_",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._compute_interactions",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._finalize_splittable_nodes",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._intilialize_root",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.split_next",
    "sklearn.ensemble._iforest.IsolationForest._compute_score_samples",
    "sklearn.ensemble._stacking.StackingClassifier._validate_estimators",
    "sklearn.ensemble._stacking._BaseStacking._concatenate_predictions",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.ensemble._voting.VotingClassifier.fit",
    "sklearn.ensemble._voting.VotingClassifier.get_feature_names_out",
    "sklearn.ensemble._voting._BaseVoting.fit",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost_discrete",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost_real",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor._boost",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor.predict",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.feature_importances_",
    "sklearn.externals._arff.ArffEncoder.iter_encode",
    "sklearn.externals._arff.COOData.decode_rows",
    "sklearn.externals._arff.COOData.encode_data",
    "sklearn.externals._arff.DenseGeneratorData.decode_rows",
    "sklearn.externals._arff.DenseGeneratorData.encode_data",
    "sklearn.externals._arff.LODGeneratorData.encode_data",
    "sklearn.externals._arff._escape_sub_callback",
    "sklearn.externals._packaging.version.Version.major",
    "sklearn.externals._packaging.version.Version.micro",
    "sklearn.externals._packaging.version.Version.minor",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._add_iterable_element",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._transform",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.restrict",
    "sklearn.feature_extraction.image.PatchExtractor.transform",
    "sklearn.feature_extraction.image._mask_edges_weights",
    "sklearn.feature_extraction.text.CountVectorizer._count_vocab",
    "sklearn.feature_extraction.text.CountVectorizer._limit_features",
    "sklearn.feature_extraction.text.CountVectorizer._sort_features",
    "sklearn.feature_extraction.text.TfidfVectorizer.idf_@setter",
    "sklearn.feature_extraction.text._VectorizerMixin._char_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin._char_wb_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin._check_vocabulary",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.feature_extraction.text._VectorizerMixin._word_ngrams",
    "sklearn.feature_selection._base.SelectorMixin.inverse_transform",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.feature_selection._univariate_selection.SelectFdr._get_support_mask",
    "sklearn.feature_selection._univariate_selection.SelectFwe._get_support_mask",
    "sklearn.feature_selection._univariate_selection.SelectPercentile._get_support_mask",
    "sklearn.feature_selection._univariate_selection._chisquare",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.gaussian_process.kernels.CompoundKernel.__eq__",
    "sklearn.gaussian_process.kernels.Kernel.bounds",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.gaussian_process.kernels.Kernel.set_params",
    "sklearn.gaussian_process.kernels.Kernel.theta",
    "sklearn.gaussian_process.kernels.Kernel.theta@setter",
    "sklearn.gaussian_process.kernels.RBF.anisotropic",
    "sklearn.gaussian_process.kernels.RBF.hyperparameter_length_scale",
    "sklearn.gaussian_process.kernels.RationalQuadratic.__call__",
    "sklearn.gaussian_process.kernels._approx_fprime",
    "sklearn.impute._base.SimpleImputer._dense_fit",
    "sklearn.impute._base.SimpleImputer._sparse_fit",
    "sklearn.impute._base.SimpleImputer.inverse_transform",
    "sklearn.impute._base.SimpleImputer.transform",
    "sklearn.impute._iterative.IterativeImputer._get_ordered_idx",
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.impute._iterative.IterativeImputer.transform",
    "sklearn.impute._knn.KNNImputer.transform.process_chunk",
    "sklearn.inspection._partial_dependence._grid_from_X",
    "sklearn.inspection._partial_dependence.partial_dependence",
    "sklearn.inspection._pd_utils._check_feature_names",
    "sklearn.inspection._plot.decision_boundary._check_boundary_response_method",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_two_way_partial_dependence",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.isotonic.IsotonicRegression._build_f",
    "sklearn.isotonic.IsotonicRegression._build_y",
    "sklearn.isotonic.check_increasing",
    "sklearn.kernel_ridge.KernelRidge.fit",
    "sklearn.linear_model._base.LinearClassifierMixin.predict",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._coordinate_descent._alpha_grid",
    "sklearn.linear_model._coordinate_descent.enet_path",
    "sklearn.linear_model._least_angle.Lars.fit",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._omp._gram_omp",
    "sklearn.linear_model._omp.orthogonal_mp",
    "sklearn.linear_model._omp.orthogonal_mp_gram",
    "sklearn.linear_model._quantile.QuantileRegressor.fit",
    "sklearn.linear_model._ridge._BaseRidgeCV.fit",
    "sklearn.linear_model._ridge._RidgeGCV._diag_dot",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance_intercept",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance_no_intercept",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_gram",
    "sklearn.linear_model._ridge._RidgeGCV._solve_svd_design_matrix",
    "sklearn.linear_model._ridge._RidgeGCV.fit",
    "sklearn.linear_model._ridge._solve_cholesky",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit_multiclass",
    "sklearn.linear_model._stochastic_gradient.SGDClassifier.predict_proba",
    "sklearn.linear_model._stochastic_gradient._prepare_fit_binary",
    "sklearn.linear_model._stochastic_gradient.fit_binary",
    "sklearn.manifold._mds._smacof_single",
    "sklearn.metrics._classification._check_set_wise_labels",
    "sklearn.metrics._classification._check_targets",
    "sklearn.metrics._classification._prf_divide",
    "sklearn.metrics._classification.balanced_accuracy_score",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._classification.confusion_matrix",
    "sklearn.metrics._classification.log_loss",
    "sklearn.metrics._classification.multilabel_confusion_matrix",
    "sklearn.metrics._classification.precision_recall_fscore_support",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.plot",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_predictions",
    "sklearn.metrics._ranking._binary_roc_auc_score",
    "sklearn.metrics._ranking._multiclass_roc_auc_score",
    "sklearn.metrics._ranking._tie_averaged_dcg",
    "sklearn.metrics._ranking.average_precision_score",
    "sklearn.metrics._ranking.det_curve",
    "sklearn.metrics._ranking.label_ranking_loss",
    "sklearn.metrics._ranking.precision_recall_curve",
    "sklearn.metrics._ranking.roc_curve",
    "sklearn.metrics._ranking.top_k_accuracy_score",
    "sklearn.metrics._regression._check_reg_targets",
    "sklearn.metrics._regression.d2_pinball_score",
    "sklearn.metrics._scorer._MultimetricScorer._use_cache",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.metrics.cluster._bicluster.consensus_score",
    "sklearn.metrics.cluster._supervised.entropy",
    "sklearn.metrics.cluster._supervised.homogeneity_completeness_v_measure",
    "sklearn.metrics.cluster._unsupervised._silhouette_reduce",
    "sklearn.metrics.cluster._unsupervised.calinski_harabasz_score",
    "sklearn.metrics.cluster._unsupervised.davies_bouldin_score",
    "sklearn.metrics.cluster._unsupervised.silhouette_samples",
    "sklearn.metrics.pairwise.paired_distances",
    "sklearn.mixture._gaussian_mixture._estimate_gaussian_covariances_tied",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.model_selection._search.BaseSearchCV._select_best_index",
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._search.ParameterGrid.__getitem__",
    "sklearn.model_selection._search.ParameterGrid.__init__",
    "sklearn.model_selection._search.ParameterGrid.__len__",
    "sklearn.model_selection._search.ParameterSampler.__iter__",
    "sklearn.model_selection._search.ParameterSampler.__len__",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.model_selection._split.GroupKFold._iter_test_indices",
    "sklearn.model_selection._split.LeaveOneGroupOut._iter_test_masks",
    "sklearn.model_selection._split.LeaveOneGroupOut.get_n_splits",
    "sklearn.model_selection._split.LeavePGroupsOut._iter_test_masks",
    "sklearn.model_selection._split.LeavePGroupsOut.get_n_splits",
    "sklearn.model_selection._split.PredefinedSplit._iter_test_masks",
    "sklearn.model_selection._split.PredefinedSplit.get_n_splits",
    "sklearn.model_selection._split.PredefinedSplit.split",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.model_selection._split.StratifiedKFold._make_test_folds",
    "sklearn.model_selection._split._CVIterableWrapper.get_n_splits",
    "sklearn.model_selection._split._build_repr",
    "sklearn.model_selection._split._pprint",
    "sklearn.model_selection._split.train_test_split",
    "sklearn.model_selection._validation._check_is_permutation",
    "sklearn.model_selection._validation._enforce_prediction_order",
    "sklearn.model_selection._validation._fit_and_predict",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._shuffle",
    "sklearn.model_selection._validation._warn_or_raise_about_fit_failures",
    "sklearn.model_selection._validation.cross_val_predict",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.model_selection._validation.validation_curve",
    "sklearn.multiclass.OneVsOneClassifier.decision_function",
    "sklearn.multiclass.OneVsOneClassifier.fit",
    "sklearn.multiclass.OneVsOneClassifier.n_classes_",
    "sklearn.multiclass.OneVsOneClassifier.partial_fit",
    "sklearn.multiclass.OneVsRestClassifier.decision_function",
    "sklearn.multiclass.OneVsRestClassifier.n_classes_",
    "sklearn.multiclass.OneVsRestClassifier.partial_fit",
    "sklearn.multiclass.OneVsRestClassifier.predict",
    "sklearn.multiclass.OneVsRestClassifier.predict_proba",
    "sklearn.multiclass._fit_binary",
    "sklearn.multiclass._partial_fit_ovo_binary",
    "sklearn.multioutput.ClassifierChain.decision_function",
    "sklearn.multioutput.ClassifierChain.predict_proba",
    "sklearn.multioutput.MultiOutputClassifier.score",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.multioutput._BaseChain.predict",
    "sklearn.naive_bayes.ComplementNB._joint_log_likelihood",
    "sklearn.naive_bayes.GaussianNB._partial_fit",
    "sklearn.naive_bayes._BaseDiscreteNB._update_class_log_prior",
    "sklearn.naive_bayes._BaseDiscreteNB.fit",
    "sklearn.naive_bayes._BaseDiscreteNB.partial_fit",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.fit",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._initialize",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._loss_grad_lbfgs",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.fit",
    "sklearn.neighbors._regression.RadiusNeighborsRegressor.predict",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._initialize",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier._validate_input",
    "sklearn.pipeline.FeatureUnion._parallel_func",
    "sklearn.pipeline.Pipeline.__len__",
    "sklearn.pipeline.Pipeline._iter",
    "sklearn.pipeline.Pipeline._log_message",
    "sklearn.pipeline.Pipeline.fit",
    "sklearn.pipeline.Pipeline.fit_predict",
    "sklearn.pipeline.Pipeline.fit_transform",
    "sklearn.pipeline._name_estimators",
    "sklearn.preprocessing._data.PowerTransformer._check_input",
    "sklearn.preprocessing._data.QuantileTransformer._sparse_fit",
    "sklearn.preprocessing._data.RobustScaler.fit",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit",
    "sklearn.preprocessing._encoders.OneHotEncoder._compute_n_features_outs",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._encoders.OneHotEncoder.get_feature_names_out",
    "sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform",
    "sklearn.preprocessing._encoders.OneHotEncoder.transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.preprocessing._encoders._BaseEncoder._fit_infrequent_category_mapping",
    "sklearn.preprocessing._label.LabelEncoder.inverse_transform",
    "sklearn.preprocessing._label.MultiLabelBinarizer._build_cache",
    "sklearn.preprocessing._label.MultiLabelBinarizer._transform",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit_transform",
    "sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform",
    "sklearn.preprocessing._label._inverse_binarize_multiclass",
    "sklearn.preprocessing._label._inverse_binarize_thresholding",
    "sklearn.preprocessing._label.label_binarize",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.fit",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.get_feature_names_out",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform",
    "sklearn.preprocessing._target_encoder.TargetEncoder._fit_encodings_all",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.fit",
    "sklearn.svm._base.BaseLibSVM._decision_function",
    "sklearn.svm._base.BaseLibSVM._sparse_fit",
    "sklearn.svm._base.BaseLibSVM.fit",
    "sklearn.svm._base.BaseSVC._validate_targets",
    "sklearn.svm._base.BaseSVC.decision_function",
    "sklearn.svm._base.BaseSVC.predict",
    "sklearn.svm._base._fit_liblinear",
    "sklearn.svm._classes.LinearSVC.fit",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._export._BaseTreeExporter.get_color",
    "sklearn.tree._export._BaseTreeExporter.get_fill_color",
    "sklearn.tree._export._BaseTreeExporter.node_to_str",
    "sklearn.tree._export._DOTTreeExporter.export",
    "sklearn.tree._export._DOTTreeExporter.head",
    "sklearn.tree._export.export_text",
    "sklearn.tree._reingold_tilford.DrawTree.left",
    "sklearn.tree._reingold_tilford.DrawTree.right",
    "sklearn.tree._reingold_tilford.first_walk",
    "sklearn.utils._approximate_mode",
    "sklearn.utils._determine_key_type",
    "sklearn.utils._encode._check_unknown",
    "sklearn.utils._encode._extract_missing",
    "sklearn.utils._encode._get_counts",
    "sklearn.utils._encode._unique_np",
    "sklearn.utils._encode._unique_python",
    "sklearn.utils._estimator_html_repr._VisualBlock.__init__",
    "sklearn.utils._message_with_time",
    "sklearn.utils._metadata_requests.MetadataRequest._serialize",
    "sklearn.utils._metadata_requests._MetadataRequester.__init_subclass__",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils._mocking.CheckingClassifier.decision_function",
    "sklearn.utils._mocking.CheckingClassifier.predict_proba",
    "sklearn.utils._mocking.MockDataFrame.__len__",
    "sklearn.utils._param_validation.HasMethods.__str__",
    "sklearn.utils._param_validation.validate_parameter_constraints",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._format_items",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._format_params_or_dict_items",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._pprint_estimator",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._pprint_key_val_tuple",
    "sklearn.utils._pprint._safe_repr",
    "sklearn.utils._response._get_response_values",
    "sklearn.utils._response._get_response_values_binary",
    "sklearn.utils._show_versions.show_versions",
    "sklearn.utils._testing._get_args",
    "sklearn.utils._testing.assert_no_warnings",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils._to_object_array",
    "sklearn.utils.class_weight.compute_class_weight",
    "sklearn.utils.class_weight.compute_sample_weight",
    "sklearn.utils.discovery.all_estimators.is_abstract",
    "sklearn.utils.estimator_checks._construct_instance",
    "sklearn.utils.estimator_checks.check_class_weight_balanced_linear_classifier",
    "sklearn.utils.estimator_checks.check_class_weight_classifiers",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.estimator_checks.check_classifiers_predictions",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.estimator_checks.check_decision_proba_consistency",
    "sklearn.utils.estimator_checks.check_outlier_corruption",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.estimator_checks.check_regressors_int",
    "sklearn.utils.estimator_checks.check_regressors_train",
    "sklearn.utils.estimator_checks.check_sample_weights_invariance",
    "sklearn.utils.estimator_checks.check_sample_weights_shape",
    "sklearn.utils.estimator_checks.check_supervised_y_2d",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out_pandas",
    "sklearn.utils.extmath._nanaverage",
    "sklearn.utils.extmath.cartesian",
    "sklearn.utils.metaestimators._BaseComposition._validate_names",
    "sklearn.utils.multiclass.is_multilabel",
    "sklearn.utils.multiclass.type_of_target",
    "sklearn.utils.multiclass.unique_labels",
    "sklearn.utils.optimize._cg",
    "sklearn.utils.random._random_choice_csc",
    "sklearn.utils.resample",
    "sklearn.utils.sparsefuncs._get_median",
    "sklearn.utils.sparsefuncs._min_or_max_axis",
    "sklearn.utils.tests.test_estimator_checks.OneClassSampleErrorClassifier.fit",
    "sklearn.utils.tests.test_estimator_checks.UntaggedBinaryClassifier.fit",
    "sklearn.utils.tests.test_estimator_checks.UntaggedBinaryClassifier.partial_fit",
    "sklearn.utils.tests.test_fast_dict.test_int_float_dict",
    "sklearn.utils.tests.test_pprint.test_bruteforce_ellipsis",
    "sklearn.utils.validation._check_feature_names_in",
    "sklearn.utils.validation._check_monotonic_cst",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f",
    "sklearn.utils.validation._ensure_sparse_format",
    "sklearn.utils.validation._get_feature_names",
    "sklearn.utils.validation._is_fitted",
    "sklearn.utils.validation._num_features",
    "sklearn.utils.validation._num_samples",
    "sklearn.utils.validation.check_array",
    "sklearn.utils.validation.check_consistent_length",
    "sklearn.utils.validation.column_or_1d",
    "traitlets.traitlets._CallbackWrapper.__init__",
    "traitlets.utils.getargspec.getargspec"
  ],
  "locals": [
    "doc.sphinxext.sphinx_issues.IssueRole.make_node",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stages",
    "werkzeug.utils.import_string"
  ],
  "logging.basicConfig": [
    "examples.decomposition.plot_faces_decomposition.$toplevel"
  ],
  "logging.getLogger": [
    "build_tools.update_environments_and_lock_files.$toplevel",
    "sklearn.$toplevel",
    "sklearn.datasets._california_housing.$toplevel",
    "sklearn.datasets._covtype.$toplevel",
    "sklearn.datasets._kddcup99.$toplevel",
    "sklearn.datasets._lfw.$toplevel",
    "sklearn.datasets._rcv1.$toplevel",
    "sklearn.datasets._species_distributions.$toplevel",
    "sklearn.datasets._twenty_newsgroups.$toplevel"
  ],
  "maint_tools.sort_whats_new.entry_sort_key": [
    "maint_tools.sort_whats_new.$toplevel"
  ],
  "maint_tools.update_tracking_issue.close_issue_if_opened": [
    "maint_tools.update_tracking_issue.$toplevel"
  ],
  "maint_tools.update_tracking_issue.create_or_update_issue": [
    "maint_tools.update_tracking_issue.$toplevel"
  ],
  "maint_tools.update_tracking_issue.get_issue": [
    "maint_tools.update_tracking_issue.close_issue_if_opened",
    "maint_tools.update_tracking_issue.create_or_update_issue"
  ],
  "math.ceil": [
    "examples.miscellaneous.plot_outlier_detection_bench.$toplevel",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._get_sample_count",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.model_selection._split._validate_shuffle_split",
    "sklearn.tree._classes.BaseDecisionTree._fit"
  ],
  "math.factorial": [
    "examples.model_selection.plot_grid_search_stats.$toplevel"
  ],
  "math.floor": [
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.model_selection._split._validate_shuffle_split"
  ],
  "math.isnan": [
    "sklearn.utils._param_validation._NanConstraint.is_satisfied_by",
    "sklearn.utils.is_scalar_nan"
  ],
  "math.log": [
    "sklearn.calibration._sigmoid_calibration",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.score_samples",
    "sklearn.decomposition._pca.PCA.score_samples",
    "sklearn.decomposition._pca._assess_dimension",
    "sklearn.isotonic.check_increasing",
    "sklearn.linear_model._bayes.ARDRegression.fit",
    "sklearn.linear_model._bayes.BayesianRidge._log_marginal_likelihood",
    "sklearn.linear_model._least_angle.LassoLarsIC.fit",
    "sklearn.metrics.cluster._supervised.entropy",
    "sklearn.metrics.cluster._supervised.mutual_info_score",
    "sklearn.mixture._bayesian_mixture._log_wishart_norm",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search"
  ],
  "math.log10": [
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel"
  ],
  "math.prod": [
    "sklearn.utils._array_api.size"
  ],
  "math.sqrt": [
    "sklearn.cluster._birch._CFSubcluster.radius",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit",
    "sklearn.decomposition._nmf.norm",
    "sklearn.decomposition._pca.PCA.fit_transform",
    "sklearn.gaussian_process.kernels.Matern.__call__",
    "sklearn.isotonic.check_increasing",
    "sklearn.linear_model._omp._cholesky_omp",
    "sklearn.linear_model._omp._gram_omp"
  ],
  "math.tanh": [
    "sklearn.isotonic.check_increasing"
  ],
  "max": [
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "benchmarks.bench_lasso.compute_bench",
    "benchmarks.bench_multilabel_metrics._tabulate",
    "benchmarks.bench_plot_fastkmeans.$toplevel",
    "benchmarks.bench_plot_hierarchical.$toplevel",
    "benchmarks.bench_plot_lasso_path.$toplevel",
    "benchmarks.bench_plot_nmf._fit_projected_gradient",
    "benchmarks.bench_plot_omp_lars.$toplevel",
    "click.core.MultiCommand.format_commands",
    "click.formatting.HelpFormatter.__init__",
    "click.formatting.HelpFormatter.write_dl",
    "click.formatting.HelpFormatter.write_usage",
    "click.formatting.measure_table",
    "doc.conf.generate_min_dependency_table",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_prediction_latency.atomic_benchmark_estimator",
    "examples.applications.plot_prediction_latency.bulk_benchmark_estimator",
    "examples.applications.plot_prediction_latency.plot_benchmark_throughput",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.decomposition.plot_faces_decomposition.$toplevel",
    "examples.decomposition.plot_faces_decomposition.plot_gallery",
    "examples.ensemble.plot_adaboost_multiclass.$toplevel",
    "examples.linear_model.plot_nnls.$toplevel",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.miscellaneous.plot_johnson_lindenstrauss_bound.$toplevel",
    "examples.multioutput.plot_classifier_chain_yeast.$toplevel",
    "examples.neighbors.plot_caching_nearest_neighbors.$toplevel",
    "sklearn.cluster._agglomerative.AgglomerativeClustering._fit",
    "sklearn.cluster._agglomerative._hc_cut",
    "sklearn.cluster._birch._CFSubcluster.radius",
    "sklearn.cluster._hdbscan.hdbscan.remap_single_linkage_tree",
    "sklearn.cluster._mean_shift.MeanShift.fit",
    "sklearn.cluster._optics._update_filter_sdas",
    "sklearn.cluster._optics._xi_cluster",
    "sklearn.cluster._optics.cluster_optics_xi",
    "sklearn.cluster._optics.compute_optics_graph",
    "sklearn.compose._target.TransformedTargetRegressor._fit_transformer",
    "sklearn.conftest.pytest_configure",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._graph_lasso.graphical_lasso_path",
    "sklearn.covariance._robust_covariance.fast_mcd",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._arff_parser._sparse_data_to_array",
    "sklearn.datasets._svmlight_format_io.load_svmlight_files",
    "sklearn.decomposition._dict_learning._sparse_encode",
    "sklearn.decomposition._dict_learning._update_dict",
    "sklearn.decomposition._fastica._ica_def",
    "sklearn.decomposition._fastica._ica_par",
    "sklearn.decomposition._lda.LatentDirichletAllocation._e_step",
    "sklearn.decomposition._lda.LatentDirichletAllocation.fit",
    "sklearn.decomposition._lda.LatentDirichletAllocation.partial_fit",
    "sklearn.decomposition._nmf._beta_divergence",
    "sklearn.decomposition._nmf._special_sparse_dot",
    "sklearn.decomposition._pca.PCA._fit",
    "sklearn.decomposition._pca._assess_dimension",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._forest._get_n_samples_bootstrap",
    "sklearn.ensemble._gb.BaseGradientBoosting._check_params",
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stages",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._print_iteration_stats",
    "sklearn.ensemble._iforest.IsolationForest.fit",
    "sklearn.externals._arff.DenseGeneratorData.decode_rows",
    "sklearn.externals._arff.LODGeneratorData.encode_data",
    "sklearn.feature_selection._mutual_info._compute_mi_cc",
    "sklearn.feature_selection._mutual_info._compute_mi_cd",
    "sklearn.feature_selection._rfe.RFE._fit",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector._get_best_new_feature_score",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_one_way_partial_dependence",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.linear_model._base._check_precomputed_gram_matrix",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit",
    "sklearn.linear_model._least_angle.Lars._fit",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._least_angle._lars_path_residues",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuit.fit",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.fit",
    "sklearn.linear_model._omp.orthogonal_mp",
    "sklearn.linear_model._ransac._dynamic_max_trials",
    "sklearn.linear_model._ridge._RidgeGCV._eigen_decompose_covariance",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit_multiclass",
    "sklearn.linear_model._theil_sen.TheilSenRegressor._check_subparams",
    "sklearn.linear_model._theil_sen._lstsq",
    "sklearn.linear_model._theil_sen._modified_weiszfeld_step",
    "sklearn.linear_model.tests.test_huber.test_huber_sample_weights",
    "sklearn.manifold._mds.smacof",
    "sklearn.manifold._spectral_embedding.SpectralEmbedding._get_affinity_matrix",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.plot",
    "sklearn.metrics.cluster._bicluster.consensus_score",
    "sklearn.metrics.cluster._supervised._generalized_average",
    "sklearn.metrics.cluster._supervised.adjusted_mutual_info_score",
    "sklearn.metrics.pairwise._euclidean_distances_upcast",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.neighbors._lof.LocalOutlierFactor.fit",
    "sklearn.preprocessing._data.QuantileTransformer.fit",
    "sklearn.preprocessing._function_transformer.FunctionTransformer._check_inverse_transform",
    "sklearn.preprocessing._polynomial.PolynomialFeatures._combinations",
    "sklearn.preprocessing._polynomial.PolynomialFeatures._num_combinations",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform",
    "sklearn.preprocessing._polynomial._create_expansion",
    "sklearn.svm._base._fit_liblinear",
    "sklearn.svm._bounds.l1_min_c",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._export._MPLTreeExporter.export",
    "sklearn.tree._export._compute_depth",
    "sklearn.utils._testing.assert_allclose",
    "sklearn.utils.estimator_checks.check_fit_idempotent"
  ],
  "min": [
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "benchmarks.bench_plot_lasso_path.compute_bench",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_plot_randomized_svd.norm_diff",
    "click.formatting.HelpFormatter.__init__",
    "click.formatting.HelpFormatter.write_dl",
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.White.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Word.parseImpl",
    "examples.applications.plot_prediction_latency.atomic_benchmark_estimator",
    "examples.applications.plot_prediction_latency.bulk_benchmark_estimator",
    "examples.linear_model.plot_nnls.$toplevel",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.miscellaneous.plot_johnson_lindenstrauss_bound.$toplevel",
    "examples.multioutput.plot_classifier_chain_yeast.$toplevel",
    "sklearn.cluster._kmeans.MiniBatchKMeans._check_params_vs_input",
    "sklearn.cluster._kmeans.MiniBatchKMeans._mini_batch_convergence",
    "sklearn.covariance._robust_covariance.fast_mcd",
    "sklearn.covariance._shrunk_covariance._oas",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf_shrinkage",
    "sklearn.cross_decomposition._pls.PLSSVD.fit",
    "sklearn.cross_decomposition._pls._PLS.fit",
    "sklearn.datasets._samples_generator.make_low_rank_matrix",
    "sklearn.datasets._samples_generator.make_regression",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._check_convergence",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._check_params",
    "sklearn.decomposition._dict_learning._sparse_encode",
    "sklearn.decomposition._fastica.FastICA._fit_transform",
    "sklearn.decomposition._incremental_pca.IncrementalPCA.partial_fit",
    "sklearn.decomposition._kernel_pca.KernelPCA._fit_transform",
    "sklearn.decomposition._nmf.MiniBatchNMF._check_params",
    "sklearn.decomposition._nmf.MiniBatchNMF._minibatch_convergence",
    "sklearn.decomposition._nmf._initialize_nmf",
    "sklearn.decomposition._pca.PCA._fit",
    "sklearn.decomposition._pca.PCA._fit_full",
    "sklearn.decomposition._pca.PCA._fit_truncated",
    "sklearn.decomposition._truncated_svd.TruncatedSVD.fit_transform",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit",
    "sklearn.ensemble._base._partition_estimators",
    "sklearn.ensemble._iforest.IsolationForest.fit",
    "sklearn.feature_extraction.image.reconstruct_from_patches_2d",
    "sklearn.feature_extraction.text._VectorizerMixin._char_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin._word_ngrams",
    "sklearn.feature_selection._mutual_info._compute_mi_cd",
    "sklearn.feature_selection._rfe.RFE._fit",
    "sklearn.impute._base._most_frequent",
    "sklearn.impute._knn.KNNImputer.transform.process_chunk",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_one_way_partial_dependence",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.kernel_approximation.Nystroem.fit",
    "sklearn.linear_model._base._check_precomputed_gram_matrix",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.fit",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.linear_model._ridge._RidgeGCV._sparse_multidot_diag",
    "sklearn.linear_model._sag.get_auto_step_size",
    "sklearn.linear_model._theil_sen.TheilSenRegressor._check_subparams",
    "sklearn.linear_model._theil_sen._modified_weiszfeld_step",
    "sklearn.manifold._locally_linear.locally_linear_embedding",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.plot",
    "sklearn.metrics.cluster._supervised._generalized_average",
    "sklearn.metrics.cluster._supervised.adjusted_mutual_info_score",
    "sklearn.model_selection._search.ParameterSampler.__len__",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.neighbors._lof.LocalOutlierFactor.fit",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._initialize",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.preprocessing._data.QuantileTransformer.fit",
    "sklearn.preprocessing._polynomial.PolynomialFeatures._num_combinations",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.fit",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.tree._export._MPLTreeExporter.export",
    "sklearn.utils._approximate_mode",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.estimator_checks._set_checking_parameters",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.extmath.randomized_svd",
    "sklearn.utils.gen_even_slices",
    "sklearn.utils.get_chunk_n_rows",
    "sklearn.utils.multiclass.type_of_target",
    "sklearn.utils.optimize._check_optimize_result",
    "sklearn.utils.optimize._newton_cg",
    "sklearn.utils.tests.test_shortest_path.floyd_warshall_slow"
  ],
  "next": [
    "click.core.Parameter.__init__",
    "pip._vendor.pkg_resources._version_from_file"
  ],
  "object.__new__": [
    "traitlets.traitlets.HasDescriptors.__new__"
  ],
  "open": [
    "asv_benchmarks.benchmarks.common.get_from_config",
    "benchmarks.bench_plot_randomized_svd.unpickle",
    "benchmarks.bench_saga.exp",
    "benchmarks.bench_saga.plot",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "build_tools.generate_authors_table.$toplevel",
    "build_tools.get_comment.get_message",
    "build_tools.get_comment.get_versions",
    "build_tools.github.vendor.make_distributor_init_64_bits",
    "click._compat._wrap_io_open",
    "click.utils.LazyFile.__init__",
    "doc.conf.SubSectionTitleOrder.__call__",
    "doc.conf.filter_search_index",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseFile",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "doc.tutorial.text_analytics.data.movie_reviews.fetch_data.$toplevel",
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents",
    "examples.applications.wikipedia_principal_eigenvector.$toplevel",
    "maint_tools.check_pxd_in_installation.$toplevel",
    "setup.$toplevel",
    "sklearn._build_utils.gen_from_templates",
    "sklearn._build_utils.pre_build_helpers.compile_test_program",
    "sklearn.datasets._base._sha256",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._openml._open_openml_url",
    "sklearn.datasets._svmlight_format_io._gen_open",
    "sklearn.datasets._svmlight_format_io.dump_svmlight_file",
    "sklearn.datasets._twenty_newsgroups._download_20newsgroups",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.feature_extraction.text._VectorizerMixin.decode",
    "sklearn.tree._export.export_graphviz",
    "sklearn.utils._testing.assert_run_python_script"
  ],
  "ord": [
    "doc.tutorial.machine_learning_map.pyparsing.srange"
  ],
  "os.access": [
    "click._compat.open_stream",
    "click.types.Path.convert"
  ],
  "os.chdir": [
    "sklearn._build_utils.pre_build_helpers.compile_test_program"
  ],
  "os.chmod": [
    "click._compat.open_stream"
  ],
  "os.close": [
    "sklearn.utils._testing.assert_run_python_script"
  ],
  "os.cpu_count": [
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel"
  ],
  "os.fsdecode": [
    "click._compat.open_stream",
    "click.types.File.convert",
    "click.types.Path.coerce_path_result",
    "click.types.Path.convert"
  ],
  "os.fsencode": [
    "click.types.Path.coerce_path_result"
  ],
  "os.fspath": [
    "sklearn.datasets._svmlight_format_io._gen_open"
  ],
  "os.getenv": [
    "asv_benchmarks.benchmarks.common.get_from_config",
    "doc.conf.$toplevel",
    "sklearn._build_utils.openmp_helpers.check_openmp_support",
    "sklearn._build_utils.openmp_helpers.get_openmp_flag"
  ],
  "os.listdir": [
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel",
    "sklearn.__check_build.raise_build_error",
    "sklearn.datasets._base.load_files",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._lfw._fetch_lfw_people"
  ],
  "os.makedirs": [
    "benchmarks.bench_saga.$toplevel",
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel",
    "sklearn.datasets._base.get_data_home",
    "sklearn.datasets._california_housing.fetch_california_housing",
    "sklearn.datasets._covtype.fetch_covtype",
    "sklearn.datasets._kddcup99._mkdirp",
    "sklearn.datasets._lfw._check_fetch_lfw",
    "sklearn.datasets._olivetti_faces.fetch_olivetti_faces",
    "sklearn.datasets._openml._open_openml_url",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._species_distributions.fetch_species_distributions",
    "sklearn.datasets._twenty_newsgroups._download_20newsgroups"
  ],
  "os.mkdir": [
    "benchmarks.bench_tsne_mnist.$toplevel",
    "build_tools.github.vendor.main",
    "sklearn._build_utils.pre_build_helpers.compile_test_program"
  ],
  "os.open": [
    "click._compat.open_stream"
  ],
  "os.remove": [
    "sklearn.datasets._california_housing.fetch_california_housing",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._lfw._check_fetch_lfw",
    "sklearn.datasets._olivetti_faces.fetch_olivetti_faces",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._species_distributions.fetch_species_distributions",
    "sklearn.datasets._twenty_newsgroups._download_20newsgroups"
  ],
  "os.rename": [
    "sklearn.datasets._covtype.fetch_covtype"
  ],
  "os.stat": [
    "click._compat.open_stream",
    "click.types.Path.convert",
    "sklearn._build_utils.gen_from_templates"
  ],
  "os.unlink": [
    "setup.CleanCommand.run",
    "sklearn.datasets._openml._open_openml_url",
    "sklearn.datasets._openml._retry_with_clean_cache.decorator.wrapper",
    "sklearn.utils._testing.assert_run_python_script"
  ],
  "os.walk": [
    "setup.CleanCommand.run"
  ],
  "packaging.version._cmpkey": [
    "packaging.version.Version.__init__"
  ],
  "packaging.version._parse_letter_version": [
    "packaging.version.Version.__init__"
  ],
  "packaging.version._parse_local_version": [
    "packaging.version.Version.__init__"
  ],
  "pdb.set_trace": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setBreak.breaker"
  ],
  "pickle.dump": [
    "asv_benchmarks.benchmarks.common.Estimator.setup_cache"
  ],
  "pickle.dumps": [
    "sklearn.datasets._twenty_newsgroups._download_20newsgroups",
    "sklearn.utils.estimator_checks.check_estimators_pickle",
    "sklearn.utils.estimator_checks.check_sparsify_coefficients"
  ],
  "pickle.load": [
    "asv_benchmarks.benchmarks.common.Estimator.setup",
    "asv_benchmarks.benchmarks.common.Predictor.track_same_prediction",
    "asv_benchmarks.benchmarks.common.Transformer.track_same_transform",
    "benchmarks.bench_plot_randomized_svd.unpickle"
  ],
  "pickle.loads": [
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.utils.estimator_checks.check_estimators_pickle",
    "sklearn.utils.estimator_checks.check_sparsify_coefficients"
  ],
  "pip._vendor.packaging.version._cmpkey": [
    "pip._vendor.packaging.version.Version.__init__"
  ],
  "pip._vendor.packaging.version._parse_letter_version": [
    "pip._vendor.packaging.version.Version.__init__"
  ],
  "pip._vendor.packaging.version._parse_local_version": [
    "pip._vendor.packaging.version.Version.__init__"
  ],
  "pip._vendor.pkg_resources._version_from_file": [
    "pip._vendor.pkg_resources.Distribution._get_version"
  ],
  "pip._vendor.pkg_resources.safe_version": [
    "pip._vendor.pkg_resources._version_from_file"
  ],
  "pip._vendor.pyparsing._flatten": [
    "pip._vendor.pyparsing.ParserElement.transformString",
    "pip._vendor.pyparsing._flatten"
  ],
  "pip._vendor.pyparsing._trim_arity": [
    "pip._vendor.pyparsing.ParserElement.setParseAction"
  ],
  "pip._vendor.pyparsing._ustr": [
    "pip._vendor.pyparsing.Literal.__init__",
    "pip._vendor.pyparsing.ParseBaseException.__repr__",
    "pip._vendor.pyparsing.ParseExpression.streamline",
    "pip._vendor.pyparsing.ParserElement.__repr__",
    "pip._vendor.pyparsing.ParserElement.scanString",
    "pip._vendor.pyparsing.ParserElement.transformString",
    "pip._vendor.pyparsing.Regex.__init__"
  ],
  "pip._vendor.pyparsing.col": [
    "pip._vendor.pyparsing.GoToColumn.preParse"
  ],
  "pip._vendor.requests.cookies.create_cookie": [
    "pip._vendor.requests.cookies.RequestsCookieJar.set",
    "pip._vendor.requests.cookies.morsel_to_cookie"
  ],
  "pip._vendor.requests.cookies.morsel_to_cookie": [
    "pip._vendor.requests.cookies.RequestsCookieJar.set"
  ],
  "pip._vendor.requests.cookies.remove_cookie_by_name": [
    "pip._vendor.requests.cookies.RequestsCookieJar.set"
  ],
  "pip._vendor.six.raise_from": [
    "pip._vendor.tenacity.BaseRetrying.iter"
  ],
  "pip._vendor.tenacity._utils.capture": [
    "pip._vendor.tenacity.RetryCallState.set_exception"
  ],
  "pip._vendor.tenacity._utils.visible_attrs": [
    "pip._vendor.tenacity.BaseRetrying.__repr__"
  ],
  "pkgutil.walk_packages": [
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.discovery.all_functions"
  ],
  "platform.machine": [
    "sklearn.base._UnstableArchMixin._more_tags",
    "sklearn.conftest.pytest_collection_modifyitems"
  ],
  "platform.platform": [
    "sklearn.utils._show_versions._get_sys_info"
  ],
  "platform.python_implementation": [
    "setup.configure_extension_modules",
    "sklearn._min_dependencies.$toplevel",
    "sklearn.utils.$toplevel"
  ],
  "platform.python_version": [
    "setup.setup_package"
  ],
  "posixpath.abspath": [
    "build_tools.generate_authors_table.$toplevel",
    "doc.conf.$toplevel",
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel",
    "setup.CleanCommand.run",
    "sklearn._build_utils.pre_build_helpers.compile_test_program"
  ],
  "posixpath.basename": [
    "benchmarks.bench_tsne_mnist.$toplevel",
    "build_tools.github.vendor.main",
    "click.utils._detect_program_name",
    "doc.conf.SubSectionTitleOrder.__call__",
    "doc.conftest.skip_if_cupy_not_installed",
    "doc.conftest.skip_if_matplotlib_not_installed",
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel",
    "setup.configure_extension_modules"
  ],
  "posixpath.dirname": [
    "benchmarks.bench_hist_gradient_boosting_higgsboson.$toplevel",
    "click._compat.open_stream",
    "doc.sphinxext.github_link._linkcode_resolve",
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel",
    "setup.CleanCommand.run",
    "sklearn.utils._testing.assert_run_python_script"
  ],
  "posixpath.expanduser": [
    "click.utils._expand_args",
    "sklearn.datasets._base.get_data_home"
  ],
  "posixpath.expandvars": [
    "click.utils._expand_args"
  ],
  "posixpath.join": [
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.load_data",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "benchmarks.plot_tsne_mnist.$toplevel",
    "build_tools.github.vendor.$toplevel",
    "build_tools.github.vendor.main",
    "click._compat.open_stream",
    "doc.conf.$toplevel",
    "doc.conf.SubSectionTitleOrder.__call__",
    "doc.conf.filter_search_index",
    "doc.conf.make_carousel_thumbs",
    "doc.conftest.setup_labeled_faces",
    "doc.conftest.setup_rcv1",
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel",
    "setup.$toplevel",
    "setup.CleanCommand.run",
    "setup.configure_extension_modules",
    "sklearn._build_utils.pre_build_helpers.compile_test_program",
    "sklearn.datasets._base._fetch_remote",
    "sklearn.datasets._base._pkl_filepath",
    "sklearn.datasets._base.get_data_home",
    "sklearn.datasets._base.load_files",
    "sklearn.datasets._covtype.fetch_covtype",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._lfw._check_fetch_lfw",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._lfw._fetch_lfw_people",
    "sklearn.datasets._lfw.fetch_lfw_pairs",
    "sklearn.datasets._openml._get_local_path",
    "sklearn.datasets._openml._open_openml_url",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._twenty_newsgroups._download_20newsgroups",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.utils._testing._create_aligned_memmap_backed_arrays",
    "sklearn.utils._testing.assert_run_python_script",
    "sklearn.utils._testing.create_memmap_backed_data"
  ],
  "posixpath.normpath": [
    "doc.conf.SubSectionTitleOrder.__call__",
    "sklearn.utils._testing.assert_run_python_script"
  ],
  "posixpath.realpath": [
    "click._compat.open_stream"
  ],
  "posixpath.relpath": [
    "doc.sphinxext.github_link._linkcode_resolve"
  ],
  "posixpath.split": [
    "sklearn.__check_build.raise_build_error",
    "sklearn.datasets._openml._open_openml_url"
  ],
  "posixpath.splitext": [
    "benchmarks.bench_tsne_mnist.$toplevel",
    "click.utils._detect_program_name",
    "setup.CleanCommand.run",
    "setup.configure_extension_modules",
    "sklearn.datasets._base._pkl_filepath",
    "sklearn.datasets._base.load_files",
    "sklearn.datasets._svmlight_format_io._gen_open"
  ],
  "pprint.pformat": [
    "sklearn.utils._testing.check_docstring_parameters"
  ],
  "pprint.pprint": [
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.pprint",
    "examples.applications.wikipedia_principal_eigenvector.$toplevel",
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.miscellaneous.plot_metadata_routing.print_routing",
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel"
  ],
  "print": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_covertype.load_data",
    "benchmarks.bench_feature_expansions.$toplevel",
    "benchmarks.bench_glm.$toplevel",
    "benchmarks.bench_glmnet.$toplevel",
    "benchmarks.bench_glmnet.bench",
    "benchmarks.bench_hist_gradient_boosting.one_run",
    "benchmarks.bench_hist_gradient_boosting_adult.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_adult.fit",
    "benchmarks.bench_hist_gradient_boosting_adult.predict",
    "benchmarks.bench_hist_gradient_boosting_categorical_only.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_categorical_only.fit",
    "benchmarks.bench_hist_gradient_boosting_categorical_only.predict",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.fit",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.load_data",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.predict",
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_threading.one_run",
    "benchmarks.bench_isolation_forest.$toplevel",
    "benchmarks.bench_isolation_forest.print_outlier_ratio",
    "benchmarks.bench_isotonic.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "benchmarks.bench_lasso.compute_bench",
    "benchmarks.bench_lof.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_mnist.load_data",
    "benchmarks.bench_multilabel_metrics.$toplevel",
    "benchmarks.bench_multilabel_metrics._tabulate",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_online_ocsvm.print_outlier_ratio",
    "benchmarks.bench_plot_fastkmeans.compute_bench",
    "benchmarks.bench_plot_fastkmeans.compute_bench_2",
    "benchmarks.bench_plot_hierarchical.compute_bench",
    "benchmarks.bench_plot_incremental_pca.benchmark",
    "benchmarks.bench_plot_lasso_path.compute_bench",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_plot_nmf.load_20news",
    "benchmarks.bench_plot_nmf.load_faces",
    "benchmarks.bench_plot_nmf.run_bench",
    "benchmarks.bench_plot_omp_lars.compute_bench",
    "benchmarks.bench_plot_randomized_svd.$toplevel",
    "benchmarks.bench_plot_randomized_svd.bench_a",
    "benchmarks.bench_plot_randomized_svd.bench_b",
    "benchmarks.bench_plot_randomized_svd.bench_c",
    "benchmarks.bench_plot_randomized_svd.get_data",
    "benchmarks.bench_plot_randomized_svd.handle_missing_dataset",
    "benchmarks.bench_plot_randomized_svd.norm_diff",
    "benchmarks.bench_plot_randomized_svd.scalable_frobenius_norm_discrepancy",
    "benchmarks.bench_plot_randomized_svd.svd_timing",
    "benchmarks.bench_plot_svd.compute_bench",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_random_projections.print_row",
    "benchmarks.bench_rcv1_logreg_convergence.$toplevel",
    "benchmarks.bench_rcv1_logreg_convergence.bench",
    "benchmarks.bench_rcv1_logreg_convergence.get_loss",
    "benchmarks.bench_saga.fit_single",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "benchmarks.bench_sgd_regression.$toplevel",
    "benchmarks.bench_sparsify.$toplevel",
    "benchmarks.bench_sparsify.score",
    "benchmarks.bench_text_vectorizers.$toplevel",
    "benchmarks.bench_tree.$toplevel",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "benchmarks.bench_tsne_mnist.load_data",
    "build_tools.azure.get_commit_message.$toplevel",
    "build_tools.azure.get_selected_tests.$toplevel",
    "build_tools.circle.list_versions.$toplevel",
    "build_tools.circle.list_versions.json_urlread",
    "build_tools.generate_authors_table.$toplevel",
    "build_tools.generate_authors_table.get",
    "build_tools.generate_authors_table.get_profile",
    "build_tools.get_comment.$toplevel",
    "build_tools.get_comment.create_or_update_comment",
    "build_tools.github.check_wheels.$toplevel",
    "build_tools.github.vendor.main",
    "doc.conf.filter_search_index",
    "doc.conf.make_carousel_thumbs",
    "doc.sphinxext.github_link._get_git_revision",
    "doc.tutorial.machine_learning_map.parse_path.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.runTests",
    "doc.tutorial.machine_learning_map.pyparsing._defaultExceptionDebugAction",
    "doc.tutorial.machine_learning_map.pyparsing._defaultStartDebugAction",
    "doc.tutorial.machine_learning_map.pyparsing._defaultSuccessDebugAction",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "doc.tutorial.text_analytics.data.movie_reviews.fetch_data.$toplevel",
    "doc.tutorial.text_analytics.skeletons.exercise_01_language_train_model.$toplevel",
    "doc.tutorial.text_analytics.skeletons.exercise_02_sentiment.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_01_language_train_model.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_02_sentiment.$toplevel",
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel",
    "examples.applications.plot_cyclical_feature_engineering.evaluate",
    "examples.applications.plot_face_recognition.$toplevel",
    "examples.applications.plot_model_complexity_influence.benchmark_influence",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents",
    "examples.applications.plot_prediction_latency.atomic_benchmark_estimator",
    "examples.applications.plot_prediction_latency.benchmark",
    "examples.applications.plot_prediction_latency.bulk_benchmark_estimator",
    "examples.applications.plot_prediction_latency.generate_dataset",
    "examples.applications.plot_prediction_latency.n_feature_influence",
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.applications.plot_topics_extraction_with_nmf_lda.$toplevel",
    "examples.applications.svm_gui.Controller.fit",
    "examples.applications.wikipedia_principal_eigenvector.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.centrality_scores",
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.bicluster.plot_spectral_biclustering.$toplevel",
    "examples.bicluster.plot_spectral_coclustering.$toplevel",
    "examples.calibration.plot_calibration.$toplevel",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.classification.plot_digits_classification.$toplevel",
    "examples.cluster.plot_affinity_propagation.$toplevel",
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel",
    "examples.cluster.plot_bisect_kmeans.$toplevel",
    "examples.cluster.plot_coin_segmentation.$toplevel",
    "examples.cluster.plot_coin_ward_segmentation.$toplevel",
    "examples.cluster.plot_color_quantization.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.cluster.plot_dict_face_patches.$toplevel",
    "examples.cluster.plot_digits_linkage.$toplevel",
    "examples.cluster.plot_face_compress.$toplevel",
    "examples.cluster.plot_kmeans_digits.$toplevel",
    "examples.cluster.plot_kmeans_digits.bench_k_means",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.$toplevel",
    "examples.cluster.plot_mean_shift.$toplevel",
    "examples.cluster.plot_ward_structured_vs_unstructured.$toplevel",
    "examples.compose.plot_column_transformer.$toplevel",
    "examples.compose.plot_column_transformer_mixed_types.$toplevel",
    "examples.compose.plot_digits_pipe.$toplevel",
    "examples.compose.plot_feature_union.$toplevel",
    "examples.compose.plot_transformed_target.$toplevel",
    "examples.covariance.plot_mahalanobis_distances.$toplevel",
    "examples.cross_decomposition.plot_compare_cross_decomposition.$toplevel",
    "examples.cross_decomposition.plot_pcr_vs_pls.$toplevel",
    "examples.datasets.plot_random_multilabel_dataset.$toplevel",
    "examples.decomposition.plot_faces_decomposition.$toplevel",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "examples.decomposition.plot_pca_vs_fa_model_selection.$toplevel",
    "examples.decomposition.plot_pca_vs_lda.$toplevel",
    "examples.decomposition.plot_varimax_fa.$toplevel",
    "examples.ensemble.plot_bias_variance.$toplevel",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.ensemble.plot_forest_importances.$toplevel",
    "examples.ensemble.plot_forest_importances_faces.$toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.ensemble.plot_gradient_boosting_categorical.$toplevel",
    "examples.ensemble.plot_gradient_boosting_oob.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regression.$toplevel",
    "examples.exercises.plot_cv_diabetes.$toplevel",
    "examples.exercises.plot_digits_classification_exercise.$toplevel",
    "examples.feature_selection.plot_feature_selection.$toplevel",
    "examples.feature_selection.plot_feature_selection_pipeline.$toplevel",
    "examples.feature_selection.plot_rfe_with_cross_validation.$toplevel",
    "examples.feature_selection.plot_select_from_model_diabetes.$toplevel",
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.gaussian_process.plot_gpc.$toplevel",
    "examples.gaussian_process.plot_gpc_isoprobability.$toplevel",
    "examples.gaussian_process.plot_gpr_co2.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.$toplevel",
    "examples.inspection.plot_causal_interpretation.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.linear_model.plot_lasso_and_elasticnet.$toplevel",
    "examples.linear_model.plot_lasso_coordinate_descent_path.$toplevel",
    "examples.linear_model.plot_lasso_dense_vs_sparse_data.$toplevel",
    "examples.linear_model.plot_lasso_lars.$toplevel",
    "examples.linear_model.plot_logistic_l1_l2_sparsity.$toplevel",
    "examples.linear_model.plot_logistic_multinomial.$toplevel",
    "examples.linear_model.plot_nnls.$toplevel",
    "examples.linear_model.plot_ols.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.score_estimator",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.linear_model.plot_ransac.$toplevel",
    "examples.linear_model.plot_sgd_comparison.$toplevel",
    "examples.linear_model.plot_sgd_early_stopping.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_20newsgroups.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_mnist.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.manifold.plot_manifold_sphere.$toplevel",
    "examples.manifold.plot_t_sne_perplexity.$toplevel",
    "examples.miscellaneous.plot_estimator_representation.$toplevel",
    "examples.miscellaneous.plot_johnson_lindenstrauss_bound.$toplevel",
    "examples.miscellaneous.plot_kernel_ridge_regression.$toplevel",
    "examples.miscellaneous.plot_metadata_routing.$toplevel",
    "examples.miscellaneous.plot_metadata_routing.check_metadata",
    "examples.miscellaneous.plot_outlier_detection_bench.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.compute_prediction",
    "examples.miscellaneous.plot_outlier_detection_bench.preprocess_dataset",
    "examples.miscellaneous.plot_set_output.$toplevel",
    "examples.mixture.plot_gmm_init.$toplevel",
    "examples.model_selection.plot_confusion_matrix.$toplevel",
    "examples.model_selection.plot_grid_search_digits.$toplevel",
    "examples.model_selection.plot_grid_search_digits.print_dataframe",
    "examples.model_selection.plot_grid_search_digits.refit_strategy",
    "examples.model_selection.plot_grid_search_refit_callable.$toplevel",
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.model_selection.plot_nested_cross_validation_iris.$toplevel",
    "examples.model_selection.plot_randomized_search.$toplevel",
    "examples.model_selection.plot_randomized_search.report",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.model_selection.plot_train_error_vs_test_error.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.neighbors.plot_digits_kde_sampling.$toplevel",
    "examples.neighbors.plot_nearest_centroid.$toplevel",
    "examples.neighbors.plot_species_kde.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.plot_on_dataset",
    "examples.neural_networks.plot_mnist_filters.$toplevel",
    "examples.neural_networks.plot_rbm_logistic_classification.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_scaling_importance.$toplevel",
    "examples.preprocessing.plot_target_encoder_cross_val.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.eval_and_print_metrics",
    "examples.svm.plot_rbf_parameters.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.benchmark",
    "examples.text.plot_document_classification_20newsgroups.load_dataset",
    "examples.text.plot_document_classification_20newsgroups.plot_feature_effects",
    "examples.text.plot_document_clustering.$toplevel",
    "examples.text.plot_document_clustering.fit_and_evaluate",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "examples.tree.plot_cost_complexity_pruning.$toplevel",
    "examples.tree.plot_unveil_tree_structure.$toplevel",
    "maint_tools.check_pxd_in_installation.$toplevel",
    "maint_tools.sort_whats_new.$toplevel",
    "maint_tools.update_tracking_issue.$toplevel",
    "maint_tools.update_tracking_issue.close_issue_if_opened",
    "maint_tools.update_tracking_issue.create_or_update_issue",
    "setup.CleanCommand.run",
    "setup.build_ext_subclass.finalize_options",
    "sklearn._min_dependencies.$toplevel",
    "sklearn.cluster._affinity_propagation._affinity_propagation",
    "sklearn.cluster._bisect_k_means.BisectingKMeans._bisect",
    "sklearn.cluster._kmeans.KMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans._mini_batch_convergence",
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans._kmeans_single_elkan",
    "sklearn.cluster._kmeans._kmeans_single_lloyd",
    "sklearn.cluster._kmeans._mini_batch_step",
    "sklearn.cluster._spectral.SpectralClustering.fit",
    "sklearn.cluster._spectral.discretize",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.covariance._graph_lasso.graphical_lasso_path",
    "sklearn.covariance._robust_covariance._c_step",
    "sklearn.datasets._olivetti_faces.fetch_olivetti_faces",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._check_convergence",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning._update_dict",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._lda.LatentDirichletAllocation.fit",
    "sklearn.decomposition._nmf.MiniBatchNMF._minibatch_convergence",
    "sklearn.decomposition._nmf._fit_coordinate_descent",
    "sklearn.decomposition._nmf._fit_multiplicative_update",
    "sklearn.ensemble._bagging._parallel_build_estimators",
    "sklearn.ensemble._forest._parallel_build_trees",
    "sklearn.ensemble._gb.VerboseReporter.init",
    "sklearn.ensemble._gb.VerboseReporter.update",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._bin_data",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._print_iteration_stats",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.feature_selection._rfe.RFE._fit",
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.impute._iterative.IterativeImputer.transform",
    "sklearn.linear_model._bayes.ARDRegression.fit",
    "sklearn.linear_model._bayes.BayesianRidge.fit",
    "sklearn.linear_model._coordinate_descent.enet_path",
    "sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.inner_solve",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.check_convergence",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.line_search",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.solve",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._theil_sen.TheilSenRegressor.fit",
    "sklearn.manifold._mds._smacof_single",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.manifold._t_sne.TSNE._tsne",
    "sklearn.manifold._t_sne._gradient_descent",
    "sklearn.manifold._t_sne._joint_probabilities_nn",
    "sklearn.mixture._base.BaseMixture._print_verbose_msg_init_beg",
    "sklearn.mixture._base.BaseMixture._print_verbose_msg_init_end",
    "sklearn.mixture._base.BaseMixture._print_verbose_msg_iter_end",
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._initialize",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._loss_grad_lbfgs",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._update_no_improvement_count",
    "sklearn.neural_network._rbm.BernoulliRBM.fit",
    "sklearn.neural_network._stochastic_optimizers.BaseOptimizer.trigger_stopping",
    "sklearn.neural_network._stochastic_optimizers.SGDOptimizer.trigger_stopping",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.fit",
    "sklearn.setup_module",
    "sklearn.svm._base.BaseLibSVM.fit",
    "sklearn.svm._base._fit_liblinear",
    "sklearn.utils._print_elapsed_time",
    "sklearn.utils._show_versions.show_versions"
  ],
  "prompt_toolkit.layout.utils.explode_text_fragments": [
    "prompt_toolkit.layout.utils._ExplodedList.__setitem__",
    "prompt_toolkit.layout.utils._ExplodedList.extend"
  ],
  "re.compile": [
    "build_tools.circle.list_versions.$toplevel",
    "doc.conf.SubSectionTitleOrder.__init__",
    "doc.sphinxext.sphinx_issues.IssueRole.$class_toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.$class_toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__init__",
    "importlib_metadata._text.FoldedCase.split",
    "jinja2.lexer.Lexer.__init__.c",
    "pip._vendor.pyparsing.Regex.__init__",
    "sklearn.datasets._arff_parser._pandas_arff_parser",
    "sklearn.datasets._twenty_newsgroups.$toplevel",
    "sklearn.externals._arff.$toplevel",
    "sklearn.externals._arff._build_re_values",
    "sklearn.externals._packaging.version.$toplevel",
    "sklearn.externals._packaging.version.Version.$class_toplevel",
    "sklearn.feature_extraction.text._VectorizerMixin.$class_toplevel",
    "sklearn.feature_extraction.text._VectorizerMixin.build_tokenizer",
    "sklearn.feature_extraction.text.strip_tags"
  ],
  "re.escape": [
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "importlib_metadata._text.FoldedCase.split",
    "jinja2.lexer.Lexer.__init__",
    "jinja2.lexer.compile_rules",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency"
  ],
  "re.findall": [
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "examples.text.plot_hashing_vs_dict_vectorizer.tokenize",
    "maint_tools.sort_whats_new.$toplevel"
  ],
  "re.match": [
    "build_tools.update_environments_and_lock_files.get_package_with_constraint",
    "sklearn.base.BaseEstimator.__repr__"
  ],
  "re.search": [
    "build_tools.update_environments_and_lock_files.main",
    "click.shell_completion.BashComplete._check_version",
    "sklearn.datasets._arff_parser._pandas_arff_parser.strip_single_quotes",
    "sklearn.utils._testing._Raises.__exit__"
  ],
  "re.split": [
    "maint_tools.sort_whats_new.$toplevel"
  ],
  "re.sub": [
    "click.shell_completion.ShellComplete.func_name",
    "doc.conf.filter_search_index",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.parseImpl",
    "examples.applications.plot_out_of_core_classification.ReutersParser.end_reuters",
    "pip._vendor.pkg_resources.safe_version",
    "sklearn.externals._arff.ArffDecoder._decode_comment",
    "sklearn.externals._arff._unquote",
    "sklearn.utils._param_validation.validate_params.decorator.wrapper",
    "sklearn.utils.estimator_checks._get_check_estimator_ids",
    "sklearn.utils.tests.test_pprint.test_gridsearch_pipeline"
  ],
  "repr": [
    "click.types.Choice.convert",
    "click.types.DateTime.convert",
    "pip._vendor.distlib.compat.ChainMap.__repr__"
  ],
  "requests.api.get": [
    "build_tools.generate_authors_table.get",
    "build_tools.get_comment.find_lint_bot_comments"
  ],
  "requests.api.patch": [
    "build_tools.get_comment.create_or_update_comment"
  ],
  "requests.api.post": [
    "build_tools.get_comment.create_or_update_comment"
  ],
  "round": [
    "examples.preprocessing.plot_map_data_to_normal.$toplevel",
    "sklearn.ensemble._forest._get_n_samples_bootstrap",
    "sklearn.tree._export._BaseTreeExporter.get_color",
    "sklearn.tree._export._BaseTreeExporter.node_to_str"
  ],
  "setattr": [
    "benchmarks.bench_multilabel_metrics.$toplevel",
    "jinja2.nodes.Node.__init__",
    "jinja2.visitor.NodeTransformer.generic_visit",
    "sklearn.base.BaseEstimator.set_params",
    "sklearn.experimental.enable_halving_search_cv.$toplevel",
    "sklearn.experimental.enable_iterative_imputer.$toplevel",
    "sklearn.gaussian_process.kernels.Kernel.set_params",
    "sklearn.model_selection._split.$toplevel",
    "sklearn.utils._array_api._estimator_with_converted_arrays",
    "sklearn.utils._metadata_requests.MetadataRequest.__init__",
    "sklearn.utils._metadata_requests._MetadataRequester.__init_subclass__",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils._param_validation.validate_params.decorator",
    "sklearn.utils._set_output._SetOutputMixin.__init_subclass__",
    "sklearn.utils._testing.MinimalClassifier.set_params",
    "sklearn.utils._testing.MinimalRegressor.set_params",
    "sklearn.utils._testing.MinimalTransformer.set_params",
    "sklearn.utils.metaestimators._BaseComposition._replace_estimator",
    "sklearn.utils.metaestimators._BaseComposition._set_params",
    "traitlets.config.loader.Config._ensure_subconfig",
    "traitlets.traitlets.HasTraits.__init__"
  ],
  "setup.check_package_status": [
    "setup.setup_package"
  ],
  "setup.configure_extension_modules": [
    "setup.setup_package"
  ],
  "setup.setup_package": [
    "setup.$toplevel"
  ],
  "setuptools.setup": [
    "setup.setup_package"
  ],
  "shlex.split": [
    "build_tools.update_environments_and_lock_files.conda_lock",
    "build_tools.update_environments_and_lock_files.pip_compile",
    "build_tools.update_environments_and_lock_files.write_pip_lock_file"
  ],
  "shutil.copy2": [
    "build_tools.github.vendor.main"
  ],
  "shutil.copyfileobj": [
    "sklearn.datasets._openml._open_openml_url"
  ],
  "shutil.get_terminal_size": [
    "click.formatting.HelpFormatter.__init__"
  ],
  "shutil.move": [
    "sklearn.datasets._openml._open_openml_url"
  ],
  "sklearn.__check_build.raise_build_error": [
    "sklearn.__check_build.$toplevel"
  ],
  "sklearn._build_utils._check_cython_version": [
    "setup.setup_package",
    "sklearn._build_utils.cythonize_extensions"
  ],
  "sklearn._build_utils.cythonize_extensions": [
    "setup.configure_extension_modules"
  ],
  "sklearn._build_utils.gen_from_templates": [
    "setup.configure_extension_modules"
  ],
  "sklearn._build_utils.openmp_helpers.check_openmp_support": [
    "sklearn._build_utils.cythonize_extensions"
  ],
  "sklearn._build_utils.openmp_helpers.get_openmp_flag": [
    "setup.build_ext_subclass.build_extensions",
    "sklearn._build_utils.openmp_helpers.check_openmp_support"
  ],
  "sklearn._build_utils.pre_build_helpers.basic_check_build": [
    "sklearn._build_utils.cythonize_extensions"
  ],
  "sklearn._build_utils.pre_build_helpers.compile_test_program": [
    "sklearn._build_utils.openmp_helpers.check_openmp_support",
    "sklearn._build_utils.pre_build_helpers.basic_check_build"
  ],
  "sklearn._config._get_threadlocal_config": [
    "sklearn._config.get_config",
    "sklearn._config.set_config"
  ],
  "sklearn._config.config_context": [
    "examples.miscellaneous.plot_set_output.$toplevel",
    "sklearn.base._fit_context.decorator.wrapper",
    "sklearn.cluster._affinity_propagation.AffinityPropagation.predict",
    "sklearn.cluster._birch.Birch._predict",
    "sklearn.cluster._birch.Birch.transform",
    "sklearn.cluster._mean_shift.MeanShift.predict",
    "sklearn.covariance._empirical_covariance.EmpiricalCovariance.mahalanobis",
    "sklearn.decomposition._nmf.MiniBatchNMF.fit_transform",
    "sklearn.decomposition._nmf.NMF.fit_transform",
    "sklearn.decomposition._nmf.NMF.transform",
    "sklearn.decomposition._nmf.non_negative_factorization",
    "sklearn.metrics.pairwise.pairwise_distances_argmin",
    "sklearn.metrics.pairwise.pairwise_distances_argmin_min",
    "sklearn.utils._estimator_html_repr._write_estimator_html",
    "sklearn.utils._param_validation.validate_params.decorator.wrapper",
    "sklearn.utils.estimator_checks._get_check_estimator_ids",
    "sklearn.utils.estimator_checks.check_array_api_input",
    "sklearn.utils.estimator_checks.check_global_ouptut_transform_pandas",
    "sklearn.utils.parallel._FuncWrapper.__call__",
    "sklearn.utils.tests.test_estimator_checks.test_check_no_attributes_set_in_init",
    "sklearn.utils.tests.test_pprint.test_complexity_print_changed_only",
    "sklearn.utils.tests.test_pprint.test_kwargs_in_init"
  ],
  "sklearn._config.get_config": [
    "doc.conf.$toplevel",
    "sklearn._config.config_context",
    "sklearn.base.BaseEstimator._repr_html_",
    "sklearn.base.BaseEstimator._repr_mimebundle_",
    "sklearn.base._fit_context.decorator.wrapper",
    "sklearn.metrics._pairwise_distances_reduction._dispatcher.BaseDistancesReductionDispatcher.is_usable_for",
    "sklearn.utils._array_api.get_namespace",
    "sklearn.utils._metadata_requests._routing_enabled",
    "sklearn.utils._param_validation.validate_params.decorator.wrapper",
    "sklearn.utils._pprint._EstimatorPrettyPrinter.__init__",
    "sklearn.utils._set_output._get_output_config",
    "sklearn.utils.get_chunk_n_rows",
    "sklearn.utils.parallel.Parallel.__call__",
    "sklearn.utils.tests.test_estimator_checks.BrokenArrayAPI.predict",
    "sklearn.utils.validation._assert_all_finite"
  ],
  "sklearn._config.set_config": [
    "doc.conf.reset_sklearn_config",
    "examples.miscellaneous.plot_metadata_routing.$toplevel",
    "examples.miscellaneous.plot_pipeline_display.$toplevel",
    "examples.miscellaneous.plot_set_output.$toplevel",
    "examples.preprocessing.plot_target_encoder_cross_val.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "sklearn._config.config_context",
    "sklearn.utils.tests.conftest.print_changed_only_false"
  ],
  "sklearn.base._clone_parametrized": [
    "sklearn.base.BaseEstimator.__sklearn_clone__",
    "sklearn.base.clone"
  ],
  "sklearn.base.clone": [
    "benchmarks.bench_hist_gradient_boosting_threading.one_run",
    "benchmarks.bench_random_projections.bench_scikit_transformer",
    "examples.cluster.plot_inductive_clustering.InductiveClusterer.fit",
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.gaussian_process.plot_gpr_on_structured_data.SequenceKernel.clone_with_theta",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.miscellaneous.plot_metadata_routing.MetaClassifier.fit",
    "examples.miscellaneous.plot_metadata_routing.MetaRegressor.fit",
    "examples.miscellaneous.plot_metadata_routing.RouterConsumerClassifier.fit",
    "examples.miscellaneous.plot_metadata_routing.SimplePipeline.fit",
    "examples.miscellaneous.plot_metadata_routing.WeightedMetaRegressor.fit",
    "examples.neural_networks.plot_rbm_logistic_classification.$toplevel",
    "sklearn.base._clone_parametrized",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.compose._column_transformer.ColumnTransformer._fit_transform",
    "sklearn.compose._target.TransformedTargetRegressor._fit_transformer",
    "sklearn.compose._target.TransformedTargetRegressor.fit",
    "sklearn.ensemble._base.BaseEnsemble._make_estimator",
    "sklearn.ensemble._stacking._BaseStacking._clone_final_estimator",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.ensemble._voting._BaseVoting.fit",
    "sklearn.feature_selection._from_model.SelectFromModel.fit",
    "sklearn.feature_selection._from_model.SelectFromModel.partial_fit",
    "sklearn.feature_selection._rfe.RFE._fit",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector.fit",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.gaussian_process.kernels.Kernel.clone_with_theta",
    "sklearn.gaussian_process.tests._mini_sequence_kernel.MiniSeqKernel.clone_with_theta",
    "sklearn.impute._iterative.IterativeImputer._impute_one_feature",
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.linear_model._stochastic_gradient._ValidationScoreCallback.__init__",
    "sklearn.model_selection._search.BaseSearchCV.fit",
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation.cross_val_predict",
    "sklearn.model_selection._validation.cross_validate",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.model_selection._validation.permutation_test_score",
    "sklearn.model_selection._validation.validation_curve",
    "sklearn.multiclass.OneVsOneClassifier.partial_fit",
    "sklearn.multiclass.OneVsRestClassifier.partial_fit",
    "sklearn.multiclass._fit_binary",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.multioutput._fit_estimator",
    "sklearn.multioutput._partial_fit_estimator",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_kneighbors_regressor",
    "sklearn.pipeline.Pipeline._fit",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.fit",
    "sklearn.tree._classes.BaseDecisionTree.cost_complexity_pruning_path",
    "sklearn.utils._array_api._estimator_with_converted_arrays",
    "sklearn.utils.estimator_checks._check_transformer",
    "sklearn.utils.estimator_checks.check_array_api_input",
    "sklearn.utils.estimator_checks.check_class_weight_balanced_classifiers",
    "sklearn.utils.estimator_checks.check_class_weight_classifiers",
    "sklearn.utils.estimator_checks.check_classifier_multioutput",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_decision_function",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_representation_invariance",
    "sklearn.utils.estimator_checks.check_classifiers_one_label",
    "sklearn.utils.estimator_checks.check_classifiers_one_label_sample_weights",
    "sklearn.utils.estimator_checks.check_classifiers_predictions",
    "sklearn.utils.estimator_checks.check_classifiers_regression_target",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.estimator_checks.check_clusterer_compute_labels_predict",
    "sklearn.utils.estimator_checks.check_clustering",
    "sklearn.utils.estimator_checks.check_complex_data",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_decision_proba_consistency",
    "sklearn.utils.estimator_checks.check_dict_unchanged",
    "sklearn.utils.estimator_checks.check_dont_overwrite_parameters",
    "sklearn.utils.estimator_checks.check_dtype_object",
    "sklearn.utils.estimator_checks.check_estimator_get_tags_default_keys",
    "sklearn.utils.estimator_checks.check_estimator_sparse_data",
    "sklearn.utils.estimator_checks.check_estimators_data_not_an_array",
    "sklearn.utils.estimator_checks.check_estimators_dtypes",
    "sklearn.utils.estimator_checks.check_estimators_empty_data_messages",
    "sklearn.utils.estimator_checks.check_estimators_fit_returns_self",
    "sklearn.utils.estimator_checks.check_estimators_nan_inf",
    "sklearn.utils.estimator_checks.check_estimators_overwrite_params",
    "sklearn.utils.estimator_checks.check_estimators_partial_fit_n_features",
    "sklearn.utils.estimator_checks.check_estimators_pickle",
    "sklearn.utils.estimator_checks.check_estimators_unfitted",
    "sklearn.utils.estimator_checks.check_fit1d",
    "sklearn.utils.estimator_checks.check_fit2d_1feature",
    "sklearn.utils.estimator_checks.check_fit2d_1sample",
    "sklearn.utils.estimator_checks.check_fit2d_predict1d",
    "sklearn.utils.estimator_checks.check_fit_check_is_fitted",
    "sklearn.utils.estimator_checks.check_fit_idempotent",
    "sklearn.utils.estimator_checks.check_fit_non_negative",
    "sklearn.utils.estimator_checks.check_fit_score_takes_y",
    "sklearn.utils.estimator_checks.check_get_feature_names_out_error",
    "sklearn.utils.estimator_checks.check_get_params_invariance",
    "sklearn.utils.estimator_checks.check_global_ouptut_transform_pandas",
    "sklearn.utils.estimator_checks.check_methods_sample_order_invariance",
    "sklearn.utils.estimator_checks.check_methods_subset_invariance",
    "sklearn.utils.estimator_checks.check_n_features_in",
    "sklearn.utils.estimator_checks.check_n_features_in_after_fitting",
    "sklearn.utils.estimator_checks.check_no_attributes_set_in_init",
    "sklearn.utils.estimator_checks.check_non_transformer_estimators_n_iter",
    "sklearn.utils.estimator_checks.check_nonsquare_error",
    "sklearn.utils.estimator_checks.check_outliers_fit_predict",
    "sklearn.utils.estimator_checks.check_outliers_train",
    "sklearn.utils.estimator_checks.check_param_validation",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.estimator_checks.check_pipeline_consistency",
    "sklearn.utils.estimator_checks.check_regressor_multioutput",
    "sklearn.utils.estimator_checks.check_regressors_int",
    "sklearn.utils.estimator_checks.check_regressors_no_decision_function",
    "sklearn.utils.estimator_checks.check_regressors_train",
    "sklearn.utils.estimator_checks.check_requires_y_none",
    "sklearn.utils.estimator_checks.check_sample_weights_invariance",
    "sklearn.utils.estimator_checks.check_sample_weights_list",
    "sklearn.utils.estimator_checks.check_sample_weights_not_an_array",
    "sklearn.utils.estimator_checks.check_sample_weights_not_overwritten",
    "sklearn.utils.estimator_checks.check_sample_weights_pandas_series",
    "sklearn.utils.estimator_checks.check_sample_weights_shape",
    "sklearn.utils.estimator_checks.check_set_output_transform",
    "sklearn.utils.estimator_checks.check_set_output_transform_pandas",
    "sklearn.utils.estimator_checks.check_set_params",
    "sklearn.utils.estimator_checks.check_sparsify_coefficients",
    "sklearn.utils.estimator_checks.check_supervised_y_2d",
    "sklearn.utils.estimator_checks.check_supervised_y_no_nan",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out_pandas",
    "sklearn.utils.estimator_checks.check_transformer_n_iter",
    "sklearn.utils.estimator_checks.check_transformer_preserve_dtypes",
    "sklearn.utils.estimator_checks.check_transformers_unfitted",
    "sklearn.utils.estimator_checks.check_transformers_unfitted_stateless"
  ],
  "sklearn.base.is_classifier": [
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble._validate_estimators",
    "sklearn.ensemble._forest.BaseForest._compute_oob_predictions",
    "sklearn.ensemble._gb.BaseGradientBoosting._check_params",
    "sklearn.ensemble._gb.BaseGradientBoosting.fit",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_early_stopping_scorer",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._get_small_trainset",
    "sklearn.ensemble._stacking.StackingClassifier._validate_final_estimator",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector.fit",
    "sklearn.inspection._partial_dependence._partial_dependence_brute",
    "sklearn.inspection._partial_dependence.partial_dependence",
    "sklearn.linear_model._ridge._BaseRidgeCV.fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGD._make_validation_split",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.from_estimator",
    "sklearn.model_selection._search.BaseSearchCV.fit",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._check_input_parameters",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.fit",
    "sklearn.model_selection._validation.cross_val_predict",
    "sklearn.model_selection._validation.cross_validate",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.model_selection._validation.permutation_test_score",
    "sklearn.model_selection._validation.validation_curve",
    "sklearn.multiclass._threshold_for_binary_predict",
    "sklearn.multioutput._MultiOutputEstimator.fit",
    "sklearn.neighbors._base.NeighborsBase._fit",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._initialize",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._classes.BaseDecisionTree._prune_tree",
    "sklearn.tree._classes.BaseDecisionTree.predict",
    "sklearn.tree._export.export_text",
    "sklearn.utils._response._get_response_values",
    "sklearn.utils._response._get_response_values_binary",
    "sklearn.utils.estimator_checks._yield_all_checks",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_estimators_partial_fit_n_features",
    "sklearn.utils.estimator_checks.check_n_features_in_after_fitting"
  ],
  "sklearn.base.is_outlier_detector": [
    "sklearn.utils.estimator_checks._yield_all_checks"
  ],
  "sklearn.base.is_regressor": [
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble._validate_estimators",
    "sklearn.ensemble._stacking.StackingRegressor._validate_final_estimator",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.fit",
    "sklearn.inspection._partial_dependence._partial_dependence_brute",
    "sklearn.inspection._partial_dependence.partial_dependence",
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.metrics._scorer._MultimetricScorer._use_cache",
    "sklearn.metrics._scorer._ThresholdScorer._score",
    "sklearn.multiclass._predict_binary",
    "sklearn.utils.estimator_checks._yield_all_checks",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_fit_check_is_fitted",
    "sklearn.utils.estimator_checks.check_fit_idempotent",
    "sklearn.utils.estimator_checks.check_n_features_in",
    "sklearn.utils.estimator_checks.check_n_features_in_after_fitting"
  ],
  "sklearn.calibration._compute_predictions": [
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.calibration._CalibratedClassifier.predict_proba",
    "sklearn.calibration._fit_classifier_calibrator_pair"
  ],
  "sklearn.calibration._fit_calibrator": [
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.calibration._fit_classifier_calibrator_pair"
  ],
  "sklearn.calibration._fit_classifier_calibrator_pair": [
    "sklearn.calibration.CalibratedClassifierCV.fit"
  ],
  "sklearn.calibration._get_prediction_method": [
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.calibration._CalibratedClassifier.predict_proba",
    "sklearn.calibration._fit_classifier_calibrator_pair"
  ],
  "sklearn.calibration._sigmoid_calibration": [
    "sklearn.calibration._SigmoidCalibration.fit"
  ],
  "sklearn.calibration.calibration_curve": [
    "sklearn.calibration.CalibrationDisplay.from_predictions"
  ],
  "sklearn.cluster._affinity_propagation._affinity_propagation": [
    "sklearn.cluster._affinity_propagation.AffinityPropagation.fit"
  ],
  "sklearn.cluster._affinity_propagation._equal_similarities_and_preferences": [
    "sklearn.cluster._affinity_propagation._affinity_propagation"
  ],
  "sklearn.cluster._agglomerative._average_linkage": [
    "sklearn.cluster._agglomerative.$toplevel"
  ],
  "sklearn.cluster._agglomerative._complete_linkage": [
    "sklearn.cluster._agglomerative.$toplevel"
  ],
  "sklearn.cluster._agglomerative._fix_connectivity": [
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree"
  ],
  "sklearn.cluster._agglomerative._hc_cut": [
    "sklearn.cluster._agglomerative.AgglomerativeClustering._fit"
  ],
  "sklearn.cluster._agglomerative._single_linkage": [
    "sklearn.cluster._agglomerative.$toplevel"
  ],
  "sklearn.cluster._agglomerative._single_linkage_tree": [
    "sklearn.cluster._agglomerative.linkage_tree"
  ],
  "sklearn.cluster._agglomerative.linkage_tree": [
    "sklearn.cluster._agglomerative._average_linkage",
    "sklearn.cluster._agglomerative._complete_linkage",
    "sklearn.cluster._agglomerative._single_linkage"
  ],
  "sklearn.cluster._agglomerative.ward_tree": [
    "sklearn.cluster._agglomerative.$toplevel"
  ],
  "sklearn.cluster._bicluster._bistochastic_normalize": [
    "sklearn.cluster._bicluster.SpectralBiclustering._fit"
  ],
  "sklearn.cluster._bicluster._log_normalize": [
    "sklearn.cluster._bicluster.SpectralBiclustering._fit"
  ],
  "sklearn.cluster._bicluster._scale_normalize": [
    "sklearn.cluster._bicluster.SpectralBiclustering._fit",
    "sklearn.cluster._bicluster.SpectralCoclustering._fit",
    "sklearn.cluster._bicluster._bistochastic_normalize"
  ],
  "sklearn.cluster._birch._iterate_sparse_X": [
    "sklearn.cluster._birch.Birch._fit"
  ],
  "sklearn.cluster._birch._split_node": [
    "sklearn.cluster._birch.Birch._fit",
    "sklearn.cluster._birch._CFNode.insert_cf_subcluster"
  ],
  "sklearn.cluster._hdbscan.hdbscan._brute_mst": [
    "sklearn.cluster._hdbscan.hdbscan._hdbscan_brute"
  ],
  "sklearn.cluster._hdbscan.hdbscan._get_finite_row_indices": [
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.fit"
  ],
  "sklearn.cluster._hdbscan.hdbscan._hdbscan_brute": [
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.fit"
  ],
  "sklearn.cluster._hdbscan.hdbscan._hdbscan_prims": [
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.fit"
  ],
  "sklearn.cluster._hdbscan.hdbscan._process_mst": [
    "sklearn.cluster._hdbscan.hdbscan._hdbscan_brute",
    "sklearn.cluster._hdbscan.hdbscan._hdbscan_prims"
  ],
  "sklearn.cluster._hdbscan.hdbscan.remap_single_linkage_tree": [
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.fit"
  ],
  "sklearn.cluster._kmeans._kmeans_plusplus": [
    "sklearn.cluster._kmeans._BaseKMeans._init_centroids",
    "sklearn.cluster._kmeans.kmeans_plusplus"
  ],
  "sklearn.cluster._kmeans._kmeans_single_elkan": [
    "sklearn.cluster._kmeans.KMeans.fit"
  ],
  "sklearn.cluster._kmeans._kmeans_single_lloyd": [
    "sklearn.cluster._kmeans.KMeans.fit"
  ],
  "sklearn.cluster._kmeans._labels_inertia": [
    "sklearn.cluster._kmeans._labels_inertia_threadpool_limit",
    "sklearn.cluster._kmeans._mini_batch_step"
  ],
  "sklearn.cluster._kmeans._labels_inertia_threadpool_limit": [
    "sklearn.cluster._bisect_k_means.BisectingKMeans._predict_recursive",
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.partial_fit",
    "sklearn.cluster._kmeans._BaseKMeans.predict",
    "sklearn.cluster._kmeans._BaseKMeans.score"
  ],
  "sklearn.cluster._kmeans._mini_batch_step": [
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.partial_fit"
  ],
  "sklearn.cluster._kmeans._tolerance": [
    "sklearn.cluster._kmeans._BaseKMeans._check_params_vs_input"
  ],
  "sklearn.cluster._kmeans.k_means": [
    "sklearn.cluster._spectral.SpectralClustering.fit"
  ],
  "sklearn.cluster._mean_shift._mean_shift_single_seed": [
    "sklearn.cluster._mean_shift.MeanShift.fit"
  ],
  "sklearn.cluster._mean_shift.estimate_bandwidth": [
    "sklearn.cluster._mean_shift.MeanShift.fit"
  ],
  "sklearn.cluster._mean_shift.get_bin_seeds": [
    "sklearn.cluster._mean_shift.MeanShift.fit"
  ],
  "sklearn.cluster._optics._compute_core_distances_": [
    "sklearn.cluster._optics.compute_optics_graph"
  ],
  "sklearn.cluster._optics._correct_predecessor": [
    "sklearn.cluster._optics._xi_cluster"
  ],
  "sklearn.cluster._optics._extend_region": [
    "sklearn.cluster._optics._xi_cluster"
  ],
  "sklearn.cluster._optics._extract_xi_labels": [
    "sklearn.cluster._optics.cluster_optics_xi"
  ],
  "sklearn.cluster._optics._set_reach_dist": [
    "sklearn.cluster._optics.compute_optics_graph"
  ],
  "sklearn.cluster._optics._update_filter_sdas": [
    "sklearn.cluster._optics._xi_cluster"
  ],
  "sklearn.cluster._optics._validate_size": [
    "sklearn.cluster._optics.cluster_optics_xi",
    "sklearn.cluster._optics.compute_optics_graph"
  ],
  "sklearn.cluster._optics._xi_cluster": [
    "sklearn.cluster._optics.cluster_optics_xi"
  ],
  "sklearn.cluster._optics.cluster_optics_dbscan": [
    "sklearn.cluster._optics.OPTICS.fit"
  ],
  "sklearn.cluster._optics.cluster_optics_xi": [
    "sklearn.cluster._optics.OPTICS.fit"
  ],
  "sklearn.cluster._optics.compute_optics_graph": [
    "sklearn.cluster._optics.OPTICS.fit"
  ],
  "sklearn.cluster._spectral.cluster_qr": [
    "sklearn.cluster._spectral.SpectralClustering.fit"
  ],
  "sklearn.cluster._spectral.discretize": [
    "sklearn.cluster._spectral.SpectralClustering.fit"
  ],
  "sklearn.cluster.affinity_propagation": [
    "examples.applications.plot_stock_market.$toplevel"
  ],
  "sklearn.cluster.cluster_optics_dbscan": [
    "examples.cluster.plot_optics.$toplevel"
  ],
  "sklearn.cluster.estimate_bandwidth": [
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_mean_shift.$toplevel"
  ],
  "sklearn.cluster.kmeans_plusplus": [
    "examples.cluster.plot_kmeans_plusplus.$toplevel",
    "sklearn.mixture._base.BaseMixture._initialize_parameters"
  ],
  "sklearn.cluster.spectral_clustering": [
    "examples.cluster.plot_coin_segmentation.$toplevel",
    "examples.cluster.plot_segmentation_toy.$toplevel"
  ],
  "sklearn.cluster.tests.common.generate_clustered_data": [
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_dbscan"
  ],
  "sklearn.compose._column_transformer._check_X": [
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform",
    "sklearn.compose._column_transformer.ColumnTransformer.transform"
  ],
  "sklearn.compose._column_transformer._get_transformer_list": [
    "sklearn.compose._column_transformer.make_column_transformer"
  ],
  "sklearn.compose._column_transformer._is_empty_column_selection": [
    "sklearn.compose._column_transformer.ColumnTransformer._get_feature_name_out_for_transformer",
    "sklearn.compose._column_transformer.ColumnTransformer._iter",
    "sklearn.compose._column_transformer.ColumnTransformer._update_fitted_transformers"
  ],
  "sklearn.compose._column_transformer.make_column_transformer": [
    "benchmarks.bench_hist_gradient_boosting_adult.$toplevel",
    "examples.ensemble.plot_gradient_boosting_categorical.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.miscellaneous.plot_estimator_representation.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel"
  ],
  "sklearn.conftest._fetch_fixture": [
    "sklearn.conftest.$toplevel"
  ],
  "sklearn.conftest.raccoon_face_or_skip": [
    "sklearn.conftest.$toplevel"
  ],
  "sklearn.covariance._empirical_covariance.empirical_covariance": [
    "sklearn.covariance._empirical_covariance.EmpiricalCovariance.fit",
    "sklearn.covariance._empirical_covariance.EmpiricalCovariance.score",
    "sklearn.covariance._robust_covariance.MinCovDet.$class_toplevel"
  ],
  "sklearn.covariance._empirical_covariance.log_likelihood": [
    "sklearn.covariance._empirical_covariance.EmpiricalCovariance.score"
  ],
  "sklearn.covariance._graph_lasso._dual_gap": [
    "sklearn.covariance._graph_lasso._graphical_lasso"
  ],
  "sklearn.covariance._graph_lasso._graphical_lasso": [
    "sklearn.covariance._graph_lasso.GraphicalLasso.fit",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._graph_lasso.graphical_lasso_path"
  ],
  "sklearn.covariance._graph_lasso._objective": [
    "sklearn.covariance._graph_lasso._graphical_lasso"
  ],
  "sklearn.covariance._graph_lasso.alpha_max": [
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit"
  ],
  "sklearn.covariance._graph_lasso.graphical_lasso_path": [
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit"
  ],
  "sklearn.covariance._robust_covariance._c_step": [
    "sklearn.covariance._robust_covariance.c_step",
    "sklearn.covariance._robust_covariance.select_candidates"
  ],
  "sklearn.covariance._robust_covariance.fast_mcd": [
    "sklearn.covariance._robust_covariance.MinCovDet.fit"
  ],
  "sklearn.covariance._robust_covariance.select_candidates": [
    "sklearn.covariance._robust_covariance.fast_mcd"
  ],
  "sklearn.covariance._shrunk_covariance._ledoit_wolf": [
    "sklearn.covariance._shrunk_covariance.LedoitWolf.fit"
  ],
  "sklearn.covariance._shrunk_covariance._oas": [
    "sklearn.covariance._shrunk_covariance.OAS.fit"
  ],
  "sklearn.covariance._shrunk_covariance.ledoit_wolf_shrinkage": [
    "sklearn.covariance._shrunk_covariance._ledoit_wolf"
  ],
  "sklearn.covariance._shrunk_covariance.shrunk_covariance": [
    "sklearn.covariance._shrunk_covariance.ShrunkCovariance.fit"
  ],
  "sklearn.covariance.empirical_covariance": [
    "examples.covariance.plot_covariance_estimation.$toplevel",
    "sklearn.covariance._graph_lasso.GraphicalLasso.fit",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._graph_lasso.graphical_lasso_path",
    "sklearn.covariance._shrunk_covariance.ShrunkCovariance.fit",
    "sklearn.covariance._shrunk_covariance._ledoit_wolf",
    "sklearn.covariance._shrunk_covariance._oas",
    "sklearn.discriminant_analysis._cov"
  ],
  "sklearn.covariance.ledoit_wolf": [
    "examples.covariance.plot_sparse_cov.$toplevel",
    "sklearn.discriminant_analysis._cov"
  ],
  "sklearn.covariance.log_likelihood": [
    "examples.covariance.plot_covariance_estimation.$toplevel",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.covariance._graph_lasso._objective",
    "sklearn.covariance._graph_lasso.graphical_lasso_path"
  ],
  "sklearn.covariance.shrunk_covariance": [
    "sklearn.discriminant_analysis._cov"
  ],
  "sklearn.cross_decomposition._pls._center_scale_xy": [
    "sklearn.cross_decomposition._pls.PLSSVD.fit",
    "sklearn.cross_decomposition._pls._PLS.fit"
  ],
  "sklearn.cross_decomposition._pls._get_first_singular_vectors_power_method": [
    "sklearn.cross_decomposition._pls._PLS.fit"
  ],
  "sklearn.cross_decomposition._pls._get_first_singular_vectors_svd": [
    "sklearn.cross_decomposition._pls._PLS.fit"
  ],
  "sklearn.cross_decomposition._pls._pinv2_old": [
    "sklearn.cross_decomposition._pls._get_first_singular_vectors_power_method"
  ],
  "sklearn.cross_decomposition._pls._svd_flip_1d": [
    "sklearn.cross_decomposition._pls._PLS.fit"
  ],
  "sklearn.datasets._arff_parser._liac_arff_parser": [
    "sklearn.datasets._arff_parser.load_arff_from_gzip_file"
  ],
  "sklearn.datasets._arff_parser._pandas_arff_parser": [
    "sklearn.datasets._arff_parser.load_arff_from_gzip_file"
  ],
  "sklearn.datasets._arff_parser._post_process_frame": [
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._arff_parser._pandas_arff_parser"
  ],
  "sklearn.datasets._arff_parser._sparse_data_to_array": [
    "sklearn.datasets._arff_parser._liac_arff_parser"
  ],
  "sklearn.datasets._arff_parser._split_sparse_columns": [
    "sklearn.datasets._arff_parser._liac_arff_parser"
  ],
  "sklearn.datasets._arff_parser.load_arff_from_gzip_file": [
    "sklearn.datasets._openml._load_arff_response._open_url_and_load_gzip_file"
  ],
  "sklearn.datasets._base._convert_data_dataframe": [
    "sklearn.datasets._base.load_breast_cancer",
    "sklearn.datasets._base.load_diabetes",
    "sklearn.datasets._base.load_digits",
    "sklearn.datasets._base.load_iris",
    "sklearn.datasets._base.load_linnerud",
    "sklearn.datasets._base.load_wine",
    "sklearn.datasets._california_housing.fetch_california_housing",
    "sklearn.datasets._covtype.fetch_covtype",
    "sklearn.datasets._kddcup99.fetch_kddcup99",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized"
  ],
  "sklearn.datasets._base._fetch_remote": [
    "sklearn.datasets._california_housing.fetch_california_housing",
    "sklearn.datasets._covtype.fetch_covtype",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._lfw._check_fetch_lfw",
    "sklearn.datasets._olivetti_faces.fetch_olivetti_faces",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._species_distributions.fetch_species_distributions",
    "sklearn.datasets._twenty_newsgroups._download_20newsgroups"
  ],
  "sklearn.datasets._base._pkl_filepath": [
    "doc.conftest.setup_twenty_newsgroups",
    "doc.conftest.setup_working_with_text_data",
    "sklearn.datasets._california_housing.fetch_california_housing",
    "sklearn.datasets._covtype.fetch_covtype",
    "sklearn.datasets._olivetti_faces.fetch_olivetti_faces",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._species_distributions.fetch_species_distributions",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized"
  ],
  "sklearn.datasets._base._sha256": [
    "sklearn.datasets._base._fetch_remote"
  ],
  "sklearn.datasets._base.get_data_home": [
    "sklearn.datasets._base.clear_data_home",
    "sklearn.datasets._lfw._check_fetch_lfw"
  ],
  "sklearn.datasets._base.load_csv_data": [
    "sklearn.datasets._base.load_breast_cancer",
    "sklearn.datasets._base.load_iris",
    "sklearn.datasets._base.load_wine"
  ],
  "sklearn.datasets._base.load_descr": [
    "sklearn.datasets._base.load_csv_data",
    "sklearn.datasets._base.load_diabetes",
    "sklearn.datasets._base.load_gzip_compressed_csv_data",
    "sklearn.datasets._base.load_linnerud",
    "sklearn.datasets._base.load_sample_images",
    "sklearn.datasets._california_housing.fetch_california_housing",
    "sklearn.datasets._covtype.fetch_covtype",
    "sklearn.datasets._kddcup99.fetch_kddcup99",
    "sklearn.datasets._lfw.fetch_lfw_pairs",
    "sklearn.datasets._lfw.fetch_lfw_people",
    "sklearn.datasets._olivetti_faces.fetch_olivetti_faces",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized"
  ],
  "sklearn.datasets._base.load_gzip_compressed_csv_data": [
    "sklearn.datasets._base.load_diabetes",
    "sklearn.datasets._base.load_digits"
  ],
  "sklearn.datasets._base.load_sample_images": [
    "sklearn.datasets._base.load_sample_image"
  ],
  "sklearn.datasets._kddcup99._fetch_brute_kddcup99": [
    "sklearn.datasets._kddcup99.fetch_kddcup99"
  ],
  "sklearn.datasets._kddcup99._mkdirp": [
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99"
  ],
  "sklearn.datasets._lfw._check_fetch_lfw": [
    "sklearn.datasets._lfw.fetch_lfw_pairs",
    "sklearn.datasets._lfw.fetch_lfw_people"
  ],
  "sklearn.datasets._lfw._fetch_lfw_pairs": [
    "sklearn.datasets._lfw.fetch_lfw_pairs"
  ],
  "sklearn.datasets._lfw._fetch_lfw_people": [
    "sklearn.datasets._lfw.fetch_lfw_people"
  ],
  "sklearn.datasets._lfw._load_imgs": [
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._lfw._fetch_lfw_people"
  ],
  "sklearn.datasets._openml._download_data_to_bunch": [
    "sklearn.datasets._openml.fetch_openml"
  ],
  "sklearn.datasets._openml._get_data_description_by_id": [
    "sklearn.datasets._openml.fetch_openml"
  ],
  "sklearn.datasets._openml._get_data_features": [
    "sklearn.datasets._openml.fetch_openml"
  ],
  "sklearn.datasets._openml._get_data_info_by_name": [
    "sklearn.datasets._openml.fetch_openml"
  ],
  "sklearn.datasets._openml._get_data_qualities": [
    "sklearn.datasets._openml.fetch_openml"
  ],
  "sklearn.datasets._openml._get_json_content_from_openml_api": [
    "sklearn.datasets._openml._get_data_description_by_id",
    "sklearn.datasets._openml._get_data_features",
    "sklearn.datasets._openml._get_data_info_by_name",
    "sklearn.datasets._openml._get_data_qualities"
  ],
  "sklearn.datasets._openml._get_local_path": [
    "sklearn.datasets._openml._open_openml_url",
    "sklearn.datasets._openml._retry_with_clean_cache.decorator.wrapper"
  ],
  "sklearn.datasets._openml._get_num_samples": [
    "sklearn.datasets._openml.fetch_openml"
  ],
  "sklearn.datasets._openml._load_arff_response": [
    "sklearn.datasets._openml._download_data_to_bunch"
  ],
  "sklearn.datasets._openml._open_openml_url": [
    "sklearn.datasets._openml._get_json_content_from_openml_api._load_json",
    "sklearn.datasets._openml._load_arff_response",
    "sklearn.datasets._openml._load_arff_response._open_url_and_load_gzip_file"
  ],
  "sklearn.datasets._openml._retry_on_network_error": [
    "sklearn.datasets._openml._open_openml_url"
  ],
  "sklearn.datasets._openml._retry_with_clean_cache": [
    "sklearn.datasets._openml._download_data_to_bunch"
  ],
  "sklearn.datasets._openml._valid_data_column_names": [
    "sklearn.datasets._openml.fetch_openml"
  ],
  "sklearn.datasets._openml._verify_target_data_type": [
    "sklearn.datasets._openml._download_data_to_bunch"
  ],
  "sklearn.datasets._openml.fetch_openml": [
    "asv_benchmarks.benchmarks.datasets._mnist_dataset",
    "benchmarks.bench_hist_gradient_boosting_adult.$toplevel",
    "benchmarks.bench_isolation_forest.$toplevel",
    "benchmarks.bench_lof.$toplevel",
    "benchmarks.bench_mnist.load_data",
    "benchmarks.bench_plot_randomized_svd.get_data",
    "benchmarks.bench_tsne_mnist.load_data",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.applications.plot_digits_denoising.$toplevel",
    "examples.compose.plot_column_transformer_mixed_types.$toplevel",
    "examples.compose.plot_transformed_target.$toplevel",
    "examples.ensemble.plot_gradient_boosting_categorical.$toplevel",
    "examples.ensemble.plot_stack_predictors.load_ames_housing",
    "examples.gaussian_process.plot_gpr_co2.$toplevel",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_sgd_early_stopping.load_mnist",
    "examples.linear_model.plot_sparse_logistic_regression_mnist.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.load_mtpl2",
    "examples.miscellaneous.plot_display_object_visualization.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.preprocess_dataset",
    "examples.miscellaneous.plot_set_output.$toplevel",
    "examples.multioutput.plot_classifier_chain_yeast.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.load_mnist",
    "examples.neural_networks.plot_mnist_filters.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_2_0.$toplevel"
  ],
  "sklearn.datasets._rcv1._find_permutation": [
    "sklearn.datasets._rcv1.fetch_rcv1"
  ],
  "sklearn.datasets._rcv1._inverse_permutation": [
    "sklearn.datasets._rcv1._find_permutation"
  ],
  "sklearn.datasets._samples_generator._generate_hypercube": [
    "sklearn.datasets._samples_generator._generate_hypercube",
    "sklearn.datasets._samples_generator.make_classification"
  ],
  "sklearn.datasets._samples_generator._shuffle": [
    "sklearn.datasets._samples_generator.make_biclusters",
    "sklearn.datasets._samples_generator.make_checkerboard"
  ],
  "sklearn.datasets._samples_generator.make_blobs": [
    "examples.mixture.plot_gmm_init.$toplevel"
  ],
  "sklearn.datasets._samples_generator.make_low_rank_matrix": [
    "sklearn.datasets._samples_generator.make_regression"
  ],
  "sklearn.datasets._species_distributions._load_coverage": [
    "sklearn.datasets._species_distributions.fetch_species_distributions"
  ],
  "sklearn.datasets._species_distributions._load_csv": [
    "sklearn.datasets._species_distributions.fetch_species_distributions"
  ],
  "sklearn.datasets._svmlight_format_io._dump_svmlight": [
    "sklearn.datasets._svmlight_format_io.dump_svmlight_file"
  ],
  "sklearn.datasets._svmlight_format_io._gen_open": [
    "sklearn.datasets._svmlight_format_io._open_and_load"
  ],
  "sklearn.datasets._svmlight_format_io._open_and_load": [
    "sklearn.datasets._svmlight_format_io.load_svmlight_files"
  ],
  "sklearn.datasets._svmlight_format_io.load_svmlight_files": [
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._svmlight_format_io.load_svmlight_file"
  ],
  "sklearn.datasets._twenty_newsgroups._download_20newsgroups": [
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups"
  ],
  "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups": [
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized"
  ],
  "sklearn.datasets._twenty_newsgroups.strip_newsgroup_footer": [
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups"
  ],
  "sklearn.datasets._twenty_newsgroups.strip_newsgroup_header": [
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups"
  ],
  "sklearn.datasets._twenty_newsgroups.strip_newsgroup_quoting": [
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups"
  ],
  "sklearn.datasets.dump_svmlight_file": [
    "examples.applications.svm_gui.Model.dump_svmlight_file"
  ],
  "sklearn.datasets.fetch_20newsgroups": [
    "asv_benchmarks.benchmarks.datasets._20newsgroups_highdim_dataset",
    "asv_benchmarks.benchmarks.datasets._20newsgroups_lowdim_dataset",
    "benchmarks.bench_plot_nmf.load_20news",
    "benchmarks.bench_text_vectorizers.$toplevel",
    "examples.applications.plot_topics_extraction_with_nmf_lda.$toplevel",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.compose.plot_column_transformer.$toplevel",
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.load_dataset",
    "examples.text.plot_document_clustering.$toplevel",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "sklearn.conftest.$toplevel"
  ],
  "sklearn.datasets.fetch_20newsgroups_vectorized": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_plot_randomized_svd.get_data",
    "benchmarks.bench_saga.exp",
    "examples.applications.plot_model_complexity_influence.generate_data",
    "examples.linear_model.plot_sparse_logistic_regression_20newsgroups.$toplevel",
    "examples.miscellaneous.plot_johnson_lindenstrauss_bound.$toplevel",
    "sklearn.conftest.$toplevel"
  ],
  "sklearn.datasets.fetch_california_housing": [
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.impute.plot_iterative_imputer_variants_comparison.$toplevel",
    "examples.impute.plot_missing_values.$toplevel",
    "examples.preprocessing.plot_all_scaling.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel",
    "sklearn.conftest.$toplevel"
  ],
  "sklearn.datasets.fetch_covtype": [
    "benchmarks.bench_covertype.load_data",
    "benchmarks.bench_isolation_forest.$toplevel",
    "benchmarks.bench_lof.$toplevel",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.preprocess_dataset",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel",
    "sklearn.conftest.$toplevel"
  ],
  "sklearn.datasets.fetch_kddcup99": [
    "benchmarks.bench_isolation_forest.$toplevel",
    "benchmarks.bench_lof.$toplevel",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.preprocess_dataset",
    "sklearn.conftest.$toplevel"
  ],
  "sklearn.datasets.fetch_lfw_people": [
    "benchmarks.bench_plot_incremental_pca.$toplevel",
    "benchmarks.bench_plot_randomized_svd.get_data",
    "examples.applications.plot_face_recognition.$toplevel"
  ],
  "sklearn.datasets.fetch_olivetti_faces": [
    "asv_benchmarks.benchmarks.datasets._olivetti_faces_dataset",
    "benchmarks.bench_plot_nmf.load_faces",
    "benchmarks.bench_plot_randomized_svd.get_data",
    "examples.cluster.plot_dict_face_patches.$toplevel",
    "examples.decomposition.plot_faces_decomposition.$toplevel",
    "examples.ensemble.plot_forest_importances_faces.$toplevel",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "sklearn.conftest.$toplevel"
  ],
  "sklearn.datasets.fetch_rcv1": [
    "benchmarks.bench_plot_randomized_svd.get_data",
    "benchmarks.bench_rcv1_logreg_convergence.$toplevel",
    "benchmarks.bench_saga.exp",
    "sklearn.conftest.$toplevel"
  ],
  "sklearn.datasets.fetch_species_distributions": [
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution",
    "examples.neighbors.plot_species_kde.$toplevel"
  ],
  "sklearn.datasets.get_data_home": [
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "doc.conftest.setup_labeled_faces",
    "doc.conftest.setup_rcv1",
    "doc.conftest.setup_twenty_newsgroups",
    "doc.conftest.setup_working_with_text_data",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents",
    "sklearn.datasets._california_housing.fetch_california_housing",
    "sklearn.datasets._covtype.fetch_covtype",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._kddcup99.fetch_kddcup99",
    "sklearn.datasets._olivetti_faces.fetch_olivetti_faces",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._species_distributions.fetch_species_distributions",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized"
  ],
  "sklearn.datasets.load_breast_cancer": [
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "examples.semi_supervised.plot_self_training_varying_threshold.$toplevel",
    "examples.tree.plot_cost_complexity_pruning.$toplevel"
  ],
  "sklearn.datasets.load_diabetes": [
    "examples.applications.plot_model_complexity_influence.generate_data",
    "examples.ensemble.plot_gradient_boosting_regression.$toplevel",
    "examples.ensemble.plot_voting_regressor.$toplevel",
    "examples.exercises.plot_cv_diabetes.$toplevel",
    "examples.feature_selection.plot_select_from_model_diabetes.$toplevel",
    "examples.impute.plot_missing_values.$toplevel",
    "examples.linear_model.plot_lasso_coordinate_descent_path.$toplevel",
    "examples.linear_model.plot_lasso_lars.$toplevel",
    "examples.linear_model.plot_lasso_lars_ic.$toplevel",
    "examples.linear_model.plot_lasso_model_selection.$toplevel",
    "examples.linear_model.plot_ols.$toplevel",
    "examples.linear_model.plot_ols_3d.$toplevel",
    "examples.miscellaneous.plot_partial_dependence_visualization_api.$toplevel",
    "examples.model_selection.plot_cv_predict.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_2_0.$toplevel"
  ],
  "sklearn.datasets.load_digits": [
    "asv_benchmarks.benchmarks.datasets._digits_dataset",
    "benchmarks.bench_plot_neighbors.get_data",
    "benchmarks.bench_plot_polynomial_kernel_approximation.$toplevel",
    "benchmarks.bench_saga.exp",
    "examples.classification.plot_digits_classification.$toplevel",
    "examples.cluster.plot_digits_agglomeration.$toplevel",
    "examples.cluster.plot_digits_linkage.$toplevel",
    "examples.cluster.plot_kmeans_digits.$toplevel",
    "examples.compose.plot_compare_reduction.$toplevel",
    "examples.compose.plot_digits_pipe.$toplevel",
    "examples.datasets.plot_digits_last_image.$toplevel",
    "examples.exercises.plot_cv_digits.$toplevel",
    "examples.exercises.plot_digits_classification_exercise.$toplevel",
    "examples.feature_selection.plot_rfe_digits.$toplevel",
    "examples.linear_model.plot_logistic_l1_l2_sparsity.$toplevel",
    "examples.linear_model.plot_sgd_comparison.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.miscellaneous.plot_johnson_lindenstrauss_bound.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.model_selection.plot_grid_search_digits.$toplevel",
    "examples.model_selection.plot_grid_search_refit_callable.$toplevel",
    "examples.model_selection.plot_learning_curve.$toplevel",
    "examples.model_selection.plot_randomized_search.$toplevel",
    "examples.model_selection.plot_validation_curve.$toplevel",
    "examples.neighbors.plot_caching_nearest_neighbors.$toplevel",
    "examples.neighbors.plot_digits_kde_sampling.$toplevel",
    "examples.neighbors.plot_nca_dim_reduction.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.$toplevel",
    "examples.neural_networks.plot_rbm_logistic_classification.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel"
  ],
  "sklearn.datasets.load_files": [
    "doc.tutorial.text_analytics.skeletons.exercise_01_language_train_model.$toplevel",
    "doc.tutorial.text_analytics.skeletons.exercise_02_sentiment.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_01_language_train_model.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_02_sentiment.$toplevel",
    "sklearn.datasets._twenty_newsgroups._download_20newsgroups"
  ],
  "sklearn.datasets.load_iris": [
    "benchmarks.bench_saga.exp",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.cluster.plot_agglomerative_dendrogram.$toplevel",
    "examples.cluster.plot_cluster_iris.$toplevel",
    "examples.compose.plot_feature_union.$toplevel",
    "examples.datasets.plot_iris_dataset.$toplevel",
    "examples.decomposition.plot_incremental_pca.$toplevel",
    "examples.decomposition.plot_pca_iris.$toplevel",
    "examples.decomposition.plot_pca_vs_lda.$toplevel",
    "examples.decomposition.plot_varimax_fa.$toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.ensemble.plot_gradient_boosting_early_stopping.$toplevel",
    "examples.ensemble.plot_voting_decision_regions.$toplevel",
    "examples.exercises.plot_iris_exercise.$toplevel",
    "examples.feature_selection.plot_feature_selection.$toplevel",
    "examples.gaussian_process.plot_gpc_iris.$toplevel",
    "examples.linear_model.plot_iris_logistic.$toplevel",
    "examples.linear_model.plot_logistic_path.$toplevel",
    "examples.linear_model.plot_sgd_iris.$toplevel",
    "examples.miscellaneous.plot_set_output.$toplevel",
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.model_selection.plot_confusion_matrix.$toplevel",
    "examples.model_selection.plot_nested_cross_validation_iris.$toplevel",
    "examples.model_selection.plot_permutation_tests_for_classification.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.model_selection.plot_roc_crossval.$toplevel",
    "examples.neighbors.plot_classification.$toplevel",
    "examples.neighbors.plot_nca_classification.$toplevel",
    "examples.neighbors.plot_nearest_centroid.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_2_0.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_versus_svm_iris.$toplevel",
    "examples.svm.plot_custom_kernel.$toplevel",
    "examples.svm.plot_iris_svc.$toplevel",
    "examples.svm.plot_rbf_parameters.$toplevel",
    "examples.svm.plot_svm_anova.$toplevel",
    "examples.tree.plot_iris_dtc.$toplevel",
    "examples.tree.plot_unveil_tree_structure.$toplevel",
    "sklearn.utils.estimator_checks.check_non_transformer_estimators_n_iter",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_clones"
  ],
  "sklearn.datasets.load_sample_image": [
    "examples.cluster.plot_color_quantization.$toplevel"
  ],
  "sklearn.datasets.load_wine": [
    "examples.applications.plot_outlier_detection_wine.$toplevel",
    "examples.miscellaneous.plot_roc_curve_visualization_api.$toplevel",
    "examples.preprocessing.plot_scaling_importance.$toplevel"
  ],
  "sklearn.datasets.make_biclusters": [
    "examples.bicluster.plot_spectral_coclustering.$toplevel"
  ],
  "sklearn.datasets.make_blobs": [
    "asv_benchmarks.benchmarks.datasets._blobs_dataset",
    "examples.calibration.plot_calibration.$toplevel",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.classification.plot_lda.generate_data",
    "examples.cluster.plot_affinity_propagation.$toplevel",
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel",
    "examples.cluster.plot_bisect_kmeans.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.cluster.plot_hdbscan.$toplevel",
    "examples.cluster.plot_inductive_clustering.$toplevel",
    "examples.cluster.plot_kmeans_assumptions.$toplevel",
    "examples.cluster.plot_kmeans_plusplus.$toplevel",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.cluster.plot_mean_shift.$toplevel",
    "examples.cluster.plot_mini_batch_kmeans.$toplevel",
    "examples.datasets.plot_random_dataset.$toplevel",
    "examples.linear_model.plot_logistic_multinomial.$toplevel",
    "examples.linear_model.plot_sgd_separating_hyperplane.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.preprocessing.plot_discretization_strategies.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.svm.plot_linearsvc_support_vectors.$toplevel",
    "examples.svm.plot_separating_hyperplane.$toplevel",
    "examples.svm.plot_separating_hyperplane_unbalanced.$toplevel",
    "examples.svm.plot_svm_tie_breaking.$toplevel",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_isomap",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_spectral_clustering",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_spectral_embedding",
    "sklearn.utils.estimator_checks.check_class_weight_classifiers",
    "sklearn.utils.estimator_checks.check_classifiers_classes",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.estimator_checks.check_clusterer_compute_labels_predict",
    "sklearn.utils.estimator_checks.check_clustering",
    "sklearn.utils.estimator_checks.check_decision_proba_consistency",
    "sklearn.utils.estimator_checks.check_estimators_fit_returns_self",
    "sklearn.utils.estimator_checks.check_estimators_overwrite_params",
    "sklearn.utils.estimator_checks.check_estimators_partial_fit_n_features",
    "sklearn.utils.estimator_checks.check_estimators_pickle",
    "sklearn.utils.estimator_checks.check_nonsquare_error",
    "sklearn.utils.estimator_checks.check_outliers_fit_predict",
    "sklearn.utils.estimator_checks.check_outliers_train",
    "sklearn.utils.estimator_checks.check_pipeline_consistency",
    "sklearn.utils.estimator_checks.check_transformer_data_not_an_array",
    "sklearn.utils.estimator_checks.check_transformer_general",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out_pandas",
    "sklearn.utils.estimator_checks.check_transformer_n_iter",
    "sklearn.utils.estimator_checks.check_transformer_preserve_dtypes"
  ],
  "sklearn.datasets.make_checkerboard": [
    "examples.bicluster.plot_spectral_biclustering.$toplevel"
  ],
  "sklearn.datasets.make_circles": [
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.decomposition.plot_kernel_pca.$toplevel",
    "examples.ensemble.plot_random_forest_embedding.$toplevel",
    "examples.manifold.plot_t_sne_perplexity.$toplevel",
    "examples.neural_networks.plot_mlp_alpha.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.semi_supervised.plot_label_propagation_structure.$toplevel"
  ],
  "sklearn.datasets.make_classification": [
    "asv_benchmarks.benchmarks.datasets._synth_classification_dataset",
    "benchmarks.bench_hist_gradient_boosting.get_estimator_and_data",
    "benchmarks.bench_hist_gradient_boosting_categorical_only.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_threading.get_estimator_and_data",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.calibration.plot_compare_calibration.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.datasets.plot_random_dataset.$toplevel",
    "examples.ensemble.plot_ensemble_oob.$toplevel",
    "examples.ensemble.plot_feature_transformation.$toplevel",
    "examples.ensemble.plot_forest_importances.$toplevel",
    "examples.ensemble.plot_gradient_boosting_early_stopping.$toplevel",
    "examples.feature_selection.plot_feature_selection_pipeline.$toplevel",
    "examples.feature_selection.plot_rfe_with_cross_validation.$toplevel",
    "examples.model_selection.plot_det.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.model_selection.plot_successive_halving_heatmap.$toplevel",
    "examples.model_selection.plot_successive_halving_iterations.$toplevel",
    "examples.neighbors.plot_nca_illustration.$toplevel",
    "examples.neural_networks.plot_mlp_alpha.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel",
    "examples.svm.plot_svm_scale_c.$toplevel",
    "sklearn.utils.estimator_checks.check_array_api_input"
  ],
  "sklearn.datasets.make_gaussian_quantiles": [
    "examples.datasets.plot_random_dataset.$toplevel",
    "examples.ensemble.plot_adaboost_multiclass.$toplevel",
    "examples.ensemble.plot_adaboost_twoclass.$toplevel"
  ],
  "sklearn.datasets.make_hastie_10_2": [
    "examples.ensemble.plot_adaboost_hastie_10_2.$toplevel",
    "examples.ensemble.plot_gradient_boosting_early_stopping.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "examples.model_selection.plot_multi_metric_evaluation.$toplevel"
  ],
  "sklearn.datasets.make_low_rank_matrix": [
    "benchmarks.bench_plot_randomized_svd.bench_b",
    "benchmarks.bench_plot_randomized_svd.get_data",
    "benchmarks.bench_plot_svd.compute_bench",
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel"
  ],
  "sklearn.datasets.make_moons": [
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "examples.neural_networks.plot_mlp_alpha.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel"
  ],
  "sklearn.datasets.make_multilabel_classification": [
    "benchmarks.bench_multilabel_metrics.benchmark",
    "examples.datasets.plot_random_multilabel_dataset.plot_2d",
    "examples.miscellaneous.plot_multilabel.$toplevel",
    "sklearn.utils.estimator_checks.check_classifier_multioutput",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_decision_function",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_representation_invariance",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_decision_function",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_predict",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_predict_proba"
  ],
  "sklearn.datasets.make_regression": [
    "asv_benchmarks.benchmarks.datasets._synth_regression_dataset",
    "benchmarks.bench_glmnet.$toplevel",
    "benchmarks.bench_hist_gradient_boosting.get_estimator_and_data",
    "benchmarks.bench_hist_gradient_boosting_threading.get_estimator_and_data",
    "benchmarks.bench_lasso.compute_bench",
    "benchmarks.bench_plot_lasso_path.compute_bench",
    "benchmarks.bench_sgd_regression.$toplevel",
    "examples.applications.plot_prediction_latency.generate_dataset",
    "examples.compose.plot_transformed_target.$toplevel",
    "examples.linear_model.plot_ard.$toplevel",
    "examples.linear_model.plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.$toplevel",
    "examples.linear_model.plot_huber_vs_ridge.$toplevel",
    "examples.linear_model.plot_lasso_dense_vs_sparse_data.$toplevel",
    "examples.linear_model.plot_ransac.$toplevel",
    "examples.linear_model.plot_ridge_coeffs.$toplevel",
    "examples.model_selection.plot_train_error_vs_test_error.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "sklearn.linear_model.tests.test_huber.make_regression_with_outliers",
    "sklearn.linear_model.tests.test_huber.test_huber_bool",
    "sklearn.tests.test_kernel_ridge.$toplevel",
    "sklearn.utils.estimator_checks._regression_dataset",
    "sklearn.utils.estimator_checks.check_regressor_multioutput"
  ],
  "sklearn.datasets.make_s_curve": [
    "examples.manifold.plot_compare_methods.$toplevel",
    "examples.manifold.plot_t_sne_perplexity.$toplevel"
  ],
  "sklearn.datasets.make_sparse_coded_signal": [
    "benchmarks.bench_plot_omp_lars.compute_bench",
    "examples.linear_model.plot_omp.$toplevel"
  ],
  "sklearn.datasets.make_sparse_spd_matrix": [
    "examples.covariance.plot_sparse_cov.$toplevel"
  ],
  "sklearn.datasets.make_sparse_uncorrelated": [
    "benchmarks.bench_plot_randomized_svd.get_data"
  ],
  "sklearn.datasets.make_swiss_roll": [
    "examples.cluster.plot_ward_structured_vs_unstructured.$toplevel",
    "examples.manifold.plot_swissroll.$toplevel"
  ],
  "sklearn.datasets.tests.test_common.check_return_X_y": [
    "sklearn.datasets.tests.test_olivetti_faces.test_olivetti_faces",
    "sklearn.datasets.tests.test_rcv1.test_fetch_rcv1"
  ],
  "sklearn.decomposition._dict_learning._check_positive_coding": [
    "sklearn.decomposition._dict_learning.DictionaryLearning.fit_transform",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._check_params",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._dict_learning.sparse_encode"
  ],
  "sklearn.decomposition._dict_learning._check_warn_deprecated": [
    "sklearn.decomposition._dict_learning.dict_learning_online"
  ],
  "sklearn.decomposition._dict_learning._dict_learning": [
    "sklearn.decomposition._dict_learning.DictionaryLearning.fit_transform"
  ],
  "sklearn.decomposition._dict_learning._sparse_encode": [
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._minibatch_step",
    "sklearn.decomposition._dict_learning.sparse_encode"
  ],
  "sklearn.decomposition._dict_learning._sparse_encode_precomputed": [
    "sklearn.decomposition._dict_learning._sparse_encode"
  ],
  "sklearn.decomposition._dict_learning._update_dict": [
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._minibatch_step",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning.dict_learning_online"
  ],
  "sklearn.decomposition._dict_learning.dict_learning": [
    "sklearn.decomposition._sparse_pca.SparsePCA._fit"
  ],
  "sklearn.decomposition._dict_learning.sparse_encode": [
    "sklearn.decomposition._dict_learning._BaseSparseCoding._transform",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning.dict_learning_online"
  ],
  "sklearn.decomposition._factor_analysis._ortho_rotation": [
    "sklearn.decomposition._factor_analysis.FactorAnalysis._rotate"
  ],
  "sklearn.decomposition._fastica._gs_decorrelation": [
    "sklearn.decomposition._fastica._ica_def"
  ],
  "sklearn.decomposition._fastica._ica_def": [
    "sklearn.decomposition._fastica.FastICA._fit_transform"
  ],
  "sklearn.decomposition._fastica._ica_par": [
    "sklearn.decomposition._fastica.FastICA._fit_transform"
  ],
  "sklearn.decomposition._fastica._sym_decorrelation": [
    "sklearn.decomposition._fastica._ica_par"
  ],
  "sklearn.decomposition._lda._update_doc_distribution": [
    "sklearn.decomposition._lda.LatentDirichletAllocation._e_step"
  ],
  "sklearn.decomposition._nmf._beta_divergence": [
    "benchmarks.bench_plot_nmf.bench_one",
    "sklearn.decomposition._nmf.MiniBatchNMF._minibatch_step",
    "sklearn.decomposition._nmf.MiniBatchNMF.fit_transform",
    "sklearn.decomposition._nmf.NMF.fit_transform",
    "sklearn.decomposition._nmf._fit_multiplicative_update"
  ],
  "sklearn.decomposition._nmf._beta_loss_to_float": [
    "sklearn.decomposition._nmf._BaseNMF._check_params",
    "sklearn.decomposition._nmf._beta_divergence",
    "sklearn.decomposition._nmf._fit_multiplicative_update"
  ],
  "sklearn.decomposition._nmf._check_init": [
    "benchmarks.bench_plot_nmf._PGNMF._fit_transform",
    "sklearn.decomposition._nmf._BaseNMF._check_w_h"
  ],
  "sklearn.decomposition._nmf._fit_coordinate_descent": [
    "sklearn.decomposition._nmf.NMF._fit_transform"
  ],
  "sklearn.decomposition._nmf._fit_multiplicative_update": [
    "sklearn.decomposition._nmf.NMF._fit_transform"
  ],
  "sklearn.decomposition._nmf._initialize_nmf": [
    "benchmarks.bench_plot_nmf._PGNMF._fit_transform",
    "benchmarks.bench_plot_nmf.run_bench",
    "sklearn.decomposition._nmf._BaseNMF._check_w_h"
  ],
  "sklearn.decomposition._nmf._multiplicative_update_h": [
    "sklearn.decomposition._nmf.MiniBatchNMF._minibatch_step",
    "sklearn.decomposition._nmf._fit_multiplicative_update"
  ],
  "sklearn.decomposition._nmf._multiplicative_update_w": [
    "sklearn.decomposition._nmf.MiniBatchNMF._minibatch_step",
    "sklearn.decomposition._nmf.MiniBatchNMF._solve_W",
    "sklearn.decomposition._nmf._fit_multiplicative_update"
  ],
  "sklearn.decomposition._nmf._special_sparse_dot": [
    "sklearn.decomposition._nmf._beta_divergence",
    "sklearn.decomposition._nmf._multiplicative_update_h",
    "sklearn.decomposition._nmf._multiplicative_update_w"
  ],
  "sklearn.decomposition._nmf._update_coordinate_descent": [
    "sklearn.decomposition._nmf._fit_coordinate_descent"
  ],
  "sklearn.decomposition._nmf.norm": [
    "sklearn.decomposition._nmf._initialize_nmf"
  ],
  "sklearn.decomposition._nmf.trace_dot": [
    "sklearn.decomposition._nmf._beta_divergence"
  ],
  "sklearn.decomposition._pca._assess_dimension": [
    "sklearn.decomposition._pca._infer_dimension"
  ],
  "sklearn.decomposition._pca._infer_dimension": [
    "sklearn.decomposition._pca.PCA._fit_full"
  ],
  "sklearn.decomposition.randomized_svd": [
    "examples.applications.wikipedia_principal_eigenvector.$toplevel"
  ],
  "sklearn.discriminant_analysis._class_cov": [
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_eigen",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_lstsq",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_svd"
  ],
  "sklearn.discriminant_analysis._class_means": [
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_eigen",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_lstsq",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_svd"
  ],
  "sklearn.discriminant_analysis._cov": [
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_eigen",
    "sklearn.discriminant_analysis._class_cov"
  ],
  "sklearn.ensemble._bagging._generate_bagging_indices": [
    "sklearn.ensemble._bagging.BaseBagging._get_estimators_indices",
    "sklearn.ensemble._bagging._parallel_build_estimators"
  ],
  "sklearn.ensemble._bagging._generate_indices": [
    "sklearn.ensemble._bagging._generate_bagging_indices",
    "sklearn.inspection._permutation_importance._calculate_permutation_scores"
  ],
  "sklearn.ensemble._bagging._parallel_build_estimators": [
    "sklearn.ensemble._bagging.BaseBagging._fit"
  ],
  "sklearn.ensemble._bagging._parallel_decision_function": [
    "sklearn.ensemble._bagging.BaggingClassifier.decision_function"
  ],
  "sklearn.ensemble._bagging._parallel_predict_log_proba": [
    "sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba"
  ],
  "sklearn.ensemble._bagging._parallel_predict_proba": [
    "sklearn.ensemble._bagging.BaggingClassifier.predict_proba"
  ],
  "sklearn.ensemble._bagging._parallel_predict_regression": [
    "sklearn.ensemble._bagging.BaggingRegressor.predict"
  ],
  "sklearn.ensemble._base._fit_single_estimator": [
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.ensemble._voting._BaseVoting.fit"
  ],
  "sklearn.ensemble._base._partition_estimators": [
    "sklearn.ensemble._bagging.BaggingClassifier.decision_function",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_proba",
    "sklearn.ensemble._bagging.BaggingRegressor.predict",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._forest.ForestClassifier.predict_proba",
    "sklearn.ensemble._forest.ForestRegressor.predict"
  ],
  "sklearn.ensemble._base._set_random_states": [
    "sklearn.ensemble._base.BaseEnsemble._make_estimator"
  ],
  "sklearn.ensemble._forest._accumulate_prediction": [
    "sklearn.ensemble._forest.ForestClassifier.predict_proba",
    "sklearn.ensemble._forest.ForestRegressor.predict"
  ],
  "sklearn.ensemble._forest._generate_sample_indices": [
    "sklearn.ensemble._forest._generate_unsampled_indices",
    "sklearn.ensemble._forest._parallel_build_trees"
  ],
  "sklearn.ensemble._forest._generate_unsampled_indices": [
    "sklearn.ensemble._forest.BaseForest._compute_oob_predictions"
  ],
  "sklearn.ensemble._forest._get_n_samples_bootstrap": [
    "sklearn.ensemble._forest.BaseForest._compute_oob_predictions",
    "sklearn.ensemble._forest.BaseForest.fit"
  ],
  "sklearn.ensemble._forest._parallel_build_trees": [
    "sklearn.ensemble._forest.BaseForest.fit"
  ],
  "sklearn.ensemble._hist_gradient_boosting.binning._find_binning_thresholds": [
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.fit"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting._update_leaves_values": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit"
  ],
  "sklearn.ensemble._hist_gradient_boosting.grower._fill_predictor_arrays": [
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.make_predictor",
    "sklearn.ensemble._hist_gradient_boosting.grower._fill_predictor_arrays"
  ],
  "sklearn.ensemble._iforest._average_path_length": [
    "sklearn.ensemble._iforest.IsolationForest._compute_score_samples",
    "sklearn.ensemble._iforest.IsolationForest.fit"
  ],
  "sklearn.ensemble._weight_boosting._samme_proba": [
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.decision_function",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_decision_function"
  ],
  "sklearn.externals._arff._build_re_values": [
    "sklearn.externals._arff.$toplevel"
  ],
  "sklearn.externals._arff._escape_sub_callback": [
    "sklearn.externals._arff._unquote"
  ],
  "sklearn.externals._arff._get_data_object_for_decoding": [
    "sklearn.externals._arff.ArffDecoder._decode"
  ],
  "sklearn.externals._arff._get_data_object_for_encoding": [
    "sklearn.externals._arff.ArffEncoder.iter_encode"
  ],
  "sklearn.externals._arff._parse_values": [
    "sklearn.externals._arff.ArffDecoder._decode_attribute",
    "sklearn.externals._arff.COOData.decode_rows",
    "sklearn.externals._arff.DenseGeneratorData.decode_rows",
    "sklearn.externals._arff.LODGeneratorData.decode_rows"
  ],
  "sklearn.externals._arff._unescape_sub_callback": [
    "sklearn.externals._arff.encode_string"
  ],
  "sklearn.externals._arff._unquote": [
    "sklearn.externals._arff._parse_values"
  ],
  "sklearn.externals._arff.encode_string": [
    "sklearn.externals._arff.ArffEncoder._encode_attribute",
    "sklearn.externals._arff.COOData.encode_data",
    "sklearn.externals._arff.DenseGeneratorData.encode_data",
    "sklearn.externals._arff.LODGeneratorData.encode_data"
  ],
  "sklearn.externals._arff.load": [
    "sklearn.datasets._arff_parser._liac_arff_parser"
  ],
  "sklearn.externals._packaging.version._cmpkey": [
    "sklearn.externals._packaging.version.Version.__init__"
  ],
  "sklearn.externals._packaging.version._legacy_cmpkey": [
    "sklearn.externals._packaging.version.LegacyVersion.__init__"
  ],
  "sklearn.externals._packaging.version._parse_letter_version": [
    "sklearn.externals._packaging.version.Version.__init__"
  ],
  "sklearn.externals._packaging.version._parse_local_version": [
    "sklearn.externals._packaging.version.Version.__init__"
  ],
  "sklearn.externals._packaging.version._parse_version_parts": [
    "sklearn.externals._packaging.version._legacy_cmpkey"
  ],
  "sklearn.externals._packaging.version.parse": [
    "build_tools.circle.list_versions.$toplevel",
    "build_tools.circle.list_versions.get_file_extension",
    "doc.conf.$toplevel",
    "doc.conftest.setup_preprocessing",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "setup.check_package_status",
    "sklearn._build_utils._check_cython_version",
    "sklearn.conftest.$toplevel",
    "sklearn.cross_decomposition._pls.$toplevel",
    "sklearn.linear_model._quantile.QuantileRegressor.fit",
    "sklearn.metrics.pairwise.$toplevel",
    "sklearn.neighbors._base.$toplevel",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform",
    "sklearn.preprocessing._polynomial.SplineTransformer.fit",
    "sklearn.preprocessing._polynomial.SplineTransformer.transform",
    "sklearn.preprocessing._polynomial._create_expansion",
    "sklearn.utils._array_api._check_array_api_dispatch",
    "sklearn.utils._in_unstable_openblas_configuration",
    "sklearn.utils.estimator_checks._set_checking_parameters",
    "sklearn.utils.fixes.$toplevel",
    "sklearn.utils.fixes._mode"
  ],
  "sklearn.feature_extraction._hash._iteritems": [
    "sklearn.feature_extraction._hash.FeatureHasher.transform"
  ],
  "sklearn.feature_extraction.image._compute_gradient_3d": [
    "sklearn.feature_extraction.image._to_graph"
  ],
  "sklearn.feature_extraction.image._compute_n_patches": [
    "sklearn.feature_extraction.image.PatchExtractor.transform",
    "sklearn.feature_extraction.image.extract_patches_2d"
  ],
  "sklearn.feature_extraction.image._extract_patches": [
    "sklearn.feature_extraction.image.extract_patches_2d"
  ],
  "sklearn.feature_extraction.image._make_edges_3d": [
    "sklearn.feature_extraction.image._to_graph"
  ],
  "sklearn.feature_extraction.image._mask_edges_weights": [
    "sklearn.feature_extraction.image._to_graph"
  ],
  "sklearn.feature_extraction.image._to_graph": [
    "sklearn.feature_extraction.image.grid_to_graph",
    "sklearn.feature_extraction.image.img_to_graph"
  ],
  "sklearn.feature_extraction.image.extract_patches_2d": [
    "examples.cluster.plot_dict_face_patches.$toplevel",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "sklearn.feature_extraction.image.PatchExtractor.transform"
  ],
  "sklearn.feature_extraction.image.grid_to_graph": [
    "examples.cluster.plot_coin_ward_segmentation.$toplevel",
    "examples.cluster.plot_digits_agglomeration.$toplevel",
    "examples.cluster.plot_feature_agglomeration_vs_univariate_selection.$toplevel"
  ],
  "sklearn.feature_extraction.image.img_to_graph": [
    "examples.cluster.plot_coin_segmentation.$toplevel",
    "examples.cluster.plot_segmentation_toy.$toplevel"
  ],
  "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [
    "examples.decomposition.plot_image_denoising.$toplevel"
  ],
  "sklearn.feature_extraction.text._analyze": [
    "sklearn.feature_extraction.text._VectorizerMixin.build_analyzer"
  ],
  "sklearn.feature_extraction.text._check_stop_list": [
    "sklearn.feature_extraction.text._VectorizerMixin.get_stop_words"
  ],
  "sklearn.feature_extraction.text._document_frequency": [
    "sklearn.feature_extraction.text.CountVectorizer._limit_features",
    "sklearn.feature_extraction.text.TfidfTransformer.fit"
  ],
  "sklearn.feature_extraction.text._make_int_array": [
    "sklearn.feature_extraction.text.CountVectorizer._count_vocab"
  ],
  "sklearn.feature_extraction.text._preprocess": [
    "sklearn.feature_extraction.text._VectorizerMixin.build_preprocessor"
  ],
  "sklearn.feature_selection._base._get_feature_importances": [
    "sklearn.feature_selection._from_model.SelectFromModel._get_support_mask",
    "sklearn.feature_selection._from_model.SelectFromModel.threshold_",
    "sklearn.feature_selection._rfe.RFE._fit"
  ],
  "sklearn.feature_selection._from_model._calculate_threshold": [
    "sklearn.feature_selection._from_model.SelectFromModel._get_support_mask",
    "sklearn.feature_selection._from_model.SelectFromModel.threshold_"
  ],
  "sklearn.feature_selection._mutual_info._compute_mi": [
    "sklearn.feature_selection._mutual_info._estimate_mi"
  ],
  "sklearn.feature_selection._mutual_info._compute_mi_cc": [
    "sklearn.feature_selection._mutual_info._compute_mi"
  ],
  "sklearn.feature_selection._mutual_info._compute_mi_cd": [
    "sklearn.feature_selection._mutual_info._compute_mi"
  ],
  "sklearn.feature_selection._mutual_info._estimate_mi": [
    "sklearn.feature_selection._mutual_info.mutual_info_classif",
    "sklearn.feature_selection._mutual_info.mutual_info_regression"
  ],
  "sklearn.feature_selection._mutual_info._iterate_columns": [
    "sklearn.feature_selection._mutual_info._estimate_mi"
  ],
  "sklearn.feature_selection._rfe._rfe_single_fit": [
    "sklearn.feature_selection._rfe.RFECV.fit"
  ],
  "sklearn.feature_selection._univariate_selection._chisquare": [
    "sklearn.feature_selection._univariate_selection.chi2"
  ],
  "sklearn.feature_selection._univariate_selection._clean_nans": [
    "sklearn.feature_selection._univariate_selection.SelectKBest._get_support_mask",
    "sklearn.feature_selection._univariate_selection.SelectPercentile._get_support_mask"
  ],
  "sklearn.feature_selection._univariate_selection.f_oneway": [
    "sklearn.feature_selection._univariate_selection.f_classif"
  ],
  "sklearn.feature_selection._univariate_selection.r_regression": [
    "sklearn.feature_selection._univariate_selection.f_regression"
  ],
  "sklearn.feature_selection.chi2": [
    "examples.compose.plot_column_transformer_mixed_types.$toplevel",
    "sklearn.utils.tests.test_pprint.test_gridsearch_pipeline"
  ],
  "sklearn.feature_selection.f_classif": [
    "examples.feature_selection.plot_feature_selection.$toplevel",
    "examples.feature_selection.plot_feature_selection_pipeline.$toplevel",
    "examples.svm.plot_svm_anova.$toplevel"
  ],
  "sklearn.feature_selection.f_regression": [
    "examples.cluster.plot_feature_agglomeration_vs_univariate_selection.$toplevel",
    "examples.feature_selection.plot_f_test_vs_mi.$toplevel"
  ],
  "sklearn.feature_selection.mutual_info_classif": [
    "examples.compose.plot_compare_reduction.$toplevel"
  ],
  "sklearn.feature_selection.mutual_info_regression": [
    "examples.feature_selection.plot_f_test_vs_mi.$toplevel"
  ],
  "sklearn.gaussian_process.kernels._approx_fprime": [
    "sklearn.gaussian_process.kernels.Matern.__call__",
    "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"
  ],
  "sklearn.gaussian_process.kernels._check_length_scale": [
    "sklearn.gaussian_process.kernels.Matern.__call__",
    "sklearn.gaussian_process.kernels.RBF.__call__"
  ],
  "sklearn.impute._base._check_inputs_dtype": [
    "sklearn.impute._base.MissingIndicator._validate_input",
    "sklearn.impute._base.SimpleImputer._validate_input",
    "sklearn.impute._iterative.IterativeImputer._initial_imputation"
  ],
  "sklearn.impute._base._most_frequent": [
    "sklearn.impute._base.SimpleImputer._dense_fit",
    "sklearn.impute._base.SimpleImputer._sparse_fit"
  ],
  "sklearn.impute._iterative._assign_where": [
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.impute._iterative.IterativeImputer.transform"
  ],
  "sklearn.inspection._partial_dependence._grid_from_X": [
    "sklearn.inspection._partial_dependence.partial_dependence"
  ],
  "sklearn.inspection._partial_dependence._partial_dependence_brute": [
    "sklearn.inspection._partial_dependence.partial_dependence"
  ],
  "sklearn.inspection._partial_dependence._partial_dependence_recursion": [
    "sklearn.inspection._partial_dependence.partial_dependence"
  ],
  "sklearn.inspection._pd_utils._check_feature_names": [
    "sklearn.inspection._partial_dependence.partial_dependence",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator"
  ],
  "sklearn.inspection._pd_utils._get_feature_index": [
    "sklearn.inspection._partial_dependence.partial_dependence",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator"
  ],
  "sklearn.inspection._permutation_importance._calculate_permutation_scores": [
    "sklearn.inspection._permutation_importance.permutation_importance"
  ],
  "sklearn.inspection._permutation_importance._create_importances_bunch": [
    "sklearn.inspection._permutation_importance.permutation_importance"
  ],
  "sklearn.inspection._permutation_importance._weights_scorer": [
    "sklearn.inspection._permutation_importance._calculate_permutation_scores",
    "sklearn.inspection._permutation_importance.permutation_importance"
  ],
  "sklearn.inspection._plot.decision_boundary._check_boundary_response_method": [
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.from_estimator"
  ],
  "sklearn.inspection.partial_dependence": [
    "examples.inspection.plot_partial_dependence.$toplevel",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator"
  ],
  "sklearn.inspection.permutation_importance": [
    "examples.ensemble.plot_forest_importances.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regression.$toplevel",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel"
  ],
  "sklearn.isotonic.check_increasing": [
    "sklearn.isotonic.IsotonicRegression._build_y"
  ],
  "sklearn.isotonic.isotonic_regression": [
    "benchmarks.bench_isotonic.bench_isotonic_regression",
    "sklearn.isotonic.IsotonicRegression._build_y"
  ],
  "sklearn.kernel_approximation.AdditiveChi2Sampler._transform_dense": [
    "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"
  ],
  "sklearn.kernel_approximation.AdditiveChi2Sampler._transform_sparse": [
    "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"
  ],
  "sklearn.linear_model._base._check_precomputed_gram_matrix": [
    "sklearn.linear_model._base._pre_fit"
  ],
  "sklearn.linear_model._base._deprecate_normalize": [
    "sklearn.linear_model._least_angle.Lars.fit",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._least_angle.LassoLarsIC.fit",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuit.fit",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.fit"
  ],
  "sklearn.linear_model._base._pre_fit": [
    "sklearn.linear_model._coordinate_descent.ElasticNet.fit",
    "sklearn.linear_model._coordinate_descent._path_residuals",
    "sklearn.linear_model._coordinate_descent.enet_path",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuit.fit"
  ],
  "sklearn.linear_model._base._preprocess_data": [
    "sklearn.linear_model._base.LinearRegression.fit",
    "sklearn.linear_model._base._pre_fit",
    "sklearn.linear_model._bayes.ARDRegression.fit",
    "sklearn.linear_model._bayes.BayesianRidge.fit",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit",
    "sklearn.linear_model._coordinate_descent._alpha_grid",
    "sklearn.linear_model._least_angle.Lars._fit",
    "sklearn.linear_model._least_angle.LassoLarsIC.fit",
    "sklearn.linear_model._ridge._BaseRidge.fit",
    "sklearn.linear_model._ridge._RidgeGCV.fit"
  ],
  "sklearn.linear_model._base._rescale_data": [
    "sklearn.linear_model._base.LinearRegression.fit",
    "sklearn.linear_model._base._pre_fit",
    "sklearn.linear_model._bayes.BayesianRidge.fit",
    "sklearn.linear_model._ridge._RidgeGCV.fit",
    "sklearn.linear_model._ridge._ridge_regression"
  ],
  "sklearn.linear_model._base.make_dataset": [
    "sklearn.linear_model._sag.sag_solver",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._fit_regressor",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._fit_one_class",
    "sklearn.linear_model._stochastic_gradient.fit_binary"
  ],
  "sklearn.linear_model._bayes._deprecate_n_iter": [
    "sklearn.linear_model._bayes.ARDRegression.fit",
    "sklearn.linear_model._bayes.BayesianRidge.fit"
  ],
  "sklearn.linear_model._coordinate_descent._alpha_grid": [
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._coordinate_descent.enet_path"
  ],
  "sklearn.linear_model._coordinate_descent._path_residuals": [
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit"
  ],
  "sklearn.linear_model._coordinate_descent._set_order": [
    "sklearn.linear_model._coordinate_descent.ElasticNet.fit"
  ],
  "sklearn.linear_model._coordinate_descent.enet_path": [
    "examples.linear_model.plot_lasso_coordinate_descent_path.$toplevel",
    "sklearn.linear_model._coordinate_descent.ElasticNet.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.ElasticNetCV.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.Lasso.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNetCV.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.lasso_path"
  ],
  "sklearn.linear_model._coordinate_descent.lasso_path": [
    "benchmarks.bench_plot_lasso_path.compute_bench",
    "examples.linear_model.plot_lasso_coordinate_descent_path.$toplevel",
    "sklearn.linear_model._coordinate_descent.LassoCV.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.MultiTaskLassoCV.$class_toplevel"
  ],
  "sklearn.linear_model._huber._huber_loss_and_gradient": [
    "sklearn.linear_model._huber.HuberRegressor.fit",
    "sklearn.linear_model.tests.test_huber.test_huber_gradient.grad_func",
    "sklearn.linear_model.tests.test_huber.test_huber_gradient.loss_func"
  ],
  "sklearn.linear_model._least_angle._check_copy_and_writeable": [
    "sklearn.linear_model._least_angle._lars_path_residues"
  ],
  "sklearn.linear_model._least_angle._lars_path_residues": [
    "sklearn.linear_model._least_angle.LarsCV.fit"
  ],
  "sklearn.linear_model._least_angle._lars_path_solver": [
    "sklearn.linear_model._least_angle.lars_path",
    "sklearn.linear_model._least_angle.lars_path_gram"
  ],
  "sklearn.linear_model._least_angle.lars_path": [
    "benchmarks.bench_plot_lasso_path.compute_bench",
    "benchmarks.bench_plot_omp_lars.compute_bench",
    "examples.linear_model.plot_lasso_lars.$toplevel",
    "sklearn.linear_model._least_angle.Lars._fit",
    "sklearn.linear_model._least_angle.LassoLarsIC.fit",
    "sklearn.linear_model._least_angle._lars_path_residues"
  ],
  "sklearn.linear_model._least_angle.lars_path_gram": [
    "benchmarks.bench_plot_lasso_path.compute_bench",
    "benchmarks.bench_plot_omp_lars.compute_bench",
    "sklearn.covariance._graph_lasso._graphical_lasso"
  ],
  "sklearn.linear_model._logistic._check_multi_class": [
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._logistic._logistic_regression_path"
  ],
  "sklearn.linear_model._logistic._check_solver": [
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._logistic._logistic_regression_path"
  ],
  "sklearn.linear_model._logistic._log_reg_scoring_path": [
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit"
  ],
  "sklearn.linear_model._logistic._logistic_regression_path": [
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._logistic._log_reg_scoring_path"
  ],
  "sklearn.linear_model._omp._cholesky_omp": [
    "sklearn.linear_model._omp.orthogonal_mp"
  ],
  "sklearn.linear_model._omp._gram_omp": [
    "sklearn.linear_model._omp.orthogonal_mp_gram"
  ],
  "sklearn.linear_model._omp._omp_path_residues": [
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.fit"
  ],
  "sklearn.linear_model._omp.orthogonal_mp": [
    "sklearn.linear_model._omp.OrthogonalMatchingPursuit.fit",
    "sklearn.linear_model._omp._omp_path_residues"
  ],
  "sklearn.linear_model._omp.orthogonal_mp_gram": [
    "sklearn.linear_model._omp.OrthogonalMatchingPursuit.fit",
    "sklearn.linear_model._omp.orthogonal_mp"
  ],
  "sklearn.linear_model._ransac._dynamic_max_trials": [
    "sklearn.linear_model._ransac.RANSACRegressor.fit"
  ],
  "sklearn.linear_model._ridge._check_gcv_mode": [
    "sklearn.linear_model._ridge._RidgeGCV.fit"
  ],
  "sklearn.linear_model._ridge._find_smallest_angle": [
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance_intercept",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_gram",
    "sklearn.linear_model._ridge._RidgeGCV._solve_svd_design_matrix"
  ],
  "sklearn.linear_model._ridge._get_rescaled_operator": [
    "sklearn.linear_model._ridge._solve_lsqr",
    "sklearn.linear_model._ridge._solve_sparse_cg"
  ],
  "sklearn.linear_model._ridge._get_valid_accept_sparse": [
    "sklearn.linear_model._ridge.Ridge.fit",
    "sklearn.linear_model._ridge._RidgeClassifierMixin._prepare_data",
    "sklearn.linear_model._ridge._ridge_regression"
  ],
  "sklearn.linear_model._ridge._ridge_regression": [
    "sklearn.linear_model._ridge._BaseRidge.fit",
    "sklearn.linear_model._ridge.ridge_regression"
  ],
  "sklearn.linear_model._ridge._solve_cholesky": [
    "sklearn.linear_model._ridge._ridge_regression"
  ],
  "sklearn.linear_model._ridge._solve_cholesky_kernel": [
    "sklearn.kernel_ridge.KernelRidge.fit",
    "sklearn.linear_model._ridge._ridge_regression"
  ],
  "sklearn.linear_model._ridge._solve_lbfgs": [
    "sklearn.linear_model._ridge._ridge_regression"
  ],
  "sklearn.linear_model._ridge._solve_lsqr": [
    "sklearn.linear_model._ridge._ridge_regression"
  ],
  "sklearn.linear_model._ridge._solve_sparse_cg": [
    "sklearn.linear_model._ridge._ridge_regression"
  ],
  "sklearn.linear_model._ridge._solve_svd": [
    "sklearn.linear_model._ridge._ridge_regression"
  ],
  "sklearn.linear_model._sag.get_auto_step_size": [
    "benchmarks.bench_rcv1_logreg_convergence.$toplevel",
    "sklearn.linear_model._sag.sag_solver"
  ],
  "sklearn.linear_model._sag.sag_solver": [
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._ridge._ridge_regression"
  ],
  "sklearn.linear_model._stochastic_gradient._get_plain_sgd_function": [
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._fit_regressor",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._fit_one_class",
    "sklearn.linear_model._stochastic_gradient.fit_binary"
  ],
  "sklearn.linear_model._stochastic_gradient._prepare_fit_binary": [
    "sklearn.linear_model._stochastic_gradient.fit_binary"
  ],
  "sklearn.linear_model._stochastic_gradient.fit_binary": [
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit_binary",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit_multiclass"
  ],
  "sklearn.linear_model._theil_sen._breakdown_point": [
    "sklearn.linear_model._theil_sen.TheilSenRegressor.fit"
  ],
  "sklearn.linear_model._theil_sen._lstsq": [
    "sklearn.linear_model._theil_sen.TheilSenRegressor.fit"
  ],
  "sklearn.linear_model._theil_sen._modified_weiszfeld_step": [
    "sklearn.linear_model._theil_sen._spatial_median"
  ],
  "sklearn.linear_model._theil_sen._spatial_median": [
    "sklearn.linear_model._theil_sen.TheilSenRegressor.fit"
  ],
  "sklearn.linear_model.orthogonal_mp": [
    "benchmarks.bench_plot_omp_lars.compute_bench"
  ],
  "sklearn.linear_model.orthogonal_mp_gram": [
    "sklearn.decomposition._dict_learning._sparse_encode_precomputed"
  ],
  "sklearn.linear_model.ridge_regression": [
    "sklearn.decomposition._sparse_pca._BaseSparsePCA.transform"
  ],
  "sklearn.linear_model.tests.test_huber.make_regression_with_outliers": [
    "sklearn.linear_model.tests.test_huber.test_huber_and_sgd_same_results",
    "sklearn.linear_model.tests.test_huber.test_huber_better_r2_score",
    "sklearn.linear_model.tests.test_huber.test_huber_equals_lr_for_high_epsilon",
    "sklearn.linear_model.tests.test_huber.test_huber_gradient",
    "sklearn.linear_model.tests.test_huber.test_huber_max_iter",
    "sklearn.linear_model.tests.test_huber.test_huber_sample_weights",
    "sklearn.linear_model.tests.test_huber.test_huber_scaling_invariant",
    "sklearn.linear_model.tests.test_huber.test_huber_sparse",
    "sklearn.linear_model.tests.test_huber.test_huber_warm_start"
  ],
  "sklearn.manifold._locally_linear.barycenter_kneighbors_graph": [
    "sklearn.manifold._locally_linear.locally_linear_embedding"
  ],
  "sklearn.manifold._locally_linear.barycenter_weights": [
    "sklearn.manifold._locally_linear.LocallyLinearEmbedding.transform",
    "sklearn.manifold._locally_linear.barycenter_kneighbors_graph"
  ],
  "sklearn.manifold._locally_linear.locally_linear_embedding": [
    "examples.manifold.plot_swissroll.$toplevel",
    "sklearn.manifold._locally_linear.LocallyLinearEmbedding._fit_transform"
  ],
  "sklearn.manifold._locally_linear.null_space": [
    "sklearn.manifold._locally_linear.locally_linear_embedding"
  ],
  "sklearn.manifold._mds._smacof_single": [
    "sklearn.manifold._mds.smacof"
  ],
  "sklearn.manifold._mds.smacof": [
    "sklearn.manifold._mds.MDS.fit_transform"
  ],
  "sklearn.manifold._spectral_embedding._graph_connected_component": [
    "sklearn.manifold._spectral_embedding._graph_is_connected"
  ],
  "sklearn.manifold._spectral_embedding._graph_is_connected": [
    "sklearn.manifold._spectral_embedding.spectral_embedding"
  ],
  "sklearn.manifold._spectral_embedding._set_diag": [
    "sklearn.manifold._spectral_embedding.spectral_embedding"
  ],
  "sklearn.manifold._spectral_embedding.spectral_embedding": [
    "sklearn.cluster._spectral.SpectralClustering.fit",
    "sklearn.manifold._spectral_embedding.SpectralEmbedding.fit"
  ],
  "sklearn.manifold._t_sne._gradient_descent": [
    "sklearn.manifold._t_sne.TSNE._tsne"
  ],
  "sklearn.manifold._t_sne._joint_probabilities": [
    "sklearn.manifold._t_sne.TSNE._fit"
  ],
  "sklearn.manifold._t_sne._joint_probabilities_nn": [
    "sklearn.manifold._t_sne.TSNE._fit"
  ],
  "sklearn.manifold._t_sne._kl_divergence": [
    "sklearn.manifold._t_sne.TSNE._tsne"
  ],
  "sklearn.manifold._t_sne._kl_divergence_bh": [
    "sklearn.manifold._t_sne.TSNE._tsne"
  ],
  "sklearn.metrics._base._average_binary_score": [
    "sklearn.metrics._ranking._multiclass_roc_auc_score",
    "sklearn.metrics._ranking.average_precision_score",
    "sklearn.metrics._ranking.roc_auc_score"
  ],
  "sklearn.metrics._base._average_multiclass_ovo_score": [
    "sklearn.metrics._ranking._multiclass_roc_auc_score"
  ],
  "sklearn.metrics._classification._check_set_wise_labels": [
    "sklearn.metrics._classification.jaccard_score",
    "sklearn.metrics._classification.precision_recall_fscore_support"
  ],
  "sklearn.metrics._classification._check_targets": [
    "sklearn.metrics._classification._check_set_wise_labels",
    "sklearn.metrics._classification.accuracy_score",
    "sklearn.metrics._classification.class_likelihood_ratios",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._classification.confusion_matrix",
    "sklearn.metrics._classification.hamming_loss",
    "sklearn.metrics._classification.matthews_corrcoef",
    "sklearn.metrics._classification.multilabel_confusion_matrix"
  ],
  "sklearn.metrics._classification._check_zero_division": [
    "sklearn.metrics._classification._prf_divide",
    "sklearn.metrics._classification.precision_recall_fscore_support"
  ],
  "sklearn.metrics._classification._prf_divide": [
    "sklearn.metrics._classification.jaccard_score",
    "sklearn.metrics._classification.precision_recall_fscore_support"
  ],
  "sklearn.metrics._classification._warn_prf": [
    "sklearn.metrics._classification._prf_divide",
    "sklearn.metrics._classification.precision_recall_fscore_support"
  ],
  "sklearn.metrics._classification._weighted_sum": [
    "sklearn.metrics._classification.accuracy_score",
    "sklearn.metrics._classification.hamming_loss",
    "sklearn.metrics._classification.log_loss"
  ],
  "sklearn.metrics._classification.accuracy_score": [
    "sklearn.metrics._classification.zero_one_loss"
  ],
  "sklearn.metrics._classification.confusion_matrix": [
    "sklearn.metrics._classification.balanced_accuracy_score",
    "sklearn.metrics._classification.class_likelihood_ratios",
    "sklearn.metrics._classification.cohen_kappa_score",
    "sklearn.metrics._classification.matthews_corrcoef"
  ],
  "sklearn.metrics._classification.fbeta_score": [
    "sklearn.metrics._classification.f1_score"
  ],
  "sklearn.metrics._classification.multilabel_confusion_matrix": [
    "sklearn.metrics._classification.jaccard_score",
    "sklearn.metrics._classification.precision_recall_fscore_support"
  ],
  "sklearn.metrics._classification.precision_recall_fscore_support": [
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._classification.fbeta_score",
    "sklearn.metrics._classification.precision_score",
    "sklearn.metrics._classification.recall_score"
  ],
  "sklearn.metrics._ranking._binary_clf_curve": [
    "sklearn.metrics._ranking.det_curve",
    "sklearn.metrics._ranking.precision_recall_curve",
    "sklearn.metrics._ranking.roc_curve"
  ],
  "sklearn.metrics._ranking._binary_roc_auc_score": [
    "sklearn.metrics._ranking._multiclass_roc_auc_score",
    "sklearn.metrics._ranking.roc_auc_score"
  ],
  "sklearn.metrics._ranking._check_dcg_target_type": [
    "sklearn.metrics._ranking.dcg_score",
    "sklearn.metrics._ranking.ndcg_score"
  ],
  "sklearn.metrics._ranking._dcg_sample_scores": [
    "sklearn.metrics._ranking._ndcg_sample_scores",
    "sklearn.metrics._ranking.dcg_score"
  ],
  "sklearn.metrics._ranking._multiclass_roc_auc_score": [
    "sklearn.metrics._ranking.roc_auc_score"
  ],
  "sklearn.metrics._ranking._ndcg_sample_scores": [
    "sklearn.metrics._ranking.ndcg_score"
  ],
  "sklearn.metrics._ranking._tie_averaged_dcg": [
    "sklearn.metrics._ranking._dcg_sample_scores"
  ],
  "sklearn.metrics._ranking.auc": [
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.from_predictions",
    "sklearn.metrics._ranking._binary_roc_auc_score"
  ],
  "sklearn.metrics._ranking.average_precision_score": [
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.from_predictions"
  ],
  "sklearn.metrics._ranking.det_curve": [
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.from_predictions"
  ],
  "sklearn.metrics._ranking.precision_recall_curve": [
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.from_predictions",
    "sklearn.metrics._ranking.average_precision_score._binary_uninterpolated_average_precision"
  ],
  "sklearn.metrics._ranking.roc_curve": [
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.from_predictions",
    "sklearn.metrics._ranking._binary_roc_auc_score"
  ],
  "sklearn.metrics._regression._assemble_r2_explained_variance": [
    "sklearn.metrics._regression.explained_variance_score",
    "sklearn.metrics._regression.r2_score"
  ],
  "sklearn.metrics._regression._check_reg_targets": [
    "sklearn.metrics._regression.d2_pinball_score",
    "sklearn.metrics._regression.d2_tweedie_score",
    "sklearn.metrics._regression.explained_variance_score",
    "sklearn.metrics._regression.max_error",
    "sklearn.metrics._regression.mean_absolute_error",
    "sklearn.metrics._regression.mean_absolute_percentage_error",
    "sklearn.metrics._regression.mean_pinball_loss",
    "sklearn.metrics._regression.mean_squared_error",
    "sklearn.metrics._regression.mean_squared_log_error",
    "sklearn.metrics._regression.mean_tweedie_deviance",
    "sklearn.metrics._regression.median_absolute_error",
    "sklearn.metrics._regression.r2_score"
  ],
  "sklearn.metrics._regression._mean_tweedie_deviance": [
    "sklearn.metrics._regression.d2_tweedie_score",
    "sklearn.metrics._regression.mean_tweedie_deviance"
  ],
  "sklearn.metrics._regression.d2_pinball_score": [
    "sklearn.metrics._regression.d2_absolute_error_score"
  ],
  "sklearn.metrics._regression.mean_pinball_loss": [
    "sklearn.metrics._regression.d2_pinball_score"
  ],
  "sklearn.metrics._regression.mean_squared_error": [
    "sklearn.metrics._regression.mean_squared_log_error"
  ],
  "sklearn.metrics._regression.mean_tweedie_deviance": [
    "sklearn.metrics._regression.d2_tweedie_score",
    "sklearn.metrics._regression.mean_gamma_deviance",
    "sklearn.metrics._regression.mean_poisson_deviance"
  ],
  "sklearn.metrics._scorer._cached_call": [
    "sklearn.metrics._scorer._BaseScorer.__call__",
    "sklearn.metrics._scorer._MultimetricScorer.__call__"
  ],
  "sklearn.metrics._scorer._check_multimetric_scoring": [
    "sklearn.inspection._permutation_importance.permutation_importance",
    "sklearn.model_selection._search.BaseSearchCV.fit",
    "sklearn.model_selection._validation.cross_validate"
  ],
  "sklearn.metrics._scorer.check_scoring": [
    "sklearn.metrics._scorer._check_multimetric_scoring"
  ],
  "sklearn.metrics._scorer.get_scorer": [
    "sklearn.metrics._scorer.check_scoring"
  ],
  "sklearn.metrics._scorer.get_scorer_names": [
    "sklearn.feature_selection._sequential.SequentialFeatureSelector.$class_toplevel",
    "sklearn.linear_model._logistic.LogisticRegressionCV.$class_toplevel",
    "sklearn.linear_model._ridge._BaseRidgeCV.$class_toplevel",
    "sklearn.model_selection._search.BaseSearchCV.$class_toplevel",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.$class_toplevel"
  ],
  "sklearn.metrics._scorer.make_scorer": [
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics._scorer.negative_likelihood_ratio": [
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics._scorer.positive_likelihood_ratio": [
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.accuracy_score": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_adult.predict",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.predict",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.ensemble.plot_adaboost_multiclass.$toplevel",
    "examples.gaussian_process.plot_gpc.$toplevel",
    "examples.model_selection.plot_multi_metric_evaluation.$toplevel",
    "examples.preprocessing.plot_scaling_importance.$toplevel",
    "examples.semi_supervised.plot_self_training_varying_threshold.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.benchmark",
    "sklearn.base.ClassifierMixin.score",
    "sklearn.covariance._elliptic_envelope.EllipticEnvelope.score",
    "sklearn.ensemble._bagging.BaggingClassifier._set_oob_score",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score",
    "sklearn.metrics._scorer.$toplevel",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier._score",
    "sklearn.utils._testing.MinimalClassifier.score",
    "sklearn.utils.estimator_checks.check_classifiers_train"
  ],
  "sklearn.metrics.adjusted_mutual_info_score": [
    "examples.cluster.plot_affinity_propagation.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel"
  ],
  "sklearn.metrics.adjusted_rand_score": [
    "examples.cluster.plot_affinity_propagation.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.text.plot_document_clustering.fit_and_evaluate",
    "sklearn.utils.estimator_checks.check_clustering"
  ],
  "sklearn.metrics.auc": [
    "benchmarks.bench_isolation_forest.$toplevel",
    "benchmarks.bench_lof.$toplevel",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.model_selection.plot_roc_crossval.$toplevel"
  ],
  "sklearn.metrics.average_precision_score": [
    "examples.model_selection.plot_precision_recall.$toplevel",
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.balanced_accuracy_score": [
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.brier_score_loss": [
    "examples.calibration.plot_calibration.$toplevel",
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.check_scoring": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.inspection._permutation_importance.permutation_importance",
    "sklearn.linear_model._ridge._RidgeGCV.fit",
    "sklearn.model_selection._search.BaseSearchCV.fit",
    "sklearn.model_selection._validation.cross_val_score",
    "sklearn.model_selection._validation.cross_validate",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.model_selection._validation.permutation_test_score",
    "sklearn.model_selection._validation.validation_curve"
  ],
  "sklearn.metrics.class_likelihood_ratios": [
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.scoring",
    "sklearn.metrics._scorer.negative_likelihood_ratio",
    "sklearn.metrics._scorer.positive_likelihood_ratio"
  ],
  "sklearn.metrics.classification_report": [
    "doc.tutorial.text_analytics.skeletons.exercise_01_language_train_model.$toplevel",
    "doc.tutorial.text_analytics.skeletons.exercise_02_sentiment.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_01_language_train_model.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_02_sentiment.$toplevel",
    "examples.applications.plot_face_recognition.$toplevel",
    "examples.classification.plot_digits_classification.$toplevel",
    "examples.compose.plot_column_transformer.$toplevel",
    "examples.feature_selection.plot_feature_selection_pipeline.$toplevel",
    "examples.model_selection.plot_grid_search_digits.$toplevel",
    "examples.neural_networks.plot_rbm_logistic_classification.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel"
  ],
  "sklearn.metrics.cluster._bicluster._check_rows_and_columns": [
    "sklearn.metrics.cluster._bicluster._pairwise_similarity"
  ],
  "sklearn.metrics.cluster._bicluster._jaccard": [
    "sklearn.metrics.cluster.tests.test_bicluster.test_jaccard"
  ],
  "sklearn.metrics.cluster._bicluster._pairwise_similarity": [
    "sklearn.metrics.cluster._bicluster.consensus_score"
  ],
  "sklearn.metrics.cluster._supervised._generalized_average": [
    "sklearn.metrics.cluster._supervised.adjusted_mutual_info_score",
    "sklearn.metrics.cluster._supervised.normalized_mutual_info_score"
  ],
  "sklearn.metrics.cluster._supervised.check_clusterings": [
    "sklearn.metrics.cluster._supervised.adjusted_mutual_info_score",
    "sklearn.metrics.cluster._supervised.fowlkes_mallows_score",
    "sklearn.metrics.cluster._supervised.homogeneity_completeness_v_measure",
    "sklearn.metrics.cluster._supervised.mutual_info_score",
    "sklearn.metrics.cluster._supervised.normalized_mutual_info_score",
    "sklearn.metrics.cluster._supervised.pair_confusion_matrix"
  ],
  "sklearn.metrics.cluster._supervised.contingency_matrix": [
    "sklearn.metrics.cluster._supervised.adjusted_mutual_info_score",
    "sklearn.metrics.cluster._supervised.fowlkes_mallows_score",
    "sklearn.metrics.cluster._supervised.homogeneity_completeness_v_measure",
    "sklearn.metrics.cluster._supervised.mutual_info_score",
    "sklearn.metrics.cluster._supervised.normalized_mutual_info_score",
    "sklearn.metrics.cluster._supervised.pair_confusion_matrix"
  ],
  "sklearn.metrics.cluster._supervised.entropy": [
    "sklearn.metrics.cluster._supervised.adjusted_mutual_info_score",
    "sklearn.metrics.cluster._supervised.homogeneity_completeness_v_measure",
    "sklearn.metrics.cluster._supervised.normalized_mutual_info_score"
  ],
  "sklearn.metrics.cluster._supervised.homogeneity_completeness_v_measure": [
    "sklearn.metrics.cluster._supervised.completeness_score",
    "sklearn.metrics.cluster._supervised.homogeneity_score",
    "sklearn.metrics.cluster._supervised.v_measure_score"
  ],
  "sklearn.metrics.cluster._supervised.mutual_info_score": [
    "sklearn.metrics.cluster._supervised.adjusted_mutual_info_score",
    "sklearn.metrics.cluster._supervised.homogeneity_completeness_v_measure",
    "sklearn.metrics.cluster._supervised.normalized_mutual_info_score"
  ],
  "sklearn.metrics.cluster._supervised.pair_confusion_matrix": [
    "sklearn.metrics.cluster._supervised.adjusted_rand_score",
    "sklearn.metrics.cluster._supervised.rand_score"
  ],
  "sklearn.metrics.cluster._unsupervised._silhouette_reduce": [
    "sklearn.metrics.cluster._unsupervised.silhouette_samples"
  ],
  "sklearn.metrics.cluster._unsupervised.check_number_of_labels": [
    "sklearn.metrics.cluster._unsupervised.calinski_harabasz_score",
    "sklearn.metrics.cluster._unsupervised.davies_bouldin_score",
    "sklearn.metrics.cluster._unsupervised.silhouette_samples"
  ],
  "sklearn.metrics.cluster._unsupervised.silhouette_samples": [
    "sklearn.metrics.cluster._unsupervised.silhouette_score"
  ],
  "sklearn.metrics.cluster.adjusted_mutual_info_score": [
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.cluster.adjusted_rand_score": [
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.cluster.completeness_score": [
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.cluster.fowlkes_mallows_score": [
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.cluster.homogeneity_score": [
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.cluster.mutual_info_score": [
    "sklearn.feature_selection._mutual_info._compute_mi",
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.cluster.normalized_mutual_info_score": [
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.cluster.rand_score": [
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.cluster.v_measure_score": [
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.completeness_score": [
    "examples.cluster.plot_affinity_propagation.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "examples.text.plot_document_clustering.fit_and_evaluate"
  ],
  "sklearn.metrics.confusion_matrix": [
    "doc.tutorial.text_analytics.skeletons.exercise_01_language_train_model.$toplevel",
    "doc.tutorial.text_analytics.skeletons.exercise_02_sentiment.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_01_language_train_model.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_02_sentiment.$toplevel",
    "examples.miscellaneous.plot_display_object_visualization.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.from_predictions"
  ],
  "sklearn.metrics.consensus_score": [
    "examples.bicluster.plot_spectral_biclustering.$toplevel",
    "examples.bicluster.plot_spectral_coclustering.$toplevel",
    "sklearn.metrics.cluster.tests.test_bicluster.test_consensus_score",
    "sklearn.metrics.cluster.tests.test_bicluster.test_consensus_score_issue2445"
  ],
  "sklearn.metrics.euclidean_distances": [
    "examples.manifold.plot_mds.$toplevel",
    "sklearn.cluster._affinity_propagation.AffinityPropagation.fit",
    "sklearn.manifold._mds.MDS.fit_transform",
    "sklearn.manifold._mds._smacof_single"
  ],
  "sklearn.metrics.explained_variance_score": [
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.f1_score": [
    "benchmarks.bench_multilabel_metrics.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.eval_and_print_metrics",
    "sklearn.utils.estimator_checks.check_class_weight_balanced_classifiers"
  ],
  "sklearn.metrics.get_scorer": [
    "sklearn.linear_model._logistic.LogisticRegressionCV.score",
    "sklearn.linear_model._logistic._log_reg_scoring_path"
  ],
  "sklearn.metrics.homogeneity_score": [
    "examples.cluster.plot_affinity_propagation.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.text.plot_document_clustering.fit_and_evaluate"
  ],
  "sklearn.metrics.jaccard_score": [
    "examples.multioutput.plot_classifier_chain_yeast.$toplevel"
  ],
  "sklearn.metrics.log_loss": [
    "benchmarks.bench_saga.fit_single",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.ensemble.plot_gradient_boosting_oob.heldout_score",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "examples.gaussian_process.plot_gpc.$toplevel",
    "examples.preprocessing.plot_scaling_importance.$toplevel",
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.make_scorer": [
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.model_selection.plot_multi_metric_evaluation.$toplevel"
  ],
  "sklearn.metrics.matthews_corrcoef": [
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.max_error": [
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.mean_absolute_error": [
    "examples.linear_model.plot_poisson_regression_non_normal_loss.score_estimator",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.mean_absolute_percentage_error": [
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.mean_gamma_deviance": [
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.mean_pinball_loss": [
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel"
  ],
  "sklearn.metrics.mean_poisson_deviance": [
    "examples.linear_model.plot_poisson_regression_non_normal_loss.score_estimator",
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.mean_squared_error": [
    "benchmarks.bench_sgd_regression.$toplevel",
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regression.$toplevel",
    "examples.linear_model.plot_ols.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.score_estimator",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.linear_model.plot_ridge_coeffs.$toplevel",
    "examples.linear_model.plot_robust_fit.$toplevel",
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.mean_squared_log_error": [
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.mean_tweedie_deviance": [
    "examples.linear_model.plot_tweedie_regression_insurance_claims.score_estimator"
  ],
  "sklearn.metrics.median_absolute_error": [
    "examples.compose.plot_transformed_target.compute_score",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.pairwise._argmin_min_reduce": [
    "sklearn.metrics.pairwise.pairwise_distances_argmin_min"
  ],
  "sklearn.metrics.pairwise._argmin_reduce": [
    "sklearn.metrics.pairwise.pairwise_distances_argmin"
  ],
  "sklearn.metrics.pairwise._check_chunk_size": [
    "sklearn.metrics.pairwise.pairwise_distances_chunked"
  ],
  "sklearn.metrics.pairwise._dist_wrapper": [
    "sklearn.metrics.pairwise._parallel_pairwise"
  ],
  "sklearn.metrics.pairwise._euclidean_distances": [
    "sklearn.cluster._kmeans._kmeans_plusplus",
    "sklearn.metrics.pairwise.euclidean_distances"
  ],
  "sklearn.metrics.pairwise._euclidean_distances_upcast": [
    "sklearn.metrics.pairwise._euclidean_distances"
  ],
  "sklearn.metrics.pairwise._pairwise_callable": [
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.metrics.pairwise.pairwise_kernels"
  ],
  "sklearn.metrics.pairwise._parallel_pairwise": [
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.metrics.pairwise.pairwise_kernels"
  ],
  "sklearn.metrics.pairwise._precompute_metric_params": [
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.metrics.pairwise.pairwise_distances_chunked"
  ],
  "sklearn.metrics.pairwise._return_float_dtype": [
    "sklearn.metrics.pairwise._parallel_pairwise",
    "sklearn.metrics.pairwise.check_pairwise_arrays"
  ],
  "sklearn.metrics.pairwise.additive_chi2_kernel": [
    "sklearn.metrics.pairwise.chi2_kernel"
  ],
  "sklearn.metrics.pairwise.check_paired_arrays": [
    "sklearn.metrics.pairwise.paired_cosine_distances",
    "sklearn.metrics.pairwise.paired_distances",
    "sklearn.metrics.pairwise.paired_euclidean_distances",
    "sklearn.metrics.pairwise.paired_manhattan_distances"
  ],
  "sklearn.metrics.pairwise.check_pairwise_arrays": [
    "sklearn.metrics.pairwise._pairwise_callable",
    "sklearn.metrics.pairwise.additive_chi2_kernel",
    "sklearn.metrics.pairwise.check_paired_arrays",
    "sklearn.metrics.pairwise.cosine_similarity",
    "sklearn.metrics.pairwise.euclidean_distances",
    "sklearn.metrics.pairwise.laplacian_kernel",
    "sklearn.metrics.pairwise.linear_kernel",
    "sklearn.metrics.pairwise.manhattan_distances",
    "sklearn.metrics.pairwise.nan_euclidean_distances",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.metrics.pairwise.pairwise_distances_argmin",
    "sklearn.metrics.pairwise.pairwise_distances_argmin_min",
    "sklearn.metrics.pairwise.pairwise_kernels",
    "sklearn.metrics.pairwise.polynomial_kernel",
    "sklearn.metrics.pairwise.rbf_kernel",
    "sklearn.metrics.pairwise.sigmoid_kernel"
  ],
  "sklearn.metrics.pairwise.cosine_similarity": [
    "sklearn.metrics.pairwise.cosine_distances"
  ],
  "sklearn.metrics.pairwise.euclidean_distances": [
    "examples.miscellaneous.plot_johnson_lindenstrauss_bound.$toplevel",
    "sklearn.cluster._birch.Birch.transform",
    "sklearn.cluster._birch._split_node",
    "sklearn.cluster._kmeans._BaseKMeans._transform",
    "sklearn.cluster._kmeans._kmeans_single_elkan",
    "sklearn.metrics.pairwise.nan_euclidean_distances",
    "sklearn.metrics.pairwise.rbf_kernel"
  ],
  "sklearn.metrics.pairwise.manhattan_distances": [
    "sklearn.metrics.pairwise.laplacian_kernel"
  ],
  "sklearn.metrics.pairwise.paired_distances": [
    "sklearn.cluster._agglomerative.linkage_tree"
  ],
  "sklearn.metrics.pairwise.pairwise_distances": [
    "asv_benchmarks.benchmarks.metrics.PairwiseDistancesBenchmark.peakmem_pairwise_distances",
    "asv_benchmarks.benchmarks.metrics.PairwiseDistancesBenchmark.time_pairwise_distances",
    "benchmarks.bench_plot_parallel_pairwise.euclidean_distances",
    "sklearn.covariance._empirical_covariance.EmpiricalCovariance.mahalanobis",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.manifold._t_sne.trustworthiness",
    "sklearn.metrics.cluster._unsupervised.davies_bouldin_score",
    "sklearn.metrics.pairwise.pairwise_distances_chunked",
    "sklearn.utils.estimator_checks._enforce_estimator_tags_X",
    "sklearn.utils.graph._fix_connected_components"
  ],
  "sklearn.metrics.pairwise.pairwise_distances_argmin": [
    "examples.cluster.plot_mini_batch_kmeans.$toplevel",
    "sklearn.cluster._mean_shift.MeanShift.predict",
    "sklearn.multiclass.OutputCodeClassifier.predict",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.predict"
  ],
  "sklearn.metrics.pairwise.pairwise_distances_chunked": [
    "sklearn.metrics.cluster._unsupervised.silhouette_samples",
    "sklearn.metrics.pairwise.pairwise_distances_argmin",
    "sklearn.metrics.pairwise.pairwise_distances_argmin_min"
  ],
  "sklearn.metrics.pairwise.pairwise_kernels": [
    "benchmarks.bench_plot_parallel_pairwise.rbf_kernels",
    "sklearn.cluster._spectral.SpectralClustering.fit",
    "sklearn.decomposition._kernel_pca.KernelPCA._get_kernel",
    "sklearn.gaussian_process.kernels.PairwiseKernel.__call__",
    "sklearn.gaussian_process.kernels.PairwiseKernel.__call__.f",
    "sklearn.kernel_approximation.Nystroem.fit",
    "sklearn.kernel_approximation.Nystroem.transform",
    "sklearn.kernel_ridge.KernelRidge._get_kernel",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_precomputed"
  ],
  "sklearn.metrics.pairwise.rbf_kernel": [
    "sklearn.manifold._spectral_embedding.SpectralEmbedding._get_affinity_matrix",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation._get_kernel",
    "sklearn.utils.estimator_checks.check_class_weight_classifiers",
    "sklearn.utils.estimator_checks.check_estimators_overwrite_params",
    "sklearn.utils.estimator_checks.check_estimators_pickle",
    "sklearn.utils.estimator_checks.check_pipeline_consistency"
  ],
  "sklearn.metrics.pairwise_distances": [
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN._weighted_cluster_center",
    "sklearn.cluster._hdbscan.hdbscan._hdbscan_brute",
    "sklearn.cluster._optics._set_reach_dist",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._loss_grad_lbfgs"
  ],
  "sklearn.metrics.pairwise_distances_argmin": [
    "examples.cluster.plot_color_quantization.$toplevel",
    "sklearn.cluster._affinity_propagation.AffinityPropagation.predict",
    "sklearn.cluster._birch.Birch._predict"
  ],
  "sklearn.metrics.pairwise_distances_chunked": [
    "sklearn.impute._knn.KNNImputer.transform",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors"
  ],
  "sklearn.metrics.precision_recall_curve": [
    "examples.miscellaneous.plot_display_object_visualization.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel"
  ],
  "sklearn.metrics.r2_score": [
    "benchmarks.bench_sparsify.score",
    "examples.compose.plot_transformed_target.compute_score",
    "examples.inspection.plot_causal_interpretation.$toplevel",
    "examples.linear_model.plot_lasso_and_elasticnet.$toplevel",
    "examples.linear_model.plot_nnls.$toplevel",
    "examples.linear_model.plot_ols.$toplevel",
    "sklearn.base.RegressorMixin.score",
    "sklearn.ensemble._bagging.BaggingRegressor._set_oob_score",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score",
    "sklearn.metrics._scorer.$toplevel",
    "sklearn.neural_network._multilayer_perceptron.MLPRegressor._score",
    "sklearn.utils._testing.MinimalRegressor.score"
  ],
  "sklearn.metrics.roc_auc_score": [
    "benchmarks.bench_hist_gradient_boosting_adult.predict",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.predict",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.roc_curve": [
    "benchmarks.bench_isolation_forest.$toplevel",
    "benchmarks.bench_lof.$toplevel",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution",
    "examples.miscellaneous.plot_display_object_visualization.$toplevel",
    "examples.model_selection.plot_roc.$toplevel"
  ],
  "sklearn.metrics.silhouette_samples": [
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel"
  ],
  "sklearn.metrics.silhouette_score": [
    "examples.cluster.plot_affinity_propagation.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.cluster.plot_kmeans_digits.bench_k_means",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.text.plot_document_clustering.fit_and_evaluate"
  ],
  "sklearn.metrics.top_k_accuracy_score": [
    "sklearn.metrics._scorer.$toplevel"
  ],
  "sklearn.metrics.v_measure_score": [
    "examples.cluster.plot_affinity_propagation.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel",
    "examples.text.plot_document_clustering.fit_and_evaluate"
  ],
  "sklearn.metrics.zero_one_loss": [
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "examples.ensemble.plot_adaboost_hastie_10_2.$toplevel"
  ],
  "sklearn.mixture._base._check_shape": [
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._check_means_parameters",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._checkcovariance_prior_parameter",
    "sklearn.mixture._gaussian_mixture._check_means",
    "sklearn.mixture._gaussian_mixture._check_precisions",
    "sklearn.mixture._gaussian_mixture._check_weights"
  ],
  "sklearn.mixture._bayesian_mixture._log_dirichlet_norm": [
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._compute_lower_bound"
  ],
  "sklearn.mixture._bayesian_mixture._log_wishart_norm": [
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._compute_lower_bound"
  ],
  "sklearn.mixture._gaussian_mixture._check_means": [
    "sklearn.mixture._gaussian_mixture.GaussianMixture._check_parameters"
  ],
  "sklearn.mixture._gaussian_mixture._check_precision_matrix": [
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._checkcovariance_prior_parameter",
    "sklearn.mixture._gaussian_mixture._check_precisions",
    "sklearn.mixture._gaussian_mixture._check_precisions_full"
  ],
  "sklearn.mixture._gaussian_mixture._check_precision_positivity": [
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._checkcovariance_prior_parameter",
    "sklearn.mixture._gaussian_mixture._check_precisions"
  ],
  "sklearn.mixture._gaussian_mixture._check_precisions": [
    "sklearn.mixture._gaussian_mixture.GaussianMixture._check_parameters"
  ],
  "sklearn.mixture._gaussian_mixture._check_precisions_full": [
    "sklearn.mixture._gaussian_mixture._check_precisions"
  ],
  "sklearn.mixture._gaussian_mixture._check_weights": [
    "sklearn.mixture._gaussian_mixture.GaussianMixture._check_parameters"
  ],
  "sklearn.mixture._gaussian_mixture._compute_log_det_cholesky": [
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._compute_lower_bound",
    "sklearn.mixture._gaussian_mixture._estimate_log_gaussian_prob"
  ],
  "sklearn.mixture._gaussian_mixture._compute_precision_cholesky": [
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_precisions",
    "sklearn.mixture._gaussian_mixture.GaussianMixture._initialize",
    "sklearn.mixture._gaussian_mixture.GaussianMixture._m_step"
  ],
  "sklearn.mixture._gaussian_mixture._estimate_gaussian_covariances_diag": [
    "sklearn.mixture._gaussian_mixture._estimate_gaussian_covariances_spherical",
    "sklearn.mixture._gaussian_mixture._estimate_gaussian_parameters"
  ],
  "sklearn.mixture._gaussian_mixture._estimate_gaussian_covariances_full": [
    "sklearn.mixture._gaussian_mixture._estimate_gaussian_parameters"
  ],
  "sklearn.mixture._gaussian_mixture._estimate_gaussian_covariances_spherical": [
    "sklearn.mixture._gaussian_mixture._estimate_gaussian_parameters"
  ],
  "sklearn.mixture._gaussian_mixture._estimate_gaussian_covariances_tied": [
    "sklearn.mixture._gaussian_mixture._estimate_gaussian_parameters"
  ],
  "sklearn.mixture._gaussian_mixture._estimate_gaussian_parameters": [
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._initialize",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._m_step",
    "sklearn.mixture._gaussian_mixture.GaussianMixture._initialize",
    "sklearn.mixture._gaussian_mixture.GaussianMixture._m_step"
  ],
  "sklearn.mixture._gaussian_mixture._estimate_log_gaussian_prob": [
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_log_prob",
    "sklearn.mixture._gaussian_mixture.GaussianMixture._estimate_log_prob"
  ],
  "sklearn.model_selection._search._check_refit": [
    "sklearn.model_selection._search.BaseSearchCV.score",
    "sklearn.model_selection._search._estimator_has.check"
  ],
  "sklearn.model_selection._search._estimator_has": [
    "sklearn.model_selection._search.BaseSearchCV.classes_"
  ],
  "sklearn.model_selection._search_successive_halving._top_k": [
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search"
  ],
  "sklearn.model_selection._split._build_repr": [
    "sklearn.model_selection._split.BaseCrossValidator.__repr__",
    "sklearn.model_selection._split.BaseShuffleSplit.__repr__",
    "sklearn.model_selection._split._RepeatedSplits.__repr__"
  ],
  "sklearn.model_selection._split._pprint": [
    "sklearn.model_selection._split._build_repr"
  ],
  "sklearn.model_selection._split._validate_shuffle_split": [
    "sklearn.model_selection._split.ShuffleSplit._iter_indices",
    "sklearn.model_selection._split.StratifiedShuffleSplit._iter_indices",
    "sklearn.model_selection._split.train_test_split"
  ],
  "sklearn.model_selection._split._yields_constant_splits": [
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._check_input_parameters"
  ],
  "sklearn.model_selection._split.check_cv": [
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector.fit",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.fit",
    "sklearn.model_selection._search.BaseSearchCV.fit",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.fit",
    "sklearn.model_selection._validation.cross_val_predict",
    "sklearn.model_selection._validation.cross_validate",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.model_selection._validation.permutation_test_score",
    "sklearn.model_selection._validation.validation_curve"
  ],
  "sklearn.model_selection._split.train_test_split": [
    "sklearn.model_selection._split.$toplevel"
  ],
  "sklearn.model_selection._validation._aggregate_score_dicts": [
    "sklearn.inspection._permutation_importance._calculate_permutation_scores",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.model_selection._validation._normalize_score_results",
    "sklearn.model_selection._validation.cross_validate",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.model_selection._validation.validation_curve"
  ],
  "sklearn.model_selection._validation._check_is_permutation": [
    "sklearn.model_selection._validation.cross_val_predict"
  ],
  "sklearn.model_selection._validation._enforce_prediction_order": [
    "sklearn.model_selection._validation._fit_and_predict"
  ],
  "sklearn.model_selection._validation._fit_and_predict": [
    "sklearn.model_selection._validation.cross_val_predict"
  ],
  "sklearn.model_selection._validation._fit_and_score": [
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._validation.cross_validate",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.model_selection._validation.validation_curve"
  ],
  "sklearn.model_selection._validation._incremental_fit_estimator": [
    "sklearn.model_selection._validation.learning_curve"
  ],
  "sklearn.model_selection._validation._insert_error_scores": [
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._validation.cross_validate"
  ],
  "sklearn.model_selection._validation._normalize_score_results": [
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.model_selection._validation.cross_validate"
  ],
  "sklearn.model_selection._validation._permutation_test_score": [
    "sklearn.model_selection._validation.permutation_test_score"
  ],
  "sklearn.model_selection._validation._score": [
    "sklearn.feature_selection._rfe._rfe_single_fit",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._incremental_fit_estimator"
  ],
  "sklearn.model_selection._validation._shuffle": [
    "sklearn.model_selection._validation.permutation_test_score"
  ],
  "sklearn.model_selection._validation._translate_train_sizes": [
    "sklearn.model_selection._validation.learning_curve"
  ],
  "sklearn.model_selection._validation._warn_or_raise_about_fit_failures": [
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._validation.cross_validate"
  ],
  "sklearn.model_selection._validation.cross_validate": [
    "sklearn.model_selection._validation.cross_val_score"
  ],
  "sklearn.model_selection._validation.learning_curve": [
    "sklearn.model_selection._plot.LearningCurveDisplay.from_estimator"
  ],
  "sklearn.model_selection._validation.validation_curve": [
    "sklearn.model_selection._plot.ValidationCurveDisplay.from_estimator"
  ],
  "sklearn.model_selection.cross_val_predict": [
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.model_selection.plot_cv_predict.$toplevel",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.multioutput._BaseChain.fit"
  ],
  "sklearn.model_selection.cross_val_score": [
    "asv_benchmarks.benchmarks.model_selection.CrossValidationBenchmark.peakmem_crossval",
    "asv_benchmarks.benchmarks.model_selection.CrossValidationBenchmark.time_crossval",
    "asv_benchmarks.benchmarks.model_selection.CrossValidationBenchmark.track_crossval",
    "examples.decomposition.plot_pca_vs_fa_model_selection.compute_scores",
    "examples.decomposition.plot_pca_vs_fa_model_selection.lw_score",
    "examples.decomposition.plot_pca_vs_fa_model_selection.shrunk_cov_score",
    "examples.exercises.plot_cv_digits.$toplevel",
    "examples.impute.plot_iterative_imputer_variants_comparison.$toplevel",
    "examples.impute.plot_missing_values.get_full_score",
    "examples.impute.plot_missing_values.get_scores_for_imputer",
    "examples.model_selection.plot_nested_cross_validation_iris.$toplevel",
    "examples.model_selection.plot_underfitting_overfitting.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel",
    "examples.svm.plot_svm_anova.$toplevel",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector._get_best_new_feature_score"
  ],
  "sklearn.model_selection.cross_validate": [
    "examples.applications.plot_cyclical_feature_engineering.evaluate",
    "examples.ensemble.plot_gradient_boosting_categorical.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.preprocessing.plot_target_encoder.evaluate_model_and_store"
  ],
  "sklearn.model_selection.learning_curve": [
    "examples.model_selection.plot_learning_curve.$toplevel"
  ],
  "sklearn.model_selection.permutation_test_score": [
    "examples.model_selection.plot_permutation_tests_for_classification.$toplevel"
  ],
  "sklearn.model_selection.train_test_split": [
    "asv_benchmarks.benchmarks.datasets._20newsgroups_highdim_dataset",
    "asv_benchmarks.benchmarks.datasets._20newsgroups_lowdim_dataset",
    "asv_benchmarks.benchmarks.datasets._blobs_dataset",
    "asv_benchmarks.benchmarks.datasets._digits_dataset",
    "asv_benchmarks.benchmarks.datasets._mnist_dataset",
    "asv_benchmarks.benchmarks.datasets._olivetti_faces_dataset",
    "asv_benchmarks.benchmarks.datasets._random_dataset",
    "asv_benchmarks.benchmarks.datasets._synth_classification_dataset",
    "asv_benchmarks.benchmarks.datasets._synth_regression_dataset",
    "asv_benchmarks.benchmarks.datasets._synth_regression_sparse_dataset",
    "benchmarks.bench_hist_gradient_boosting.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_adult.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel",
    "benchmarks.bench_plot_polynomial_kernel_approximation.$toplevel",
    "benchmarks.bench_saga.fit_single",
    "doc.tutorial.text_analytics.skeletons.exercise_01_language_train_model.$toplevel",
    "doc.tutorial.text_analytics.skeletons.exercise_02_sentiment.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_01_language_train_model.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_02_sentiment.$toplevel",
    "examples.applications.plot_digits_denoising.$toplevel",
    "examples.applications.plot_face_recognition.$toplevel",
    "examples.applications.plot_model_complexity_influence.generate_data",
    "examples.applications.plot_prediction_latency.generate_dataset",
    "examples.calibration.plot_calibration.$toplevel",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.calibration.plot_compare_calibration.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.classification.plot_digits_classification.$toplevel",
    "examples.compose.plot_column_transformer_mixed_types.$toplevel",
    "examples.compose.plot_transformed_target.$toplevel",
    "examples.cross_decomposition.plot_pcr_vs_pls.$toplevel",
    "examples.decomposition.plot_kernel_pca.$toplevel",
    "examples.ensemble.plot_adaboost_hastie_10_2.$toplevel",
    "examples.ensemble.plot_feature_transformation.$toplevel",
    "examples.ensemble.plot_forest_importances.$toplevel",
    "examples.ensemble.plot_gradient_boosting_early_stopping.$toplevel",
    "examples.ensemble.plot_gradient_boosting_oob.$toplevel",
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regression.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "examples.ensemble.plot_isolation_forest.$toplevel",
    "examples.ensemble.plot_random_forest_regression_multioutput.$toplevel",
    "examples.feature_selection.plot_feature_selection.$toplevel",
    "examples.feature_selection.plot_feature_selection_pipeline.$toplevel",
    "examples.inspection.plot_causal_interpretation.$toplevel",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.linear_model.plot_lasso_and_elasticnet.$toplevel",
    "examples.linear_model.plot_nnls.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_sgd_comparison.$toplevel",
    "examples.linear_model.plot_sgd_early_stopping.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_20newsgroups.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_mnist.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.miscellaneous.plot_display_object_visualization.$toplevel",
    "examples.miscellaneous.plot_roc_curve_visualization_api.$toplevel",
    "examples.miscellaneous.plot_set_output.$toplevel",
    "examples.model_selection.plot_confusion_matrix.$toplevel",
    "examples.model_selection.plot_det.$toplevel",
    "examples.model_selection.plot_grid_search_digits.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.model_selection.plot_train_error_vs_test_error.$toplevel",
    "examples.multioutput.plot_classifier_chain_yeast.$toplevel",
    "examples.neighbors.plot_nca_classification.$toplevel",
    "examples.neighbors.plot_nca_dim_reduction.$toplevel",
    "examples.neural_networks.plot_mlp_alpha.$toplevel",
    "examples.neural_networks.plot_mnist_filters.$toplevel",
    "examples.neural_networks.plot_rbm_logistic_classification.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_map_data_to_normal.$toplevel",
    "examples.preprocessing.plot_scaling_importance.$toplevel",
    "examples.preprocessing.plot_target_encoder_cross_val.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "examples.tree.plot_cost_complexity_pruning.$toplevel",
    "examples.tree.plot_unveil_tree_structure.$toplevel",
    "sklearn.ensemble._gb.BaseGradientBoosting.fit",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.utils.estimator_checks.check_class_weight_classifiers",
    "sklearn.utils.estimator_checks.check_decision_proba_consistency"
  ],
  "sklearn.model_selection.validation_curve": [
    "examples.svm.plot_svm_scale_c.$toplevel"
  ],
  "sklearn.multiclass._fit_binary": [
    "sklearn.multiclass.OneVsRestClassifier.fit",
    "sklearn.multiclass.OutputCodeClassifier.fit",
    "sklearn.multiclass._fit_ovo_binary"
  ],
  "sklearn.multiclass._fit_ovo_binary": [
    "sklearn.multiclass.OneVsOneClassifier.fit"
  ],
  "sklearn.multiclass._partial_fit_binary": [
    "sklearn.multiclass.OneVsRestClassifier.partial_fit",
    "sklearn.multiclass._partial_fit_ovo_binary"
  ],
  "sklearn.multiclass._partial_fit_ovo_binary": [
    "sklearn.multiclass.OneVsOneClassifier.partial_fit"
  ],
  "sklearn.multiclass._predict_binary": [
    "sklearn.multiclass.OneVsOneClassifier.decision_function",
    "sklearn.multiclass.OneVsRestClassifier.predict",
    "sklearn.multiclass.OutputCodeClassifier.predict"
  ],
  "sklearn.multiclass._threshold_for_binary_predict": [
    "sklearn.multiclass.OneVsOneClassifier.predict",
    "sklearn.multiclass.OneVsRestClassifier.predict"
  ],
  "sklearn.multioutput._fit_estimator": [
    "sklearn.multioutput._MultiOutputEstimator.fit"
  ],
  "sklearn.multioutput._partial_fit_estimator": [
    "sklearn.multioutput._MultiOutputEstimator.partial_fit"
  ],
  "sklearn.neighbors._base._check_precomputed": [
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors",
    "sklearn.neighbors._base.NeighborsBase._fit",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict_proba"
  ],
  "sklearn.neighbors._base._get_weights": [
    "sklearn.impute._knn.KNNImputer._calc_impute",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict_proba",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba",
    "sklearn.neighbors._regression.KNeighborsRegressor.predict",
    "sklearn.neighbors._regression.RadiusNeighborsRegressor.predict"
  ],
  "sklearn.neighbors._base._is_sorted_by_data": [
    "sklearn.neighbors._base.sort_graph_by_row_values"
  ],
  "sklearn.neighbors._base._kneighbors_from_graph": [
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors"
  ],
  "sklearn.neighbors._base._radius_neighbors_from_graph": [
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors"
  ],
  "sklearn.neighbors._base._tree_query_parallel_helper": [
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors"
  ],
  "sklearn.neighbors._base._tree_query_radius_parallel_helper": [
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors"
  ],
  "sklearn.neighbors._base.sort_graph_by_row_values": [
    "sklearn.neighbors._base._check_precomputed"
  ],
  "sklearn.neighbors._classification._adjusted_metric": [
    "sklearn.neighbors._classification.KNeighborsClassifier.predict_proba"
  ],
  "sklearn.neighbors._graph._check_params": [
    "sklearn.neighbors._graph.kneighbors_graph",
    "sklearn.neighbors._graph.radius_neighbors_graph"
  ],
  "sklearn.neighbors._graph._query_include_self": [
    "sklearn.neighbors._graph.kneighbors_graph",
    "sklearn.neighbors._graph.radius_neighbors_graph"
  ],
  "sklearn.neighbors._graph.kneighbors_graph": [
    "examples.cluster.plot_agglomerative_clustering.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_ward_structured_vs_unstructured.$toplevel",
    "sklearn.cluster._spectral.SpectralClustering.fit",
    "sklearn.manifold._isomap.Isomap._fit_transform",
    "sklearn.manifold._spectral_embedding.SpectralEmbedding._get_affinity_matrix"
  ],
  "sklearn.neighbors._graph.radius_neighbors_graph": [
    "sklearn.manifold._isomap.Isomap._fit_transform"
  ],
  "sklearn.neural_network._multilayer_perceptron._pack": [
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_lbfgs",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._loss_grad_lbfgs"
  ],
  "sklearn.pipeline._fit_one": [
    "sklearn.pipeline.FeatureUnion.fit"
  ],
  "sklearn.pipeline._fit_transform_one": [
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform",
    "sklearn.pipeline.FeatureUnion.fit_transform",
    "sklearn.pipeline.Pipeline._fit"
  ],
  "sklearn.pipeline._name_estimators": [
    "sklearn.compose._column_transformer._get_transformer_list",
    "sklearn.pipeline.make_pipeline",
    "sklearn.pipeline.make_union"
  ],
  "sklearn.pipeline._transform_one": [
    "sklearn.compose._column_transformer.ColumnTransformer.transform",
    "sklearn.pipeline.FeatureUnion.transform"
  ],
  "sklearn.pipeline.make_pipeline": [
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.cluster.plot_kmeans_digits.bench_k_means",
    "examples.cross_decomposition.plot_pcr_vs_pls.$toplevel",
    "examples.ensemble.plot_feature_transformation.$toplevel",
    "examples.ensemble.plot_gradient_boosting_categorical.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.feature_selection.plot_feature_selection.$toplevel",
    "examples.feature_selection.plot_feature_selection_pipeline.$toplevel",
    "examples.impute.plot_iterative_imputer_variants_comparison.$toplevel",
    "examples.impute.plot_missing_values.get_scores_for_imputer",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.linear_model.plot_ard.$toplevel",
    "examples.linear_model.plot_lasso_lars_ic.$toplevel",
    "examples.linear_model.plot_lasso_model_selection.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_polynomial_interpolation.$toplevel",
    "examples.linear_model.plot_robust_fit.$toplevel",
    "examples.linear_model.plot_sgdocsvm_vs_ocsvm.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_display_object_visualization.$toplevel",
    "examples.miscellaneous.plot_estimator_representation.$toplevel",
    "examples.miscellaneous.plot_partial_dependence_visualization_api.$toplevel",
    "examples.miscellaneous.plot_pipeline_display.$toplevel",
    "examples.miscellaneous.plot_set_output.$toplevel",
    "examples.model_selection.plot_det.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.neighbors.plot_nca_dim_reduction.$toplevel",
    "examples.neural_networks.plot_mlp_alpha.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_scaling_importance.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.preprocessing.plot_target_encoder_cross_val.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_0_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_2_0.$toplevel",
    "examples.text.plot_document_clustering.$toplevel",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_dbscan",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_isomap",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_kneighbors_regressor",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_lof_novelty_false",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_lof_novelty_true",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_spectral_clustering",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_spectral_embedding",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_tsne",
    "sklearn.utils.estimator_checks.check_pipeline_consistency",
    "sklearn.utils.tests.test_pprint.test_complexity_print_changed_only",
    "sklearn.utils.tests.test_pprint.test_pipeline"
  ],
  "sklearn.preprocessing._data._handle_zeros_in_scale": [
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.preprocessing._data.MaxAbsScaler.partial_fit",
    "sklearn.preprocessing._data.MinMaxScaler.partial_fit",
    "sklearn.preprocessing._data.RobustScaler.fit",
    "sklearn.preprocessing._data.StandardScaler.partial_fit",
    "sklearn.preprocessing._data.normalize",
    "sklearn.preprocessing._data.scale"
  ],
  "sklearn.preprocessing._data._is_constant_feature": [
    "sklearn.linear_model._base._preprocess_data",
    "sklearn.preprocessing._data.PowerTransformer._fit",
    "sklearn.preprocessing._data.StandardScaler.partial_fit"
  ],
  "sklearn.preprocessing._data.add_dummy_feature": [
    "sklearn.preprocessing._data.add_dummy_feature"
  ],
  "sklearn.preprocessing._data.binarize": [
    "sklearn.preprocessing._data.Binarizer.transform"
  ],
  "sklearn.preprocessing._data.normalize": [
    "sklearn.preprocessing._data.Normalizer.transform"
  ],
  "sklearn.preprocessing._label._inverse_binarize_multiclass": [
    "sklearn.preprocessing._label.LabelBinarizer.inverse_transform"
  ],
  "sklearn.preprocessing._label._inverse_binarize_thresholding": [
    "sklearn.preprocessing._label.LabelBinarizer.inverse_transform"
  ],
  "sklearn.preprocessing._label.label_binarize": [
    "sklearn.preprocessing._label.LabelBinarizer.transform"
  ],
  "sklearn.preprocessing._polynomial._create_expansion": [
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform"
  ],
  "sklearn.preprocessing.binarize": [
    "sklearn.naive_bayes.BernoulliNB._check_X",
    "sklearn.naive_bayes.BernoulliNB._check_X_y"
  ],
  "sklearn.preprocessing.label_binarize": [
    "examples.model_selection.plot_precision_recall.$toplevel",
    "sklearn.calibration._fit_calibrator",
    "sklearn.metrics._ranking._multiclass_roc_auc_score",
    "sklearn.metrics._ranking.average_precision_score",
    "sklearn.metrics._ranking.roc_auc_score",
    "sklearn.naive_bayes._BaseDiscreteNB.partial_fit"
  ],
  "sklearn.preprocessing.minmax_scale": [
    "examples.neural_networks.plot_rbm_logistic_classification.$toplevel",
    "examples.preprocessing.plot_all_scaling.$toplevel"
  ],
  "sklearn.preprocessing.normalize": [
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized",
    "sklearn.feature_extraction.text.HashingVectorizer.transform",
    "sklearn.feature_extraction.text.TfidfTransformer.transform",
    "sklearn.impute._iterative.IterativeImputer._get_abs_corr_mat",
    "sklearn.metrics.pairwise.cosine_similarity",
    "sklearn.metrics.pairwise.paired_cosine_distances"
  ],
  "sklearn.preprocessing.quantile_transform": [
    "examples.compose.plot_transformed_target.$toplevel"
  ],
  "sklearn.preprocessing.scale": [
    "sklearn.datasets._base.load_diabetes",
    "sklearn.feature_selection._mutual_info._estimate_mi",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_decision_function",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_representation_invariance",
    "sklearn.utils.estimator_checks.check_regressors_train"
  ],
  "sklearn.random_projection._check_density": [
    "sklearn.random_projection.SparseRandomProjection._make_random_matrix",
    "sklearn.random_projection._sparse_random_matrix"
  ],
  "sklearn.random_projection._check_input_size": [
    "sklearn.random_projection._gaussian_random_matrix",
    "sklearn.random_projection._sparse_random_matrix"
  ],
  "sklearn.random_projection._gaussian_random_matrix": [
    "sklearn.random_projection.GaussianRandomProjection._make_random_matrix"
  ],
  "sklearn.random_projection._sparse_random_matrix": [
    "sklearn.random_projection.SparseRandomProjection._make_random_matrix"
  ],
  "sklearn.random_projection.johnson_lindenstrauss_min_dim": [
    "benchmarks.bench_random_projections.$toplevel",
    "examples.miscellaneous.plot_johnson_lindenstrauss_bound.$toplevel",
    "sklearn.random_projection.BaseRandomProjection.fit"
  ],
  "sklearn.svm._base._fit_liblinear": [
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.svm._classes.LinearSVC.fit",
    "sklearn.svm._classes.LinearSVR.fit"
  ],
  "sklearn.svm._base._get_liblinear_solver_type": [
    "sklearn.svm._base._fit_liblinear",
    "sklearn.svm._classes._validate_dual_parameter"
  ],
  "sklearn.svm._base._one_vs_one_coef": [
    "sklearn.svm._base.BaseSVC._get_coef"
  ],
  "sklearn.svm._classes._validate_dual_parameter": [
    "sklearn.svm._classes.LinearSVC.fit",
    "sklearn.svm._classes.LinearSVR.fit"
  ],
  "sklearn.svm.l1_min_c": [
    "examples.linear_model.plot_logistic_path.$toplevel"
  ],
  "sklearn.tree._export._color_brew": [
    "sklearn.tree._export._BaseTreeExporter.get_fill_color"
  ],
  "sklearn.tree._export._compute_depth": [
    "sklearn.tree._export.export_text.print_tree_recurse"
  ],
  "sklearn.tree._reingold_tilford.ancestor": [
    "sklearn.tree._reingold_tilford.apportion"
  ],
  "sklearn.tree._reingold_tilford.apportion": [
    "sklearn.tree._reingold_tilford.first_walk"
  ],
  "sklearn.tree._reingold_tilford.buchheim": [
    "sklearn.tree._export._MPLTreeExporter.export"
  ],
  "sklearn.tree._reingold_tilford.execute_shifts": [
    "sklearn.tree._reingold_tilford.first_walk"
  ],
  "sklearn.tree._reingold_tilford.first_walk": [
    "sklearn.tree._reingold_tilford.buchheim",
    "sklearn.tree._reingold_tilford.first_walk"
  ],
  "sklearn.tree._reingold_tilford.move_subtree": [
    "sklearn.tree._reingold_tilford.apportion"
  ],
  "sklearn.tree._reingold_tilford.second_walk": [
    "sklearn.tree._reingold_tilford.buchheim",
    "sklearn.tree._reingold_tilford.second_walk"
  ],
  "sklearn.tree._reingold_tilford.third_walk": [
    "sklearn.tree._reingold_tilford.buchheim",
    "sklearn.tree._reingold_tilford.third_walk"
  ],
  "sklearn.tree.plot_tree": [
    "examples.tree.plot_iris_dtc.$toplevel",
    "examples.tree.plot_unveil_tree_structure.$toplevel"
  ],
  "sklearn.utils._approximate_mode": [
    "sklearn.model_selection._split.StratifiedShuffleSplit._iter_indices",
    "sklearn.utils.resample"
  ],
  "sklearn.utils._arpack._init_arpack_v0": [
    "benchmarks.bench_plot_randomized_svd.norm_diff",
    "sklearn.decomposition._kernel_pca.KernelPCA._fit_transform",
    "sklearn.decomposition._pca.PCA._fit_truncated",
    "sklearn.decomposition._truncated_svd.TruncatedSVD.fit_transform",
    "sklearn.manifold._locally_linear.null_space",
    "sklearn.manifold._spectral_embedding.spectral_embedding"
  ],
  "sklearn.utils._array_api._accept_device_cpu": [
    "sklearn.utils._array_api._NumPyAPIWrapper.__getattr__"
  ],
  "sklearn.utils._array_api._asarray_with_order": [
    "sklearn.utils.validation.check_array",
    "sklearn.utils.validation.column_or_1d"
  ],
  "sklearn.utils._array_api._check_array_api_dispatch": [
    "sklearn._config.set_config",
    "sklearn.utils._array_api.get_namespace",
    "sklearn.utils._testing.$toplevel"
  ],
  "sklearn.utils._array_api._check_device_cpu": [
    "sklearn.utils._array_api._NumPyAPIWrapper.asarray",
    "sklearn.utils._array_api._accept_device_cpu.wrapped_func"
  ],
  "sklearn.utils._array_api._convert_to_numpy": [
    "sklearn.utils.estimator_checks.check_array_api_input"
  ],
  "sklearn.utils._array_api._expit": [
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"
  ],
  "sklearn.utils._array_api._is_numpy_namespace": [
    "sklearn.utils._array_api._asarray_with_order",
    "sklearn.utils._array_api._expit",
    "sklearn.utils.extmath.softmax",
    "sklearn.utils.validation.check_array"
  ],
  "sklearn.utils._array_api._isdtype_single": [
    "sklearn.utils._array_api._isdtype_single",
    "sklearn.utils._array_api.isdtype"
  ],
  "sklearn.utils._array_api.device": [
    "sklearn.discriminant_analysis._class_means",
    "sklearn.utils.estimator_checks.check_array_api_input"
  ],
  "sklearn.utils._array_api.get_namespace": [
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_svd",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform",
    "sklearn.discriminant_analysis._class_means",
    "sklearn.linear_model._base.LinearClassifierMixin.decision_function",
    "sklearn.linear_model._base.LinearClassifierMixin.predict",
    "sklearn.utils._array_api._asarray_with_order",
    "sklearn.utils._array_api._expit",
    "sklearn.utils.estimator_checks.check_array_api_input",
    "sklearn.utils.extmath.softmax",
    "sklearn.utils.multiclass._unique_multiclass",
    "sklearn.utils.multiclass.is_multilabel",
    "sklearn.utils.multiclass.type_of_target",
    "sklearn.utils.multiclass.unique_labels",
    "sklearn.utils.tests.test_estimator_checks.BrokenArrayAPI.predict",
    "sklearn.utils.validation._assert_all_finite",
    "sklearn.utils.validation.check_array",
    "sklearn.utils.validation.check_non_negative",
    "sklearn.utils.validation.column_or_1d"
  ],
  "sklearn.utils._array_api.isdtype": [
    "sklearn.utils._array_api._ArrayAPIWrapper.isdtype",
    "sklearn.utils._array_api._NumPyAPIWrapper.isdtype"
  ],
  "sklearn.utils._array_api.size": [
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"
  ],
  "sklearn.utils._array_indexing": [
    "sklearn.utils._safe_indexing"
  ],
  "sklearn.utils._available_if.available_if": [
    "sklearn.multioutput._available_if_base_estimator_has",
    "sklearn.multioutput._available_if_estimator_has"
  ],
  "sklearn.utils._chunk_generator": [
    "sklearn.datasets._arff_parser._liac_arff_parser"
  ],
  "sklearn.utils._determine_key_type": [
    "sklearn.inspection._partial_dependence.partial_dependence",
    "sklearn.utils._determine_key_type",
    "sklearn.utils._get_column_indices",
    "sklearn.utils._safe_indexing"
  ],
  "sklearn.utils._encode._check_unknown": [
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.preprocessing._encoders._BaseEncoder._transform",
    "sklearn.utils._encode._encode"
  ],
  "sklearn.utils._encode._encode": [
    "sklearn.metrics._ranking._multiclass_roc_auc_score",
    "sklearn.metrics._ranking.top_k_accuracy_score",
    "sklearn.preprocessing._encoders._BaseEncoder._transform",
    "sklearn.preprocessing._label.LabelEncoder.transform"
  ],
  "sklearn.utils._encode._extract_missing": [
    "sklearn.utils._encode._check_unknown",
    "sklearn.utils._encode._unique_python"
  ],
  "sklearn.utils._encode._get_counts": [
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.utils._encode._unique_python"
  ],
  "sklearn.utils._encode._map_to_integer": [
    "sklearn.utils._encode._encode",
    "sklearn.utils._encode._unique_python"
  ],
  "sklearn.utils._encode._unique": [
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.metrics._ranking._multiclass_roc_auc_score",
    "sklearn.metrics._ranking.top_k_accuracy_score",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.preprocessing._label.LabelEncoder.fit",
    "sklearn.preprocessing._label.LabelEncoder.fit_transform"
  ],
  "sklearn.utils._encode._unique_np": [
    "sklearn.utils._encode._get_counts",
    "sklearn.utils._encode._unique"
  ],
  "sklearn.utils._encode._unique_python": [
    "sklearn.utils._encode._unique"
  ],
  "sklearn.utils._estimator_html_repr._get_visual_block": [
    "sklearn.utils._estimator_html_repr._write_estimator_html"
  ],
  "sklearn.utils._estimator_html_repr._write_estimator_html": [
    "sklearn.utils._estimator_html_repr._write_estimator_html",
    "sklearn.utils._estimator_html_repr.estimator_html_repr"
  ],
  "sklearn.utils._estimator_html_repr._write_label_html": [
    "sklearn.utils._estimator_html_repr._write_estimator_html"
  ],
  "sklearn.utils._estimator_html_repr.estimator_html_repr": [
    "sklearn.base.BaseEstimator._repr_html_inner",
    "sklearn.base.BaseEstimator._repr_mimebundle_"
  ],
  "sklearn.utils._get_column_indices": [
    "sklearn.compose._column_transformer.ColumnTransformer._validate_column_callables",
    "sklearn.inspection._partial_dependence.partial_dependence"
  ],
  "sklearn.utils._in_unstable_openblas_configuration": [
    "sklearn.utils._testing.$toplevel"
  ],
  "sklearn.utils._is_pandas_na": [
    "sklearn.impute._base.SimpleImputer._more_tags",
    "sklearn.impute._base.SimpleImputer._validate_input",
    "sklearn.impute._base._check_inputs_dtype"
  ],
  "sklearn.utils._list_indexing": [
    "sklearn.utils._safe_indexing"
  ],
  "sklearn.utils._mask._get_dense_mask": [
    "sklearn.utils._mask._get_mask"
  ],
  "sklearn.utils._mask._get_mask": [
    "sklearn.impute._base.MissingIndicator._get_missing_features_info",
    "sklearn.impute._base.SimpleImputer._dense_fit",
    "sklearn.impute._base.SimpleImputer._sparse_fit",
    "sklearn.impute._base.SimpleImputer.get_feature_names_out",
    "sklearn.impute._base.SimpleImputer.transform",
    "sklearn.impute._iterative.IterativeImputer._initial_imputation",
    "sklearn.impute._knn.KNNImputer.fit",
    "sklearn.impute._knn.KNNImputer.transform",
    "sklearn.metrics.pairwise.nan_euclidean_distances",
    "sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform"
  ],
  "sklearn.utils._message_with_time": [
    "sklearn.utils._print_elapsed_time"
  ],
  "sklearn.utils._metadata_requests._routing_enabled": [
    "sklearn.calibration.CalibratedClassifierCV._get_estimator",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.metrics._scorer._BaseScorer.__call__",
    "sklearn.metrics._scorer._MultimetricScorer.__call__",
    "sklearn.multioutput.ClassifierChain.fit",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.multioutput._MultiOutputEstimator.fit",
    "sklearn.multioutput._MultiOutputEstimator.partial_fit",
    "sklearn.utils._metadata_requests.RequestMethod.__get__.func"
  ],
  "sklearn.utils._metadata_requests.get_routing_for_object": [
    "examples.miscellaneous.plot_metadata_routing.MetaClassifier.fit",
    "examples.miscellaneous.plot_metadata_routing.MetaClassifier.predict",
    "examples.miscellaneous.plot_metadata_routing.RouterConsumerClassifier.fit",
    "examples.miscellaneous.plot_metadata_routing.RouterConsumerClassifier.predict",
    "sklearn.metrics._scorer._PassthroughScorer.get_metadata_routing",
    "sklearn.utils._metadata_requests.MetadataRouter.add",
    "sklearn.utils._metadata_requests._MetadataRequester._get_metadata_request",
    "sklearn.utils._metadata_requests.process_routing"
  ],
  "sklearn.utils._metadata_requests.process_routing": [
    "examples.miscellaneous.plot_metadata_routing.MetaRegressor.fit",
    "examples.miscellaneous.plot_metadata_routing.SimplePipeline.fit",
    "examples.miscellaneous.plot_metadata_routing.SimplePipeline.predict",
    "examples.miscellaneous.plot_metadata_routing.WeightedMetaRegressor.fit",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.metrics._scorer._MultimetricScorer.__call__",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.multioutput._MultiOutputEstimator.fit",
    "sklearn.multioutput._MultiOutputEstimator.partial_fit"
  ],
  "sklearn.utils._metadata_requests.request_is_alias": [
    "sklearn.utils._metadata_requests.MethodMetadataRequest.add_request"
  ],
  "sklearn.utils._metadata_requests.request_is_valid": [
    "sklearn.utils._metadata_requests.MethodMetadataRequest._get_param_names",
    "sklearn.utils._metadata_requests.MethodMetadataRequest.add_request"
  ],
  "sklearn.utils._pandas_indexing": [
    "sklearn.utils._safe_indexing"
  ],
  "sklearn.utils._param_validation._type_name": [
    "sklearn.utils._param_validation.Options.__str__",
    "sklearn.utils._param_validation._InstancesOf.__str__"
  ],
  "sklearn.utils._param_validation.generate_invalid_param_val": [
    "sklearn.utils.estimator_checks.check_param_validation"
  ],
  "sklearn.utils._param_validation.make_constraint": [
    "sklearn.utils._param_validation.make_constraint",
    "sklearn.utils._param_validation.validate_parameter_constraints",
    "sklearn.utils.estimator_checks.check_param_validation"
  ],
  "sklearn.utils._param_validation.validate_parameter_constraints": [
    "sklearn.base.BaseEstimator._validate_params",
    "sklearn.utils._param_validation.validate_params.decorator.wrapper"
  ],
  "sklearn.utils._plotting._interval_max_min_ratio": [
    "sklearn.model_selection._plot._BaseCurveDisplay._plot_curve"
  ],
  "sklearn.utils._plotting._validate_score_name": [
    "sklearn.model_selection._plot.LearningCurveDisplay.from_estimator",
    "sklearn.model_selection._plot.ValidationCurveDisplay.from_estimator"
  ],
  "sklearn.utils._pprint._changed_params": [
    "sklearn.utils._pprint._EstimatorPrettyPrinter._pprint_estimator",
    "sklearn.utils._pprint._safe_repr"
  ],
  "sklearn.utils._pprint._safe_repr": [
    "sklearn.utils._pprint._EstimatorPrettyPrinter.format",
    "sklearn.utils._pprint._safe_repr"
  ],
  "sklearn.utils._print_elapsed_time": [
    "sklearn.ensemble._base._fit_single_estimator",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.pipeline.Pipeline._fit",
    "sklearn.pipeline.Pipeline.fit",
    "sklearn.pipeline.Pipeline.fit_predict",
    "sklearn.pipeline.Pipeline.fit_transform",
    "sklearn.pipeline._fit_one",
    "sklearn.pipeline._fit_transform_one"
  ],
  "sklearn.utils._response._get_response_values": [
    "sklearn.metrics._scorer._cached_call",
    "sklearn.utils._response._get_response_values_binary"
  ],
  "sklearn.utils._response._get_response_values_binary": [
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_and_get_response_values"
  ],
  "sklearn.utils._safe_assign": [
    "sklearn.impute._iterative.IterativeImputer._impute_one_feature",
    "sklearn.inspection._partial_dependence._partial_dependence_brute"
  ],
  "sklearn.utils._safe_indexing": [
    "sklearn.calibration._fit_classifier_calibrator_pair",
    "sklearn.compose._column_transformer.ColumnTransformer._fit_transform",
    "sklearn.compose._target.TransformedTargetRegressor._fit_transformer",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor._boost",
    "sklearn.feature_selection._base.SelectorMixin._transform",
    "sklearn.impute._iterative.IterativeImputer._impute_one_feature",
    "sklearn.inspection._partial_dependence._grid_from_X",
    "sklearn.inspection._partial_dependence.partial_dependence",
    "sklearn.inspection._permutation_importance._calculate_permutation_scores",
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.linear_model._quantile.QuantileRegressor.fit",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_predictions",
    "sklearn.metrics.cluster._unsupervised.davies_bouldin_score",
    "sklearn.model_selection._split.train_test_split",
    "sklearn.model_selection._validation._shuffle",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit",
    "sklearn.preprocessing._encoders._BaseEncoder._check_X",
    "sklearn.utils._get_column_indices",
    "sklearn.utils.metaestimators._safe_split",
    "sklearn.utils.resample",
    "sklearn.utils.validation._check_fit_params"
  ],
  "sklearn.utils._set_output._auto_wrap_is_configured": [
    "sklearn.utils._set_output._wrap_data_with_container"
  ],
  "sklearn.utils._set_output._get_output_config": [
    "sklearn.compose._column_transformer.ColumnTransformer._hstack",
    "sklearn.compose._column_transformer.ColumnTransformer._iter",
    "sklearn.feature_selection._base.SelectorMixin.transform",
    "sklearn.pipeline.FeatureUnion._hstack",
    "sklearn.utils._set_output._wrap_data_with_container"
  ],
  "sklearn.utils._set_output._safe_set_output": [
    "sklearn.compose._column_transformer.ColumnTransformer.set_output",
    "sklearn.pipeline.FeatureUnion.set_output",
    "sklearn.pipeline.Pipeline.set_output"
  ],
  "sklearn.utils._set_output._wrap_data_with_container": [
    "sklearn.utils._set_output._wrap_method_output.wrapped"
  ],
  "sklearn.utils._set_output._wrap_in_pandas_container": [
    "sklearn.utils._set_output._wrap_data_with_container"
  ],
  "sklearn.utils._set_output._wrap_method_output": [
    "sklearn.utils._set_output._SetOutputMixin.__init_subclass__"
  ],
  "sklearn.utils._show_versions._get_deps_info": [
    "sklearn.utils._show_versions.show_versions",
    "sklearn.utils.tests.test_show_versions.test_get_deps_info"
  ],
  "sklearn.utils._show_versions._get_sys_info": [
    "sklearn.utils._show_versions.show_versions",
    "sklearn.utils.tests.test_show_versions.test_get_sys_info"
  ],
  "sklearn.utils._show_versions.show_versions": [
    "sklearn.utils.tests.test_show_versions.test_show_versions"
  ],
  "sklearn.utils._tags._safe_tags": [
    "sklearn.compose._target.TransformedTargetRegressor._more_tags",
    "sklearn.ensemble._bagging.BaggingClassifier._more_tags",
    "sklearn.ensemble._bagging.BaggingRegressor._more_tags",
    "sklearn.feature_selection._base.SelectorMixin.transform",
    "sklearn.feature_selection._from_model.SelectFromModel._more_tags",
    "sklearn.feature_selection._rfe.RFE._more_tags",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector._more_tags",
    "sklearn.model_selection._search.BaseSearchCV._more_tags",
    "sklearn.multiclass.OneVsOneClassifier._more_tags",
    "sklearn.multiclass.OneVsRestClassifier._more_tags",
    "sklearn.pipeline.Pipeline._more_tags",
    "sklearn.utils.estimator_checks._check_transformer",
    "sklearn.utils.estimator_checks._enforce_estimator_tags_X",
    "sklearn.utils.estimator_checks._enforce_estimator_tags_y",
    "sklearn.utils.estimator_checks._should_be_skipped_or_marked",
    "sklearn.utils.estimator_checks._yield_all_checks",
    "sklearn.utils.estimator_checks._yield_checks",
    "sklearn.utils.estimator_checks._yield_classifier_checks",
    "sklearn.utils.estimator_checks._yield_outliers_checks",
    "sklearn.utils.estimator_checks._yield_regressor_checks",
    "sklearn.utils.estimator_checks._yield_transformer_checks",
    "sklearn.utils.estimator_checks.check_class_weight_classifiers",
    "sklearn.utils.estimator_checks.check_classifier_multioutput",
    "sklearn.utils.estimator_checks.check_classifiers_classes",
    "sklearn.utils.estimator_checks.check_classifiers_regression_target",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.estimator_checks.check_clustering",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_dtype_object",
    "sklearn.utils.estimator_checks.check_estimator_sparse_data",
    "sklearn.utils.estimator_checks.check_estimators_pickle",
    "sklearn.utils.estimator_checks.check_fit_check_is_fitted",
    "sklearn.utils.estimator_checks.check_methods_sample_order_invariance",
    "sklearn.utils.estimator_checks.check_n_features_in_after_fitting",
    "sklearn.utils.estimator_checks.check_param_validation",
    "sklearn.utils.estimator_checks.check_pipeline_consistency",
    "sklearn.utils.estimator_checks.check_regressors_train",
    "sklearn.utils.estimator_checks.check_sample_weights_not_an_array",
    "sklearn.utils.estimator_checks.check_sample_weights_pandas_series",
    "sklearn.utils.estimator_checks.check_supervised_y_2d",
    "sklearn.utils.estimator_checks.check_transformer_preserve_dtypes",
    "sklearn.utils.metaestimators._safe_split"
  ],
  "sklearn.utils._testing._create_aligned_memmap_backed_arrays": [
    "sklearn.utils._testing.create_memmap_backed_data"
  ],
  "sklearn.utils._testing._create_memmap_backed_array": [
    "sklearn.utils._testing._create_aligned_memmap_backed_arrays"
  ],
  "sklearn.utils._testing._delete_folder": [
    "sklearn.utils._testing.TempMemmap.__exit__",
    "sklearn.utils._testing.create_memmap_backed_data"
  ],
  "sklearn.utils._testing._get_args": [
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.estimator_checks.check_no_attributes_set_in_init"
  ],
  "sklearn.utils._testing._get_func_name": [
    "sklearn.utils._testing.check_docstring_parameters"
  ],
  "sklearn.utils._testing.assert_allclose": [
    "sklearn.utils._testing.assert_allclose_dense_sparse",
    "sklearn.utils.estimator_checks.check_array_api_input",
    "sklearn.utils.estimator_checks.check_class_weight_balanced_linear_classifier",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.estimator_checks.check_estimators_data_not_an_array",
    "sklearn.utils.estimator_checks.check_methods_subset_invariance",
    "sklearn.utils.estimator_checks.check_outliers_train",
    "sklearn.utils.estimator_checks.check_regressors_int",
    "sklearn.utils.estimator_checks.check_sample_weights_not_overwritten",
    "sklearn.utils.estimator_checks.check_supervised_y_2d"
  ],
  "sklearn.utils._testing.assert_allclose_dense_sparse": [
    "sklearn.utils.estimator_checks._check_transformer",
    "sklearn.utils.estimator_checks.check_estimators_pickle",
    "sklearn.utils.estimator_checks.check_fit_idempotent",
    "sklearn.utils.estimator_checks.check_methods_sample_order_invariance",
    "sklearn.utils.estimator_checks.check_pipeline_consistency",
    "sklearn.utils.estimator_checks.check_sample_weights_invariance",
    "sklearn.utils.estimator_checks.check_set_output_transform"
  ],
  "sklearn.utils._testing.assert_raise_message": [
    "sklearn.utils.estimator_checks.check_fit2d_predict1d"
  ],
  "sklearn.utils._testing.assert_run_python_script": [
    "sklearn.experimental.tests.test_enable_hist_gradient_boosting.test_import_raises_warning",
    "sklearn.experimental.tests.test_enable_iterative_imputer.test_imports_strategies",
    "sklearn.experimental.tests.test_enable_successive_halving.test_imports_strategies"
  ],
  "sklearn.utils._testing.check_skip_network": [
    "doc.conftest.setup_rcv1",
    "doc.conftest.setup_working_with_text_data"
  ],
  "sklearn.utils._testing.create_memmap_backed_data": [
    "sklearn.utils._testing.TempMemmap.__enter__",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.estimator_checks.check_clustering",
    "sklearn.utils.estimator_checks.check_estimators_fit_returns_self",
    "sklearn.utils.estimator_checks.check_estimators_pickle",
    "sklearn.utils.estimator_checks.check_outliers_train",
    "sklearn.utils.estimator_checks.check_regressors_train",
    "sklearn.utils.estimator_checks.check_transformer_general"
  ],
  "sklearn.utils._testing.ignore_warnings": [
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_singular_kernel",
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.discovery.all_functions",
    "sklearn.utils.estimator_checks.check_classifiers_one_label",
    "sklearn.utils.estimator_checks.check_estimator_sparse_data",
    "sklearn.utils.estimator_checks.check_estimators_nan_inf",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_clones",
    "sklearn.utils.tests.test_show_versions.test_get_deps_info",
    "sklearn.utils.tests.test_show_versions.test_show_versions"
  ],
  "sklearn.utils._testing.raises": [
    "sklearn.utils.estimator_checks._check_transformer",
    "sklearn.utils.estimator_checks.check_classifiers_one_label",
    "sklearn.utils.estimator_checks.check_classifiers_one_label_sample_weights",
    "sklearn.utils.estimator_checks.check_classifiers_regression_target",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.estimator_checks.check_complex_data",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_dtype_object",
    "sklearn.utils.estimator_checks.check_estimator_sparse_data",
    "sklearn.utils.estimator_checks.check_estimators_empty_data_messages",
    "sklearn.utils.estimator_checks.check_estimators_nan_inf",
    "sklearn.utils.estimator_checks.check_estimators_partial_fit_n_features",
    "sklearn.utils.estimator_checks.check_estimators_unfitted",
    "sklearn.utils.estimator_checks.check_fit1d",
    "sklearn.utils.estimator_checks.check_fit2d_1feature",
    "sklearn.utils.estimator_checks.check_fit2d_1sample",
    "sklearn.utils.estimator_checks.check_fit_non_negative",
    "sklearn.utils.estimator_checks.check_get_feature_names_out_error",
    "sklearn.utils.estimator_checks.check_n_features_in_after_fitting",
    "sklearn.utils.estimator_checks.check_nonsquare_error",
    "sklearn.utils.estimator_checks.check_outliers_train",
    "sklearn.utils.estimator_checks.check_param_validation",
    "sklearn.utils.estimator_checks.check_regressors_train",
    "sklearn.utils.estimator_checks.check_sample_weights_shape",
    "sklearn.utils.estimator_checks.check_supervised_y_no_nan",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out_pandas",
    "sklearn.utils.estimator_checks.check_transformers_unfitted",
    "sklearn.utils.tests.test_estimator_checks.test_check_array_api_input",
    "sklearn.utils.tests.test_estimator_checks.test_check_class_weight_balanced_linear_classifier",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifier_data_not_an_array",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_decision_function",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_predict",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.tests.test_estimator_checks.test_check_dataframe_column_names_consistency",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_get_tags_default_keys",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_transformer_no_mixin",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimators_unfitted",
    "sklearn.utils.tests.test_estimator_checks.test_check_fit_check_is_fitted",
    "sklearn.utils.tests.test_estimator_checks.test_check_no_attributes_set_in_init",
    "sklearn.utils.tests.test_estimator_checks.test_check_outlier_contamination",
    "sklearn.utils.tests.test_estimator_checks.test_check_outlier_corruption",
    "sklearn.utils.tests.test_estimator_checks.test_check_regressor_data_not_an_array",
    "sklearn.utils.tests.test_estimator_checks.test_not_an_array_array_function"
  ],
  "sklearn.utils._testing.set_random_state": [
    "sklearn.utils.estimator_checks._check_transformer",
    "sklearn.utils.estimator_checks.check_class_weight_balanced_classifiers",
    "sklearn.utils.estimator_checks.check_class_weight_balanced_linear_classifier",
    "sklearn.utils.estimator_checks.check_class_weight_classifiers",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_decision_function",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_representation_invariance",
    "sklearn.utils.estimator_checks.check_classifiers_predictions",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.estimator_checks.check_clusterer_compute_labels_predict",
    "sklearn.utils.estimator_checks.check_clustering",
    "sklearn.utils.estimator_checks.check_complex_data",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_dict_unchanged",
    "sklearn.utils.estimator_checks.check_dont_overwrite_parameters",
    "sklearn.utils.estimator_checks.check_estimators_data_not_an_array",
    "sklearn.utils.estimator_checks.check_estimators_dtypes",
    "sklearn.utils.estimator_checks.check_estimators_empty_data_messages",
    "sklearn.utils.estimator_checks.check_estimators_fit_returns_self",
    "sklearn.utils.estimator_checks.check_estimators_nan_inf",
    "sklearn.utils.estimator_checks.check_estimators_overwrite_params",
    "sklearn.utils.estimator_checks.check_estimators_pickle",
    "sklearn.utils.estimator_checks.check_fit1d",
    "sklearn.utils.estimator_checks.check_fit2d_1feature",
    "sklearn.utils.estimator_checks.check_fit2d_1sample",
    "sklearn.utils.estimator_checks.check_fit2d_predict1d",
    "sklearn.utils.estimator_checks.check_fit_check_is_fitted",
    "sklearn.utils.estimator_checks.check_fit_idempotent",
    "sklearn.utils.estimator_checks.check_fit_score_takes_y",
    "sklearn.utils.estimator_checks.check_global_ouptut_transform_pandas",
    "sklearn.utils.estimator_checks.check_methods_sample_order_invariance",
    "sklearn.utils.estimator_checks.check_methods_subset_invariance",
    "sklearn.utils.estimator_checks.check_n_features_in",
    "sklearn.utils.estimator_checks.check_n_features_in_after_fitting",
    "sklearn.utils.estimator_checks.check_non_transformer_estimators_n_iter",
    "sklearn.utils.estimator_checks.check_outliers_fit_predict",
    "sklearn.utils.estimator_checks.check_outliers_train",
    "sklearn.utils.estimator_checks.check_pipeline_consistency",
    "sklearn.utils.estimator_checks.check_regressors_int",
    "sklearn.utils.estimator_checks.check_regressors_train",
    "sklearn.utils.estimator_checks.check_requires_y_none",
    "sklearn.utils.estimator_checks.check_sample_weights_invariance",
    "sklearn.utils.estimator_checks.check_sample_weights_not_overwritten",
    "sklearn.utils.estimator_checks.check_set_output_transform",
    "sklearn.utils.estimator_checks.check_set_output_transform_pandas",
    "sklearn.utils.estimator_checks.check_supervised_y_2d",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out_pandas",
    "sklearn.utils.estimator_checks.check_transformer_n_iter",
    "sklearn.utils.estimator_checks.check_transformer_preserve_dtypes",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_clones"
  ],
  "sklearn.utils._to_object_array": [
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors",
    "sklearn.neighbors._base._radius_neighbors_from_graph"
  ],
  "sklearn.utils.axis0_safe_slice": [
    "sklearn.linear_model._huber._huber_loss_and_gradient"
  ],
  "sklearn.utils.check_matplotlib_support": [
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.from_estimator",
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.plot",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.from_estimator",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.from_predictions",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.plot",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_estimator",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_predictions",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.plot",
    "sklearn.model_selection._plot.LearningCurveDisplay.from_estimator",
    "sklearn.model_selection._plot.ValidationCurveDisplay.from_estimator",
    "sklearn.model_selection._plot._BaseCurveDisplay._plot_curve",
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_and_get_response_values",
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_from_predictions_params",
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_plot_params"
  ],
  "sklearn.utils.check_pandas_support": [
    "sklearn.compose._column_transformer.ColumnTransformer._hstack",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._base._convert_data_dataframe",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.pipeline.FeatureUnion._hstack",
    "sklearn.utils._set_output._wrap_in_pandas_container"
  ],
  "sklearn.utils.class_weight.compute_class_weight": [
    "sklearn.utils.class_weight.compute_sample_weight"
  ],
  "sklearn.utils.compute_class_weight": [
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._partial_fit",
    "sklearn.svm._base.BaseSVC._validate_targets",
    "sklearn.svm._base._fit_liblinear",
    "sklearn.utils.tests.test_estimator_checks.BadBalancedWeightsClassifier.fit"
  ],
  "sklearn.utils.compute_sample_weight": [
    "sklearn.ensemble._forest.ForestClassifier._validate_y_class_weight",
    "sklearn.ensemble._forest._parallel_build_trees",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier._finalize_sample_weight",
    "sklearn.linear_model._ridge._RidgeClassifierMixin._prepare_data",
    "sklearn.tree._classes.BaseDecisionTree._fit"
  ],
  "sklearn.utils.discovery._is_checked_function": [
    "sklearn.utils.discovery.all_functions"
  ],
  "sklearn.utils.discovery.all_estimators": [
    "doc.sphinxext.allow_nan_estimators.AllowNanEstimators.make_paragraph_for_estimator_type",
    "sklearn.utils.tests.test_estimator_checks.test_all_estimators_all_public"
  ],
  "sklearn.utils.estimator_checks._apply_on_subsets": [
    "sklearn.utils.estimator_checks.check_methods_subset_invariance"
  ],
  "sklearn.utils.estimator_checks._check_generated_dataframe": [
    "sklearn.utils.estimator_checks.check_global_ouptut_transform_pandas",
    "sklearn.utils.estimator_checks.check_set_output_transform_pandas"
  ],
  "sklearn.utils.estimator_checks._check_transformer": [
    "sklearn.utils.estimator_checks.check_transformer_data_not_an_array",
    "sklearn.utils.estimator_checks.check_transformer_general"
  ],
  "sklearn.utils.estimator_checks._choose_check_classifiers_labels": [
    "sklearn.utils.estimator_checks.check_classifiers_classes"
  ],
  "sklearn.utils.estimator_checks._construct_instance": [
    "doc.sphinxext.allow_nan_estimators.AllowNanEstimators.make_paragraph_for_estimator_type",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible"
  ],
  "sklearn.utils.estimator_checks._enforce_estimator_tags_X": [
    "sklearn.utils.estimator_checks.check_array_api_input",
    "sklearn.utils.estimator_checks.check_classifier_data_not_an_array",
    "sklearn.utils.estimator_checks.check_classifiers_classes",
    "sklearn.utils.estimator_checks.check_classifiers_regression_target",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_dict_unchanged",
    "sklearn.utils.estimator_checks.check_dont_overwrite_parameters",
    "sklearn.utils.estimator_checks.check_dtype_object",
    "sklearn.utils.estimator_checks.check_estimator_sparse_data",
    "sklearn.utils.estimator_checks.check_estimators_dtypes",
    "sklearn.utils.estimator_checks.check_estimators_fit_returns_self",
    "sklearn.utils.estimator_checks.check_estimators_nan_inf",
    "sklearn.utils.estimator_checks.check_estimators_overwrite_params",
    "sklearn.utils.estimator_checks.check_estimators_partial_fit_n_features",
    "sklearn.utils.estimator_checks.check_estimators_pickle",
    "sklearn.utils.estimator_checks.check_fit2d_1feature",
    "sklearn.utils.estimator_checks.check_fit2d_1sample",
    "sklearn.utils.estimator_checks.check_fit2d_predict1d",
    "sklearn.utils.estimator_checks.check_fit_check_is_fitted",
    "sklearn.utils.estimator_checks.check_fit_idempotent",
    "sklearn.utils.estimator_checks.check_fit_score_takes_y",
    "sklearn.utils.estimator_checks.check_global_ouptut_transform_pandas",
    "sklearn.utils.estimator_checks.check_methods_sample_order_invariance",
    "sklearn.utils.estimator_checks.check_methods_subset_invariance",
    "sklearn.utils.estimator_checks.check_n_features_in",
    "sklearn.utils.estimator_checks.check_n_features_in_after_fitting",
    "sklearn.utils.estimator_checks.check_non_transformer_estimators_n_iter",
    "sklearn.utils.estimator_checks.check_pipeline_consistency",
    "sklearn.utils.estimator_checks.check_regressor_data_not_an_array",
    "sklearn.utils.estimator_checks.check_regressor_multioutput",
    "sklearn.utils.estimator_checks.check_regressors_int",
    "sklearn.utils.estimator_checks.check_regressors_no_decision_function",
    "sklearn.utils.estimator_checks.check_regressors_train",
    "sklearn.utils.estimator_checks.check_requires_y_none",
    "sklearn.utils.estimator_checks.check_sample_weights_list",
    "sklearn.utils.estimator_checks.check_sample_weights_not_an_array",
    "sklearn.utils.estimator_checks.check_sample_weights_pandas_series",
    "sklearn.utils.estimator_checks.check_set_output_transform",
    "sklearn.utils.estimator_checks.check_set_output_transform_pandas",
    "sklearn.utils.estimator_checks.check_supervised_y_2d",
    "sklearn.utils.estimator_checks.check_transformer_data_not_an_array",
    "sklearn.utils.estimator_checks.check_transformer_general",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out_pandas",
    "sklearn.utils.estimator_checks.check_transformer_n_iter",
    "sklearn.utils.estimator_checks.check_transformer_preserve_dtypes",
    "sklearn.utils.estimator_checks.check_transformers_unfitted_stateless"
  ],
  "sklearn.utils.estimator_checks._enforce_estimator_tags_y": [
    "sklearn.utils.estimator_checks.check_array_api_input",
    "sklearn.utils.estimator_checks.check_classifier_data_not_an_array",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_dict_unchanged",
    "sklearn.utils.estimator_checks.check_dont_overwrite_parameters",
    "sklearn.utils.estimator_checks.check_dtype_object",
    "sklearn.utils.estimator_checks.check_estimator_sparse_data",
    "sklearn.utils.estimator_checks.check_estimators_dtypes",
    "sklearn.utils.estimator_checks.check_estimators_empty_data_messages",
    "sklearn.utils.estimator_checks.check_estimators_fit_returns_self",
    "sklearn.utils.estimator_checks.check_estimators_nan_inf",
    "sklearn.utils.estimator_checks.check_estimators_overwrite_params",
    "sklearn.utils.estimator_checks.check_estimators_partial_fit_n_features",
    "sklearn.utils.estimator_checks.check_estimators_pickle",
    "sklearn.utils.estimator_checks.check_fit1d",
    "sklearn.utils.estimator_checks.check_fit2d_1feature",
    "sklearn.utils.estimator_checks.check_fit2d_1sample",
    "sklearn.utils.estimator_checks.check_fit2d_predict1d",
    "sklearn.utils.estimator_checks.check_fit_check_is_fitted",
    "sklearn.utils.estimator_checks.check_fit_idempotent",
    "sklearn.utils.estimator_checks.check_fit_score_takes_y",
    "sklearn.utils.estimator_checks.check_global_ouptut_transform_pandas",
    "sklearn.utils.estimator_checks.check_methods_sample_order_invariance",
    "sklearn.utils.estimator_checks.check_methods_subset_invariance",
    "sklearn.utils.estimator_checks.check_n_features_in",
    "sklearn.utils.estimator_checks.check_n_features_in_after_fitting",
    "sklearn.utils.estimator_checks.check_non_transformer_estimators_n_iter",
    "sklearn.utils.estimator_checks.check_param_validation",
    "sklearn.utils.estimator_checks.check_pipeline_consistency",
    "sklearn.utils.estimator_checks.check_regressor_data_not_an_array",
    "sklearn.utils.estimator_checks.check_regressors_int",
    "sklearn.utils.estimator_checks.check_regressors_no_decision_function",
    "sklearn.utils.estimator_checks.check_regressors_train",
    "sklearn.utils.estimator_checks.check_sample_weights_invariance",
    "sklearn.utils.estimator_checks.check_sample_weights_list",
    "sklearn.utils.estimator_checks.check_sample_weights_not_overwritten",
    "sklearn.utils.estimator_checks.check_sample_weights_shape",
    "sklearn.utils.estimator_checks.check_set_output_transform",
    "sklearn.utils.estimator_checks.check_set_output_transform_pandas",
    "sklearn.utils.estimator_checks.check_sparsify_coefficients",
    "sklearn.utils.estimator_checks.check_supervised_y_2d",
    "sklearn.utils.estimator_checks.check_supervised_y_no_nan"
  ],
  "sklearn.utils.estimator_checks._generate_sparse_matrix": [
    "sklearn.utils.estimator_checks.check_estimator_sparse_data"
  ],
  "sklearn.utils.estimator_checks._get_check_estimator_ids": [
    "sklearn.utils.estimator_checks.parametrize_with_checks"
  ],
  "sklearn.utils.estimator_checks._is_pairwise_metric": [
    "sklearn.utils.estimator_checks._enforce_estimator_tags_X",
    "sklearn.utils.estimator_checks.check_regressor_multioutput"
  ],
  "sklearn.utils.estimator_checks._is_public_parameter": [
    "sklearn.utils.estimator_checks.check_dont_overwrite_parameters"
  ],
  "sklearn.utils.estimator_checks._maybe_mark_xfail": [
    "sklearn.utils.estimator_checks.parametrize_with_checks.checks_generator"
  ],
  "sklearn.utils.estimator_checks._maybe_skip": [
    "sklearn.utils.estimator_checks.check_estimator.checks_generator"
  ],
  "sklearn.utils.estimator_checks._output_from_fit_transform": [
    "sklearn.utils.estimator_checks.check_global_ouptut_transform_pandas",
    "sklearn.utils.estimator_checks.check_set_output_transform_pandas"
  ],
  "sklearn.utils.estimator_checks._regression_dataset": [
    "sklearn.utils.estimator_checks.check_classifiers_regression_target",
    "sklearn.utils.estimator_checks.check_estimators_unfitted",
    "sklearn.utils.estimator_checks.check_regressor_data_not_an_array",
    "sklearn.utils.estimator_checks.check_regressors_int",
    "sklearn.utils.estimator_checks.check_regressors_train",
    "sklearn.utils.estimator_checks.check_transformers_unfitted"
  ],
  "sklearn.utils.estimator_checks._set_checking_parameters": [
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_clones"
  ],
  "sklearn.utils.estimator_checks._should_be_skipped_or_marked": [
    "sklearn.utils.estimator_checks._maybe_mark_xfail",
    "sklearn.utils.estimator_checks._maybe_skip"
  ],
  "sklearn.utils.estimator_checks._yield_all_checks": [
    "sklearn.utils.estimator_checks.check_estimator.checks_generator",
    "sklearn.utils.estimator_checks.parametrize_with_checks.checks_generator",
    "sklearn.utils.tests.test_estimator_checks.test_non_deterministic_estimator_skip_tests"
  ],
  "sklearn.utils.estimator_checks._yield_checks": [
    "sklearn.utils.estimator_checks._yield_all_checks"
  ],
  "sklearn.utils.estimator_checks._yield_classifier_checks": [
    "sklearn.utils.estimator_checks._yield_all_checks"
  ],
  "sklearn.utils.estimator_checks._yield_clustering_checks": [
    "sklearn.utils.estimator_checks._yield_all_checks"
  ],
  "sklearn.utils.estimator_checks._yield_outliers_checks": [
    "sklearn.utils.estimator_checks._yield_all_checks"
  ],
  "sklearn.utils.estimator_checks._yield_regressor_checks": [
    "sklearn.utils.estimator_checks._yield_all_checks"
  ],
  "sklearn.utils.estimator_checks._yield_transformer_checks": [
    "sklearn.utils.estimator_checks._yield_all_checks"
  ],
  "sklearn.utils.estimator_checks.check_array_api_input": [
    "sklearn.utils.estimator_checks._yield_checks",
    "sklearn.utils.tests.test_estimator_checks.test_check_array_api_input"
  ],
  "sklearn.utils.estimator_checks.check_class_weight_balanced_linear_classifier": [
    "sklearn.utils.tests.test_estimator_checks.test_check_class_weight_balanced_linear_classifier"
  ],
  "sklearn.utils.estimator_checks.check_classifier_data_not_an_array": [
    "sklearn.utils.tests.test_estimator_checks.test_check_classifier_data_not_an_array"
  ],
  "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_decision_function": [
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_decision_function"
  ],
  "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict": [
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_predict"
  ],
  "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba": [
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_predict_proba"
  ],
  "sklearn.utils.estimator_checks.check_classifiers_predictions": [
    "sklearn.utils.estimator_checks.check_classifiers_classes"
  ],
  "sklearn.utils.estimator_checks.check_classifiers_train": [
    "sklearn.utils.estimator_checks._yield_classifier_checks"
  ],
  "sklearn.utils.estimator_checks.check_clustering": [
    "sklearn.utils.estimator_checks._yield_clustering_checks"
  ],
  "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency": [
    "sklearn.utils.tests.test_estimator_checks.test_check_dataframe_column_names_consistency"
  ],
  "sklearn.utils.estimator_checks.check_decision_proba_consistency": [
    "sklearn.utils.tests.test_estimator_checks.test_decision_proba_tie_ranking"
  ],
  "sklearn.utils.estimator_checks.check_estimator": [
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_clones",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_pairwise",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_transformer_no_mixin",
    "sklearn.utils.tests.test_estimator_checks.test_xfail_ignored_in_check_estimator"
  ],
  "sklearn.utils.estimator_checks.check_estimator_get_tags_default_keys": [
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_get_tags_default_keys"
  ],
  "sklearn.utils.estimator_checks.check_estimators_data_not_an_array": [
    "sklearn.utils.estimator_checks.check_classifier_data_not_an_array",
    "sklearn.utils.estimator_checks.check_regressor_data_not_an_array"
  ],
  "sklearn.utils.estimator_checks.check_estimators_fit_returns_self": [
    "sklearn.utils.estimator_checks._yield_checks"
  ],
  "sklearn.utils.estimator_checks.check_estimators_pickle": [
    "sklearn.utils.estimator_checks._yield_checks"
  ],
  "sklearn.utils.estimator_checks.check_estimators_unfitted": [
    "sklearn.utils.tests.test_estimator_checks.test_check_estimators_unfitted"
  ],
  "sklearn.utils.estimator_checks.check_fit_check_is_fitted": [
    "sklearn.utils.tests.test_estimator_checks.test_check_fit_check_is_fitted"
  ],
  "sklearn.utils.estimator_checks.check_fit_score_takes_y": [
    "sklearn.utils.tests.test_estimator_checks.test_check_fit_score_takes_y_works_on_deprecated_fit"
  ],
  "sklearn.utils.estimator_checks.check_no_attributes_set_in_init": [
    "sklearn.utils.tests.test_estimator_checks.test_check_no_attributes_set_in_init"
  ],
  "sklearn.utils.estimator_checks.check_outlier_contamination": [
    "sklearn.utils.tests.test_estimator_checks.test_check_outlier_contamination"
  ],
  "sklearn.utils.estimator_checks.check_outlier_corruption": [
    "sklearn.utils.estimator_checks.check_outliers_fit_predict",
    "sklearn.utils.estimator_checks.check_outliers_train",
    "sklearn.utils.tests.test_estimator_checks.test_check_outlier_corruption"
  ],
  "sklearn.utils.estimator_checks.check_outliers_train": [
    "sklearn.utils.estimator_checks._yield_outliers_checks"
  ],
  "sklearn.utils.estimator_checks.check_regressor_data_not_an_array": [
    "sklearn.utils.tests.test_estimator_checks.test_check_regressor_data_not_an_array"
  ],
  "sklearn.utils.estimator_checks.check_regressors_train": [
    "sklearn.utils.estimator_checks._yield_regressor_checks"
  ],
  "sklearn.utils.estimator_checks.check_requires_y_none": [
    "sklearn.utils.tests.test_estimator_checks.test_check_requires_y_none"
  ],
  "sklearn.utils.estimator_checks.check_sample_weights_invariance": [
    "sklearn.utils.estimator_checks._yield_checks"
  ],
  "sklearn.utils.estimator_checks.check_transformer_general": [
    "sklearn.utils.estimator_checks._yield_transformer_checks"
  ],
  "sklearn.utils.extmath._deterministic_vector_sign_flip": [
    "sklearn.manifold._spectral_embedding.spectral_embedding"
  ],
  "sklearn.utils.extmath._incremental_mean_and_var": [
    "sklearn.decomposition._incremental_pca.IncrementalPCA.partial_fit",
    "sklearn.linear_model._base._preprocess_data",
    "sklearn.preprocessing._data.StandardScaler.partial_fit"
  ],
  "sklearn.utils.extmath._nanaverage": [
    "sklearn.metrics._classification.precision_recall_fscore_support"
  ],
  "sklearn.utils.extmath._randomized_eigsh": [
    "sklearn.decomposition._kernel_pca.KernelPCA._fit_transform"
  ],
  "sklearn.utils.extmath._safe_accumulator_op": [
    "sklearn.utils.extmath._incremental_mean_and_var"
  ],
  "sklearn.utils.extmath.cartesian": [
    "sklearn.inspection._partial_dependence._grid_from_X"
  ],
  "sklearn.utils.extmath.density": [
    "examples.text.plot_document_classification_20newsgroups.benchmark"
  ],
  "sklearn.utils.extmath.fast_logdet": [
    "sklearn.covariance._empirical_covariance.log_likelihood",
    "sklearn.covariance._robust_covariance._c_step",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.score_samples",
    "sklearn.decomposition._pca.PCA.score_samples",
    "sklearn.linear_model._bayes.ARDRegression.fit"
  ],
  "sklearn.utils.extmath.log_logistic": [
    "sklearn.neural_network._rbm.BernoulliRBM.score_samples"
  ],
  "sklearn.utils.extmath.make_nonnegative": [
    "sklearn.cluster._bicluster._bistochastic_normalize",
    "sklearn.cluster._bicluster._log_normalize",
    "sklearn.cluster._bicluster._scale_normalize"
  ],
  "sklearn.utils.extmath.randomized_range_finder": [
    "sklearn.utils.extmath.randomized_svd"
  ],
  "sklearn.utils.extmath.randomized_svd": [
    "benchmarks.bench_plot_randomized_svd.svd_timing",
    "benchmarks.bench_plot_svd.compute_bench",
    "sklearn.cluster._bicluster.BaseSpectral._svd",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._initialize_dict",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit.my_svd",
    "sklearn.decomposition._nmf._initialize_nmf",
    "sklearn.decomposition._pca.PCA._fit_truncated",
    "sklearn.decomposition._truncated_svd.TruncatedSVD.fit_transform",
    "sklearn.utils.extmath._randomized_eigsh"
  ],
  "sklearn.utils.extmath.row_norms": [
    "examples.mixture.plot_gmm_init.$toplevel",
    "sklearn.cluster._birch.Birch._global_clustering",
    "sklearn.cluster._bisect_k_means.BisectingKMeans.fit",
    "sklearn.cluster._bisect_k_means.BisectingKMeans.predict",
    "sklearn.cluster._kmeans.KMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.partial_fit",
    "sklearn.cluster._kmeans.kmeans_plusplus",
    "sklearn.decomposition._dict_learning._sparse_encode_precomputed",
    "sklearn.feature_selection._univariate_selection.r_regression",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.linear_model._sag.sag_solver",
    "sklearn.metrics.pairwise._euclidean_distances",
    "sklearn.metrics.pairwise._euclidean_distances_upcast",
    "sklearn.metrics.pairwise.paired_cosine_distances",
    "sklearn.metrics.pairwise.paired_euclidean_distances",
    "sklearn.mixture._gaussian_mixture._estimate_log_gaussian_prob",
    "sklearn.neighbors._kde.KernelDensity.sample",
    "sklearn.preprocessing._data.normalize"
  ],
  "sklearn.utils.extmath.safe_sparse_dot": [
    "benchmarks.bench_plot_nmf._fit_projected_gradient",
    "benchmarks.bench_plot_nmf._nls_subproblem",
    "benchmarks.bench_saga._predict_proba",
    "sklearn.cluster._bicluster.BaseSpectral._svd",
    "sklearn.cluster._bicluster.SpectralBiclustering._project_and_cluster",
    "sklearn.decomposition._nmf._multiplicative_update_h",
    "sklearn.decomposition._nmf._multiplicative_update_w",
    "sklearn.decomposition._nmf._update_coordinate_descent",
    "sklearn.decomposition._truncated_svd.TruncatedSVD.fit_transform",
    "sklearn.decomposition._truncated_svd.TruncatedSVD.transform",
    "sklearn.feature_selection._univariate_selection.chi2",
    "sklearn.feature_selection._univariate_selection.r_regression",
    "sklearn.kernel_approximation.RBFSampler.transform",
    "sklearn.kernel_approximation.SkewedChi2Sampler.transform",
    "sklearn.linear_model._base.LinearClassifierMixin.decision_function",
    "sklearn.linear_model._base.LinearModel._decision_function",
    "sklearn.linear_model._base._rescale_data",
    "sklearn.linear_model._coordinate_descent.ElasticNet._decision_function",
    "sklearn.linear_model._coordinate_descent._alpha_grid",
    "sklearn.linear_model._coordinate_descent._path_residuals",
    "sklearn.linear_model._huber.HuberRegressor.fit",
    "sklearn.linear_model._huber._huber_loss_and_gradient",
    "sklearn.linear_model._ridge._RidgeGCV._compute_covariance",
    "sklearn.linear_model._ridge._RidgeGCV._compute_gram",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance_no_intercept",
    "sklearn.linear_model._ridge._RidgeGCV.fit",
    "sklearn.linear_model._ridge._XT_CenterStackOp._matmat",
    "sklearn.linear_model._ridge._XT_CenterStackOp._matvec",
    "sklearn.linear_model._ridge._X_CenterStackOp._matmat",
    "sklearn.linear_model._ridge._X_CenterStackOp._matvec",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.linear_model._ridge._solve_cholesky",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._decision_function",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM.decision_function",
    "sklearn.metrics.pairwise._euclidean_distances",
    "sklearn.metrics.pairwise._euclidean_distances_upcast",
    "sklearn.metrics.pairwise.cosine_similarity",
    "sklearn.metrics.pairwise.linear_kernel",
    "sklearn.metrics.pairwise.polynomial_kernel",
    "sklearn.metrics.pairwise.sigmoid_kernel",
    "sklearn.naive_bayes.BernoulliNB._count",
    "sklearn.naive_bayes.BernoulliNB._joint_log_likelihood",
    "sklearn.naive_bayes.ComplementNB._count",
    "sklearn.naive_bayes.ComplementNB._joint_log_likelihood",
    "sklearn.naive_bayes.MultinomialNB._count",
    "sklearn.naive_bayes.MultinomialNB._joint_log_likelihood",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._backprop",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._compute_loss_grad",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._forward_pass",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._forward_pass_fast",
    "sklearn.neural_network._rbm.BernoulliRBM._fit",
    "sklearn.neural_network._rbm.BernoulliRBM._free_energy",
    "sklearn.neural_network._rbm.BernoulliRBM._mean_hiddens",
    "sklearn.random_projection.SparseRandomProjection.transform",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.fit",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.predict_proba",
    "sklearn.svm._base.BaseLibSVM._get_coef",
    "sklearn.svm._base.BaseSVC._get_coef",
    "sklearn.svm._base._one_vs_one_coef",
    "sklearn.svm._bounds.l1_min_c",
    "sklearn.utils.extmath.randomized_range_finder",
    "sklearn.utils.extmath.randomized_svd"
  ],
  "sklearn.utils.extmath.softmax": [
    "benchmarks.bench_saga._predict_proba",
    "sklearn._loss.link.MultinomialLogit.inverse",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._compute_proba_from_decision",
    "sklearn.linear_model._logistic.LogisticRegression.predict_proba",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._loss_grad_lbfgs"
  ],
  "sklearn.utils.extmath.squared_norm": [
    "benchmarks.bench_plot_nmf._fit_projected_gradient",
    "benchmarks.bench_plot_nmf._norm",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit.my_svd",
    "sklearn.decomposition._nmf._beta_divergence",
    "sklearn.decomposition._nmf.norm",
    "sklearn.linear_model._linear_loss.LinearModelLoss.l2_penalty"
  ],
  "sklearn.utils.extmath.stable_cumsum": [
    "sklearn.cluster._kmeans._kmeans_plusplus",
    "sklearn.decomposition._pca.PCA._fit_full",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor._get_median_predict",
    "sklearn.manifold._locally_linear.locally_linear_embedding",
    "sklearn.metrics._ranking._binary_clf_curve",
    "sklearn.utils.stats._weighted_percentile"
  ],
  "sklearn.utils.extmath.svd_flip": [
    "sklearn.cross_decomposition._pls.PLSSVD.fit",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._incremental_pca.IncrementalPCA.partial_fit",
    "sklearn.decomposition._kernel_pca.KernelPCA._fit_transform",
    "sklearn.decomposition._pca.PCA._fit_full",
    "sklearn.decomposition._pca.PCA._fit_truncated",
    "sklearn.decomposition._sparse_pca.SparsePCA._fit",
    "sklearn.decomposition._truncated_svd.TruncatedSVD.fit_transform",
    "sklearn.utils.extmath.randomized_svd"
  ],
  "sklearn.utils.extmath.weighted_mode": [
    "sklearn.neighbors._classification.KNeighborsClassifier.predict"
  ],
  "sklearn.utils.fixes._contents": [
    "sklearn.datasets._base.load_sample_images"
  ],
  "sklearn.utils.fixes._get_threadpool_controller": [
    "sklearn.utils.fixes.threadpool_info",
    "sklearn.utils.fixes.threadpool_limits"
  ],
  "sklearn.utils.fixes._mode": [
    "sklearn.impute._base._most_frequent",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict"
  ],
  "sklearn.utils.fixes._object_dtype_isnan": [
    "sklearn.utils._mask._get_dense_mask",
    "sklearn.utils.validation._assert_all_finite"
  ],
  "sklearn.utils.fixes._open_binary": [
    "sklearn.datasets._base.load_gzip_compressed_csv_data",
    "sklearn.datasets._base.load_sample_images"
  ],
  "sklearn.utils.fixes._open_text": [
    "sklearn.datasets._base.load_csv_data",
    "sklearn.datasets._base.load_linnerud"
  ],
  "sklearn.utils.fixes._read_text": [
    "sklearn.datasets._base.load_descr"
  ],
  "sklearn.utils.fixes.threadpool_info": [
    "sklearn.cluster._kmeans._BaseKMeans._check_mkl_vcomp",
    "sklearn.utils._in_unstable_openblas_configuration",
    "sklearn.utils._show_versions.show_versions",
    "sklearn.utils._testing.create_memmap_backed_data",
    "sklearn.utils.tests.test_show_versions.test_show_versions"
  ],
  "sklearn.utils.fixes.threadpool_limits": [
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.partial_fit",
    "sklearn.cluster._kmeans._kmeans_single_lloyd",
    "sklearn.cluster._kmeans._labels_inertia_threadpool_limit"
  ],
  "sklearn.utils.gen_batches": [
    "benchmarks.bench_plot_randomized_svd.scalable_frobenius_norm_discrepancy",
    "sklearn.cluster._mean_shift.estimate_bandwidth",
    "sklearn.cluster._optics._compute_core_distances_",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._incremental_pca.IncrementalPCA.fit",
    "sklearn.decomposition._incremental_pca.IncrementalPCA.transform",
    "sklearn.decomposition._lda.LatentDirichletAllocation.fit",
    "sklearn.decomposition._lda.LatentDirichletAllocation.partial_fit",
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform",
    "sklearn.ensemble._iforest.IsolationForest._compute_chunked_score_samples",
    "sklearn.metrics.pairwise._euclidean_distances_upcast",
    "sklearn.metrics.pairwise.pairwise_distances_chunked",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic"
  ],
  "sklearn.utils.gen_even_slices": [
    "examples.linear_model.plot_poisson_regression_non_normal_loss._mean_frequency_by_risk_group",
    "sklearn.decomposition._dict_learning._sparse_encode",
    "sklearn.decomposition._lda.LatentDirichletAllocation._e_step",
    "sklearn.metrics.pairwise._parallel_pairwise",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors",
    "sklearn.neural_network._rbm.BernoulliRBM.fit"
  ],
  "sklearn.utils.get_chunk_n_rows": [
    "sklearn.cluster._optics._compute_core_distances_",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.ensemble._iforest.IsolationForest._compute_chunked_score_samples",
    "sklearn.metrics.pairwise.pairwise_distances_chunked"
  ],
  "sklearn.utils.graph._fix_connected_components": [
    "sklearn.cluster._agglomerative._fix_connectivity",
    "sklearn.manifold._isomap.Isomap._fit_transform"
  ],
  "sklearn.utils.graph.single_source_shortest_path_length": [
    "sklearn.utils.tests.test_shortest_path.test_shortest_path"
  ],
  "sklearn.utils.indices_to_mask": [
    "sklearn.ensemble._bagging.BaggingClassifier._set_oob_score",
    "sklearn.ensemble._bagging.BaggingRegressor._set_oob_score",
    "sklearn.ensemble._bagging._parallel_build_estimators"
  ],
  "sklearn.utils.is_scalar_nan": [
    "sklearn.impute._base.MissingIndicator._validate_input",
    "sklearn.impute._base.SimpleImputer._more_tags",
    "sklearn.impute._base.SimpleImputer._validate_input",
    "sklearn.impute._base._BaseImputer._more_tags",
    "sklearn.impute._iterative.IterativeImputer._initial_imputation",
    "sklearn.impute._knn.KNNImputer.fit",
    "sklearn.impute._knn.KNNImputer.transform",
    "sklearn.metrics.pairwise.nan_euclidean_distances",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.utils._encode._NaNCounter.__missing__",
    "sklearn.utils._encode._NaNCounter._generate_items",
    "sklearn.utils._encode._check_unknown.is_valid",
    "sklearn.utils._encode._extract_missing",
    "sklearn.utils._encode._nandict.__init__",
    "sklearn.utils._encode._nandict.__missing__",
    "sklearn.utils._encode._unique_np",
    "sklearn.utils._mask._get_dense_mask",
    "sklearn.utils._pprint._changed_params.has_changed",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible"
  ],
  "sklearn.utils.metaestimators._safe_split": [
    "sklearn.feature_selection._rfe._rfe_single_fit",
    "sklearn.model_selection._validation._fit_and_predict",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._incremental_fit_estimator",
    "sklearn.model_selection._validation._permutation_test_score",
    "sklearn.multiclass._fit_ovo_binary",
    "sklearn.utils.estimator_checks.check_fit_idempotent"
  ],
  "sklearn.utils.multiclass._check_partial_fit_first_call": [
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._partial_fit",
    "sklearn.multiclass.OneVsOneClassifier.partial_fit",
    "sklearn.multiclass.OneVsRestClassifier.partial_fit",
    "sklearn.naive_bayes.GaussianNB._partial_fit",
    "sklearn.naive_bayes._BaseDiscreteNB.partial_fit",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier.partial_fit"
  ],
  "sklearn.utils.multiclass._is_integral_float": [
    "sklearn.utils.multiclass.is_multilabel"
  ],
  "sklearn.utils.multiclass._ovr_decision_function": [
    "sklearn.multiclass.OneVsOneClassifier.decision_function",
    "sklearn.svm._base.BaseSVC.decision_function"
  ],
  "sklearn.utils.multiclass.check_classification_targets": [
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit",
    "sklearn.ensemble._bagging.BaggingClassifier._validate_y",
    "sklearn.ensemble._forest.ForestClassifier._validate_y_class_weight",
    "sklearn.ensemble._gb.GradientBoostingClassifier._validate_y",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier._encode_y",
    "sklearn.ensemble._stacking.StackingClassifier.fit",
    "sklearn.ensemble._voting.VotingClassifier.fit",
    "sklearn.feature_selection._mutual_info.mutual_info_classif",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._check_input_parameters",
    "sklearn.multiclass.OneVsOneClassifier.fit",
    "sklearn.multiclass.OneVsOneClassifier.partial_fit",
    "sklearn.multiclass.OutputCodeClassifier.fit",
    "sklearn.multioutput._MultiOutputEstimator.fit",
    "sklearn.neighbors._base.NeighborsBase._fit",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.fit",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.fit",
    "sklearn.svm._base.BaseSVC._validate_targets",
    "sklearn.svm._classes.LinearSVC.fit",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.utils._testing.MinimalClassifier.fit"
  ],
  "sklearn.utils.multiclass.class_distribution": [
    "sklearn.dummy.DummyClassifier.fit"
  ],
  "sklearn.utils.multiclass.is_multilabel": [
    "sklearn.utils.multiclass.type_of_target"
  ],
  "sklearn.utils.multiclass.type_of_target": [
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._stacking.StackingClassifier.fit",
    "sklearn.metrics._base._average_binary_score",
    "sklearn.metrics._classification._check_targets",
    "sklearn.metrics._classification.brier_score_loss",
    "sklearn.metrics._ranking._binary_clf_curve",
    "sklearn.metrics._ranking._check_dcg_target_type",
    "sklearn.metrics._ranking.average_precision_score",
    "sklearn.metrics._ranking.coverage_error",
    "sklearn.metrics._ranking.label_ranking_average_precision_score",
    "sklearn.metrics._ranking.label_ranking_loss",
    "sklearn.metrics._ranking.roc_auc_score",
    "sklearn.metrics._ranking.top_k_accuracy_score",
    "sklearn.metrics._scorer._ThresholdScorer._score",
    "sklearn.metrics.cluster._supervised.check_clusterings",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.model_selection._split.StratifiedKFold._make_test_folds",
    "sklearn.model_selection._split.check_cv",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier.partial_fit",
    "sklearn.preprocessing._label.LabelBinarizer.fit",
    "sklearn.preprocessing._label.LabelBinarizer.transform",
    "sklearn.preprocessing._label.label_binarize",
    "sklearn.preprocessing._target_encoder.TargetEncoder._fit_encodings_all",
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_from_predictions_params",
    "sklearn.utils.multiclass.check_classification_targets",
    "sklearn.utils.multiclass.unique_labels"
  ],
  "sklearn.utils.multiclass.unique_labels": [
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit",
    "sklearn.metrics._classification._check_set_wise_labels",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._classification.confusion_matrix",
    "sklearn.metrics._classification.multilabel_confusion_matrix",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.from_predictions",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier._validate_input",
    "sklearn.preprocessing._label.LabelBinarizer.fit",
    "sklearn.preprocessing._label.label_binarize",
    "sklearn.utils.multiclass._check_partial_fit_first_call"
  ],
  "sklearn.utils.optimize._cg": [
    "sklearn.utils.optimize._newton_cg"
  ],
  "sklearn.utils.optimize._check_optimize_result": [
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace._constrained_optimization",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor._constrained_optimization",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.fallback_lbfgs_solve",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit",
    "sklearn.linear_model._huber.HuberRegressor.fit",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_lbfgs"
  ],
  "sklearn.utils.optimize._line_search_wolfe12": [
    "sklearn.utils.optimize._newton_cg"
  ],
  "sklearn.utils.optimize._newton_cg": [
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.utils.tests.test_optimize.test_newton_cg"
  ],
  "sklearn.utils.parallel._with_config": [
    "sklearn.utils.parallel.Parallel.__call__"
  ],
  "sklearn.utils.parallel.delayed": [
    "benchmarks.bench_saga.exp",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.cluster._mean_shift.MeanShift.fit",
    "sklearn.compose._column_transformer.ColumnTransformer._fit_transform",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.decomposition._dict_learning._sparse_encode",
    "sklearn.decomposition._lda.LatentDirichletAllocation._e_step",
    "sklearn.ensemble._bagging.BaggingClassifier.decision_function",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_proba",
    "sklearn.ensemble._bagging.BaggingRegressor.predict",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._forest.BaseForest.apply",
    "sklearn.ensemble._forest.BaseForest.decision_path",
    "sklearn.ensemble._forest.BaseForest.feature_importances_",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._forest.ForestClassifier.predict_proba",
    "sklearn.ensemble._forest.ForestRegressor.predict",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.ensemble._voting._BaseVoting.fit",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.inspection._permutation_importance.permutation_importance",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.linear_model._base.LinearRegression.fit",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit_multiclass",
    "sklearn.linear_model._theil_sen.TheilSenRegressor.fit",
    "sklearn.manifold._mds.smacof",
    "sklearn.metrics.pairwise._parallel_pairwise",
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._validation.cross_val_predict",
    "sklearn.model_selection._validation.cross_validate",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.model_selection._validation.permutation_test_score",
    "sklearn.model_selection._validation.validation_curve",
    "sklearn.multiclass.OneVsOneClassifier.fit",
    "sklearn.multiclass.OneVsOneClassifier.partial_fit",
    "sklearn.multiclass.OneVsRestClassifier.fit",
    "sklearn.multiclass.OneVsRestClassifier.partial_fit",
    "sklearn.multiclass.OutputCodeClassifier.fit",
    "sklearn.multioutput._MultiOutputEstimator.fit",
    "sklearn.multioutput._MultiOutputEstimator.partial_fit",
    "sklearn.multioutput._MultiOutputEstimator.predict",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors",
    "sklearn.pipeline.FeatureUnion._parallel_func",
    "sklearn.pipeline.FeatureUnion.transform",
    "sklearn.utils.fixes.delayed"
  ],
  "sklearn.utils.random._random_choice_csc": [
    "sklearn.dummy.DummyClassifier.predict"
  ],
  "sklearn.utils.resample": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._get_small_trainset",
    "sklearn.model_selection._search_successive_halving._SubsampleMetaSplitter.split",
    "sklearn.utils.shuffle"
  ],
  "sklearn.utils.safe_mask": [
    "sklearn.feature_selection._univariate_selection.f_classif",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.fit",
    "sklearn.utils.axis0_safe_slice"
  ],
  "sklearn.utils.safe_sqr": [
    "sklearn.feature_selection._base._get_feature_importances",
    "sklearn.feature_selection._univariate_selection.f_oneway"
  ],
  "sklearn.utils.shuffle": [
    "benchmarks.bench_isolation_forest.$toplevel",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_tsne_mnist.load_data",
    "examples.applications.plot_prediction_latency.generate_dataset",
    "examples.cluster.plot_color_quantization.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.make_data",
    "examples.ensemble.plot_stack_predictors.load_ames_housing",
    "examples.linear_model.plot_sgd_early_stopping.load_mnist",
    "examples.neighbors.approximate_nearest_neighbors.load_mnist",
    "examples.semi_supervised.plot_self_training_varying_threshold.$toplevel",
    "sklearn.datasets._kddcup99.fetch_kddcup99",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_circles",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.datasets._samples_generator.make_gaussian_quantiles",
    "sklearn.datasets._samples_generator.make_moons",
    "sklearn.datasets._samples_generator.make_regression",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.utils.estimator_checks.check_classifiers_classes",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.estimator_checks.check_clustering",
    "sklearn.utils.estimator_checks.check_outliers_fit_predict",
    "sklearn.utils.estimator_checks.check_outliers_train",
    "sklearn.utils.estimator_checks.check_sample_weights_invariance"
  ],
  "sklearn.utils.sparsefuncs._get_elem_at_rank": [
    "sklearn.utils.sparsefuncs._get_median"
  ],
  "sklearn.utils.sparsefuncs._get_median": [
    "sklearn.impute._base.SimpleImputer._sparse_fit",
    "sklearn.utils.sparsefuncs.csc_median_axis_0"
  ],
  "sklearn.utils.sparsefuncs._min_or_max_axis": [
    "sklearn.utils.sparsefuncs._sparse_min_or_max"
  ],
  "sklearn.utils.sparsefuncs._minor_reduce": [
    "sklearn.utils.sparsefuncs._min_or_max_axis"
  ],
  "sklearn.utils.sparsefuncs._raise_error_wrong_axis": [
    "sklearn.utils.sparsefuncs.incr_mean_variance_axis",
    "sklearn.utils.sparsefuncs.mean_variance_axis"
  ],
  "sklearn.utils.sparsefuncs._raise_typeerror": [
    "sklearn.utils.sparsefuncs.incr_mean_variance_axis",
    "sklearn.utils.sparsefuncs.inplace_column_scale",
    "sklearn.utils.sparsefuncs.inplace_row_scale",
    "sklearn.utils.sparsefuncs.inplace_swap_column",
    "sklearn.utils.sparsefuncs.inplace_swap_row",
    "sklearn.utils.sparsefuncs.mean_variance_axis",
    "sklearn.utils.sparsefuncs.min_max_axis"
  ],
  "sklearn.utils.sparsefuncs._sparse_min_max": [
    "sklearn.utils.sparsefuncs.min_max_axis"
  ],
  "sklearn.utils.sparsefuncs._sparse_min_or_max": [
    "sklearn.utils.sparsefuncs._sparse_min_max",
    "sklearn.utils.sparsefuncs._sparse_nan_min_max"
  ],
  "sklearn.utils.sparsefuncs._sparse_nan_min_max": [
    "sklearn.utils.sparsefuncs.min_max_axis"
  ],
  "sklearn.utils.sparsefuncs.count_nonzero": [
    "sklearn.metrics._classification.accuracy_score",
    "sklearn.metrics._classification.hamming_loss",
    "sklearn.metrics._classification.multilabel_confusion_matrix",
    "sklearn.metrics._ranking.label_ranking_loss"
  ],
  "sklearn.utils.sparsefuncs.csc_median_axis_0": [
    "sklearn.neighbors._nearest_centroid.NearestCentroid.fit"
  ],
  "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [
    "sklearn.preprocessing._data.StandardScaler.partial_fit"
  ],
  "sklearn.utils.sparsefuncs.inplace_column_scale": [
    "sklearn.linear_model._base._preprocess_data",
    "sklearn.preprocessing._data.MaxAbsScaler.inverse_transform",
    "sklearn.preprocessing._data.MaxAbsScaler.transform",
    "sklearn.preprocessing._data.RobustScaler.inverse_transform",
    "sklearn.preprocessing._data.RobustScaler.transform",
    "sklearn.preprocessing._data.StandardScaler.inverse_transform",
    "sklearn.preprocessing._data.StandardScaler.transform",
    "sklearn.preprocessing._data.scale"
  ],
  "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [
    "sklearn.utils.sparsefuncs.inplace_column_scale",
    "sklearn.utils.sparsefuncs.inplace_row_scale"
  ],
  "sklearn.utils.sparsefuncs.inplace_csr_row_scale": [
    "sklearn.utils.sparsefuncs.inplace_column_scale",
    "sklearn.utils.sparsefuncs.inplace_row_scale"
  ],
  "sklearn.utils.sparsefuncs.inplace_swap_row_csc": [
    "sklearn.utils.sparsefuncs.inplace_swap_column",
    "sklearn.utils.sparsefuncs.inplace_swap_row"
  ],
  "sklearn.utils.sparsefuncs.inplace_swap_row_csr": [
    "sklearn.utils.sparsefuncs.inplace_swap_column",
    "sklearn.utils.sparsefuncs.inplace_swap_row"
  ],
  "sklearn.utils.sparsefuncs.mean_variance_axis": [
    "sklearn.cluster._kmeans._tolerance",
    "sklearn.decomposition._truncated_svd.TruncatedSVD.fit_transform",
    "sklearn.feature_selection._variance_threshold.VarianceThreshold.fit",
    "sklearn.linear_model._base._preprocess_data",
    "sklearn.linear_model._ridge._RidgeGCV._compute_covariance",
    "sklearn.linear_model._ridge._RidgeGCV._compute_gram",
    "sklearn.preprocessing._data.StandardScaler.partial_fit",
    "sklearn.preprocessing._data.scale"
  ],
  "sklearn.utils.sparsefuncs.min_max_axis": [
    "sklearn.feature_selection._variance_threshold.VarianceThreshold.fit",
    "sklearn.preprocessing._data.MaxAbsScaler.partial_fit",
    "sklearn.preprocessing._data.normalize",
    "sklearn.preprocessing._label._inverse_binarize_multiclass"
  ],
  "sklearn.utils.stats._weighted_percentile": [
    "sklearn._loss.loss.AbsoluteError.fit_intercept_only",
    "sklearn._loss.loss.HuberLoss.fit_intercept_only",
    "sklearn._loss.loss.PinballLoss.fit_intercept_only",
    "sklearn.dummy.DummyRegressor.fit",
    "sklearn.ensemble._gb_losses.HuberLossFunction.__call__",
    "sklearn.ensemble._gb_losses.HuberLossFunction._update_terminal_region",
    "sklearn.ensemble._gb_losses.HuberLossFunction.negative_gradient",
    "sklearn.ensemble._gb_losses.LeastAbsoluteError._update_terminal_region",
    "sklearn.ensemble._gb_losses.QuantileLossFunction._update_terminal_region",
    "sklearn.metrics._regression.d2_pinball_score",
    "sklearn.metrics._regression.median_absolute_error",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit",
    "sklearn.preprocessing._polynomial.SplineTransformer._get_base_knot_positions"
  ],
  "sklearn.utils.tests.test_estimator_checks.run_tests_without_pytest": [
    "sklearn.utils.tests.test_estimator_checks.$toplevel"
  ],
  "sklearn.utils.tests.test_shortest_path.floyd_warshall_slow": [
    "sklearn.utils.tests.test_shortest_path.test_shortest_path"
  ],
  "sklearn.utils.tests.test_shortest_path.generate_graph": [
    "sklearn.utils.tests.test_shortest_path.test_shortest_path"
  ],
  "sklearn.utils.validation._allclose_dense_sparse": [
    "sklearn.cluster._hdbscan.hdbscan._hdbscan_brute",
    "sklearn.preprocessing._function_transformer.FunctionTransformer._check_inverse_transform"
  ],
  "sklearn.utils.validation._assert_all_finite": [
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.fit",
    "sklearn.utils.multiclass.type_of_target",
    "sklearn.utils.validation._check_y",
    "sklearn.utils.validation._ensure_sparse_format",
    "sklearn.utils.validation.assert_all_finite",
    "sklearn.utils.validation.check_array"
  ],
  "sklearn.utils.validation._assert_all_finite_element_wise": [
    "sklearn.tree._classes.BaseDecisionTree._compute_missing_values_in_feature_mask",
    "sklearn.utils.validation._assert_all_finite"
  ],
  "sklearn.utils.validation._check_estimator_name": [
    "sklearn.utils.validation._check_y",
    "sklearn.utils.validation.check_X_y",
    "sklearn.utils.validation.check_array"
  ],
  "sklearn.utils.validation._check_feature_names_in": [
    "sklearn.base.OneToOneFeatureMixin.get_feature_names_out",
    "sklearn.compose._column_transformer.ColumnTransformer.get_feature_names_out",
    "sklearn.ensemble._forest.RandomTreesEmbedding.get_feature_names_out",
    "sklearn.ensemble._stacking._BaseStacking.get_feature_names_out",
    "sklearn.ensemble._voting.VotingClassifier.get_feature_names_out",
    "sklearn.ensemble._voting.VotingRegressor.get_feature_names_out",
    "sklearn.feature_selection._base.SelectorMixin.get_feature_names_out",
    "sklearn.impute._base.MissingIndicator.get_feature_names_out",
    "sklearn.impute._base.SimpleImputer.get_feature_names_out",
    "sklearn.impute._iterative.IterativeImputer.get_feature_names_out",
    "sklearn.impute._knn.KNNImputer.get_feature_names_out",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.get_feature_names_out",
    "sklearn.preprocessing._encoders.OneHotEncoder.get_feature_names_out",
    "sklearn.preprocessing._function_transformer.FunctionTransformer.get_feature_names_out",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.get_feature_names_out",
    "sklearn.preprocessing._polynomial.SplineTransformer.get_feature_names_out",
    "sklearn.utils.validation._generate_get_feature_names_out"
  ],
  "sklearn.utils.validation._check_fit_params": [
    "sklearn.calibration._fit_classifier_calibrator_pair",
    "sklearn.model_selection._search.BaseSearchCV.fit",
    "sklearn.model_selection._validation._fit_and_predict",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._permutation_test_score",
    "sklearn.multioutput._MultiOutputEstimator.fit"
  ],
  "sklearn.utils.validation._check_large_sparse": [
    "sklearn.svm._base._fit_liblinear",
    "sklearn.utils.validation._ensure_sparse_format"
  ],
  "sklearn.utils.validation._check_monotonic_cst": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit"
  ],
  "sklearn.utils.validation._check_pos_label_consistency": [
    "sklearn.calibration.calibration_curve",
    "sklearn.metrics._classification.brier_score_loss",
    "sklearn.metrics._ranking._binary_clf_curve",
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_from_predictions_params"
  ],
  "sklearn.utils.validation._check_psd_eigenvalues": [
    "sklearn.decomposition._kernel_pca.KernelPCA._fit_transform"
  ],
  "sklearn.utils.validation._check_response_method": [
    "sklearn.ensemble._stacking._BaseStacking._method_name",
    "sklearn.utils._response._get_response_values"
  ],
  "sklearn.utils.validation._check_sample_weight": [
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.cluster._bisect_k_means.BisectingKMeans.fit",
    "sklearn.cluster._dbscan.DBSCAN.fit",
    "sklearn.cluster._kmeans.KMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.partial_fit",
    "sklearn.cluster._kmeans._BaseKMeans.predict",
    "sklearn.cluster._kmeans._BaseKMeans.score",
    "sklearn.cluster._kmeans.kmeans_plusplus",
    "sklearn.dummy.DummyClassifier.fit",
    "sklearn.dummy.DummyRegressor.fit",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._gb.BaseGradientBoosting.fit",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.fit",
    "sklearn.inspection._partial_dependence.partial_dependence",
    "sklearn.isotonic.IsotonicRegression._build_y",
    "sklearn.isotonic.isotonic_regression",
    "sklearn.kernel_ridge.KernelRidge.fit",
    "sklearn.linear_model._base.LinearRegression.fit",
    "sklearn.linear_model._bayes.BayesianRidge.fit",
    "sklearn.linear_model._coordinate_descent.ElasticNet.fit",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.score",
    "sklearn.linear_model._huber.HuberRegressor.fit",
    "sklearn.linear_model._logistic._log_reg_scoring_path",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._quantile.QuantileRegressor.fit",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.linear_model._ridge._BaseRidge.fit",
    "sklearn.linear_model._ridge._RidgeClassifierMixin._prepare_data",
    "sklearn.linear_model._ridge._RidgeGCV.fit",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.linear_model._sag.sag_solver",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._partial_fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._partial_fit",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._partial_fit",
    "sklearn.metrics._ranking._binary_clf_curve",
    "sklearn.metrics._regression.d2_pinball_score",
    "sklearn.metrics._regression.median_absolute_error",
    "sklearn.naive_bayes.GaussianNB._partial_fit",
    "sklearn.naive_bayes._BaseDiscreteNB.fit",
    "sklearn.naive_bayes._BaseDiscreteNB.partial_fit",
    "sklearn.neighbors._kde.KernelDensity.fit",
    "sklearn.preprocessing._data.StandardScaler.partial_fit",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit",
    "sklearn.preprocessing._polynomial.SplineTransformer.fit",
    "sklearn.svm._base._fit_liblinear",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.utils._mocking.CheckingClassifier.fit",
    "sklearn.utils.sparsefuncs.incr_mean_variance_axis"
  ],
  "sklearn.utils.validation._check_y": [
    "sklearn.base.BaseEstimator._validate_data",
    "sklearn.preprocessing._target_encoder.TargetEncoder._fit_encodings_all",
    "sklearn.utils.validation.check_X_y"
  ],
  "sklearn.utils.validation._ensure_no_complex_data": [
    "sklearn.utils.validation._check_y",
    "sklearn.utils.validation.check_array"
  ],
  "sklearn.utils.validation._ensure_sparse_format": [
    "sklearn.utils.validation.check_array"
  ],
  "sklearn.utils.validation._generate_get_feature_names_out": [
    "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"
  ],
  "sklearn.utils.validation._get_feature_names": [
    "sklearn.base.BaseEstimator._check_feature_names"
  ],
  "sklearn.utils.validation._is_arraylike": [
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.fit",
    "sklearn.utils.validation._check_fit_params",
    "sklearn.utils.validation._is_arraylike_not_scalar"
  ],
  "sklearn.utils.validation._is_arraylike_not_scalar": [
    "sklearn.cluster._kmeans.KMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.partial_fit",
    "sklearn.cluster._kmeans._BaseKMeans._check_params_vs_input",
    "sklearn.cluster._kmeans._BaseKMeans._init_centroids",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.inspection._plot.decision_boundary._check_boundary_response_method",
    "sklearn.utils._pandas_indexing",
    "sklearn.utils._param_validation._ArrayLikes.is_satisfied_by"
  ],
  "sklearn.utils.validation._is_extension_array_dtype": [
    "sklearn.utils.validation.check_array"
  ],
  "sklearn.utils.validation._is_fitted": [
    "sklearn.base._fit_context.decorator.wrapper",
    "sklearn.utils.validation.check_is_fitted"
  ],
  "sklearn.utils.validation._is_pandas_df": [
    "sklearn.utils.validation._get_feature_names"
  ],
  "sklearn.utils.validation._make_indexable": [
    "sklearn.utils.validation._check_fit_params",
    "sklearn.utils.validation.indexable"
  ],
  "sklearn.utils.validation._num_features": [
    "sklearn.base.BaseEstimator._check_n_features",
    "sklearn.feature_selection._from_model.SelectFromModel._check_max_features",
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.from_estimator"
  ],
  "sklearn.utils.validation._num_samples": [
    "sklearn.calibration.CalibratedClassifierCV.predict_proba",
    "sklearn.calibration._CalibratedClassifier.predict_proba",
    "sklearn.compose._column_transformer.ColumnTransformer._hstack",
    "sklearn.dummy.DummyClassifier.predict",
    "sklearn.dummy.DummyClassifier.predict_proba",
    "sklearn.dummy.DummyRegressor.predict",
    "sklearn.ensemble._forest.RandomTreesEmbedding.fit_transform",
    "sklearn.ensemble._iforest.IsolationForest._compute_chunked_score_samples",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_proba",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor._boost",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor._get_median_predict",
    "sklearn.gaussian_process.kernels.ConstantKernel.__call__",
    "sklearn.gaussian_process.kernels.ConstantKernel.diag",
    "sklearn.gaussian_process.kernels.WhiteKernel.__call__",
    "sklearn.gaussian_process.kernels.WhiteKernel.diag",
    "sklearn.metrics._classification.zero_one_loss",
    "sklearn.metrics._regression.d2_pinball_score",
    "sklearn.metrics._regression.d2_tweedie_score",
    "sklearn.metrics._regression.r2_score",
    "sklearn.metrics.pairwise._check_chunk_size",
    "sklearn.metrics.pairwise._parallel_pairwise",
    "sklearn.metrics.pairwise.pairwise_distances_chunked",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._check_input_parameters",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.fit",
    "sklearn.model_selection._split.BaseCrossValidator._iter_test_masks",
    "sklearn.model_selection._split.BaseCrossValidator.split",
    "sklearn.model_selection._split.KFold._iter_test_indices",
    "sklearn.model_selection._split.LeaveOneOut._iter_test_indices",
    "sklearn.model_selection._split.LeaveOneOut.get_n_splits",
    "sklearn.model_selection._split.LeavePGroupsOut._iter_test_masks",
    "sklearn.model_selection._split.LeavePOut._iter_test_indices",
    "sklearn.model_selection._split.LeavePOut.get_n_splits",
    "sklearn.model_selection._split.ShuffleSplit._iter_indices",
    "sklearn.model_selection._split.StratifiedShuffleSplit._iter_indices",
    "sklearn.model_selection._split.TimeSeriesSplit.split",
    "sklearn.model_selection._split._BaseKFold.split",
    "sklearn.model_selection._split.train_test_split",
    "sklearn.model_selection._validation._enforce_prediction_order",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation.cross_val_predict",
    "sklearn.multiclass.OneVsRestClassifier.predict",
    "sklearn.multiclass.OutputCodeClassifier.fit",
    "sklearn.multiclass._ConstantPredictor.decision_function",
    "sklearn.multiclass._ConstantPredictor.predict",
    "sklearn.multiclass._ConstantPredictor.predict_proba",
    "sklearn.multiclass._fit_ovo_binary",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict_proba",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba",
    "sklearn.preprocessing._label.LabelBinarizer.fit",
    "sklearn.preprocessing._label.LabelEncoder.inverse_transform",
    "sklearn.preprocessing._label.LabelEncoder.transform",
    "sklearn.preprocessing._label.label_binarize",
    "sklearn.svm._base.BaseLibSVM.fit",
    "sklearn.svm._classes.OneClassSVM.fit",
    "sklearn.utils._mocking.CheckingClassifier.decision_function",
    "sklearn.utils._mocking.CheckingClassifier.fit",
    "sklearn.utils._mocking.CheckingClassifier.predict",
    "sklearn.utils._mocking.CheckingClassifier.predict_proba",
    "sklearn.utils.estimator_checks._check_transformer",
    "sklearn.utils.validation._check_fit_params",
    "sklearn.utils.validation._check_sample_weight",
    "sklearn.utils.validation.check_array",
    "sklearn.utils.validation.check_consistent_length"
  ],
  "sklearn.utils.validation._pandas_dtype_needs_early_conversion": [
    "sklearn.utils.validation.check_array"
  ],
  "sklearn.utils.validation.as_float_array": [
    "sklearn.cluster._spectral.discretize",
    "sklearn.decomposition._fastica.FastICA._fit_transform",
    "sklearn.feature_selection._univariate_selection._clean_nans",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._least_angle._lars_path_residues",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.fit",
    "sklearn.linear_model._omp._omp_path_residues"
  ],
  "sklearn.utils.validation.assert_all_finite": [
    "sklearn.cluster._bicluster.BaseSpectral._svd",
    "sklearn.metrics._classification.brier_score_loss",
    "sklearn.metrics._ranking._binary_clf_curve",
    "sklearn.tree._classes.BaseDecisionTree._compute_missing_values_in_feature_mask"
  ],
  "sklearn.utils.validation.check_X_y": [
    "sklearn.base.BaseEstimator._validate_data",
    "sklearn.feature_selection._mutual_info._estimate_mi",
    "sklearn.feature_selection._univariate_selection.f_classif",
    "sklearn.feature_selection._univariate_selection.r_regression",
    "sklearn.metrics.cluster._unsupervised.calinski_harabasz_score",
    "sklearn.metrics.cluster._unsupervised.davies_bouldin_score",
    "sklearn.metrics.cluster._unsupervised.silhouette_samples",
    "sklearn.metrics.cluster._unsupervised.silhouette_score",
    "sklearn.utils._testing.MinimalClassifier.fit",
    "sklearn.utils._testing.MinimalRegressor.fit",
    "sklearn.utils.tests.test_estimator_checks.OneClassSampleErrorClassifier.fit"
  ],
  "sklearn.utils.validation.check_array": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.load_data",
    "benchmarks.bench_mnist.load_data",
    "benchmarks.bench_plot_nmf._PGNMF._fit_transform",
    "benchmarks.bench_tsne_mnist.load_data",
    "sklearn.base.BaseEstimator._validate_data",
    "sklearn.base.BiclusterMixin.get_submatrix",
    "sklearn.cluster._agglomerative.AgglomerativeClustering._fit",
    "sklearn.cluster._kmeans.KMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.partial_fit",
    "sklearn.cluster._kmeans._BaseKMeans._init_centroids",
    "sklearn.cluster._kmeans.kmeans_plusplus",
    "sklearn.cluster._mean_shift.estimate_bandwidth",
    "sklearn.compose._column_transformer.ColumnTransformer._hstack",
    "sklearn.compose._column_transformer._check_X",
    "sklearn.compose._target.TransformedTargetRegressor.fit",
    "sklearn.covariance._empirical_covariance.EmpiricalCovariance._set_covariance",
    "sklearn.covariance._empirical_covariance.empirical_covariance",
    "sklearn.covariance._robust_covariance.fast_mcd",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf_shrinkage",
    "sklearn.covariance._shrunk_covariance.shrunk_covariance",
    "sklearn.cross_decomposition._pls.PLSSVD.fit",
    "sklearn.cross_decomposition._pls.PLSSVD.transform",
    "sklearn.cross_decomposition._pls._PLS.fit",
    "sklearn.cross_decomposition._pls._PLS.inverse_transform",
    "sklearn.cross_decomposition._pls._PLS.transform",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._svmlight_format_io.dump_svmlight_file",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._initialize_dict",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._dict_learning.sparse_encode",
    "sklearn.decomposition._fastica.FastICA.inverse_transform",
    "sklearn.decomposition._nmf._check_init",
    "sklearn.decomposition._nmf._fit_coordinate_descent",
    "sklearn.decomposition._nmf.non_negative_factorization",
    "sklearn.decomposition._sparse_pca._BaseSparsePCA.inverse_transform",
    "sklearn.decomposition._truncated_svd.TruncatedSVD.inverse_transform",
    "sklearn.dummy.DummyRegressor.fit",
    "sklearn.ensemble._gb.BaseGradientBoosting.fit",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.fit",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.transform",
    "sklearn.ensemble._iforest._average_path_length",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.inverse_transform",
    "sklearn.feature_extraction.image.extract_patches_2d",
    "sklearn.feature_extraction.text.CountVectorizer.inverse_transform",
    "sklearn.feature_selection._base.SelectorMixin.inverse_transform",
    "sklearn.feature_selection._mutual_info._estimate_mi",
    "sklearn.feature_selection._univariate_selection.chi2",
    "sklearn.impute._iterative.IterativeImputer._validate_limit",
    "sklearn.inspection._partial_dependence.partial_dependence",
    "sklearn.inspection._permutation_importance.permutation_importance",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.isotonic.IsotonicRegression._transform",
    "sklearn.isotonic.IsotonicRegression.fit",
    "sklearn.isotonic.isotonic_regression",
    "sklearn.linear_model._base._preprocess_data",
    "sklearn.linear_model._coordinate_descent.ElasticNet.fit",
    "sklearn.linear_model._coordinate_descent._alpha_grid",
    "sklearn.linear_model._coordinate_descent._path_residuals",
    "sklearn.linear_model._coordinate_descent.enet_path",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.score",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._omp.orthogonal_mp",
    "sklearn.linear_model._omp.orthogonal_mp_gram",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.linear_model._sag.sag_solver",
    "sklearn.manifold._locally_linear.barycenter_weights",
    "sklearn.manifold._mds.smacof",
    "sklearn.manifold._spectral_embedding.spectral_embedding",
    "sklearn.metrics._base._average_binary_score",
    "sklearn.metrics._classification.hinge_loss",
    "sklearn.metrics._classification.log_loss",
    "sklearn.metrics._ranking.coverage_error",
    "sklearn.metrics._ranking.dcg_score",
    "sklearn.metrics._ranking.label_ranking_average_precision_score",
    "sklearn.metrics._ranking.label_ranking_loss",
    "sklearn.metrics._ranking.ndcg_score",
    "sklearn.metrics._ranking.roc_auc_score",
    "sklearn.metrics._ranking.top_k_accuracy_score",
    "sklearn.metrics._regression._check_reg_targets",
    "sklearn.metrics.cluster._bicluster._check_rows_and_columns",
    "sklearn.metrics.cluster._supervised.check_clusterings",
    "sklearn.metrics.cluster._supervised.mutual_info_score",
    "sklearn.metrics.pairwise.check_pairwise_arrays",
    "sklearn.metrics.pairwise.euclidean_distances",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._check_means_parameters",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._checkcovariance_prior_parameter",
    "sklearn.mixture._gaussian_mixture._check_means",
    "sklearn.mixture._gaussian_mixture._check_precisions",
    "sklearn.mixture._gaussian_mixture._check_weights",
    "sklearn.model_selection._split.GroupKFold._iter_test_indices",
    "sklearn.model_selection._split.GroupShuffleSplit._iter_indices",
    "sklearn.model_selection._split.LeaveOneGroupOut._iter_test_masks",
    "sklearn.model_selection._split.LeaveOneGroupOut.get_n_splits",
    "sklearn.model_selection._split.LeavePGroupsOut._iter_test_masks",
    "sklearn.model_selection._split.LeavePGroupsOut.get_n_splits",
    "sklearn.model_selection._split.StratifiedKFold.split",
    "sklearn.model_selection._split.StratifiedShuffleSplit._iter_indices",
    "sklearn.model_selection._split.StratifiedShuffleSplit.split",
    "sklearn.neighbors._base._check_precomputed",
    "sklearn.neighbors._lof.LocalOutlierFactor._predict",
    "sklearn.neighbors._lof.LocalOutlierFactor.score_samples",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit",
    "sklearn.preprocessing._data.MaxAbsScaler.inverse_transform",
    "sklearn.preprocessing._data.MinMaxScaler.inverse_transform",
    "sklearn.preprocessing._data.RobustScaler.inverse_transform",
    "sklearn.preprocessing._data.StandardScaler.inverse_transform",
    "sklearn.preprocessing._data.add_dummy_feature",
    "sklearn.preprocessing._data.binarize",
    "sklearn.preprocessing._data.maxabs_scale",
    "sklearn.preprocessing._data.minmax_scale",
    "sklearn.preprocessing._data.normalize",
    "sklearn.preprocessing._data.robust_scale",
    "sklearn.preprocessing._data.scale",
    "sklearn.preprocessing._discretization.KBinsDiscretizer._validate_n_bins",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.inverse_transform",
    "sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform",
    "sklearn.preprocessing._encoders._BaseEncoder._check_X",
    "sklearn.preprocessing._function_transformer.FunctionTransformer.inverse_transform",
    "sklearn.preprocessing._label.label_binarize",
    "sklearn.preprocessing._polynomial.SplineTransformer.fit",
    "sklearn.random_projection.BaseRandomProjection.inverse_transform",
    "sklearn.svm._base.BaseLibSVM._dense_decision_function",
    "sklearn.svm._base.BaseLibSVM._dense_predict",
    "sklearn.svm._bounds.l1_min_c",
    "sklearn.tree._export.export_graphviz",
    "sklearn.tree._export.export_text",
    "sklearn.utils._mocking.CheckingClassifier.fit",
    "sklearn.utils._testing.MinimalClassifier.predict_proba",
    "sklearn.utils._testing.MinimalRegressor.predict",
    "sklearn.utils._testing.MinimalTransformer.fit",
    "sklearn.utils._testing.MinimalTransformer.transform",
    "sklearn.utils.extmath.log_logistic",
    "sklearn.utils.multiclass._unique_indicator",
    "sklearn.utils.multiclass.is_multilabel",
    "sklearn.utils.multiclass.type_of_target",
    "sklearn.utils.multiclass.unique_labels",
    "sklearn.utils.resample",
    "sklearn.utils.safe_sqr",
    "sklearn.utils.tests.test_estimator_checks.BadTransformerWithoutMixin.transform",
    "sklearn.utils.tests.test_estimator_checks.ChangesDict.predict",
    "sklearn.utils.tests.test_estimator_checks.CorrectNotFittedErrorClassifier.predict",
    "sklearn.utils.tests.test_estimator_checks.EstimatorInconsistentForPandas.fit",
    "sklearn.utils.tests.test_estimator_checks.EstimatorInconsistentForPandas.predict",
    "sklearn.utils.tests.test_estimator_checks.NoSampleWeightPandasSeriesType.predict",
    "sklearn.utils.tests.test_estimator_checks.NoSparseClassifier.predict",
    "sklearn.utils.tests.test_estimator_checks.NotInvariantPredict.predict",
    "sklearn.utils.tests.test_estimator_checks.NotInvariantSampleOrder.predict",
    "sklearn.utils.tests.test_estimator_checks.OneClassSampleErrorClassifier.predict",
    "sklearn.utils.tests.test_estimator_checks.SparseTransformer.transform",
    "sklearn.utils.validation._check_sample_weight",
    "sklearn.utils.validation._check_y",
    "sklearn.utils.validation.as_float_array",
    "sklearn.utils.validation.check_X_y",
    "sklearn.utils.validation.column_or_1d"
  ],
  "sklearn.utils.validation.check_consistent_length": [
    "sklearn.calibration.calibration_curve",
    "sklearn.cross_decomposition._pls.PLSSVD.fit",
    "sklearn.cross_decomposition._pls._PLS.fit",
    "sklearn.dummy.DummyClassifier.fit",
    "sklearn.dummy.DummyRegressor.fit",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.isotonic.IsotonicRegression.fit",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.metrics._base._average_binary_score",
    "sklearn.metrics._base._average_multiclass_ovo_score",
    "sklearn.metrics._classification._check_targets",
    "sklearn.metrics._classification.accuracy_score",
    "sklearn.metrics._classification.brier_score_loss",
    "sklearn.metrics._classification.confusion_matrix",
    "sklearn.metrics._classification.hamming_loss",
    "sklearn.metrics._classification.hinge_loss",
    "sklearn.metrics._classification.log_loss",
    "sklearn.metrics._classification.matthews_corrcoef",
    "sklearn.metrics._classification.multilabel_confusion_matrix",
    "sklearn.metrics._ranking._binary_clf_curve",
    "sklearn.metrics._ranking.auc",
    "sklearn.metrics._ranking.coverage_error",
    "sklearn.metrics._ranking.dcg_score",
    "sklearn.metrics._ranking.label_ranking_average_precision_score",
    "sklearn.metrics._ranking.label_ranking_loss",
    "sklearn.metrics._ranking.ndcg_score",
    "sklearn.metrics._ranking.top_k_accuracy_score",
    "sklearn.metrics._regression._check_reg_targets",
    "sklearn.metrics._regression.d2_pinball_score",
    "sklearn.metrics._regression.explained_variance_score",
    "sklearn.metrics._regression.mean_absolute_error",
    "sklearn.metrics._regression.mean_absolute_percentage_error",
    "sklearn.metrics._regression.mean_pinball_loss",
    "sklearn.metrics._regression.mean_squared_error",
    "sklearn.metrics._regression.mean_squared_log_error",
    "sklearn.metrics._regression.mean_tweedie_deviance",
    "sklearn.metrics._regression.r2_score",
    "sklearn.metrics.cluster._bicluster._check_rows_and_columns",
    "sklearn.metrics.cluster._supervised.check_clusterings",
    "sklearn.preprocessing._target_encoder.TargetEncoder._fit_encodings_all",
    "sklearn.svm._base.BaseLibSVM.fit",
    "sklearn.svm._bounds.l1_min_c",
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_from_predictions_params",
    "sklearn.utils.resample",
    "sklearn.utils.validation.check_X_y",
    "sklearn.utils.validation.indexable"
  ],
  "sklearn.utils.validation.check_is_fitted": [
    "benchmarks.bench_plot_nmf._PGNMF.inverse_transform",
    "benchmarks.bench_plot_nmf._PGNMF.transform",
    "examples.cluster.plot_inductive_clustering.InductiveClusterer.decision_function",
    "examples.cluster.plot_inductive_clustering.InductiveClusterer.predict",
    "examples.miscellaneous.plot_metadata_routing.MetaClassifier.predict",
    "examples.miscellaneous.plot_metadata_routing.RouterConsumerClassifier.predict",
    "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out",
    "sklearn.base.OneToOneFeatureMixin.get_feature_names_out",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.calibration.CalibratedClassifierCV.predict",
    "sklearn.calibration.CalibratedClassifierCV.predict_proba",
    "sklearn.cluster._affinity_propagation.AffinityPropagation.predict",
    "sklearn.cluster._birch.Birch._check_fit",
    "sklearn.cluster._birch.Birch.predict",
    "sklearn.cluster._birch.Birch.transform",
    "sklearn.cluster._bisect_k_means.BisectingKMeans.predict",
    "sklearn.cluster._feature_agglomeration.AgglomerationTransform.inverse_transform",
    "sklearn.cluster._feature_agglomeration.AgglomerationTransform.transform",
    "sklearn.cluster._kmeans._BaseKMeans.predict",
    "sklearn.cluster._kmeans._BaseKMeans.score",
    "sklearn.cluster._kmeans._BaseKMeans.transform",
    "sklearn.cluster._mean_shift.MeanShift.predict",
    "sklearn.compose._column_transformer.ColumnTransformer.get_feature_names_out",
    "sklearn.compose._column_transformer.ColumnTransformer.transform",
    "sklearn.compose._target.TransformedTargetRegressor.n_features_in_",
    "sklearn.compose._target.TransformedTargetRegressor.predict",
    "sklearn.covariance._elliptic_envelope.EllipticEnvelope.decision_function",
    "sklearn.covariance._elliptic_envelope.EllipticEnvelope.score_samples",
    "sklearn.cross_decomposition._pls.PLSSVD.transform",
    "sklearn.cross_decomposition._pls._PLS.inverse_transform",
    "sklearn.cross_decomposition._pls._PLS.predict",
    "sklearn.cross_decomposition._pls._PLS.transform",
    "sklearn.decomposition._base._BasePCA.transform",
    "sklearn.decomposition._dict_learning._BaseSparseCoding.transform",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.get_covariance",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.get_precision",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.score_samples",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.transform",
    "sklearn.decomposition._fastica.FastICA.inverse_transform",
    "sklearn.decomposition._fastica.FastICA.transform",
    "sklearn.decomposition._kernel_pca.KernelPCA.transform",
    "sklearn.decomposition._lda.LatentDirichletAllocation.perplexity",
    "sklearn.decomposition._lda.LatentDirichletAllocation.score",
    "sklearn.decomposition._lda.LatentDirichletAllocation.transform",
    "sklearn.decomposition._nmf.MiniBatchNMF.transform",
    "sklearn.decomposition._nmf.NMF.transform",
    "sklearn.decomposition._nmf._BaseNMF.inverse_transform",
    "sklearn.decomposition._pca.PCA.score_samples",
    "sklearn.decomposition._sparse_pca._BaseSparsePCA.inverse_transform",
    "sklearn.decomposition._sparse_pca._BaseSparsePCA.transform",
    "sklearn.decomposition._truncated_svd.TruncatedSVD.transform",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis._decision_function",
    "sklearn.dummy.DummyClassifier.predict",
    "sklearn.dummy.DummyClassifier.predict_proba",
    "sklearn.dummy.DummyRegressor.predict",
    "sklearn.ensemble._bagging.BaggingClassifier.decision_function",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_proba",
    "sklearn.ensemble._bagging.BaggingRegressor.predict",
    "sklearn.ensemble._forest.BaseForest._validate_X_predict",
    "sklearn.ensemble._forest.BaseForest.feature_importances_",
    "sklearn.ensemble._forest.ForestClassifier.predict_proba",
    "sklearn.ensemble._forest.ForestRegressor.predict",
    "sklearn.ensemble._forest.RandomTreesEmbedding.get_feature_names_out",
    "sklearn.ensemble._forest.RandomTreesEmbedding.transform",
    "sklearn.ensemble._gb.BaseGradientBoosting._check_initialized",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.transform",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._raw_predict",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._staged_raw_predict",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.n_iter_",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.predict",
    "sklearn.ensemble._iforest.IsolationForest._score_samples",
    "sklearn.ensemble._iforest.IsolationForest.predict",
    "sklearn.ensemble._stacking.StackingClassifier.decision_function",
    "sklearn.ensemble._stacking.StackingClassifier.predict_proba",
    "sklearn.ensemble._stacking._BaseStacking._transform",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.ensemble._stacking._BaseStacking.get_feature_names_out",
    "sklearn.ensemble._stacking._BaseStacking.n_features_in_",
    "sklearn.ensemble._stacking._BaseStacking.predict",
    "sklearn.ensemble._voting.VotingClassifier.get_feature_names_out",
    "sklearn.ensemble._voting.VotingClassifier.predict",
    "sklearn.ensemble._voting.VotingClassifier.predict_proba",
    "sklearn.ensemble._voting.VotingClassifier.transform",
    "sklearn.ensemble._voting.VotingRegressor.get_feature_names_out",
    "sklearn.ensemble._voting.VotingRegressor.predict",
    "sklearn.ensemble._voting.VotingRegressor.transform",
    "sklearn.ensemble._voting._BaseVoting.n_features_in_",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.decision_function",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_proba",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_decision_function",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor.predict",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor.staged_predict",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.get_feature_names_out",
    "sklearn.feature_extraction.text.TfidfTransformer.transform",
    "sklearn.feature_extraction.text.TfidfVectorizer.transform",
    "sklearn.feature_selection._base.SelectorMixin.get_feature_names_out",
    "sklearn.feature_selection._from_model.SelectFromModel._get_support_mask",
    "sklearn.feature_selection._from_model.SelectFromModel.fit",
    "sklearn.feature_selection._from_model.SelectFromModel.n_features_in_",
    "sklearn.feature_selection._from_model.SelectFromModel.partial_fit",
    "sklearn.feature_selection._rfe.RFE._get_support_mask",
    "sklearn.feature_selection._rfe.RFE.decision_function",
    "sklearn.feature_selection._rfe.RFE.predict",
    "sklearn.feature_selection._rfe.RFE.predict_log_proba",
    "sklearn.feature_selection._rfe.RFE.predict_proba",
    "sklearn.feature_selection._rfe.RFE.score",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector._get_support_mask",
    "sklearn.feature_selection._univariate_selection.GenericUnivariateSelect._get_support_mask",
    "sklearn.feature_selection._univariate_selection.SelectFdr._get_support_mask",
    "sklearn.feature_selection._univariate_selection.SelectFpr._get_support_mask",
    "sklearn.feature_selection._univariate_selection.SelectFwe._get_support_mask",
    "sklearn.feature_selection._univariate_selection.SelectKBest._get_support_mask",
    "sklearn.feature_selection._univariate_selection.SelectPercentile._get_support_mask",
    "sklearn.feature_selection._variance_threshold.VarianceThreshold._get_support_mask",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict_proba",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.predict",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.predict_proba",
    "sklearn.impute._base.MissingIndicator.get_feature_names_out",
    "sklearn.impute._base.MissingIndicator.transform",
    "sklearn.impute._base.SimpleImputer.get_feature_names_out",
    "sklearn.impute._base.SimpleImputer.inverse_transform",
    "sklearn.impute._base.SimpleImputer.transform",
    "sklearn.impute._iterative.IterativeImputer.get_feature_names_out",
    "sklearn.impute._iterative.IterativeImputer.transform",
    "sklearn.impute._knn.KNNImputer.get_feature_names_out",
    "sklearn.impute._knn.KNNImputer.transform",
    "sklearn.inspection._partial_dependence.partial_dependence",
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.from_estimator",
    "sklearn.isotonic.IsotonicRegression.get_feature_names_out",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out",
    "sklearn.kernel_approximation.Nystroem.transform",
    "sklearn.kernel_approximation.PolynomialCountSketch.transform",
    "sklearn.kernel_approximation.RBFSampler.transform",
    "sklearn.kernel_approximation.SkewedChi2Sampler.transform",
    "sklearn.kernel_ridge.KernelRidge.predict",
    "sklearn.linear_model._base.LinearClassifierMixin.decision_function",
    "sklearn.linear_model._base.LinearModel._decision_function",
    "sklearn.linear_model._base.SparseCoefMixin.densify",
    "sklearn.linear_model._base.SparseCoefMixin.sparsify",
    "sklearn.linear_model._coordinate_descent.ElasticNet._decision_function",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor._linear_predictor",
    "sklearn.linear_model._logistic.LogisticRegression.predict_proba",
    "sklearn.linear_model._ransac.RANSACRegressor.predict",
    "sklearn.linear_model._ransac.RANSACRegressor.score",
    "sklearn.linear_model._ridge._RidgeClassifierMixin.predict",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._decision_function",
    "sklearn.linear_model._stochastic_gradient.SGDClassifier.predict_proba",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM.decision_function",
    "sklearn.manifold._isomap.Isomap.transform",
    "sklearn.manifold._locally_linear.LocallyLinearEmbedding.transform",
    "sklearn.mixture._base.BaseMixture.predict",
    "sklearn.mixture._base.BaseMixture.predict_proba",
    "sklearn.mixture._base.BaseMixture.sample",
    "sklearn.mixture._base.BaseMixture.score_samples",
    "sklearn.model_selection._search.BaseSearchCV.decision_function",
    "sklearn.model_selection._search.BaseSearchCV.inverse_transform",
    "sklearn.model_selection._search.BaseSearchCV.n_features_in_",
    "sklearn.model_selection._search.BaseSearchCV.predict",
    "sklearn.model_selection._search.BaseSearchCV.predict_log_proba",
    "sklearn.model_selection._search.BaseSearchCV.predict_proba",
    "sklearn.model_selection._search.BaseSearchCV.score",
    "sklearn.model_selection._search.BaseSearchCV.score_samples",
    "sklearn.model_selection._search.BaseSearchCV.transform",
    "sklearn.multiclass.OneVsOneClassifier.decision_function",
    "sklearn.multiclass.OneVsRestClassifier.decision_function",
    "sklearn.multiclass.OneVsRestClassifier.predict",
    "sklearn.multiclass.OneVsRestClassifier.predict_proba",
    "sklearn.multiclass.OutputCodeClassifier.predict",
    "sklearn.multiclass._ConstantPredictor.decision_function",
    "sklearn.multiclass._ConstantPredictor.predict",
    "sklearn.multiclass._ConstantPredictor.predict_proba",
    "sklearn.multioutput.MultiOutputClassifier.predict_proba",
    "sklearn.multioutput.MultiOutputClassifier.score",
    "sklearn.multioutput._BaseChain.predict",
    "sklearn.multioutput._MultiOutputEstimator.predict",
    "sklearn.naive_bayes._BaseNB.predict",
    "sklearn.naive_bayes._BaseNB.predict_joint_log_proba",
    "sklearn.naive_bayes._BaseNB.predict_log_proba",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict_proba",
    "sklearn.neighbors._graph.KNeighborsTransformer.transform",
    "sklearn.neighbors._graph.RadiusNeighborsTransformer.transform",
    "sklearn.neighbors._kde.KernelDensity.sample",
    "sklearn.neighbors._kde.KernelDensity.score_samples",
    "sklearn.neighbors._lof.LocalOutlierFactor._predict",
    "sklearn.neighbors._lof.LocalOutlierFactor.score_samples",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.predict",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier.predict",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier.predict_proba",
    "sklearn.neural_network._multilayer_perceptron.MLPRegressor.predict",
    "sklearn.neural_network._rbm.BernoulliRBM.gibbs",
    "sklearn.neural_network._rbm.BernoulliRBM.score_samples",
    "sklearn.neural_network._rbm.BernoulliRBM.transform",
    "sklearn.pipeline.FeatureUnion.__sklearn_is_fitted__",
    "sklearn.pipeline.Pipeline.__sklearn_is_fitted__",
    "sklearn.preprocessing._data.KernelCenterer.transform",
    "sklearn.preprocessing._data.MaxAbsScaler.inverse_transform",
    "sklearn.preprocessing._data.MaxAbsScaler.transform",
    "sklearn.preprocessing._data.MinMaxScaler.inverse_transform",
    "sklearn.preprocessing._data.MinMaxScaler.transform",
    "sklearn.preprocessing._data.PowerTransformer.inverse_transform",
    "sklearn.preprocessing._data.PowerTransformer.transform",
    "sklearn.preprocessing._data.QuantileTransformer.inverse_transform",
    "sklearn.preprocessing._data.QuantileTransformer.transform",
    "sklearn.preprocessing._data.RobustScaler.inverse_transform",
    "sklearn.preprocessing._data.RobustScaler.transform",
    "sklearn.preprocessing._data.StandardScaler.inverse_transform",
    "sklearn.preprocessing._data.StandardScaler.transform",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.get_feature_names_out",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.inverse_transform",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.transform",
    "sklearn.preprocessing._encoders.OneHotEncoder.get_feature_names_out",
    "sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform",
    "sklearn.preprocessing._encoders.OneHotEncoder.transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform",
    "sklearn.preprocessing._label.LabelBinarizer.inverse_transform",
    "sklearn.preprocessing._label.LabelBinarizer.transform",
    "sklearn.preprocessing._label.LabelEncoder.inverse_transform",
    "sklearn.preprocessing._label.LabelEncoder.transform",
    "sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform",
    "sklearn.preprocessing._label.MultiLabelBinarizer.transform",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.powers_",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform",
    "sklearn.preprocessing._polynomial.SplineTransformer.get_feature_names_out",
    "sklearn.preprocessing._polynomial.SplineTransformer.transform",
    "sklearn.random_projection.BaseRandomProjection.inverse_transform",
    "sklearn.random_projection.GaussianRandomProjection.transform",
    "sklearn.random_projection.SparseRandomProjection.transform",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.predict_proba",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.decision_function",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.predict",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.predict_log_proba",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.predict_proba",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.score",
    "sklearn.svm._base.BaseLibSVM._validate_for_predict",
    "sklearn.svm._base.BaseLibSVM.n_support_",
    "sklearn.svm._base.BaseSVC.predict",
    "sklearn.tree._classes.BaseDecisionTree._prune_tree",
    "sklearn.tree._classes.BaseDecisionTree.apply",
    "sklearn.tree._classes.BaseDecisionTree.feature_importances_",
    "sklearn.tree._classes.BaseDecisionTree.get_depth",
    "sklearn.tree._classes.BaseDecisionTree.get_n_leaves",
    "sklearn.tree._classes.BaseDecisionTree.predict",
    "sklearn.tree._classes.DecisionTreeClassifier.predict_proba",
    "sklearn.tree._export.export_graphviz",
    "sklearn.tree._export.export_text",
    "sklearn.tree._export.plot_tree",
    "sklearn.utils._mocking.CheckingClassifier._check_X_y",
    "sklearn.utils._response._get_response_values_binary",
    "sklearn.utils._testing.MinimalClassifier.predict_proba",
    "sklearn.utils._testing.MinimalRegressor.predict",
    "sklearn.utils._testing.MinimalTransformer.transform",
    "sklearn.utils.estimator_checks.check_fit_check_is_fitted",
    "sklearn.utils.tests.test_estimator_checks.CorrectNotFittedErrorClassifier.predict",
    "sklearn.utils.tests.test_estimator_checks.OneClassSampleErrorClassifier.predict"
  ],
  "sklearn.utils.validation.check_memory": [
    "sklearn.cluster._agglomerative.AgglomerativeClustering._fit",
    "sklearn.cluster._optics.OPTICS.fit",
    "sklearn.pipeline.Pipeline._fit"
  ],
  "sklearn.utils.validation.check_non_negative": [
    "benchmarks.bench_plot_nmf._PGNMF._fit_transform",
    "sklearn.decomposition._lda.LatentDirichletAllocation._check_non_neg_array",
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform",
    "sklearn.decomposition._nmf.NMF._fit_transform",
    "sklearn.decomposition._nmf._check_init",
    "sklearn.decomposition._nmf._initialize_nmf",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.fit",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.transform",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.naive_bayes.CategoricalNB._check_X",
    "sklearn.naive_bayes.CategoricalNB._check_X_y",
    "sklearn.naive_bayes.ComplementNB._count",
    "sklearn.naive_bayes.MultinomialNB._count",
    "sklearn.neighbors._base._check_precomputed",
    "sklearn.utils.validation._check_sample_weight"
  ],
  "sklearn.utils.validation.check_random_state": [
    "benchmarks.bench_plot_parallel_pairwise.plot",
    "benchmarks.bench_plot_randomized_svd.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.make_data",
    "examples.linear_model.plot_sparse_logistic_regression_mnist.$toplevel",
    "examples.manifold.plot_manifold_sphere.$toplevel",
    "examples.miscellaneous.plot_isotonic_regression.$toplevel",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "sklearn.cluster._affinity_propagation.AffinityPropagation.fit",
    "sklearn.cluster._bicluster.BaseSpectral._svd",
    "sklearn.cluster._bisect_k_means.BisectingKMeans.fit",
    "sklearn.cluster._kmeans.KMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.partial_fit",
    "sklearn.cluster._kmeans.kmeans_plusplus",
    "sklearn.cluster._mean_shift.estimate_bandwidth",
    "sklearn.cluster._spectral.SpectralClustering.fit",
    "sklearn.cluster._spectral.discretize",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.covariance._robust_covariance.MinCovDet.fit",
    "sklearn.covariance._robust_covariance.c_step",
    "sklearn.covariance._robust_covariance.fast_mcd",
    "sklearn.covariance._robust_covariance.select_candidates",
    "sklearn.datasets._base.load_files",
    "sklearn.datasets._covtype.fetch_covtype",
    "sklearn.datasets._kddcup99.fetch_kddcup99",
    "sklearn.datasets._olivetti_faces.fetch_olivetti_faces",
    "sklearn.datasets._samples_generator._shuffle",
    "sklearn.datasets._samples_generator.make_biclusters",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_checkerboard",
    "sklearn.datasets._samples_generator.make_circles",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.datasets._samples_generator.make_friedman1",
    "sklearn.datasets._samples_generator.make_friedman2",
    "sklearn.datasets._samples_generator.make_friedman3",
    "sklearn.datasets._samples_generator.make_gaussian_quantiles",
    "sklearn.datasets._samples_generator.make_hastie_10_2",
    "sklearn.datasets._samples_generator.make_low_rank_matrix",
    "sklearn.datasets._samples_generator.make_moons",
    "sklearn.datasets._samples_generator.make_multilabel_classification",
    "sklearn.datasets._samples_generator.make_regression",
    "sklearn.datasets._samples_generator.make_s_curve",
    "sklearn.datasets._samples_generator.make_sparse_coded_signal",
    "sklearn.datasets._samples_generator.make_sparse_spd_matrix",
    "sklearn.datasets._samples_generator.make_sparse_uncorrelated",
    "sklearn.datasets._samples_generator.make_spd_matrix",
    "sklearn.datasets._samples_generator.make_swiss_roll",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.decomposition._dict_learning.DictionaryLearning.fit_transform",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.partial_fit",
    "sklearn.decomposition._dict_learning._update_dict",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit",
    "sklearn.decomposition._fastica.FastICA._fit_transform",
    "sklearn.decomposition._lda.LatentDirichletAllocation._init_latent_vars",
    "sklearn.decomposition._nmf._fit_coordinate_descent",
    "sklearn.decomposition._nmf._initialize_nmf",
    "sklearn.decomposition._pca.PCA._fit_truncated",
    "sklearn.decomposition._sparse_pca._BaseSparsePCA.fit",
    "sklearn.decomposition._truncated_svd.TruncatedSVD.fit_transform",
    "sklearn.dummy.DummyClassifier.predict",
    "sklearn.dummy.DummyClassifier.predict_proba",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._bagging._generate_bagging_indices",
    "sklearn.ensemble._base._set_random_states",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._forest.RandomTreesEmbedding.fit_transform",
    "sklearn.ensemble._forest._generate_sample_indices",
    "sklearn.ensemble._gb.BaseGradientBoosting.fit",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.fit",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._iforest.IsolationForest.fit",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.fit",
    "sklearn.feature_extraction.image.PatchExtractor.transform",
    "sklearn.feature_extraction.image.extract_patches_2d",
    "sklearn.feature_selection._mutual_info._estimate_mi",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.sample_y",
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.inspection._permutation_importance._calculate_permutation_scores",
    "sklearn.inspection._permutation_importance.permutation_importance",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_ice_lines",
    "sklearn.kernel_approximation.Nystroem.fit",
    "sklearn.kernel_approximation.PolynomialCountSketch.fit",
    "sklearn.kernel_approximation.RBFSampler.fit",
    "sklearn.kernel_approximation.SkewedChi2Sampler.fit",
    "sklearn.linear_model._base.make_dataset",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit",
    "sklearn.linear_model._coordinate_descent.enet_path",
    "sklearn.linear_model._least_angle.Lars.fit",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit_multiclass",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._fit_regressor",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._fit_one_class",
    "sklearn.linear_model._stochastic_gradient.fit_binary",
    "sklearn.linear_model._theil_sen.TheilSenRegressor.fit",
    "sklearn.manifold._locally_linear.LocallyLinearEmbedding._fit_transform",
    "sklearn.manifold._mds._smacof_single",
    "sklearn.manifold._mds.smacof",
    "sklearn.manifold._spectral_embedding.SpectralEmbedding.fit",
    "sklearn.manifold._spectral_embedding.spectral_embedding",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_predictions",
    "sklearn.metrics.cluster._unsupervised.silhouette_score",
    "sklearn.mixture._base.BaseMixture.fit_predict",
    "sklearn.mixture._base.BaseMixture.sample",
    "sklearn.model_selection._search.ParameterSampler.__iter__",
    "sklearn.model_selection._split.KFold._iter_test_indices",
    "sklearn.model_selection._split.ShuffleSplit._iter_indices",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.model_selection._split.StratifiedKFold._make_test_folds",
    "sklearn.model_selection._split.StratifiedShuffleSplit._iter_indices",
    "sklearn.model_selection._split._RepeatedSplits.get_n_splits",
    "sklearn.model_selection._split._RepeatedSplits.split",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.model_selection._validation.permutation_test_score",
    "sklearn.multiclass.OutputCodeClassifier.fit",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.neighbors._kde.KernelDensity.sample",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit",
    "sklearn.neural_network._rbm.BernoulliRBM.fit",
    "sklearn.neural_network._rbm.BernoulliRBM.gibbs",
    "sklearn.neural_network._rbm.BernoulliRBM.partial_fit",
    "sklearn.neural_network._rbm.BernoulliRBM.score_samples",
    "sklearn.preprocessing._data.QuantileTransformer.fit",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit",
    "sklearn.random_projection.GaussianRandomProjection._make_random_matrix",
    "sklearn.random_projection.SparseRandomProjection._make_random_matrix",
    "sklearn.random_projection._gaussian_random_matrix",
    "sklearn.random_projection._sparse_random_matrix",
    "sklearn.svm._base.BaseLibSVM.fit",
    "sklearn.svm._base._fit_liblinear",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.utils._approximate_mode",
    "sklearn.utils._arpack._init_arpack_v0",
    "sklearn.utils.extmath.randomized_range_finder",
    "sklearn.utils.extmath.randomized_svd",
    "sklearn.utils.random._random_choice_csc",
    "sklearn.utils.resample"
  ],
  "sklearn.utils.validation.check_scalar": [
    "sklearn._loss.loss.HuberLoss.__init__",
    "sklearn._loss.loss.PinballLoss.__init__",
    "sklearn.cluster._bicluster.SpectralBiclustering._check_parameters",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.feature_selection._from_model.SelectFromModel._check_max_features",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._ridge._BaseRidgeCV.fit",
    "sklearn.linear_model._ridge._ridge_regression"
  ],
  "sklearn.utils.validation.check_symmetric": [
    "sklearn.manifold._mds._smacof_single",
    "sklearn.manifold._spectral_embedding.spectral_embedding"
  ],
  "sklearn.utils.validation.column_or_1d": [
    "sklearn.calibration._SigmoidCalibration.fit",
    "sklearn.calibration._SigmoidCalibration.predict",
    "sklearn.calibration._sigmoid_calibration",
    "sklearn.calibration.calibration_curve",
    "sklearn.ensemble._bagging.BaggingClassifier._validate_y",
    "sklearn.ensemble._bagging.BaseBagging._validate_y",
    "sklearn.ensemble._gb.BaseGradientBoosting.fit",
    "sklearn.ensemble._stacking.StackingRegressor.fit",
    "sklearn.ensemble._voting.VotingRegressor.fit",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._ridge._RidgeClassifierMixin._prepare_data",
    "sklearn.metrics._classification._check_targets",
    "sklearn.metrics._classification.brier_score_loss",
    "sklearn.metrics._classification.hinge_loss",
    "sklearn.metrics._classification.multilabel_confusion_matrix",
    "sklearn.metrics._ranking._binary_clf_curve",
    "sklearn.metrics._ranking._multiclass_roc_auc_score",
    "sklearn.metrics._ranking.auc",
    "sklearn.metrics._ranking.top_k_accuracy_score",
    "sklearn.metrics._regression.mean_tweedie_deviance",
    "sklearn.metrics._regression.r2_score",
    "sklearn.model_selection._split.PredefinedSplit.__init__",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.model_selection._split.StratifiedKFold._make_test_folds",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier._validate_input",
    "sklearn.neural_network._multilayer_perceptron.MLPRegressor._validate_input",
    "sklearn.preprocessing._label.LabelEncoder.fit",
    "sklearn.preprocessing._label.LabelEncoder.fit_transform",
    "sklearn.preprocessing._label.LabelEncoder.inverse_transform",
    "sklearn.preprocessing._label.LabelEncoder.transform",
    "sklearn.preprocessing._label.label_binarize",
    "sklearn.svm._base.BaseLibSVM._validate_targets",
    "sklearn.svm._base.BaseSVC._validate_targets",
    "sklearn.utils.validation._check_y"
  ],
  "sklearn.utils.validation.has_fit_parameter": [
    "sklearn.ensemble._bagging._parallel_build_estimators",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._validate_estimator",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.multioutput._MultiOutputEstimator.fit",
    "sklearn.multioutput._MultiOutputEstimator.partial_fit",
    "sklearn.utils.estimator_checks._yield_checks",
    "sklearn.utils.estimator_checks.check_classifiers_one_label_sample_weights"
  ],
  "sklearn.utils.validation.indexable": [
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.calibration._SigmoidCalibration.fit",
    "sklearn.model_selection._search.BaseSearchCV.fit",
    "sklearn.model_selection._split.BaseCrossValidator.split",
    "sklearn.model_selection._split.BaseShuffleSplit.split",
    "sklearn.model_selection._split.TimeSeriesSplit.split",
    "sklearn.model_selection._split._BaseKFold.split",
    "sklearn.model_selection._split.train_test_split",
    "sklearn.model_selection._validation.cross_val_predict",
    "sklearn.model_selection._validation.cross_validate",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.model_selection._validation.permutation_test_score",
    "sklearn.model_selection._validation.validation_curve"
  ],
  "sorted": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_multilabel_metrics.$toplevel",
    "benchmarks.bench_multilabel_metrics.benchmark",
    "benchmarks.bench_plot_fastkmeans.$toplevel",
    "benchmarks.bench_plot_hierarchical.$toplevel",
    "benchmarks.bench_plot_incremental_pca.fixed_batch_size_comparison",
    "benchmarks.bench_plot_lasso_path.$toplevel",
    "benchmarks.bench_plot_omp_lars.$toplevel",
    "benchmarks.bench_plot_randomized_svd.plot_power_iter_vs_s",
    "benchmarks.bench_plot_randomized_svd.plot_time_vs_s",
    "benchmarks.bench_plot_randomized_svd.scatter_time_vs_s",
    "benchmarks.bench_plot_svd.$toplevel",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "build_tools.circle.list_versions.$toplevel",
    "build_tools.generate_authors_table.get_contributors",
    "click.core.CommandCollection.list_commands",
    "click.core.Group.list_commands",
    "click.core.iter_params_for_processing",
    "click.exceptions.NoSuchOption.format_message",
    "click.formatting.measure_table",
    "doc.conf.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.dump",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_prediction_latency.plot_n_features_influence",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.bicluster.plot_bicluster_newsgroups.most_common",
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel",
    "examples.model_selection.plot_multi_metric_evaluation.$toplevel",
    "flask.cli.FlaskGroup.list_commands",
    "jinja2.environment.Environment.iter_extensions",
    "jinja2.lexer.compile_rules",
    "maint_tools.sort_whats_new.$toplevel",
    "packaging.specifiers.SpecifierSet.__str__",
    "pip._vendor.packaging.specifiers.SpecifierSet.__str__",
    "sklearn.base.BaseEstimator._check_feature_names",
    "sklearn.base.BaseEstimator._get_param_names",
    "sklearn.cluster._mean_shift.MeanShift.fit",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_remainder",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.datasets._base.load_files",
    "sklearn.datasets._base.load_sample_images",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._lfw._fetch_lfw_people",
    "sklearn.datasets._lfw.fetch_lfw_pairs",
    "sklearn.ensemble._base._set_random_states",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.externals._arff.COOData.decode_rows",
    "sklearn.externals._arff.LODGeneratorData.encode_data",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.restrict",
    "sklearn.feature_extraction.text.CountVectorizer._sort_features",
    "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out",
    "sklearn.feature_extraction.text._VectorizerMixin._check_stop_words_consistency",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.metrics._pairwise_distances_reduction._dispatcher.BaseDistancesReductionDispatcher.valid_metrics",
    "sklearn.metrics._scorer.get_scorer_names",
    "sklearn.model_selection._search.ParameterGrid.__getitem__",
    "sklearn.model_selection._search.ParameterGrid.__iter__",
    "sklearn.model_selection._search.ParameterSampler.__iter__",
    "sklearn.model_selection._split._build_repr",
    "sklearn.model_selection._split._pprint",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.neighbors._base.$toplevel",
    "sklearn.preprocessing._label.MultiLabelBinarizer._transform",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit_transform",
    "sklearn.tree._export._BaseTreeExporter.get_color",
    "sklearn.tree._export._DOTTreeExporter.tail",
    "sklearn.utils._encode._unique_python",
    "sklearn.utils._metadata_requests._MetadataRequester.__init_subclass__",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._pprint_estimator",
    "sklearn.utils._pprint._safe_repr",
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.discovery.all_functions",
    "sklearn.utils.estimator_checks.check_no_attributes_set_in_init",
    "sklearn.utils.metaestimators._BaseComposition._validate_names",
    "sklearn.utils.multiclass.unique_labels",
    "sklearn.utils.validation._get_feature_names"
  ],
  "struct.calcsize": [
    "sklearn.utils.$toplevel"
  ],
  "subprocess.check_output": [
    "doc.sphinxext.github_link._get_git_revision",
    "sklearn._build_utils.pre_build_helpers.compile_test_program",
    "sklearn.utils._testing.assert_run_python_script"
  ],
  "subprocess.getoutput": [
    "sklearn.cluster._affinity_propagation.AffinityPropagation.fit"
  ],
  "subprocess.run": [
    "build_tools.azure.get_commit_message.get_commit_message",
    "click.shell_completion.BashComplete._check_version",
    "maint_tools.check_pxd_in_installation.$toplevel"
  ],
  "sum": [
    "click.parser.Argument.process",
    "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.gaussian_process.plot_gpr_on_structured_data.SequenceKernel._f",
    "examples.gaussian_process.plot_gpr_on_structured_data.SequenceKernel._g",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.eval_and_print_metrics",
    "examples.text.plot_document_classification_20newsgroups.size_mb",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.ensemble._bagging.BaggingClassifier.decision_function",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_proba",
    "sklearn.ensemble._bagging.BaggingRegressor.predict",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._bagging._parallel_decision_function",
    "sklearn.ensemble._bagging._parallel_predict_regression",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._print_iteration_stats",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.decision_function",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.feature_importances_",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.gaussian_process.tests._mini_sequence_kernel.MiniSeqKernel._f",
    "sklearn.gaussian_process.tests._mini_sequence_kernel.MiniSeqKernel._g",
    "sklearn.metrics._classification.multilabel_confusion_matrix",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.from_predictions",
    "sklearn.model_selection._search.ParameterGrid.__len__",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors",
    "sklearn.preprocessing._polynomial.PolynomialFeatures._num_combinations",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform"
  ],
  "sys.exc_info": [
    "doc.tutorial.machine_learning_map.pyparsing._trim_arity.wrapper",
    "jinja2.debug.fake_traceback",
    "jinja2.debug.rewrite_traceback_stack",
    "pip._vendor.tenacity.Retrying.__call__",
    "pip._vendor.tenacity._asyncio.AsyncRetrying.__call__",
    "pip._vendor.tenacity.tornadoweb.TornadoRetrying.__call__",
    "werkzeug.utils.import_string"
  ],
  "sys.exit": [
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "build_tools.github.check_wheels.$toplevel",
    "click.core.BaseCommand._main_shell_completion",
    "click.core.BaseCommand.main",
    "doc.tutorial.machine_learning_map.parse_path.$toplevel",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "maint_tools.update_tracking_issue.$toplevel",
    "maint_tools.update_tracking_issue.close_issue_if_opened",
    "maint_tools.update_tracking_issue.create_or_update_issue"
  ],
  "sys.getdefaultencoding": [
    "click._compat.get_best_encoding",
    "click._compat.get_filesystem_encoding",
    "doc.tutorial.machine_learning_map.pyparsing._ustr",
    "pip._vendor.pyparsing._ustr"
  ],
  "sys.getfilesystemencoding": [
    "click._compat.get_filesystem_encoding"
  ],
  "tarfile.open": [
    "doc.tutorial.text_analytics.data.movie_reviews.fetch_data.$toplevel",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents",
    "sklearn.datasets._california_housing.fetch_california_housing",
    "sklearn.datasets._lfw._check_fetch_lfw",
    "sklearn.datasets._twenty_newsgroups._download_20newsgroups"
  ],
  "tempfile.mkdtemp": [
    "examples.cluster.plot_feature_agglomeration_vs_univariate_selection.$toplevel",
    "sklearn.utils._testing.create_memmap_backed_data"
  ],
  "tempfile.mkstemp": [
    "sklearn.utils._testing.assert_run_python_script"
  ],
  "testslide.mock_constructor._get_class_or_mock": [
    "testslide.strict_mock.StrictMock._template"
  ],
  "textwrap.dedent": [
    "build_tools.github.vendor.make_distributor_init_64_bits",
    "maint_tools.check_pxd_in_installation.$toplevel",
    "sklearn._build_utils.openmp_helpers.check_openmp_support",
    "sklearn._build_utils.pre_build_helpers.basic_check_build",
    "sklearn.datasets.__getattr__",
    "sklearn.experimental.tests.test_enable_hist_gradient_boosting.test_import_raises_warning",
    "sklearn.experimental.tests.test_enable_iterative_imputer.test_imports_strategies",
    "sklearn.experimental.tests.test_enable_successive_halving.test_imports_strategies"
  ],
  "time.monotonic": [
    "pip._vendor.tenacity.BaseRetrying.begin",
    "pip._vendor.tenacity.RetryCallState.__init__",
    "pip._vendor.tenacity.RetryCallState.set_exception",
    "pip._vendor.tenacity.RetryCallState.set_result"
  ],
  "time.perf_counter": [
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel"
  ],
  "time.sleep": [
    "build_tools.generate_authors_table.get",
    "sklearn.datasets._openml._retry_on_network_error.decorator.wrapper"
  ],
  "time.strptime": [
    "pip._vendor.requests.cookies.morsel_to_cookie"
  ],
  "time.time": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_feature_expansions.$toplevel",
    "benchmarks.bench_glmnet.bench",
    "benchmarks.bench_hist_gradient_boosting.one_run",
    "benchmarks.bench_hist_gradient_boosting_adult.fit",
    "benchmarks.bench_hist_gradient_boosting_adult.predict",
    "benchmarks.bench_hist_gradient_boosting_categorical_only.fit",
    "benchmarks.bench_hist_gradient_boosting_categorical_only.predict",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.fit",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.load_data",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.predict",
    "benchmarks.bench_hist_gradient_boosting_threading.one_run",
    "benchmarks.bench_isolation_forest.$toplevel",
    "benchmarks.bench_lasso.compute_bench",
    "benchmarks.bench_lof.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_plot_fastkmeans.compute_bench",
    "benchmarks.bench_plot_fastkmeans.compute_bench_2",
    "benchmarks.bench_plot_hierarchical.compute_bench",
    "benchmarks.bench_plot_incremental_pca.benchmark",
    "benchmarks.bench_plot_lasso_path.compute_bench",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_plot_nmf.bench_one",
    "benchmarks.bench_plot_nmf.run_bench",
    "benchmarks.bench_plot_omp_lars.compute_bench",
    "benchmarks.bench_plot_parallel_pairwise.plot",
    "benchmarks.bench_plot_polynomial_kernel_approximation.$toplevel",
    "benchmarks.bench_plot_randomized_svd.svd_timing",
    "benchmarks.bench_plot_svd.compute_bench",
    "benchmarks.bench_plot_ward.$toplevel",
    "benchmarks.bench_rcv1_logreg_convergence.bench_one",
    "benchmarks.bench_sgd_regression.$toplevel",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "examples.applications.plot_face_recognition.$toplevel",
    "examples.applications.plot_model_complexity_influence.benchmark_influence",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_out_of_core_classification.progress",
    "examples.applications.plot_prediction_latency.atomic_benchmark_estimator",
    "examples.applications.plot_prediction_latency.benchmark_throughputs",
    "examples.applications.plot_prediction_latency.bulk_benchmark_estimator",
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution",
    "examples.applications.plot_topics_extraction_with_nmf_lda.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.$toplevel",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.cluster.plot_agglomerative_clustering.$toplevel",
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_coin_segmentation.$toplevel",
    "examples.cluster.plot_coin_ward_segmentation.$toplevel",
    "examples.cluster.plot_color_quantization.$toplevel",
    "examples.cluster.plot_dict_face_patches.$toplevel",
    "examples.cluster.plot_digits_linkage.$toplevel",
    "examples.cluster.plot_kmeans_digits.bench_k_means",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.cluster.plot_mini_batch_kmeans.$toplevel",
    "examples.cluster.plot_ward_structured_vs_unstructured.$toplevel",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "examples.ensemble.plot_forest_importances.$toplevel",
    "examples.ensemble.plot_forest_importances_faces.$toplevel",
    "examples.ensemble.plot_gradient_boosting_early_stopping.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.feature_selection.plot_select_from_model_diabetes.$toplevel",
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.linear_model.plot_lasso_and_elasticnet.$toplevel",
    "examples.linear_model.plot_lasso_dense_vs_sparse_data.$toplevel",
    "examples.linear_model.plot_lasso_model_selection.$toplevel",
    "examples.linear_model.plot_sgd_early_stopping.fit_and_score",
    "examples.linear_model.plot_sparse_logistic_regression_mnist.$toplevel",
    "examples.linear_model.plot_theilsen.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.manifold.plot_manifold_sphere.$toplevel",
    "examples.manifold.plot_t_sne_perplexity.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_johnson_lindenstrauss_bound.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.miscellaneous.plot_kernel_ridge_regression.$toplevel",
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel",
    "examples.model_selection.plot_randomized_search.$toplevel",
    "examples.model_selection.plot_successive_halving_heatmap.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.benchmark",
    "examples.text.plot_document_classification_20newsgroups.load_dataset",
    "examples.text.plot_document_clustering.$toplevel",
    "examples.text.plot_document_clustering.fit_and_evaluate",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "pip._vendor.requests.cookies.morsel_to_cookie",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._nmf._fit_multiplicative_update",
    "sklearn.ensemble._gb.VerboseReporter.init",
    "sklearn.ensemble._gb.VerboseReporter.update",
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.impute._iterative.IterativeImputer.transform",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.manifold._t_sne._gradient_descent",
    "sklearn.manifold._t_sne._joint_probabilities_nn",
    "sklearn.mixture._base.BaseMixture._print_verbose_msg_init_beg",
    "sklearn.mixture._base.BaseMixture._print_verbose_msg_init_end",
    "sklearn.mixture._base.BaseMixture._print_verbose_msg_iter_end",
    "sklearn.model_selection._search.BaseSearchCV.fit",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._incremental_fit_estimator",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._initialize",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._loss_grad_lbfgs",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit",
    "sklearn.neural_network._rbm.BernoulliRBM.fit"
  ],
  "timeit.repeat": [
    "benchmarks.bench_text_vectorizers.$toplevel"
  ],
  "timeit.timeit": [
    "benchmarks.bench_multilabel_metrics.benchmark"
  ],
  "tkinter.mainloop": [
    "examples.applications.svm_gui.main"
  ],
  "traceback.extract_stack": [
    "doc.tutorial.machine_learning_map.pyparsing._trim_arity.extract_stack",
    "pip._vendor.pyparsing._trim_arity",
    "pip._vendor.pyparsing._trim_arity.extract_stack"
  ],
  "traceback.extract_tb": [
    "doc.tutorial.machine_learning_map.pyparsing._trim_arity.extract_tb"
  ],
  "traceback.format_exc": [
    "flask.cli.FlaskGroup.list_commands",
    "sklearn.metrics._scorer._MultimetricScorer.__call__",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._score"
  ],
  "traceback.print_exc": [
    "setup.check_package_status"
  ],
  "traitlets.config.loader._is_section_key": [
    "traitlets.config.loader.Config.__getitem__",
    "traitlets.config.loader.Config.__setitem__",
    "traitlets.config.loader.Config._ensure_subconfig"
  ],
  "traitlets.traitlets._callback_wrapper": [
    "traitlets.traitlets.HasTraits._notify_observers"
  ],
  "traitlets.traitlets._deprecated_method": [
    "traitlets.traitlets.HasTraits._notify_observers"
  ],
  "traitlets.traitlets._should_warn": [
    "traitlets.traitlets._deprecated_method"
  ],
  "traitlets.utils.getargspec.getargspec": [
    "traitlets.traitlets._CallbackWrapper.__init__",
    "traitlets.utils.getargspec.getargspec"
  ],
  "typing.cast": [
    "click._compat._NonClosingTextIOWrapper.__init__",
    "click._compat._find_binary_reader",
    "click._compat._find_binary_writer",
    "click._compat._force_correct_text_stream",
    "click._compat.auto_wrap_for_ansi",
    "click._compat.open_stream",
    "click.core.BaseCommand.main",
    "click.core.Parameter.shell_complete",
    "click.core._complete_visible_commands",
    "click.globals.get_current_context",
    "click.types.File.convert",
    "click.utils._detect_program_name",
    "click.utils.safecall",
    "jinja2.async_utils.auto_aiter",
    "jinja2.debug.rewrite_traceback_stack",
    "jinja2.environment.load_extensions",
    "prompt_toolkit.layout.utils._ExplodedList.__setitem__"
  ],
  "unicodedata.combining": [
    "sklearn.feature_extraction.text.strip_accents_unicode"
  ],
  "unicodedata.normalize": [
    "sklearn.feature_extraction.text.strip_accents_ascii",
    "sklearn.feature_extraction.text.strip_accents_unicode"
  ],
  "urllib.request.build_opener": [
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel"
  ],
  "urllib.request.urlopen": [
    "build_tools.circle.list_versions.$toplevel",
    "build_tools.circle.list_versions.json_urlread",
    "doc.tutorial.text_analytics.data.movie_reviews.fetch_data.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.$toplevel",
    "sklearn.datasets._openml._open_openml_url"
  ],
  "urllib.request.urlretrieve": [
    "benchmarks.bench_hist_gradient_boosting_higgsboson.load_data",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents",
    "sklearn.datasets._base._fetch_remote"
  ],
  "vars": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__eq__",
    "importlib_metadata.DistributionFinder.Context.__init__",
    "importlib_metadata.EntryPoint.__init__",
    "sklearn.utils._array_api._estimator_with_converted_arrays",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils.estimator_checks.check_array_api_input",
    "sklearn.utils.estimator_checks.check_no_attributes_set_in_init",
    "sklearn.utils.validation._is_fitted"
  ],
  "warnings.filterwarnings": [
    "doc.conf.$toplevel",
    "doc.conftest.setup_unsupervised_learning",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_20newsgroups.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.plot_on_dataset",
    "examples.neural_networks.plot_mnist_filters.$toplevel",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.fit",
    "sklearn.preprocessing._data.PowerTransformer._check_input",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency"
  ],
  "warnings.simplefilter": [
    "sklearn.cluster._dbscan.DBSCAN.fit",
    "sklearn.cluster._optics.OPTICS.fit",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.ensemble._forest._parallel_build_trees",
    "sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.inner_solve",
    "sklearn.model_selection._split._build_repr",
    "sklearn.naive_bayes._BaseDiscreteNB._update_class_log_prior",
    "sklearn.utils._joblib.$toplevel",
    "sklearn.utils._safe_assign",
    "sklearn.utils._testing._IgnoreWarnings.__call__.wrapper",
    "sklearn.utils._testing._IgnoreWarnings.__enter__",
    "sklearn.utils._testing.assert_no_warnings",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.estimator_checks.check_supervised_y_2d",
    "sklearn.utils.multiclass.is_multilabel",
    "sklearn.utils.multiclass.type_of_target",
    "sklearn.utils.validation.check_array"
  ],
  "werkzeug.utils.import_string": [
    "flask.cli.CertParamType.convert",
    "werkzeug.utils.ImportStringError.__init__"
  ],
  "xml.dom.minidom.parse": [
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel"
  ],
  "yaml.safe_load": [
    "build_tools.github.check_wheels.$toplevel"
  ],
  "BaseException.__init__": [
    "benchmarks.bench_plot_neighbors.get_data",
    "benchmarks.bench_plot_nmf._PGNMF._fit_transform",
    "benchmarks.bench_plot_randomized_svd.bench_c",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "build_tools.get_comment.$toplevel",
    "build_tools.get_comment.find_lint_bot_comments",
    "build_tools.github.vendor.main",
    "build_tools.update_environments_and_lock_files.check_conda_lock_version",
    "build_tools.update_environments_and_lock_files.check_conda_version",
    "build_tools.update_environments_and_lock_files.execute_command",
    "click._compat.get_binary_stdin",
    "click._compat.get_binary_stdout",
    "click._compat.open_stream",
    "click.core.Argument._parse_decls",
    "click.core.BaseCommand.invoke",
    "click.core.BaseCommand.main",
    "click.core.BaseCommand.parse_args",
    "click.core.Context.invoke",
    "click.core.Group.add_command",
    "click.core.Option.__init__",
    "click.core.Option._parse_decls",
    "click.core.Parameter.__init__",
    "click.core.Parameter._parse_decls",
    "click.core.Parameter.add_to_parser",
    "click.core._check_multicommand",
    "click.exceptions.ClickException.__init__",
    "click.formatting.HelpFormatter.write_dl",
    "click.globals.get_current_context",
    "click.parser.Option.__init__",
    "click.parser.Option.process",
    "click.parser._unpack_args",
    "click.shell_completion.BashComplete._check_version",
    "click.termui.confirm",
    "click.termui.prompt.prompt_func",
    "click.termui.style",
    "click.types.FloatRange._clamp",
    "click.types.convert_type",
    "doc.conf.$toplevel",
    "doc.sphinxext.sphinx_issues.IssueRole.make_node",
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseBaseException.__getattr__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.pop",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.infixNotation",
    "doc.tutorial.machine_learning_map.pyparsing.nestedExpr",
    "examples.applications.svm_gui.View.plot_decision_surface",
    "examples.miscellaneous.plot_metadata_routing.RouterConsumerClassifier.fit",
    "graphql.pyutils.default_ordered_dict.DefaultOrderedDict.__init__",
    "importlib_metadata.Distribution.discover",
    "importlib_metadata.EntryPoints.__getitem__",
    "jinja2.compiler.generate",
    "jinja2.environment.Template.render_async",
    "jinja2.exceptions.TemplateError.__init__",
    "jinja2.ext.Extension.parse",
    "jinja2.ext.InternationalizationExtension._parse_block",
    "jinja2.idtracking.RootVisitor.generic_visit",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.nativetypes.NativeTemplate.render_async",
    "jinja2.nodes.BinExpr.as_const",
    "jinja2.nodes.Compare.as_const",
    "jinja2.nodes.CondExpr.as_const",
    "jinja2.nodes.Const.from_untrusted",
    "jinja2.nodes.Expr.as_const",
    "jinja2.nodes.Filter.as_const",
    "jinja2.nodes.Getattr.as_const",
    "jinja2.nodes.Getitem.as_const",
    "jinja2.nodes.MarkSafeIfAutoescape.as_const",
    "jinja2.nodes.Node.__init__",
    "jinja2.nodes.TemplateData.as_const",
    "jinja2.nodes.UnaryExpr.as_const",
    "jinja2.nodes._FilterTestCommon.as_const",
    "jinja2.nodes.args_as_const",
    "jinja2.nodes.get_eval_context",
    "jinja2.parser.Parser.subparse",
    "jinja2.runtime.LoopContext.__call__",
    "packaging.version.Version.__init__",
    "parso.utils.PythonVersionInfo.__eq__",
    "parso.utils.PythonVersionInfo.__gt__",
    "pip._vendor.distlib.compat.ChainMap.__missing__",
    "pip._vendor.distlib.compat.OrderedDict.__init__",
    "pip._vendor.distlib.compat.OrderedDict.pop",
    "pip._vendor.distlib.compat.OrderedDict.update",
    "pip._vendor.packaging.version.Version.__init__",
    "pip._vendor.pkg_resources.Distribution.version",
    "pip._vendor.pyparsing.ParserElement.setParseAction",
    "pip._vendor.pyparsing.Regex.__init__",
    "pip._vendor.requests.cookies.RequestsCookieJar._find_no_duplicates",
    "pip._vendor.requests.cookies.create_cookie",
    "pip._vendor.requests.cookies.morsel_to_cookie",
    "pip._vendor.urllib3._collections.RecentlyUsedContainer.__iter__",
    "setup.setup_package",
    "sklearn._build_utils._check_cython_version",
    "sklearn._build_utils.openmp_helpers.check_openmp_support",
    "sklearn._loss.link.Interval.__post_init__",
    "sklearn._loss.loss.BaseLoss.init_gradient_and_hessian",
    "sklearn.base.BaseEstimator.__getstate__",
    "sklearn.base.BaseEstimator._check_feature_names",
    "sklearn.base.BaseEstimator._check_n_features",
    "sklearn.base.BaseEstimator._get_param_names",
    "sklearn.base.BaseEstimator._repr_html_",
    "sklearn.base.BaseEstimator._validate_data",
    "sklearn.base.BaseEstimator.set_params",
    "sklearn.base._clone_parametrized",
    "sklearn.calibration.CalibratedClassifierCV._get_estimator",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.calibration._compute_predictions",
    "sklearn.calibration.calibration_curve",
    "sklearn.cluster._affinity_propagation.AffinityPropagation.fit",
    "sklearn.cluster._affinity_propagation.AffinityPropagation.predict",
    "sklearn.cluster._agglomerative.AgglomerativeClustering._fit",
    "sklearn.cluster._agglomerative._fix_connectivity",
    "sklearn.cluster._agglomerative._hc_cut",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.cluster._bicluster.SpectralBiclustering._check_parameters",
    "sklearn.cluster._bicluster.SpectralCoclustering._check_parameters",
    "sklearn.cluster._bicluster._log_normalize",
    "sklearn.cluster._birch.Birch._check_fit",
    "sklearn.cluster._feature_agglomeration.AgglomerationTransform.inverse_transform",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.fit",
    "sklearn.cluster._hdbscan.hdbscan._brute_mst",
    "sklearn.cluster._hdbscan.hdbscan._hdbscan_brute",
    "sklearn.cluster._kmeans.MiniBatchKMeans._check_params_vs_input",
    "sklearn.cluster._kmeans._BaseKMeans._check_params_vs_input",
    "sklearn.cluster._kmeans._BaseKMeans._validate_center_shape",
    "sklearn.cluster._kmeans.kmeans_plusplus",
    "sklearn.cluster._mean_shift.MeanShift.fit",
    "sklearn.cluster._optics.OPTICS.fit",
    "sklearn.cluster._optics._validate_size",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.compose._column_transformer.ColumnTransformer._fit_transform",
    "sklearn.compose._column_transformer.ColumnTransformer._get_feature_name_out_for_transformer",
    "sklearn.compose._column_transformer.ColumnTransformer._hstack",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_output",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_transformers",
    "sklearn.compose._column_transformer.ColumnTransformer.transform",
    "sklearn.compose._column_transformer.make_column_selector.__call__",
    "sklearn.compose._target.TransformedTargetRegressor._fit_transformer",
    "sklearn.compose._target.TransformedTargetRegressor.fit",
    "sklearn.compose._target.TransformedTargetRegressor.n_features_in_",
    "sklearn.covariance._empirical_covariance.EmpiricalCovariance.error_norm",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.covariance._robust_covariance.MinCovDet.correct_covariance",
    "sklearn.covariance._robust_covariance.select_candidates",
    "sklearn.cross_decomposition._pls.PLSSVD.fit",
    "sklearn.cross_decomposition._pls._PLS.fit",
    "sklearn.cross_decomposition._pls._get_first_singular_vectors_power_method",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._arff_parser.load_arff_from_gzip_file",
    "sklearn.datasets._base._fetch_remote",
    "sklearn.datasets._base.load_sample_image",
    "sklearn.datasets._california_housing.fetch_california_housing",
    "sklearn.datasets._covtype.fetch_covtype",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._lfw._check_fetch_lfw",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._lfw._fetch_lfw_people",
    "sklearn.datasets._lfw._load_imgs",
    "sklearn.datasets._lfw.fetch_lfw_pairs",
    "sklearn.datasets._olivetti_faces.fetch_olivetti_faces",
    "sklearn.datasets._openml._download_data_to_bunch",
    "sklearn.datasets._openml._get_json_content_from_openml_api",
    "sklearn.datasets._openml._load_arff_response",
    "sklearn.datasets._openml._verify_target_data_type",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_circles",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.datasets._samples_generator.make_gaussian_quantiles",
    "sklearn.datasets._samples_generator.make_moons",
    "sklearn.datasets._species_distributions.fetch_species_distributions",
    "sklearn.datasets._svmlight_format_io._gen_open",
    "sklearn.datasets._svmlight_format_io._load_svmlight_file",
    "sklearn.datasets._svmlight_format_io.dump_svmlight_file",
    "sklearn.datasets._svmlight_format_io.load_svmlight_files",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized",
    "sklearn.decomposition._dict_learning._check_positive_coding",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._dict_learning.sparse_encode",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit",
    "sklearn.decomposition._fastica.FastICA._fit_transform",
    "sklearn.decomposition._incremental_pca.IncrementalPCA.partial_fit",
    "sklearn.decomposition._kernel_pca.KernelPCA._fit_inverse_transform",
    "sklearn.decomposition._kernel_pca.KernelPCA.fit",
    "sklearn.decomposition._kernel_pca.KernelPCA.inverse_transform",
    "sklearn.decomposition._lda.LatentDirichletAllocation._perplexity_precomp_distr",
    "sklearn.decomposition._lda.LatentDirichletAllocation.partial_fit",
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform",
    "sklearn.decomposition._nmf.NMF._check_params",
    "sklearn.decomposition._nmf.NMF._fit_transform",
    "sklearn.decomposition._nmf._BaseNMF._check_w_h",
    "sklearn.decomposition._nmf._BaseNMF.inverse_transform",
    "sklearn.decomposition._nmf._check_init",
    "sklearn.decomposition._nmf._initialize_nmf",
    "sklearn.decomposition._pca.PCA._fit",
    "sklearn.decomposition._pca.PCA._fit_full",
    "sklearn.decomposition._pca.PCA._fit_truncated",
    "sklearn.decomposition._pca._assess_dimension",
    "sklearn.decomposition._truncated_svd.TruncatedSVD.fit_transform",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit",
    "sklearn.discriminant_analysis._cov",
    "sklearn.dummy.DummyClassifier.fit",
    "sklearn.dummy.DummyClassifier.predict",
    "sklearn.dummy.DummyRegressor.fit",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._bagging._parallel_build_estimators",
    "sklearn.ensemble._base.BaseEnsemble._validate_estimator",
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble._validate_estimators",
    "sklearn.ensemble._base._fit_single_estimator",
    "sklearn.ensemble._forest.BaseForest._validate_X_predict",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._forest.ForestClassifier._validate_y_class_weight",
    "sklearn.ensemble._forest.RandomTreesEmbedding._set_oob_score_and_attributes",
    "sklearn.ensemble._forest._get_n_samples_bootstrap",
    "sklearn.ensemble._gb.BaseGradientBoosting._make_estimator",
    "sklearn.ensemble._gb.BaseGradientBoosting._resize_state",
    "sklearn.ensemble._gb.BaseGradientBoosting.fit",
    "sklearn.ensemble._gb.GradientBoostingClassifier._validate_y",
    "sklearn.ensemble._gb.GradientBoostingClassifier.predict_proba",
    "sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict_proba",
    "sklearn.ensemble._gb_losses.BinomialDeviance.__init__",
    "sklearn.ensemble._gb_losses.ClassificationLossFunction.check_init_estimator",
    "sklearn.ensemble._gb_losses.ExponentialLoss.__init__",
    "sklearn.ensemble._gb_losses.MultinomialDeviance.__init__",
    "sklearn.ensemble._gb_losses.RegressionLossFunction.check_init_estimator",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.fit",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.transform",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_interaction_cst",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._compute_partial_dependence_recursion",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._raw_predict",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._staged_raw_predict",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._validate_parameters",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor._encode_y",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.__init__",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._validate_parameters",
    "sklearn.ensemble._iforest.IsolationForest._set_oob_score",
    "sklearn.ensemble._stacking.StackingClassifier._validate_estimators",
    "sklearn.ensemble._stacking.StackingClassifier._validate_final_estimator",
    "sklearn.ensemble._stacking.StackingRegressor._validate_final_estimator",
    "sklearn.ensemble._stacking._BaseStacking._method_name",
    "sklearn.ensemble._stacking._BaseStacking.n_features_in_",
    "sklearn.ensemble._voting.VotingClassifier._check_voting",
    "sklearn.ensemble._voting.VotingClassifier.fit",
    "sklearn.ensemble._voting.VotingClassifier.get_feature_names_out",
    "sklearn.ensemble._voting._BaseVoting.fit",
    "sklearn.ensemble._voting._BaseVoting.n_features_in_",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost_discrete",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._validate_estimator",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.feature_importances_",
    "sklearn.exceptions.UnsetMetadataPassedError.__init__",
    "sklearn.externals._arff.COOData.encode_data",
    "sklearn.externals._arff._escape_sub_callback",
    "sklearn.externals._arff._get_data_object_for_decoding",
    "sklearn.externals._arff._get_data_object_for_encoding",
    "sklearn.externals._packaging.version.Version.__init__",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._add_iterable_element",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._transform",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit",
    "sklearn.feature_extraction._hash.FeatureHasher.transform",
    "sklearn.feature_extraction.image.PatchExtractor.transform",
    "sklearn.feature_extraction.image._compute_n_patches",
    "sklearn.feature_extraction.image.extract_patches_2d",
    "sklearn.feature_extraction.text.CountVectorizer._count_vocab",
    "sklearn.feature_extraction.text.CountVectorizer._limit_features",
    "sklearn.feature_extraction.text.CountVectorizer.fit_transform",
    "sklearn.feature_extraction.text.CountVectorizer.transform",
    "sklearn.feature_extraction.text.HashingVectorizer.fit",
    "sklearn.feature_extraction.text.HashingVectorizer.transform",
    "sklearn.feature_extraction.text.TfidfVectorizer.idf_",
    "sklearn.feature_extraction.text.TfidfVectorizer.idf_@setter",
    "sklearn.feature_extraction.text._VectorizerMixin._check_vocabulary",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_ngram_range",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.feature_extraction.text._VectorizerMixin.build_analyzer",
    "sklearn.feature_extraction.text._VectorizerMixin.build_preprocessor",
    "sklearn.feature_extraction.text._VectorizerMixin.build_tokenizer",
    "sklearn.feature_extraction.text._VectorizerMixin.decode",
    "sklearn.feature_extraction.text._check_stop_list",
    "sklearn.feature_selection._base.SelectorMixin.inverse_transform",
    "sklearn.feature_selection._base._get_feature_importances",
    "sklearn.feature_selection._from_model.SelectFromModel._get_support_mask",
    "sklearn.feature_selection._from_model.SelectFromModel.fit",
    "sklearn.feature_selection._from_model.SelectFromModel.n_features_in_",
    "sklearn.feature_selection._from_model.SelectFromModel.partial_fit",
    "sklearn.feature_selection._from_model._calculate_threshold",
    "sklearn.feature_selection._mutual_info._estimate_mi",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector.fit",
    "sklearn.feature_selection._univariate_selection.SelectKBest._check_params",
    "sklearn.feature_selection._univariate_selection.chi2",
    "sklearn.feature_selection._variance_threshold.VarianceThreshold.fit",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict_proba",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace._constrained_optimization",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.log_marginal_likelihood",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor._constrained_optimization",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.log_marginal_likelihood",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict",
    "sklearn.gaussian_process.kernels.ConstantKernel.__call__",
    "sklearn.gaussian_process.kernels.DotProduct.__call__",
    "sklearn.gaussian_process.kernels.ExpSineSquared.__call__",
    "sklearn.gaussian_process.kernels.Hyperparameter.__new__",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.gaussian_process.kernels.Kernel.set_params",
    "sklearn.gaussian_process.kernels.Kernel.theta@setter",
    "sklearn.gaussian_process.kernels.Matern.__call__",
    "sklearn.gaussian_process.kernels.RBF.__call__",
    "sklearn.gaussian_process.kernels.RationalQuadratic.__call__",
    "sklearn.gaussian_process.kernels.WhiteKernel.__call__",
    "sklearn.gaussian_process.kernels._check_length_scale",
    "sklearn.impute.__getattr__",
    "sklearn.impute._base.MissingIndicator._fit",
    "sklearn.impute._base.MissingIndicator._validate_input",
    "sklearn.impute._base.MissingIndicator.transform",
    "sklearn.impute._base.SimpleImputer._validate_input",
    "sklearn.impute._base.SimpleImputer.fit",
    "sklearn.impute._base.SimpleImputer.inverse_transform",
    "sklearn.impute._base.SimpleImputer.transform",
    "sklearn.impute._base._BaseImputer._concatenate_indicator",
    "sklearn.impute._base._BaseImputer._transform_indicator",
    "sklearn.impute._base._check_inputs_dtype",
    "sklearn.impute._iterative.IterativeImputer._impute_one_feature",
    "sklearn.impute._iterative.IterativeImputer._validate_limit",
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.inspection._partial_dependence._grid_from_X",
    "sklearn.inspection._partial_dependence._partial_dependence_brute",
    "sklearn.inspection._partial_dependence.partial_dependence",
    "sklearn.inspection._pd_utils._check_feature_names",
    "sklearn.inspection._pd_utils._get_feature_index",
    "sklearn.inspection._permutation_importance.permutation_importance",
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.from_estimator",
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.plot",
    "sklearn.inspection._plot.decision_boundary._check_boundary_response_method",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.isotonic.IsotonicRegression._check_input_data_shape",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.fit",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.transform",
    "sklearn.kernel_approximation.Nystroem._get_kernel_params",
    "sklearn.kernel_approximation.PolynomialCountSketch.transform",
    "sklearn.kernel_approximation.SkewedChi2Sampler.transform",
    "sklearn.linear_model._base._check_precomputed_gram_matrix",
    "sklearn.linear_model._base._deprecate_normalize",
    "sklearn.linear_model._bayes._deprecate_n_iter",
    "sklearn.linear_model._coordinate_descent.ElasticNet.fit",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit",
    "sklearn.linear_model._coordinate_descent._alpha_grid",
    "sklearn.linear_model._coordinate_descent._set_order",
    "sklearn.linear_model._coordinate_descent.enet_path",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.score",
    "sklearn.linear_model._huber.HuberRegressor.fit",
    "sklearn.linear_model._least_angle.LassoLarsIC._estimate_noise_variance",
    "sklearn.linear_model._least_angle.LassoLarsIC.fit",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._least_angle.lars_path",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._logistic._check_multi_class",
    "sklearn.linear_model._logistic._check_solver",
    "sklearn.linear_model._logistic._log_reg_scoring_path",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._omp.orthogonal_mp",
    "sklearn.linear_model._omp.orthogonal_mp_gram",
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveClassifier.partial_fit",
    "sklearn.linear_model._quantile.QuantileRegressor.fit",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.linear_model._ridge._BaseRidge.fit",
    "sklearn.linear_model._ridge._BaseRidgeCV.fit",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.linear_model._ridge._solve_sparse_cg",
    "sklearn.linear_model._sag.get_auto_step_size",
    "sklearn.linear_model._sag.sag_solver",
    "sklearn.linear_model._stochastic_gradient.BaseSGD._allocate_parameter_mem",
    "sklearn.linear_model._stochastic_gradient.BaseSGD._make_validation_split",
    "sklearn.linear_model._stochastic_gradient.BaseSGD._more_validate_params",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._partial_fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.partial_fit",
    "sklearn.linear_model._stochastic_gradient.SGDClassifier._check_proba",
    "sklearn.linear_model._stochastic_gradient.SGDClassifier.predict_proba",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._partial_fit",
    "sklearn.linear_model._theil_sen.TheilSenRegressor._check_subparams",
    "sklearn.manifold._isomap.Isomap._fit_transform",
    "sklearn.manifold._locally_linear.locally_linear_embedding",
    "sklearn.manifold._locally_linear.null_space",
    "sklearn.manifold._mds._smacof_single",
    "sklearn.manifold._mds.smacof",
    "sklearn.manifold._spectral_embedding.spectral_embedding",
    "sklearn.manifold._t_sne.TSNE._check_params_vs_input",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.manifold._t_sne.trustworthiness",
    "sklearn.metrics._base._average_binary_score",
    "sklearn.metrics._classification._check_set_wise_labels",
    "sklearn.metrics._classification._check_targets",
    "sklearn.metrics._classification.brier_score_loss",
    "sklearn.metrics._classification.class_likelihood_ratios",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._classification.confusion_matrix",
    "sklearn.metrics._classification.hamming_loss",
    "sklearn.metrics._classification.hinge_loss",
    "sklearn.metrics._classification.log_loss",
    "sklearn.metrics._classification.matthews_corrcoef",
    "sklearn.metrics._classification.multilabel_confusion_matrix",
    "sklearn.metrics._pairwise_distances_reduction._dispatcher.ArgKmin.compute",
    "sklearn.metrics._pairwise_distances_reduction._dispatcher.ArgKminClassMode.compute",
    "sklearn.metrics._pairwise_distances_reduction._dispatcher.RadiusNeighbors.compute",
    "sklearn.metrics._pairwise_distances_reduction._dispatcher.sqeuclidean_row_norms",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.from_estimator",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.plot",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_predictions",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.plot",
    "sklearn.metrics._ranking._binary_clf_curve",
    "sklearn.metrics._ranking._binary_roc_auc_score",
    "sklearn.metrics._ranking._check_dcg_target_type",
    "sklearn.metrics._ranking._multiclass_roc_auc_score",
    "sklearn.metrics._ranking.auc",
    "sklearn.metrics._ranking.average_precision_score",
    "sklearn.metrics._ranking.coverage_error",
    "sklearn.metrics._ranking.det_curve",
    "sklearn.metrics._ranking.label_ranking_average_precision_score",
    "sklearn.metrics._ranking.label_ranking_loss",
    "sklearn.metrics._ranking.ndcg_score",
    "sklearn.metrics._ranking.roc_auc_score",
    "sklearn.metrics._ranking.top_k_accuracy_score",
    "sklearn.metrics._regression._check_reg_targets",
    "sklearn.metrics._regression.d2_tweedie_score",
    "sklearn.metrics._regression.max_error",
    "sklearn.metrics._regression.mean_squared_log_error",
    "sklearn.metrics._regression.mean_tweedie_deviance",
    "sklearn.metrics._scorer._BaseScorer.__call__",
    "sklearn.metrics._scorer._ThresholdScorer._score",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.metrics._scorer.check_scoring",
    "sklearn.metrics._scorer.get_scorer",
    "sklearn.metrics._scorer.make_scorer",
    "sklearn.metrics.cluster._supervised._generalized_average",
    "sklearn.metrics.cluster._supervised.check_clusterings",
    "sklearn.metrics.cluster._supervised.contingency_matrix",
    "sklearn.metrics.cluster._unsupervised._silhouette_reduce",
    "sklearn.metrics.cluster._unsupervised.check_number_of_labels",
    "sklearn.metrics.cluster._unsupervised.silhouette_samples",
    "sklearn.metrics.pairwise._check_chunk_size",
    "sklearn.metrics.pairwise._precompute_metric_params",
    "sklearn.metrics.pairwise.additive_chi2_kernel",
    "sklearn.metrics.pairwise.check_paired_arrays",
    "sklearn.metrics.pairwise.check_pairwise_arrays",
    "sklearn.metrics.pairwise.euclidean_distances",
    "sklearn.metrics.pairwise.manhattan_distances",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.mixture._base.BaseMixture.fit_predict",
    "sklearn.mixture._base.BaseMixture.sample",
    "sklearn.mixture._base._check_shape",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._check_precision_parameters",
    "sklearn.mixture._gaussian_mixture._check_precision_matrix",
    "sklearn.mixture._gaussian_mixture._check_precision_positivity",
    "sklearn.mixture._gaussian_mixture._check_weights",
    "sklearn.mixture._gaussian_mixture._compute_precision_cholesky",
    "sklearn.model_selection.__getattr__",
    "sklearn.model_selection._plot._BaseCurveDisplay._plot_curve",
    "sklearn.model_selection._search.BaseSearchCV._check_refit_for_multimetric",
    "sklearn.model_selection._search.BaseSearchCV._run_search",
    "sklearn.model_selection._search.BaseSearchCV._select_best_index",
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._search.BaseSearchCV.n_features_in_",
    "sklearn.model_selection._search.BaseSearchCV.score",
    "sklearn.model_selection._search.ParameterGrid.__getitem__",
    "sklearn.model_selection._search.ParameterGrid.__init__",
    "sklearn.model_selection._search.ParameterSampler.__init__",
    "sklearn.model_selection._search._check_refit",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._check_input_parameters",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.model_selection._split.GroupKFold._iter_test_indices",
    "sklearn.model_selection._split.GroupShuffleSplit._iter_indices",
    "sklearn.model_selection._split.LeaveOneGroupOut._iter_test_masks",
    "sklearn.model_selection._split.LeaveOneGroupOut.get_n_splits",
    "sklearn.model_selection._split.LeaveOneOut._iter_test_indices",
    "sklearn.model_selection._split.LeaveOneOut.get_n_splits",
    "sklearn.model_selection._split.LeavePGroupsOut._iter_test_masks",
    "sklearn.model_selection._split.LeavePGroupsOut.get_n_splits",
    "sklearn.model_selection._split.LeavePOut._iter_test_indices",
    "sklearn.model_selection._split.LeavePOut.get_n_splits",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.model_selection._split.StratifiedKFold._make_test_folds",
    "sklearn.model_selection._split.StratifiedShuffleSplit._iter_indices",
    "sklearn.model_selection._split.TimeSeriesSplit.split",
    "sklearn.model_selection._split._BaseKFold.__init__",
    "sklearn.model_selection._split._BaseKFold.split",
    "sklearn.model_selection._split._RepeatedSplits.__init__",
    "sklearn.model_selection._split._validate_shuffle_split",
    "sklearn.model_selection._split.check_cv",
    "sklearn.model_selection._split.train_test_split",
    "sklearn.model_selection._validation._enforce_prediction_order",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._score",
    "sklearn.model_selection._validation._translate_train_sizes",
    "sklearn.model_selection._validation._warn_or_raise_about_fit_failures",
    "sklearn.model_selection._validation.cross_val_predict",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.multiclass.OneVsOneClassifier.fit",
    "sklearn.multiclass.OneVsOneClassifier.partial_fit",
    "sklearn.multiclass.OneVsRestClassifier.partial_fit",
    "sklearn.multiclass.OutputCodeClassifier.fit",
    "sklearn.multioutput.ClassifierChain.fit",
    "sklearn.multioutput.MultiOutputClassifier.score",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.multioutput._MultiOutputEstimator.fit",
    "sklearn.multioutput._MultiOutputEstimator.partial_fit",
    "sklearn.multioutput._MultiOutputEstimator.predict",
    "sklearn.naive_bayes.BernoulliNB._joint_log_likelihood",
    "sklearn.naive_bayes.CategoricalNB._validate_n_categories",
    "sklearn.naive_bayes.GaussianNB._partial_fit",
    "sklearn.naive_bayes._BaseDiscreteNB._check_alpha",
    "sklearn.naive_bayes._BaseDiscreteNB._update_class_log_prior",
    "sklearn.naive_bayes._BaseDiscreteNB.partial_fit",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph",
    "sklearn.neighbors._base.NeighborsBase._check_algorithm_metric",
    "sklearn.neighbors._base.NeighborsBase._fit",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph",
    "sklearn.neighbors._base._check_precomputed",
    "sklearn.neighbors._base._kneighbors_from_graph",
    "sklearn.neighbors._base.sort_graph_by_row_values",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.fit",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba",
    "sklearn.neighbors._graph._check_params",
    "sklearn.neighbors._kde.KernelDensity._choose_algorithm",
    "sklearn.neighbors._kde.KernelDensity.sample",
    "sklearn.neighbors._lof.LocalOutlierFactor._check_novelty_decision_function",
    "sklearn.neighbors._lof.LocalOutlierFactor._check_novelty_fit_predict",
    "sklearn.neighbors._lof.LocalOutlierFactor._check_novelty_predict",
    "sklearn.neighbors._lof.LocalOutlierFactor._check_novelty_score_samples",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.fit",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._check_solver",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier._validate_input",
    "sklearn.pipeline.FeatureUnion.__getitem__",
    "sklearn.pipeline.FeatureUnion._validate_transformer_weights",
    "sklearn.pipeline.FeatureUnion._validate_transformers",
    "sklearn.pipeline.FeatureUnion.get_feature_names_out",
    "sklearn.pipeline.Pipeline.__getitem__",
    "sklearn.pipeline.Pipeline._check_fit_params",
    "sklearn.pipeline.Pipeline._validate_steps",
    "sklearn.pipeline.Pipeline.get_feature_names_out",
    "sklearn.preprocessing._data.KernelCenterer.fit",
    "sklearn.preprocessing._data.MinMaxScaler.partial_fit",
    "sklearn.preprocessing._data.PowerTransformer._box_cox_optimize",
    "sklearn.preprocessing._data.PowerTransformer._check_input",
    "sklearn.preprocessing._data.QuantileTransformer._check_inputs",
    "sklearn.preprocessing._data.QuantileTransformer.fit",
    "sklearn.preprocessing._data.RobustScaler.fit",
    "sklearn.preprocessing._data.StandardScaler.inverse_transform",
    "sklearn.preprocessing._data.StandardScaler.partial_fit",
    "sklearn.preprocessing._data.StandardScaler.transform",
    "sklearn.preprocessing._data.binarize",
    "sklearn.preprocessing._data.normalize",
    "sklearn.preprocessing._data.scale",
    "sklearn.preprocessing._discretization.KBinsDiscretizer._validate_n_bins",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.inverse_transform",
    "sklearn.preprocessing._encoders.OneHotEncoder._check_get_feature_name_combiner",
    "sklearn.preprocessing._encoders.OneHotEncoder._map_drop_idx_to_infrequent",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.preprocessing._encoders._BaseEncoder._transform",
    "sklearn.preprocessing._function_transformer.FunctionTransformer._check_inverse_transform",
    "sklearn.preprocessing._function_transformer.FunctionTransformer.get_feature_names_out",
    "sklearn.preprocessing._label.LabelBinarizer.fit",
    "sklearn.preprocessing._label.LabelBinarizer.transform",
    "sklearn.preprocessing._label.LabelEncoder.inverse_transform",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit",
    "sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform",
    "sklearn.preprocessing._label._inverse_binarize_thresholding",
    "sklearn.preprocessing._label.label_binarize",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.fit",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform",
    "sklearn.preprocessing._polynomial.SplineTransformer.fit",
    "sklearn.preprocessing._polynomial.SplineTransformer.transform",
    "sklearn.preprocessing._polynomial._create_expansion",
    "sklearn.preprocessing._target_encoder.TargetEncoder._fit_encodings_all",
    "sklearn.random_projection.BaseRandomProjection.fit",
    "sklearn.random_projection._check_density",
    "sklearn.random_projection._check_input_size",
    "sklearn.random_projection.johnson_lindenstrauss_min_dim",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation._build_graph",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.fit",
    "sklearn.svm._base.BaseLibSVM.__init__",
    "sklearn.svm._base.BaseLibSVM._dense_fit",
    "sklearn.svm._base.BaseLibSVM._dense_predict",
    "sklearn.svm._base.BaseLibSVM._validate_for_predict",
    "sklearn.svm._base.BaseLibSVM.coef_",
    "sklearn.svm._base.BaseLibSVM.fit",
    "sklearn.svm._base.BaseSVC._check_proba",
    "sklearn.svm._base.BaseSVC._validate_targets",
    "sklearn.svm._base.BaseSVC.predict",
    "sklearn.svm._base.BaseSVC.predict_proba",
    "sklearn.svm._base._fit_liblinear",
    "sklearn.svm._base._get_liblinear_solver_type",
    "sklearn.svm._bounds.l1_min_c",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._classes.BaseDecisionTree._validate_X_predict",
    "sklearn.tree._export._DOTTreeExporter.export",
    "sklearn.tree._export._DOTTreeExporter.recurse",
    "sklearn.tree._export.export_text",
    "sklearn.utils._array_api._ArrayAPIWrapper.take",
    "sklearn.utils._array_api._NumPyAPIWrapper.reshape",
    "sklearn.utils._array_api._check_device_cpu",
    "sklearn.utils._array_api._isdtype_single",
    "sklearn.utils._available_if._AvailableIfDescriptor.__get__",
    "sklearn.utils._bunch.Bunch.__getattr__",
    "sklearn.utils._determine_key_type",
    "sklearn.utils._encode._NaNCounter.__missing__",
    "sklearn.utils._encode._encode",
    "sklearn.utils._encode._nandict.__missing__",
    "sklearn.utils._encode._unique_python",
    "sklearn.utils._get_column_indices",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests.MetadataRouter._route_params",
    "sklearn.utils._metadata_requests.MetadataRouter.add_self_request",
    "sklearn.utils._metadata_requests.MetadataRouter.validate_metadata",
    "sklearn.utils._metadata_requests.MethodMapping.add",
    "sklearn.utils._metadata_requests.MethodMapping.from_str",
    "sklearn.utils._metadata_requests.MethodMetadataRequest.add_request",
    "sklearn.utils._metadata_requests.RequestMethod.__get__.func",
    "sklearn.utils._metadata_requests.process_routing",
    "sklearn.utils._mocking.CheckingClassifier.fit",
    "sklearn.utils._param_validation.Interval._check_params",
    "sklearn.utils._param_validation.Options.__init__",
    "sklearn.utils._param_validation.generate_valid_param",
    "sklearn.utils._param_validation.make_constraint",
    "sklearn.utils._param_validation.validate_parameter_constraints",
    "sklearn.utils._param_validation.validate_params.decorator.wrapper",
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_from_predictions_params",
    "sklearn.utils._response._get_response_values",
    "sklearn.utils._response._get_response_values_binary",
    "sklearn.utils._safe_indexing",
    "sklearn.utils._set_output._SetOutputMixin.__init_subclass__",
    "sklearn.utils._set_output._get_output_config",
    "sklearn.utils._set_output._safe_set_output",
    "sklearn.utils._set_output._wrap_in_pandas_container",
    "sklearn.utils._tags._safe_tags",
    "sklearn.utils._testing._IgnoreWarnings.__enter__",
    "sklearn.utils._testing._IgnoreWarnings.__exit__",
    "sklearn.utils._testing._Raises.__exit__",
    "sklearn.utils._testing._create_aligned_memmap_backed_arrays",
    "sklearn.utils._testing.assert_allclose_dense_sparse",
    "sklearn.utils._testing.assert_no_warnings",
    "sklearn.utils._testing.assert_raise_message",
    "sklearn.utils._testing.assert_run_python_script",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils._testing.ignore_warnings",
    "sklearn.utils.class_weight.compute_class_weight",
    "sklearn.utils.class_weight.compute_sample_weight",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.estimator_checks._NotAnArray.__array_function__",
    "sklearn.utils.estimator_checks._check_generated_dataframe",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_estimator",
    "sklearn.utils.estimator_checks.check_estimators_data_not_an_array",
    "sklearn.utils.estimator_checks.check_fit_check_is_fitted",
    "sklearn.utils.estimator_checks.check_no_attributes_set_in_init",
    "sklearn.utils.estimator_checks.check_outlier_contamination",
    "sklearn.utils.estimator_checks.check_param_validation",
    "sklearn.utils.estimator_checks.check_sample_weights_pandas_series",
    "sklearn.utils.estimator_checks.parametrize_with_checks",
    "sklearn.utils.extmath._randomized_eigsh",
    "sklearn.utils.extmath.make_nonnegative",
    "sklearn.utils.graph._fix_connected_components",
    "sklearn.utils.indices_to_mask",
    "sklearn.utils.metaestimators._BaseComposition._validate_names",
    "sklearn.utils.metaestimators._safe_split",
    "sklearn.utils.multiclass._check_partial_fit_first_call",
    "sklearn.utils.multiclass.check_classification_targets",
    "sklearn.utils.multiclass.type_of_target",
    "sklearn.utils.multiclass.unique_labels",
    "sklearn.utils.optimize._line_search_wolfe12",
    "sklearn.utils.random._random_choice_csc",
    "sklearn.utils.resample",
    "sklearn.utils.sparsefuncs._min_or_max_axis",
    "sklearn.utils.sparsefuncs._raise_error_wrong_axis",
    "sklearn.utils.sparsefuncs._raise_typeerror",
    "sklearn.utils.sparsefuncs._sparse_min_or_max",
    "sklearn.utils.sparsefuncs.count_nonzero",
    "sklearn.utils.sparsefuncs.csc_median_axis_0",
    "sklearn.utils.sparsefuncs.incr_mean_variance_axis",
    "sklearn.utils.sparsefuncs.inplace_swap_row_csc",
    "sklearn.utils.sparsefuncs.inplace_swap_row_csr",
    "sklearn.utils.tests.test_estimator_checks.LargeSparseNotSupportedClassifier.fit",
    "sklearn.utils.tests.test_estimator_checks.NoSampleWeightPandasSeriesType.fit",
    "sklearn.utils.tests.test_estimator_checks.NoSparseClassifier.fit",
    "sklearn.utils.tests.test_estimator_checks.OneClassSampleErrorClassifier.fit",
    "sklearn.utils.tests.test_estimator_checks.RaisesErrorInSetParams.set_params",
    "sklearn.utils.tests.test_estimator_checks.RequiresPositiveXRegressor.fit",
    "sklearn.utils.tests.test_estimator_checks.RequiresPositiveYRegressor.fit",
    "sklearn.utils.tests.test_estimator_checks.SparseTransformer.transform",
    "sklearn.utils.tests.test_estimator_checks.UntaggedBinaryClassifier.fit",
    "sklearn.utils.tests.test_estimator_checks.UntaggedBinaryClassifier.partial_fit",
    "sklearn.utils.validation._allclose_dense_sparse",
    "sklearn.utils.validation._assert_all_finite",
    "sklearn.utils.validation._assert_all_finite_element_wise",
    "sklearn.utils.validation._check_feature_names_in",
    "sklearn.utils.validation._check_large_sparse",
    "sklearn.utils.validation._check_monotonic_cst",
    "sklearn.utils.validation._check_pos_label_consistency",
    "sklearn.utils.validation._check_psd_eigenvalues",
    "sklearn.utils.validation._check_response_method",
    "sklearn.utils.validation._check_sample_weight",
    "sklearn.utils.validation._ensure_no_complex_data",
    "sklearn.utils.validation._ensure_sparse_format",
    "sklearn.utils.validation._get_feature_names",
    "sklearn.utils.validation._num_features",
    "sklearn.utils.validation._num_samples",
    "sklearn.utils.validation.check_X_y",
    "sklearn.utils.validation.check_array",
    "sklearn.utils.validation.check_consistent_length",
    "sklearn.utils.validation.check_is_fitted",
    "sklearn.utils.validation.check_memory",
    "sklearn.utils.validation.check_non_negative",
    "sklearn.utils.validation.check_random_state",
    "sklearn.utils.validation.check_scalar",
    "sklearn.utils.validation.check_symmetric",
    "sklearn.utils.validation.column_or_1d",
    "traitlets.config.loader.Config.__setitem__",
    "traitlets.config.loader._DefaultOptionDict.__getitem__",
    "traitlets.traitlets.HasTraits.set_trait",
    "traitlets.traitlets._CallbackWrapper.__init__",
    "traitlets.utils.getargspec.getargspec"
  ],
  "BaseException.__str__": [
    "Ovr{BaseException.__str__}",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.runTests",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.convertToDate.cvt_fn",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.convertToDatetime.cvt_fn",
    "jinja2.lexer.Lexer.wrap",
    "sklearn.compose._column_transformer.ColumnTransformer._fit_transform",
    "sklearn.conftest._fetch_fixture.wrapped",
    "sklearn.cross_decomposition._pls._PLS.fit",
    "sklearn.ensemble._base._fit_single_estimator",
    "sklearn.ensemble._gb.BaseGradientBoosting.fit",
    "sklearn.externals._arff.COOData.decode_rows",
    "sklearn.externals._arff.DenseGeneratorData._decode_values",
    "sklearn.externals._arff.LODGeneratorData.decode_rows",
    "sklearn.impute._base.SimpleImputer._validate_input",
    "sklearn.utils._encode._encode",
    "sklearn.utils._param_validation.validate_params.decorator.wrapper",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.estimator_checks._check_generated_dataframe",
    "sklearn.utils.estimator_checks.check_estimator",
    "sklearn.utils.estimator_checks.check_global_ouptut_transform_pandas",
    "sklearn.utils.estimator_checks.check_requires_y_none",
    "sklearn.utils.estimator_checks.check_set_output_transform_pandas",
    "sklearn.utils.multiclass.is_multilabel",
    "sklearn.utils.multiclass.type_of_target"
  ],
  "BaseException.with_traceback": [
    "jinja2.debug.rewrite_traceback_stack",
    "werkzeug.utils.import_string"
  ],
  "ImportError.__init__": [
    "benchmarks.bench_tsne_mnist.$toplevel",
    "setup.check_package_status",
    "sklearn.__check_build.raise_build_error",
    "sklearn._build_utils._check_cython_version",
    "sklearn.conftest.$toplevel",
    "sklearn.conftest.hide_available_pandas.mocked_import",
    "sklearn.datasets.__getattr__",
    "sklearn.datasets._base.load_sample_images",
    "sklearn.datasets._lfw._load_imgs",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.impute.__getattr__",
    "sklearn.model_selection.__getattr__",
    "sklearn.utils._array_api._check_array_api_dispatch",
    "sklearn.utils.check_matplotlib_support",
    "sklearn.utils.check_pandas_support",
    "werkzeug.utils.ImportStringError.__init__",
    "werkzeug.utils.import_string"
  ],
  "PIL.Image.Exif.__iter__": [
    "Ovr{PIL.Image.Exif.__iter__}"
  ],
  "PIL.Image.Exif.__setitem__": [
    "Ovr{PIL.Image.Exif.__setitem__}"
  ],
  "PIL.Image.Image.crop": [
    "sklearn.datasets._lfw._load_imgs"
  ],
  "PIL.Image.Image.resize": [
    "sklearn.datasets._lfw._load_imgs"
  ],
  "PIL.TiffImagePlugin.ImageFileDirectory_v1.__iter__": [
    "Ovr{PIL.TiffImagePlugin.ImageFileDirectory_v1.__iter__}"
  ],
  "PIL.TiffImagePlugin.ImageFileDirectory_v1.__setitem__": [
    "Ovr{PIL.TiffImagePlugin.ImageFileDirectory_v1.__setitem__}"
  ],
  "PIL.TiffImagePlugin.ImageFileDirectory_v2.__iter__": [
    "Ovr{PIL.TiffImagePlugin.ImageFileDirectory_v2.__iter__}"
  ],
  "PIL.TiffImagePlugin.ImageFileDirectory_v2.__setitem__": [
    "Ovr{PIL.TiffImagePlugin.ImageFileDirectory_v2.__setitem__}"
  ],
  "PyInstaller.building.datastruct.TOC.append": [
    "Ovr{PyInstaller.building.datastruct.TOC.append}"
  ],
  "PyInstaller.building.datastruct.TOC.extend": [
    "Ovr{PyInstaller.building.datastruct.TOC.extend}"
  ],
  "PyInstaller.building.datastruct.TOC.insert": [
    "Ovr{PyInstaller.building.datastruct.TOC.insert}"
  ],
  "TypedDictionary.__getitem__": [
    "sklearn.externals._arff.ArffDecoder._decode"
  ],
  "TypedDictionary.__setitem__": [
    "sklearn.externals._arff.ArffDecoder._decode"
  ],
  "_csv._reader.__next__": [
    "Ovr{_csv._reader.__next__}",
    "sklearn.datasets._base.load_csv_data",
    "sklearn.externals._arff._parse_values"
  ],
  "_operator.attrgetter.__call__": [
    "doc.sphinxext.github_link._linkcode_resolve"
  ],
  "_operator.attrgetter.__new__": [
    "doc.sphinxext.github_link._linkcode_resolve",
    "sklearn.feature_selection._base._get_feature_importances"
  ],
  "_operator.itemgetter.__call__": [
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "examples.bicluster.plot_bicluster_newsgroups.most_common",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.restrict",
    "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.discovery.all_functions"
  ],
  "_operator.itemgetter.__new__": [
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "examples.bicluster.plot_bicluster_newsgroups.most_common",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.restrict",
    "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.discovery.all_functions"
  ],
  "_typeshed.SupportsGetItem.__getitem__": [
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit"
  ],
  "_weakrefset.WeakSet.__iter__": [
    "Ovr{_weakrefset.WeakSet.__iter__}"
  ],
  "abc.ABCMeta.register": [
    "sklearn.utils._param_validation.$toplevel"
  ],
  "argparse.ArgumentParser.__init__": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_hist_gradient_boosting.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_adult.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_categorical_only.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel",
    "benchmarks.bench_isotonic.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_multilabel_metrics.$toplevel",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "benchmarks.plot_tsne_mnist.$toplevel",
    "build_tools.azure.get_commit_message.parsed_args",
    "maint_tools.update_tracking_issue.$toplevel",
    "sklearn._min_dependencies.$toplevel"
  ],
  "argparse.ArgumentParser.parse_args": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_hist_gradient_boosting.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_adult.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_categorical_only.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel",
    "benchmarks.bench_isotonic.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_multilabel_metrics.$toplevel",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "benchmarks.plot_tsne_mnist.$toplevel",
    "build_tools.azure.get_commit_message.parsed_args",
    "maint_tools.update_tracking_issue.$toplevel",
    "sklearn._min_dependencies.$toplevel"
  ],
  "argparse._ActionsContainer.add_argument": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_hist_gradient_boosting.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_adult.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_categorical_only.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel",
    "benchmarks.bench_isotonic.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_multilabel_metrics.$toplevel",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "benchmarks.plot_tsne_mnist.$toplevel",
    "build_tools.azure.get_commit_message.parsed_args",
    "maint_tools.update_tracking_issue.$toplevel",
    "sklearn._min_dependencies.$toplevel"
  ],
  "array.array.__getitem__": [
    "Ovr{array.array.__getitem__}"
  ],
  "array.array.__init__": [
    "sklearn.datasets._samples_generator.make_multilabel_classification",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._transform",
    "sklearn.feature_extraction.text._make_int_array",
    "sklearn.multiclass.OneVsRestClassifier.predict",
    "sklearn.preprocessing._label.MultiLabelBinarizer._transform",
    "sklearn.utils.random._random_choice_csc"
  ],
  "array.array.append": [
    "sklearn.datasets._samples_generator.make_multilabel_classification",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._transform",
    "sklearn.multiclass.OneVsRestClassifier.predict",
    "sklearn.preprocessing._label.MultiLabelBinarizer._transform",
    "sklearn.utils.random._random_choice_csc"
  ],
  "array.array.extend": [
    "sklearn.datasets._samples_generator.make_multilabel_classification",
    "sklearn.multiclass.OneVsRestClassifier.predict",
    "sklearn.preprocessing._label.MultiLabelBinarizer._transform",
    "sklearn.utils.random._random_choice_csc"
  ],
  "array.array.index": [
    "Ovr{array.array.index}"
  ],
  "array.array.itemsize": [
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._transform"
  ],
  "asv_benchmarks.benchmarks.cluster.KMeansBenchmark.make_data": [
    "Ovr{asv_benchmarks.benchmarks.cluster.KMeansBenchmark.make_data}"
  ],
  "asv_benchmarks.benchmarks.cluster.KMeansBenchmark.make_estimator": [
    "Ovr{asv_benchmarks.benchmarks.cluster.KMeansBenchmark.make_estimator}"
  ],
  "asv_benchmarks.benchmarks.cluster.MiniBatchKMeansBenchmark.make_data": [
    "Ovr{asv_benchmarks.benchmarks.cluster.MiniBatchKMeansBenchmark.make_data}"
  ],
  "asv_benchmarks.benchmarks.cluster.MiniBatchKMeansBenchmark.make_estimator": [
    "Ovr{asv_benchmarks.benchmarks.cluster.MiniBatchKMeansBenchmark.make_estimator}"
  ],
  "asv_benchmarks.benchmarks.common.Estimator.make_data": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_data}"
  ],
  "asv_benchmarks.benchmarks.common.Estimator.make_estimator": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_estimator}"
  ],
  "asv_benchmarks.benchmarks.common.Estimator.setup_cache": [
    "asv_benchmarks.benchmarks.manifold.TSNEBenchmark.setup_cache"
  ],
  "asv_benchmarks.benchmarks.common.Estimator.skip": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.skip}"
  ],
  "asv_benchmarks.benchmarks.decomposition.DictionaryLearningBenchmark.make_data": [
    "Ovr{asv_benchmarks.benchmarks.decomposition.DictionaryLearningBenchmark.make_data}"
  ],
  "asv_benchmarks.benchmarks.decomposition.DictionaryLearningBenchmark.make_estimator": [
    "Ovr{asv_benchmarks.benchmarks.decomposition.DictionaryLearningBenchmark.make_estimator}"
  ],
  "asv_benchmarks.benchmarks.decomposition.MiniBatchDictionaryLearningBenchmark.make_data": [
    "Ovr{asv_benchmarks.benchmarks.decomposition.MiniBatchDictionaryLearningBenchmark.make_data}"
  ],
  "asv_benchmarks.benchmarks.decomposition.MiniBatchDictionaryLearningBenchmark.make_estimator": [
    "Ovr{asv_benchmarks.benchmarks.decomposition.MiniBatchDictionaryLearningBenchmark.make_estimator}"
  ],
  "asv_benchmarks.benchmarks.decomposition.PCABenchmark.make_data": [
    "Ovr{asv_benchmarks.benchmarks.decomposition.PCABenchmark.make_data}"
  ],
  "asv_benchmarks.benchmarks.decomposition.PCABenchmark.make_estimator": [
    "Ovr{asv_benchmarks.benchmarks.decomposition.PCABenchmark.make_estimator}"
  ],
  "asv_benchmarks.benchmarks.ensemble.GradientBoostingClassifierBenchmark.make_data": [
    "Ovr{asv_benchmarks.benchmarks.ensemble.GradientBoostingClassifierBenchmark.make_data}"
  ],
  "asv_benchmarks.benchmarks.ensemble.GradientBoostingClassifierBenchmark.make_estimator": [
    "Ovr{asv_benchmarks.benchmarks.ensemble.GradientBoostingClassifierBenchmark.make_estimator}"
  ],
  "asv_benchmarks.benchmarks.ensemble.HistGradientBoostingClassifierBenchmark.make_data": [
    "Ovr{asv_benchmarks.benchmarks.ensemble.HistGradientBoostingClassifierBenchmark.make_data}"
  ],
  "asv_benchmarks.benchmarks.ensemble.HistGradientBoostingClassifierBenchmark.make_estimator": [
    "Ovr{asv_benchmarks.benchmarks.ensemble.HistGradientBoostingClassifierBenchmark.make_estimator}"
  ],
  "asv_benchmarks.benchmarks.ensemble.RandomForestClassifierBenchmark.make_data": [
    "Ovr{asv_benchmarks.benchmarks.ensemble.RandomForestClassifierBenchmark.make_data}"
  ],
  "asv_benchmarks.benchmarks.ensemble.RandomForestClassifierBenchmark.make_estimator": [
    "Ovr{asv_benchmarks.benchmarks.ensemble.RandomForestClassifierBenchmark.make_estimator}"
  ],
  "asv_benchmarks.benchmarks.linear_model.ElasticNetBenchmark.make_data": [
    "Ovr{asv_benchmarks.benchmarks.linear_model.ElasticNetBenchmark.make_data}"
  ],
  "asv_benchmarks.benchmarks.linear_model.ElasticNetBenchmark.make_estimator": [
    "Ovr{asv_benchmarks.benchmarks.linear_model.ElasticNetBenchmark.make_estimator}"
  ],
  "asv_benchmarks.benchmarks.linear_model.ElasticNetBenchmark.skip": [
    "Ovr{asv_benchmarks.benchmarks.linear_model.ElasticNetBenchmark.skip}"
  ],
  "asv_benchmarks.benchmarks.linear_model.LassoBenchmark.make_data": [
    "Ovr{asv_benchmarks.benchmarks.linear_model.LassoBenchmark.make_data}"
  ],
  "asv_benchmarks.benchmarks.linear_model.LassoBenchmark.make_estimator": [
    "Ovr{asv_benchmarks.benchmarks.linear_model.LassoBenchmark.make_estimator}"
  ],
  "asv_benchmarks.benchmarks.linear_model.LassoBenchmark.skip": [
    "Ovr{asv_benchmarks.benchmarks.linear_model.LassoBenchmark.skip}"
  ],
  "asv_benchmarks.benchmarks.linear_model.LinearRegressionBenchmark.make_data": [
    "Ovr{asv_benchmarks.benchmarks.linear_model.LinearRegressionBenchmark.make_data}"
  ],
  "asv_benchmarks.benchmarks.linear_model.LinearRegressionBenchmark.make_estimator": [
    "Ovr{asv_benchmarks.benchmarks.linear_model.LinearRegressionBenchmark.make_estimator}"
  ],
  "asv_benchmarks.benchmarks.linear_model.LogisticRegressionBenchmark.make_data": [
    "Ovr{asv_benchmarks.benchmarks.linear_model.LogisticRegressionBenchmark.make_data}"
  ],
  "asv_benchmarks.benchmarks.linear_model.LogisticRegressionBenchmark.make_estimator": [
    "Ovr{asv_benchmarks.benchmarks.linear_model.LogisticRegressionBenchmark.make_estimator}"
  ],
  "asv_benchmarks.benchmarks.linear_model.RidgeBenchmark.make_data": [
    "Ovr{asv_benchmarks.benchmarks.linear_model.RidgeBenchmark.make_data}"
  ],
  "asv_benchmarks.benchmarks.linear_model.RidgeBenchmark.make_estimator": [
    "Ovr{asv_benchmarks.benchmarks.linear_model.RidgeBenchmark.make_estimator}"
  ],
  "asv_benchmarks.benchmarks.linear_model.RidgeBenchmark.skip": [
    "Ovr{asv_benchmarks.benchmarks.linear_model.RidgeBenchmark.skip}"
  ],
  "asv_benchmarks.benchmarks.linear_model.SGDRegressorBenchmark.make_data": [
    "Ovr{asv_benchmarks.benchmarks.linear_model.SGDRegressorBenchmark.make_data}"
  ],
  "asv_benchmarks.benchmarks.linear_model.SGDRegressorBenchmark.make_estimator": [
    "Ovr{asv_benchmarks.benchmarks.linear_model.SGDRegressorBenchmark.make_estimator}"
  ],
  "asv_benchmarks.benchmarks.manifold.TSNEBenchmark.make_data": [
    "Ovr{asv_benchmarks.benchmarks.manifold.TSNEBenchmark.make_data}"
  ],
  "asv_benchmarks.benchmarks.manifold.TSNEBenchmark.make_estimator": [
    "Ovr{asv_benchmarks.benchmarks.manifold.TSNEBenchmark.make_estimator}"
  ],
  "asv_benchmarks.benchmarks.model_selection.GridSearchBenchmark.make_data": [
    "Ovr{asv_benchmarks.benchmarks.model_selection.GridSearchBenchmark.make_data}"
  ],
  "asv_benchmarks.benchmarks.model_selection.GridSearchBenchmark.make_estimator": [
    "Ovr{asv_benchmarks.benchmarks.model_selection.GridSearchBenchmark.make_estimator}"
  ],
  "asv_benchmarks.benchmarks.neighbors.KNeighborsClassifierBenchmark.make_data": [
    "Ovr{asv_benchmarks.benchmarks.neighbors.KNeighborsClassifierBenchmark.make_data}"
  ],
  "asv_benchmarks.benchmarks.neighbors.KNeighborsClassifierBenchmark.make_estimator": [
    "Ovr{asv_benchmarks.benchmarks.neighbors.KNeighborsClassifierBenchmark.make_estimator}"
  ],
  "asv_benchmarks.benchmarks.svm.SVCBenchmark.make_data": [
    "Ovr{asv_benchmarks.benchmarks.svm.SVCBenchmark.make_data}"
  ],
  "asv_benchmarks.benchmarks.svm.SVCBenchmark.make_estimator": [
    "Ovr{asv_benchmarks.benchmarks.svm.SVCBenchmark.make_estimator}"
  ],
  "asyncio.base_events.BaseEventLoop.close": [
    "Ovr{asyncio.base_events.BaseEventLoop.close}"
  ],
  "asyncio.base_events.BaseEventLoop.run_until_complete": [
    "Ovr{asyncio.base_events.BaseEventLoop.run_until_complete}"
  ],
  "asyncio.events.AbstractEventLoop.close": [
    "Ovr{asyncio.events.AbstractEventLoop.close}"
  ],
  "asyncio.events.AbstractEventLoop.run_until_complete": [
    "Ovr{asyncio.events.AbstractEventLoop.run_until_complete}"
  ],
  "asyncio.futures.Future.__iter__": [
    "Ovr{asyncio.futures.Future.__iter__}"
  ],
  "asyncio.streams.StreamReader.__aiter__": [
    "Ovr{asyncio.streams.StreamReader.__aiter__}"
  ],
  "asyncio.streams.StreamReader.__anext__": [
    "Ovr{asyncio.streams.StreamReader.__anext__}"
  ],
  "babel.localedata.LocaleDataDict.__iter__": [
    "Ovr{babel.localedata.LocaleDataDict.__iter__}"
  ],
  "babel.localedata.LocaleDataDict.__setitem__": [
    "Ovr{babel.localedata.LocaleDataDict.__setitem__}"
  ],
  "benchmarks.bench_plot_nmf._PGNMF._fit_transform": [
    "Ovr{benchmarks.bench_plot_nmf._PGNMF._fit_transform}",
    "benchmarks.bench_plot_nmf._PGNMF.fit_transform",
    "benchmarks.bench_plot_nmf._PGNMF.transform"
  ],
  "benchmarks.bench_plot_nmf._PGNMF.fit": [
    "examples.applications.plot_topics_extraction_with_nmf_lda.$toplevel",
    "examples.decomposition.plot_faces_decomposition.$toplevel"
  ],
  "benchmarks.bench_plot_nmf._PGNMF.fit_transform": [
    "Ovr{benchmarks.bench_plot_nmf._PGNMF.fit_transform}",
    "benchmarks.bench_plot_nmf._PGNMF.fit"
  ],
  "bool.__and__": [
    "sklearn.calibration._CalibratedClassifier.predict_proba",
    "sklearn.preprocessing._polynomial.SplineTransformer.transform",
    "sklearn.utils.validation._check_psd_eigenvalues"
  ],
  "bool.__new__": [
    "click._winconsole._is_console",
    "click.core.Option.__init__",
    "click.core.Option.value_from_envvar",
    "click.types.BoolParamType.convert",
    "doc.tutorial.machine_learning_map.parse_path.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.haskeys",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.addCondition.pa",
    "doc.tutorial.machine_learning_map.pyparsing._MultipleMatch.parseImpl",
    "jinja2.ext.InternationalizationExtension.parse",
    "pip._vendor.requests.cookies.create_cookie",
    "pip._vendor.requests.cookies.morsel_to_cookie",
    "sklearn._config.$toplevel",
    "sklearn._loss.link.Interval.includes",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._svmlight_format_io.load_svmlight_files",
    "sklearn.neighbors._base._radius_neighbors_from_graph",
    "sklearn.utils.estimator_checks._is_pairwise_metric"
  ],
  "bool.__or__": [
    "Ovr{bool.__or__}",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.streamline",
    "pip._vendor.pyparsing.ParseExpression.streamline"
  ],
  "bool.__xor__": [
    "sklearn.cluster._agglomerative.AgglomerativeClustering._fit"
  ],
  "boto.s3.bucketlistresultset.BucketListResultSet.__iter__": [
    "Ovr{boto.s3.bucketlistresultset.BucketListResultSet.__iter__}"
  ],
  "bs4.element.CharsetMetaAttributeValue.encode": [
    "Ovr{bs4.element.CharsetMetaAttributeValue.encode}"
  ],
  "bs4.element.ContentMetaAttributeValue.encode": [
    "Ovr{bs4.element.ContentMetaAttributeValue.encode}"
  ],
  "bytearray.__getitem__": [
    "Ovr{bytearray.__getitem__}"
  ],
  "bytearray.__iter__": [
    "Ovr{bytearray.__iter__}"
  ],
  "bytearray.index": [
    "Ovr{bytearray.index}"
  ],
  "bytes.__getitem__": [
    "Ovr{bytes.__getitem__}"
  ],
  "bytes.__iter__": [
    "Ovr{bytes.__iter__}"
  ],
  "bytes.__mod__": [
    "sklearn.datasets._svmlight_format_io._dump_svmlight"
  ],
  "bytes.decode": [
    "build_tools.update_environments_and_lock_files.execute_command",
    "click.shell_completion.BashComplete._check_version",
    "click.types.StringParamType.convert",
    "click.utils.make_str",
    "doc.sphinxext.github_link._get_git_revision",
    "jinja2.lexer.Lexer.wrap",
    "sklearn._build_utils.pre_build_helpers.compile_test_program",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._svmlight_format_io.dump_svmlight_file",
    "sklearn.feature_extraction.text._VectorizerMixin.decode",
    "sklearn.feature_extraction.text.strip_accents_ascii"
  ],
  "bytes.index": [
    "Ovr{bytes.index}"
  ],
  "bytes.split": [
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects"
  ],
  "bytes.strip": [
    "doc.sphinxext.github_link._get_git_revision"
  ],
  "bz2.BZ2File.__init__": [
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects",
    "sklearn.datasets._svmlight_format_io._gen_open"
  ],
  "cachetools.Cache.__iter__": [
    "Ovr{cachetools.Cache.__iter__}"
  ],
  "cachetools.Cache.__setitem__": [
    "Ovr{cachetools.Cache.__setitem__}"
  ],
  "cffi.backend_ctypes.CTypesData.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "click._compat._AtomicFile.__init__": [
    "click._compat.open_stream"
  ],
  "click._compat._AtomicFile.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "click._compat._FixupStream.__init__": [
    "click._compat._NonClosingTextIOWrapper.__init__"
  ],
  "click._compat._NonClosingTextIOWrapper.__init__": [
    "click._compat._make_text_stream"
  ],
  "click._textwrap.TextWrapper.extra_indent": [
    "click.formatting.wrap_text"
  ],
  "click._textwrap.TextWrapper.indent_only": [
    "click.formatting.wrap_text"
  ],
  "click._winconsole.ConsoleStream.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "click._winconsole.ConsoleStream.name": [
    "click._winconsole.ConsoleStream.__repr__"
  ],
  "click.core.Argument._parse_decls": [
    "Ovr{click.core.Argument._parse_decls}"
  ],
  "click.core.Argument.add_to_parser": [
    "Ovr{click.core.Argument.add_to_parser}"
  ],
  "click.core.Argument.get_error_hint": [
    "Ovr{click.core.Argument.get_error_hint}"
  ],
  "click.core.Argument.get_usage_pieces": [
    "Ovr{click.core.Argument.get_usage_pieces}"
  ],
  "click.core.Argument.human_readable_name": [
    "Ovr{click.core.Argument.human_readable_name}"
  ],
  "click.core.Argument.make_metavar": [
    "click.core.Argument.get_error_hint",
    "click.core.Argument.get_usage_pieces"
  ],
  "click.core.BaseCommand.__call__": [
    "build_tools.update_environments_and_lock_files.$toplevel",
    "click.core.BaseCommand._main_shell_completion",
    "click.core.BaseCommand.make_context",
    "click.core.BaseCommand.shell_complete",
    "click.core.CommandCollection.get_command",
    "click.core.Context.command_path",
    "click.core.Group.add_command",
    "click.core._check_multicommand",
    "click.core._complete_visible_commands",
    "click.shell_completion.ShellComplete.get_completions",
    "click.shell_completion.shell_complete"
  ],
  "click.core.BaseCommand._main_shell_completion": [
    "click.core.BaseCommand.main"
  ],
  "click.core.BaseCommand.invoke": [
    "Ovr{click.core.BaseCommand.invoke}"
  ],
  "click.core.BaseCommand.main": [
    "click.core.BaseCommand.__call__"
  ],
  "click.core.BaseCommand.make_context": [
    "Ovr{click.core.BaseCommand.make_context}",
    "click.core.MultiCommand.invoke",
    "click.shell_completion._resolve_context",
    "flask.cli.FlaskGroup.make_context"
  ],
  "click.core.BaseCommand.parse_args": [
    "Ovr{click.core.BaseCommand.parse_args}"
  ],
  "click.core.BaseCommand.shell_complete": [
    "Ovr{click.core.BaseCommand.shell_complete}",
    "click.core.Command.shell_complete"
  ],
  "click.core.Command.collect_usage_pieces": [
    "Ovr{click.core.Command.collect_usage_pieces}",
    "click.core.MultiCommand.collect_usage_pieces"
  ],
  "click.core.Command.format_epilog": [
    "click.core.Command.format_help"
  ],
  "click.core.Command.format_help": [
    "click.core.Command.get_help"
  ],
  "click.core.Command.format_help_text": [
    "click.core.Command.format_help"
  ],
  "click.core.Command.format_options": [
    "Ovr{click.core.Command.format_options}",
    "click.core.MultiCommand.format_options"
  ],
  "click.core.Command.format_usage": [
    "click.core.Command.format_help",
    "click.core.Command.get_usage"
  ],
  "click.core.Command.get_help": [
    "click.core.Context.get_help"
  ],
  "click.core.Command.get_help_option": [
    "click.core.Command.get_params",
    "click.exceptions.UsageError.show"
  ],
  "click.core.Command.get_help_option_names": [
    "click.core.Command.get_help_option"
  ],
  "click.core.Command.get_params": [
    "click.core.Command.collect_usage_pieces",
    "click.core.Command.format_options",
    "click.core.Command.make_parser",
    "click.core.Command.parse_args",
    "click.core.Command.shell_complete",
    "click.core.Context.command_path",
    "click.shell_completion._resolve_incomplete"
  ],
  "click.core.Command.get_short_help_str": [
    "click.core.BaseCommand.shell_complete",
    "click.core.MultiCommand.shell_complete"
  ],
  "click.core.Command.get_usage": [
    "click.core.Context.get_usage"
  ],
  "click.core.Command.invoke": [
    "Ovr{click.core.Command.invoke}",
    "click.core.MultiCommand.invoke"
  ],
  "click.core.Command.make_parser": [
    "click.core.Command.parse_args"
  ],
  "click.core.Command.parse_args": [
    "Ovr{click.core.Command.parse_args}",
    "click.core.MultiCommand.parse_args"
  ],
  "click.core.Command.shell_complete": [
    "Ovr{click.core.Command.shell_complete}",
    "click.core.MultiCommand.shell_complete"
  ],
  "click.core.CommandCollection.get_command": [
    "Ovr{click.core.CommandCollection.get_command}"
  ],
  "click.core.CommandCollection.list_commands": [
    "Ovr{click.core.CommandCollection.list_commands}"
  ],
  "click.core.Context.__enter__": [
    "click.core.BaseCommand.main",
    "click.core.Context.scope",
    "click.core.MultiCommand.invoke"
  ],
  "click.core.Context.__init__": [
    "click.core.BaseCommand.make_context"
  ],
  "click.core.Context.call_on_close": [
    "click.types.File.convert"
  ],
  "click.core.Context.command_path": [
    "click.core.Command.format_usage",
    "click.core.Context.command_path",
    "click.exceptions.UsageError.show"
  ],
  "click.core.Context.get_help": [
    "click.core.Command.get_help_option.show_help",
    "click.core.Command.parse_args",
    "click.core.MultiCommand.parse_args"
  ],
  "click.core.Context.get_parameter_source": [
    "click.core.Command.shell_complete",
    "click.shell_completion._is_incomplete_argument"
  ],
  "click.core.Context.get_usage": [
    "click.exceptions.UsageError.show"
  ],
  "click.core.Context.invoke": [
    "click.core.Command.invoke",
    "click.core.MultiCommand.invoke._process_result"
  ],
  "click.core.Context.lookup_default": [
    "click.core.Parameter.consume_value",
    "click.core.Parameter.get_default"
  ],
  "click.core.Context.make_formatter": [
    "click.core.Command.get_help",
    "click.core.Command.get_usage"
  ],
  "click.core.Context.meta": [
    "click.core.Context.__init__"
  ],
  "click.core.Context.scope": [
    "click.core.BaseCommand.make_context"
  ],
  "click.core.Context.set_parameter_source": [
    "click.core.Parameter.handle_parse_result"
  ],
  "click.core.Group.add_command": [
    "flask.cli.FlaskGroup._load_plugin_commands"
  ],
  "click.core.Group.get_command": [
    "Ovr{click.core.Group.get_command}",
    "flask.cli.FlaskGroup.get_command"
  ],
  "click.core.Group.list_commands": [
    "Ovr{click.core.Group.list_commands}",
    "flask.cli.FlaskGroup.list_commands"
  ],
  "click.core.MultiCommand.collect_usage_pieces": [
    "Ovr{click.core.MultiCommand.collect_usage_pieces}"
  ],
  "click.core.MultiCommand.format_commands": [
    "click.core.MultiCommand.format_options"
  ],
  "click.core.MultiCommand.format_options": [
    "Ovr{click.core.MultiCommand.format_options}"
  ],
  "click.core.MultiCommand.get_command": [
    "Ovr{click.core.MultiCommand.get_command}"
  ],
  "click.core.MultiCommand.invoke": [
    "Ovr{click.core.MultiCommand.invoke}"
  ],
  "click.core.MultiCommand.list_commands": [
    "Ovr{click.core.MultiCommand.list_commands}"
  ],
  "click.core.MultiCommand.parse_args": [
    "Ovr{click.core.MultiCommand.parse_args}",
    "flask.cli.FlaskGroup.parse_args"
  ],
  "click.core.MultiCommand.resolve_command": [
    "click.core.MultiCommand.invoke",
    "click.shell_completion._resolve_context"
  ],
  "click.core.MultiCommand.shell_complete": [
    "Ovr{click.core.MultiCommand.shell_complete}"
  ],
  "click.core.Option.__init__": [
    "click.core.Command.get_help_option"
  ],
  "click.core.Option._parse_decls": [
    "Ovr{click.core.Option._parse_decls}"
  ],
  "click.core.Option.add_to_parser": [
    "Ovr{click.core.Option.add_to_parser}"
  ],
  "click.core.Option.consume_value": [
    "Ovr{click.core.Option.consume_value}"
  ],
  "click.core.Option.get_default": [
    "Ovr{click.core.Option.get_default}",
    "click.core.Option.get_help_record",
    "click.core.Option.prompt_for_value"
  ],
  "click.core.Option.get_help_record": [
    "Ovr{click.core.Option.get_help_record}"
  ],
  "click.core.Option.prompt_for_value": [
    "click.core.Option.consume_value"
  ],
  "click.core.Option.resolve_envvar_value": [
    "Ovr{click.core.Option.resolve_envvar_value}",
    "click.core.Option.value_from_envvar"
  ],
  "click.core.Option.value_from_envvar": [
    "Ovr{click.core.Option.value_from_envvar}"
  ],
  "click.core.Parameter.__init__": [
    "click.core.Option.__init__"
  ],
  "click.core.Parameter._parse_decls": [
    "Ovr{click.core.Parameter._parse_decls}"
  ],
  "click.core.Parameter.add_to_parser": [
    "Ovr{click.core.Parameter.add_to_parser}"
  ],
  "click.core.Parameter.consume_value": [
    "Ovr{click.core.Parameter.consume_value}",
    "click.core.Option.consume_value"
  ],
  "click.core.Parameter.get_default": [
    "Ovr{click.core.Parameter.get_default}",
    "click.core.Option.get_default"
  ],
  "click.core.Parameter.get_error_hint": [
    "Ovr{click.core.Parameter.get_error_hint}"
  ],
  "click.core.Parameter.get_help_record": [
    "Ovr{click.core.Parameter.get_help_record}"
  ],
  "click.core.Parameter.get_usage_pieces": [
    "Ovr{click.core.Parameter.get_usage_pieces}"
  ],
  "click.core.Parameter.handle_parse_result": [
    "click.core.Command.parse_args",
    "flask.cli.FlaskGroup.parse_args"
  ],
  "click.core.Parameter.human_readable_name": [
    "Ovr{click.core.Parameter.human_readable_name}"
  ],
  "click.core.Parameter.make_metavar": [
    "click.core.Option.get_help_record._write_opts"
  ],
  "click.core.Parameter.process_value": [
    "click.core.Option.prompt_for_value",
    "click.core.Parameter.handle_parse_result"
  ],
  "click.core.Parameter.resolve_envvar_value": [
    "Ovr{click.core.Parameter.resolve_envvar_value}",
    "click.core.Option.resolve_envvar_value"
  ],
  "click.core.Parameter.shell_complete": [
    "click.shell_completion.ShellComplete.get_completions"
  ],
  "click.core.Parameter.type_cast_value": [
    "click.core.Parameter.process_value"
  ],
  "click.core.Parameter.value_from_envvar": [
    "Ovr{click.core.Parameter.value_from_envvar}"
  ],
  "click.core.Parameter.value_is_missing": [
    "click.core.Parameter.process_value"
  ],
  "click.exceptions.BadOptionUsage.__init__": [
    "click.parser.OptionParser._get_value_from_state",
    "click.parser.OptionParser._match_long_opt"
  ],
  "click.exceptions.BadParameter.__init__": [
    "click.core.Parameter.type_cast_value.check_iter",
    "click.core.Parameter.type_cast_value.convert",
    "click.exceptions.MissingParameter.__init__",
    "flask.cli.CertParamType.convert"
  ],
  "click.exceptions.BadParameter.format_message": [
    "Ovr{click.exceptions.BadParameter.format_message}"
  ],
  "click.exceptions.ClickException.__init__": [
    "click.exceptions.UsageError.__init__"
  ],
  "click.exceptions.ClickException.format_message": [
    "Ovr{click.exceptions.ClickException.format_message}",
    "click.exceptions.UsageError.show",
    "flask.cli.FlaskGroup.get_command",
    "flask.cli.FlaskGroup.list_commands"
  ],
  "click.exceptions.ClickException.show": [
    "Ovr{click.exceptions.ClickException.show}"
  ],
  "click.exceptions.FileError.format_message": [
    "Ovr{click.exceptions.FileError.format_message}"
  ],
  "click.exceptions.MissingParameter.__init__": [
    "click.core.Parameter.process_value"
  ],
  "click.exceptions.MissingParameter.format_message": [
    "Ovr{click.exceptions.MissingParameter.format_message}"
  ],
  "click.exceptions.NoSuchOption.__init__": [
    "click.parser.OptionParser._match_long_opt",
    "click.parser.OptionParser._match_short_opt"
  ],
  "click.exceptions.NoSuchOption.format_message": [
    "Ovr{click.exceptions.NoSuchOption.format_message}",
    "click.exceptions.UsageError.show"
  ],
  "click.exceptions.UsageError.__init__": [
    "click.exceptions.BadOptionUsage.__init__",
    "click.exceptions.BadParameter.__init__",
    "click.exceptions.NoSuchOption.__init__",
    "click.parser.Argument.process"
  ],
  "click.exceptions.UsageError.show": [
    "Ovr{click.exceptions.UsageError.show}"
  ],
  "click.formatting.HelpFormatter.__init__": [
    "click.core.Context.make_formatter"
  ],
  "click.formatting.HelpFormatter.dedent": [
    "click.formatting.HelpFormatter.indentation",
    "click.formatting.HelpFormatter.section"
  ],
  "click.formatting.HelpFormatter.getvalue": [
    "click.core.Command.get_help",
    "click.core.Command.get_usage"
  ],
  "click.formatting.HelpFormatter.indent": [
    "click.formatting.HelpFormatter.indentation",
    "click.formatting.HelpFormatter.section"
  ],
  "click.formatting.HelpFormatter.indentation": [
    "click.core.Command.format_epilog",
    "click.core.Command.format_help_text"
  ],
  "click.formatting.HelpFormatter.section": [
    "click.core.Command.format_options",
    "click.core.MultiCommand.format_commands"
  ],
  "click.formatting.HelpFormatter.write": [
    "click.formatting.HelpFormatter.write_dl",
    "click.formatting.HelpFormatter.write_heading",
    "click.formatting.HelpFormatter.write_paragraph",
    "click.formatting.HelpFormatter.write_text",
    "click.formatting.HelpFormatter.write_usage"
  ],
  "click.formatting.HelpFormatter.write_dl": [
    "click.core.Command.format_options",
    "click.core.MultiCommand.format_commands"
  ],
  "click.formatting.HelpFormatter.write_heading": [
    "click.formatting.HelpFormatter.section"
  ],
  "click.formatting.HelpFormatter.write_paragraph": [
    "click.core.Command.format_epilog",
    "click.core.Command.format_help_text",
    "click.formatting.HelpFormatter.section"
  ],
  "click.formatting.HelpFormatter.write_text": [
    "click.core.Command.format_epilog",
    "click.core.Command.format_help_text"
  ],
  "click.formatting.HelpFormatter.write_usage": [
    "click.core.Command.format_usage"
  ],
  "click.parser.Argument.__init__": [
    "click.parser.OptionParser.add_argument"
  ],
  "click.parser.Argument.process": [
    "click.parser.OptionParser._process_args_for_args"
  ],
  "click.parser.Option.__init__": [
    "click.parser.OptionParser.add_option"
  ],
  "click.parser.Option.process": [
    "click.parser.OptionParser._match_long_opt",
    "click.parser.OptionParser._match_short_opt"
  ],
  "click.parser.Option.takes_value": [
    "click.parser.OptionParser._match_long_opt",
    "click.parser.OptionParser._match_short_opt"
  ],
  "click.parser.OptionParser.__init__": [
    "click.core.Command.make_parser"
  ],
  "click.parser.OptionParser._get_value_from_state": [
    "click.parser.OptionParser._match_long_opt",
    "click.parser.OptionParser._match_short_opt"
  ],
  "click.parser.OptionParser._match_long_opt": [
    "click.parser.OptionParser._process_opts"
  ],
  "click.parser.OptionParser._match_short_opt": [
    "click.parser.OptionParser._process_opts"
  ],
  "click.parser.OptionParser._process_args_for_args": [
    "click.parser.OptionParser.parse_args"
  ],
  "click.parser.OptionParser._process_args_for_options": [
    "click.parser.OptionParser.parse_args"
  ],
  "click.parser.OptionParser._process_opts": [
    "click.parser.OptionParser._process_args_for_options"
  ],
  "click.parser.OptionParser.add_argument": [
    "click.core.Argument.add_to_parser"
  ],
  "click.parser.OptionParser.add_option": [
    "click.core.Option.add_to_parser"
  ],
  "click.parser.OptionParser.parse_args": [
    "click.core.Command.parse_args"
  ],
  "click.parser.ParsingState.__init__": [
    "click.parser.OptionParser.parse_args"
  ],
  "click.shell_completion.BashComplete._check_version": [
    "click.shell_completion.BashComplete.source"
  ],
  "click.shell_completion.BashComplete.format_completion": [
    "Ovr{click.shell_completion.BashComplete.format_completion}"
  ],
  "click.shell_completion.BashComplete.get_completion_args": [
    "Ovr{click.shell_completion.BashComplete.get_completion_args}"
  ],
  "click.shell_completion.BashComplete.source": [
    "Ovr{click.shell_completion.BashComplete.source}"
  ],
  "click.shell_completion.CompletionItem.__init__": [
    "click.core.BaseCommand.shell_complete",
    "click.core.Command.shell_complete",
    "click.core.MultiCommand.shell_complete",
    "click.core.Parameter.shell_complete"
  ],
  "click.shell_completion.FishComplete.format_completion": [
    "Ovr{click.shell_completion.FishComplete.format_completion}"
  ],
  "click.shell_completion.FishComplete.get_completion_args": [
    "Ovr{click.shell_completion.FishComplete.get_completion_args}"
  ],
  "click.shell_completion.ShellComplete.__init__": [
    "click.shell_completion.shell_complete"
  ],
  "click.shell_completion.ShellComplete.complete": [
    "click.shell_completion.shell_complete"
  ],
  "click.shell_completion.ShellComplete.format_completion": [
    "Ovr{click.shell_completion.ShellComplete.format_completion}"
  ],
  "click.shell_completion.ShellComplete.func_name": [
    "click.shell_completion.ShellComplete.source_vars"
  ],
  "click.shell_completion.ShellComplete.get_completion_args": [
    "Ovr{click.shell_completion.ShellComplete.get_completion_args}"
  ],
  "click.shell_completion.ShellComplete.get_completions": [
    "click.shell_completion.ShellComplete.complete"
  ],
  "click.shell_completion.ShellComplete.source": [
    "Ovr{click.shell_completion.ShellComplete.source}",
    "click.shell_completion.BashComplete.source"
  ],
  "click.shell_completion.ShellComplete.source_vars": [
    "click.shell_completion.ShellComplete.source"
  ],
  "click.shell_completion.ZshComplete.format_completion": [
    "Ovr{click.shell_completion.ZshComplete.format_completion}"
  ],
  "click.shell_completion.ZshComplete.get_completion_args": [
    "Ovr{click.shell_completion.ZshComplete.get_completion_args}"
  ],
  "click.testing.EchoingStdin.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "click.types.BoolParamType.convert": [
    "Ovr{click.types.BoolParamType.convert}"
  ],
  "click.types.Choice.convert": [
    "Ovr{click.types.Choice.convert}"
  ],
  "click.types.DateTime._try_to_convert_date": [
    "click.types.DateTime.convert"
  ],
  "click.types.DateTime.convert": [
    "Ovr{click.types.DateTime.convert}"
  ],
  "click.types.File.convert": [
    "Ovr{click.types.File.convert}"
  ],
  "click.types.File.resolve_lazy_flag": [
    "click.types.File.convert"
  ],
  "click.types.FloatRange._clamp": [
    "Ovr{click.types.FloatRange._clamp}"
  ],
  "click.types.FuncParamType.__init__": [
    "click.types.convert_type"
  ],
  "click.types.FuncParamType.convert": [
    "Ovr{click.types.FuncParamType.convert}"
  ],
  "click.types.IntRange._clamp": [
    "Ovr{click.types.IntRange._clamp}"
  ],
  "click.types.ParamType.__call__": [
    "click.termui._build_prompt",
    "click.types.Tuple.__init__",
    "flask.cli.CertParamType.convert"
  ],
  "click.types.ParamType.convert": [
    "Ovr{click.types.ParamType.convert}"
  ],
  "click.types.ParamType.split_envvar_value": [
    "flask.cli.SeparatedPathType.convert"
  ],
  "click.types.Path.coerce_path_result": [
    "click.types.Path.convert"
  ],
  "click.types.Path.convert": [
    "Ovr{click.types.Path.convert}"
  ],
  "click.types.StringParamType.convert": [
    "Ovr{click.types.StringParamType.convert}"
  ],
  "click.types.Tuple.__init__": [
    "click.types.convert_type"
  ],
  "click.types.Tuple.convert": [
    "Ovr{click.types.Tuple.convert}"
  ],
  "click.types.UUIDParameterType.convert": [
    "Ovr{click.types.UUIDParameterType.convert}"
  ],
  "click.types.UnprocessedParamType.convert": [
    "Ovr{click.types.UnprocessedParamType.convert}"
  ],
  "click.types._NumberParamTypeBase.convert": [
    "Ovr{click.types._NumberParamTypeBase.convert}",
    "click.types._NumberRangeBase.convert"
  ],
  "click.types._NumberRangeBase.__init__": [
    "click.core.Option.__init__"
  ],
  "click.types._NumberRangeBase._clamp": [
    "Ovr{click.types._NumberRangeBase._clamp}"
  ],
  "click.types._NumberRangeBase._describe_range": [
    "click.core.Option.get_help_record"
  ],
  "click.types._NumberRangeBase.convert": [
    "Ovr{click.types._NumberRangeBase.convert}"
  ],
  "click.utils.KeepOpenFile.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "click.utils.LazyFile.__init__": [
    "click.types.File.convert"
  ],
  "click.utils.LazyFile.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "click.utils.PacifyFlushWrapper.__init__": [
    "click.core.BaseCommand.main"
  ],
  "codecs.StreamReaderWriter.__enter__": [
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel"
  ],
  "codecs.StreamReaderWriter.__iter__": [
    "Ovr{codecs.StreamReaderWriter.__iter__}"
  ],
  "codecs.StreamReaderWriter.__next__": [
    "Ovr{codecs.StreamReaderWriter.__next__}"
  ],
  "codecs.StreamReaderWriter.close": [
    "Ovr{codecs.StreamReaderWriter.close}"
  ],
  "codecs.StreamReaderWriter.fileno": [
    "click._winconsole._get_windows_console_stream",
    "click._winconsole._is_console"
  ],
  "codecs.StreamReaderWriter.flush": [
    "Ovr{codecs.StreamReaderWriter.flush}"
  ],
  "codecs.StreamReaderWriter.isatty": [
    "Ovr{codecs.StreamReaderWriter.isatty}"
  ],
  "codecs.StreamReaderWriter.read": [
    "Ovr{codecs.StreamReaderWriter.read}",
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel"
  ],
  "codecs.StreamReaderWriter.write": [
    "Ovr{codecs.StreamReaderWriter.write}"
  ],
  "codecs.StreamRecoder.__iter__": [
    "Ovr{codecs.StreamRecoder.__iter__}"
  ],
  "codecs.StreamRecoder.__next__": [
    "Ovr{codecs.StreamRecoder.__next__}"
  ],
  "codecs.StreamRecoder.close": [
    "Ovr{codecs.StreamRecoder.close}"
  ],
  "codecs.StreamRecoder.flush": [
    "Ovr{codecs.StreamRecoder.flush}",
    "click.utils.echo"
  ],
  "codecs.StreamRecoder.isatty": [
    "Ovr{codecs.StreamRecoder.isatty}"
  ],
  "codecs.StreamRecoder.read": [
    "Ovr{codecs.StreamRecoder.read}"
  ],
  "codecs.StreamRecoder.write": [
    "Ovr{codecs.StreamRecoder.write}",
    "click.utils.echo"
  ],
  "collections.ChainMap.__init__": [
    "jinja2.environment.Environment.make_globals"
  ],
  "collections.ChainMap.__iter__": [
    "Ovr{collections.ChainMap.__iter__}"
  ],
  "collections.ChainMap.__setitem__": [
    "Ovr{collections.ChainMap.__setitem__}"
  ],
  "collections.Counter.__init__": [
    "examples.model_selection.plot_precision_recall.$toplevel",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.impute._base._most_frequent",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.from_predictions",
    "sklearn.metrics._scorer._MultimetricScorer._use_cache",
    "sklearn.model_selection._validation._warn_or_raise_about_fit_failures",
    "sklearn.utils._encode._NaNCounter.__init__"
  ],
  "collections.Counter.copy": [
    "Ovr{collections.Counter.copy}"
  ],
  "collections.Counter.most_common": [
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.impute._base._most_frequent"
  ],
  "collections.Counter.update": [
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "importlib_metadata.DistributionFinder.Context.__init__",
    "importlib_metadata.EntryPoint.__init__",
    "jinja2.nodes.args_as_const",
    "pip._vendor.requests.cookies.create_cookie",
    "sklearn.base.BaseEstimator.__setstate__",
    "sklearn.base.BaseEstimator._get_tags",
    "sklearn.base.BaseEstimator.get_params",
    "sklearn.calibration.CalibrationDisplay.plot",
    "sklearn.gaussian_process.kernels.Exponentiation.get_params",
    "sklearn.gaussian_process.kernels.KernelOperator.get_params",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.plot",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.metrics.pairwise.pairwise_distances_chunked",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f"
  ],
  "collections.OrderedDict.copy": [
    "Ovr{collections.OrderedDict.copy}"
  ],
  "collections.OrderedDict.items": [
    "Ovr{collections.OrderedDict.items}",
    "examples.ensemble.plot_ensemble_oob.$toplevel",
    "sklearn.utils._param_validation.validate_params.decorator.wrapper",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._pprint_estimator"
  ],
  "collections.OrderedDict.keys": [
    "Ovr{collections.OrderedDict.keys}",
    "sklearn.datasets._arff_parser._liac_arff_parser"
  ],
  "collections.OrderedDict.setdefault": [
    "Ovr{collections.OrderedDict.setdefault}"
  ],
  "collections.OrderedDict.values": [
    "Ovr{collections.OrderedDict.values}"
  ],
  "collections.UserDict.__iter__": [
    "Ovr{collections.UserDict.__iter__}"
  ],
  "collections.UserDict.__setitem__": [
    "Ovr{collections.UserDict.__setitem__}"
  ],
  "collections.UserList.__eq__": [
    "click.parser.Argument.process"
  ],
  "collections.UserList.__getitem__": [
    "Ovr{collections.UserList.__getitem__}"
  ],
  "collections.UserList.index": [
    "Ovr{collections.UserList.index}"
  ],
  "collections.UserString.__getitem__": [
    "Ovr{collections.UserString.__getitem__}"
  ],
  "collections.UserString.__iter__": [
    "Ovr{collections.UserString.__iter__}"
  ],
  "collections.UserString.index": [
    "Ovr{collections.UserString.index}"
  ],
  "collections.defaultdict.__init__": [
    "benchmarks.bench_plot_fastkmeans.compute_bench",
    "benchmarks.bench_plot_fastkmeans.compute_bench_2",
    "benchmarks.bench_plot_hierarchical.compute_bench",
    "benchmarks.bench_plot_incremental_pca.fixed_batch_size_comparison",
    "benchmarks.bench_plot_incremental_pca.variable_batch_size_comparison",
    "benchmarks.bench_plot_lasso_path.compute_bench",
    "benchmarks.bench_plot_randomized_svd.bench_a",
    "benchmarks.bench_plot_randomized_svd.bench_b",
    "benchmarks.bench_plot_randomized_svd.bench_c",
    "benchmarks.bench_plot_svd.compute_bench",
    "benchmarks.bench_random_projections.$toplevel",
    "examples.applications.plot_prediction_latency.n_feature_influence",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.scoring_on_bootstrap",
    "examples.text.plot_document_clustering.fit_and_evaluate",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "examples.text.plot_hashing_vs_dict_vectorizer.token_freqs",
    "maint_tools.sort_whats_new.$toplevel",
    "sklearn._min_dependencies.$toplevel",
    "sklearn.base.BaseEstimator.set_params",
    "sklearn.cluster._mean_shift.get_bin_seeds",
    "sklearn.feature_extraction.text.CountVectorizer._count_vocab",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.model_selection._search.BaseSearchCV.fit",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.pipeline._name_estimators",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit_transform",
    "sklearn.utils.tests.test_shortest_path.test_shortest_path"
  ],
  "collections.defaultdict.copy": [
    "Ovr{collections.defaultdict.copy}"
  ],
  "collections.deque.__getitem__": [
    "Ovr{collections.deque.__getitem__}"
  ],
  "collections.deque.__init__": [
    "click.parser._unpack_args",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._FifoCache.__init__",
    "jinja2.lexer.TokenStream.__init__",
    "jinja2.nodes.Node.set_ctx",
    "jinja2.nodes.Node.set_environment",
    "jinja2.nodes.Node.set_lineno",
    "jinja2.utils.LRUCache.__init__"
  ],
  "collections.deque.extend": [
    "jinja2.nodes.Node.set_ctx",
    "jinja2.nodes.Node.set_environment",
    "jinja2.nodes.Node.set_lineno"
  ],
  "collections.deque.index": [
    "Ovr{collections.deque.index}"
  ],
  "collections.deque.pop": [
    "click.parser._unpack_args._fetch"
  ],
  "collections.deque.popleft": [
    "click.parser._unpack_args._fetch",
    "jinja2.lexer.TokenStream.__next__",
    "jinja2.nodes.Node.set_ctx",
    "jinja2.nodes.Node.set_environment",
    "jinja2.nodes.Node.set_lineno"
  ],
  "colorama.ansitowin32.AnsiToWin32.__init__": [
    "click._compat.auto_wrap_for_ansi"
  ],
  "complex.__mul__": [
    "Ovr{complex.__mul__}"
  ],
  "concurrent.futures._base.Future.set_result": [
    "pip._vendor.tenacity.RetryCallState.set_result"
  ],
  "configparser.ConfigParser.get": [
    "Ovr{configparser.ConfigParser.get}"
  ],
  "configparser.ConverterMapping.__iter__": [
    "Ovr{configparser.ConverterMapping.__iter__}"
  ],
  "configparser.ConverterMapping.__setitem__": [
    "Ovr{configparser.ConverterMapping.__setitem__}"
  ],
  "configparser.RawConfigParser.__iter__": [
    "Ovr{configparser.RawConfigParser.__iter__}"
  ],
  "configparser.RawConfigParser.__setitem__": [
    "Ovr{configparser.RawConfigParser.__setitem__}"
  ],
  "configparser.RawConfigParser.get": [
    "Ovr{configparser.RawConfigParser.get}"
  ],
  "configparser.RawConfigParser.items": [
    "Ovr{configparser.RawConfigParser.items}"
  ],
  "configparser.SectionProxy.__iter__": [
    "Ovr{configparser.SectionProxy.__iter__}"
  ],
  "configparser.SectionProxy.__setitem__": [
    "Ovr{configparser.SectionProxy.__setitem__}"
  ],
  "configparser.SectionProxy.get": [
    "Ovr{configparser.SectionProxy.get}"
  ],
  "contextlib.AbstractContextManager.__enter__": [
    "click.core.BaseCommand.make_context",
    "click.core.Command.format_epilog",
    "click.core.Command.format_help_text",
    "click.core.Command.format_options",
    "click.core.Context.invoke",
    "click.core.MultiCommand.format_commands",
    "click.core.Parameter.handle_parse_result",
    "click.formatting.wrap_text",
    "doc.sphinxext.allow_nan_estimators.AllowNanEstimators.make_paragraph_for_estimator_type",
    "sklearn._build_utils.cythonize_extensions",
    "sklearn.conftest.pytest_collection_modifyitems",
    "sklearn.datasets._openml._get_json_content_from_openml_api._load_json",
    "sklearn.datasets._openml._load_arff_response",
    "sklearn.datasets._openml._load_arff_response._open_url_and_load_gzip_file",
    "sklearn.datasets._openml._open_openml_url",
    "sklearn.datasets._svmlight_format_io._open_and_load",
    "sklearn.model_selection._validation._score",
    "sklearn.utils._encode._get_counts",
    "sklearn.utils._estimator_html_repr.estimator_html_repr",
    "sklearn.utils._is_pandas_na",
    "sklearn.utils._mask._get_dense_mask",
    "sklearn.utils.metaestimators._BaseComposition._set_params",
    "sklearn.utils.validation.check_array"
  ],
  "contextlib.ExitStack.callback": [
    "click.core.Context.call_on_close"
  ],
  "contextlib.closing.__init__": [
    "sklearn.datasets._openml._get_json_content_from_openml_api._load_json",
    "sklearn.datasets._openml._load_arff_response",
    "sklearn.datasets._openml._load_arff_response._open_url_and_load_gzip_file",
    "sklearn.datasets._openml._open_openml_url",
    "sklearn.datasets._svmlight_format_io._open_and_load",
    "sklearn.utils._estimator_html_repr.estimator_html_repr"
  ],
  "contextlib.suppress.__init__": [
    "doc.sphinxext.allow_nan_estimators.AllowNanEstimators.make_paragraph_for_estimator_type",
    "sklearn._build_utils.cythonize_extensions",
    "sklearn.conftest.pytest_collection_modifyitems",
    "sklearn.model_selection._validation._score",
    "sklearn.utils._encode._get_counts",
    "sklearn.utils._is_pandas_na",
    "sklearn.utils._mask._get_dense_mask",
    "sklearn.utils.metaestimators._BaseComposition._set_params",
    "sklearn.utils.validation.check_array"
  ],
  "contextvars.Context.__iter__": [
    "Ovr{contextvars.Context.__iter__}"
  ],
  "contextvars.Context.get": [
    "Ovr{contextvars.Context.get}"
  ],
  "contextvars.ContextVar.get": [
    "flask.ctx._AppCtxGlobals.__repr__"
  ],
  "croniter.croniter.croniter.__iter__": [
    "Ovr{croniter.croniter.croniter.__iter__}"
  ],
  "crontab.CronSlices.__eq__": [
    "pip._vendor.pyparsing.ParserElement.setParseAction",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.multioutput._BaseChain.fit"
  ],
  "csv.DictReader.__iter__": [
    "Ovr{csv.DictReader.__iter__}"
  ],
  "csv.DictReader.__next__": [
    "Ovr{csv.DictReader.__next__}"
  ],
  "ctypes._SimpleCData.__init__": [
    "click._winconsole._is_console"
  ],
  "datetime.date.month": [
    "examples.gaussian_process.plot_gpr_co2.$toplevel"
  ],
  "datetime.date.strftime": [
    "maint_tools.update_tracking_issue.$toplevel"
  ],
  "datetime.date.year": [
    "doc.conf.$toplevel",
    "examples.gaussian_process.plot_gpr_co2.$toplevel"
  ],
  "datetime.datetime.__sub__": [
    "benchmarks.bench_glm.$toplevel",
    "benchmarks.bench_isotonic.bench_isotonic_regression",
    "benchmarks.bench_random_projections.bench_scikit_transformer",
    "benchmarks.bench_sample_without_replacement.bench_sample",
    "benchmarks.bench_tree.bench_scikit_tree_classifier",
    "benchmarks.bench_tree.bench_scikit_tree_regressor"
  ],
  "datetime.datetime.date": [
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.convertToDate.cvt_fn"
  ],
  "datetime.datetime.isoformat": [
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects"
  ],
  "datetime.datetime.now": [
    "benchmarks.bench_glm.$toplevel",
    "benchmarks.bench_isotonic.bench_isotonic_regression",
    "benchmarks.bench_random_projections.bench_scikit_transformer",
    "benchmarks.bench_sample_without_replacement.bench_sample",
    "benchmarks.bench_tree.bench_scikit_tree_classifier",
    "benchmarks.bench_tree.bench_scikit_tree_regressor",
    "doc.conf.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects",
    "examples.gaussian_process.plot_gpr_co2.$toplevel",
    "maint_tools.update_tracking_issue.$toplevel"
  ],
  "datetime.datetime.strptime": [
    "click.types.DateTime._try_to_convert_date",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.convertToDate.cvt_fn",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.convertToDatetime.cvt_fn"
  ],
  "datetime.timedelta.microseconds": [
    "benchmarks.bench_tree.bench_scikit_tree_classifier",
    "benchmarks.bench_tree.bench_scikit_tree_regressor"
  ],
  "datetime.timedelta.seconds": [
    "benchmarks.bench_tree.bench_scikit_tree_classifier",
    "benchmarks.bench_tree.bench_scikit_tree_regressor"
  ],
  "datetime.timedelta.total_seconds": [
    "benchmarks.bench_glm.$toplevel",
    "benchmarks.bench_isotonic.bench_isotonic_regression"
  ],
  "dbm._Database.__iter__": [
    "Ovr{dbm._Database.__iter__}"
  ],
  "dbm._Database.__setitem__": [
    "Ovr{dbm._Database.__setitem__}"
  ],
  "dbm.dumb._Database.__iter__": [
    "Ovr{dbm.dumb._Database.__iter__}"
  ],
  "dbm.dumb._Database.__setitem__": [
    "Ovr{dbm.dumb._Database.__setitem__}"
  ],
  "dict.__getitem__": [
    "Ovr{dict.__getitem__}",
    "benchmarks.bench_plot_fastkmeans.compute_bench",
    "benchmarks.bench_plot_fastkmeans.compute_bench_2",
    "benchmarks.bench_plot_hierarchical.compute_bench",
    "benchmarks.bench_plot_incremental_pca.fixed_batch_size_comparison",
    "benchmarks.bench_plot_incremental_pca.variable_batch_size_comparison",
    "benchmarks.bench_plot_lasso_path.compute_bench",
    "benchmarks.bench_plot_randomized_svd.bench_a",
    "benchmarks.bench_plot_randomized_svd.bench_b",
    "benchmarks.bench_plot_randomized_svd.bench_c",
    "benchmarks.bench_plot_svd.compute_bench",
    "benchmarks.bench_random_projections.$toplevel",
    "click.utils._detect_program_name",
    "doc.sphinxext.github_link._linkcode_resolve",
    "doc.tutorial.machine_learning_map.pyparsing.White.__init__",
    "examples.applications.plot_prediction_latency.n_feature_influence",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.ensemble.plot_ensemble_oob.$toplevel",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.scoring_on_bootstrap",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.text.plot_document_clustering.fit_and_evaluate",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "examples.text.plot_hashing_vs_dict_vectorizer.token_freqs",
    "flask.sessions.SecureCookieSession.__getitem__",
    "maint_tools.sort_whats_new.$toplevel",
    "pip._vendor.distlib.compat.ConvertingDict.__getitem__",
    "pip._vendor.distlib.compat.OrderedDict.items",
    "pip._vendor.distlib.compat.OrderedDict.pop",
    "pip._vendor.distlib.compat.OrderedDict.setdefault",
    "pip._vendor.distlib.compat.OrderedDict.update",
    "pip._vendor.distlib.compat.OrderedDict.values",
    "setup.setup_package",
    "sklearn.base.BaseEstimator.set_params",
    "sklearn.cluster._mean_shift.get_bin_seeds",
    "sklearn.ensemble._gb.BaseGradientBoosting._check_params",
    "sklearn.kernel_approximation.Nystroem._get_kernel_params",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.from_predictions",
    "sklearn.metrics._scorer._MultimetricScorer._use_cache",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._backprop",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._forward_pass",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._forward_pass_fast",
    "sklearn.pipeline._name_estimators",
    "sklearn.utils._bunch.Bunch.__getitem__",
    "sklearn.utils._encode._get_counts",
    "sklearn.utils._encode._map_to_integer",
    "sklearn.utils._testing._IgnoreWarnings.__init__",
    "sklearn.utils._testing._IgnoreWarnings.__repr__",
    "sklearn.utils.tests.test_estimator_checks.run_tests_without_pytest",
    "sklearn.utils.tests.test_shortest_path.test_shortest_path",
    "sklearn.utils.validation._is_pandas_df",
    "traitlets.config.loader.Config.__getitem__",
    "traitlets.config.loader._DefaultOptionDict.__getitem__",
    "werkzeug.utils.import_string"
  ],
  "dict.__init__": [
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_plot_omp_lars.compute_bench",
    "benchmarks.bench_plot_randomized_svd.scatter_time_vs_s",
    "benchmarks.bench_saga.exp",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "build_tools.generate_authors_table.get_profile",
    "build_tools.get_comment.get_versions",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asDict",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asXML",
    "examples.applications.plot_outlier_detection_wine.$toplevel",
    "examples.applications.plot_prediction_latency.benchmark_throughputs",
    "examples.applications.plot_species_distribution_modeling.create_species_bunch",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.cluster.plot_agglomerative_clustering.$toplevel",
    "examples.cluster.plot_cluster_iris.$toplevel",
    "examples.compose.plot_digits_pipe.$toplevel",
    "examples.compose.plot_feature_union.$toplevel",
    "examples.decomposition.plot_pca_iris.$toplevel",
    "examples.ensemble.plot_ensemble_oob.$toplevel",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "examples.linear_model.plot_ols_ridge_variance.$toplevel",
    "examples.linear_model.plot_robust_fit.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.neighbors.plot_digits_kde_sampling.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "examples.svm.plot_rbf_parameters.$toplevel",
    "graphql.pyutils.default_ordered_dict.DefaultOrderedDict.__init__",
    "jinja2.environment.Template.render",
    "jinja2.environment.Template.render_async",
    "jinja2.nativetypes.NativeTemplate.render",
    "jinja2.nativetypes.NativeTemplate.render_async",
    "jinja2.nodes.Dict.as_const",
    "jinja2.nodes.args_as_const",
    "jinja2.runtime.Context.get_all",
    "jinja2.runtime.new_context",
    "pip._vendor.requests.structures.CaseInsensitiveDict.__repr__",
    "pip._vendor.tenacity.BaseRetrying.__repr__",
    "pip._vendor.urllib3._collections.HTTPHeaderDict.__repr__",
    "setup.setup_package",
    "sklearn.base.BaseEstimator.__getstate__",
    "sklearn.base.BaseEstimator.get_params",
    "sklearn.cluster._agglomerative.$toplevel",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.fit",
    "sklearn.cluster._optics._set_reach_dist",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._openml._load_arff_response",
    "sklearn.datasets._species_distributions._load_coverage",
    "sklearn.datasets._species_distributions.fetch_species_distributions",
    "sklearn.datasets._twenty_newsgroups._download_20newsgroups",
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble.named_estimators",
    "sklearn.feature_extraction.text.CountVectorizer._count_vocab",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.gaussian_process.kernels.CompoundKernel.get_params",
    "sklearn.gaussian_process.kernels.Exponentiation.get_params",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.gaussian_process.kernels.KernelOperator.get_params",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_two_way_partial_dependence",
    "sklearn.isotonic.IsotonicRegression.fit",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.manifold._t_sne.TSNE._tsne",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.plot",
    "sklearn.metrics._scorer.$toplevel",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.model_selection._search.BaseSearchCV.fit",
    "sklearn.model_selection._search.ParameterGrid.__iter__",
    "sklearn.model_selection._search.ParameterSampler.__iter__",
    "sklearn.model_selection._split._build_repr",
    "sklearn.multiclass._ConstantPredictor.fit",
    "sklearn.neighbors._base.$toplevel",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit",
    "sklearn.pipeline.FeatureUnion.named_transformers",
    "sklearn.pipeline.Pipeline.named_steps",
    "sklearn.preprocessing._label.MultiLabelBinarizer._build_cache",
    "sklearn.preprocessing._polynomial.SplineTransformer.transform",
    "sklearn.tree._classes.BaseDecisionTree._compute_missing_values_in_feature_mask",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._export._MPLTreeExporter.__init__",
    "sklearn.tree._export._MPLTreeExporter.recurse",
    "sklearn.utils._bunch.Bunch.__init__",
    "sklearn.utils._encode._nandict.__init__",
    "sklearn.utils._metadata_requests.MetadataRequest._serialize",
    "sklearn.utils._metadata_requests.MetadataRouter.__init__",
    "sklearn.utils._metadata_requests.MetadataRouter._serialize",
    "sklearn.utils._metadata_requests.MethodMetadataRequest.__init__",
    "sklearn.utils._metadata_requests.MethodMetadataRequest._route_params",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils._metadata_requests.process_routing",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._pprint_estimator",
    "sklearn.utils._show_versions._get_sys_info",
    "sklearn.utils.estimator_checks.check_estimators_pickle",
    "sklearn.utils.multiclass.is_multilabel",
    "sklearn.utils.multiclass.type_of_target",
    "traitlets.config.loader.Config.__init__",
    "traitlets.traitlets.HasTraits._notify_observers",
    "traitlets.utils.getargspec.getargspec"
  ],
  "dict.__iter__": [
    "Ovr{dict.__iter__}",
    "doc.conf.generate_min_dependency_table",
    "traitlets.config.loader.Config._ensure_subconfig"
  ],
  "dict.__new__": [
    "benchmarks.bench_plot_fastkmeans.compute_bench",
    "benchmarks.bench_plot_fastkmeans.compute_bench_2",
    "benchmarks.bench_plot_hierarchical.compute_bench",
    "benchmarks.bench_plot_incremental_pca.fixed_batch_size_comparison",
    "benchmarks.bench_plot_incremental_pca.variable_batch_size_comparison",
    "benchmarks.bench_plot_lasso_path.compute_bench",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_plot_omp_lars.compute_bench",
    "benchmarks.bench_plot_randomized_svd.bench_a",
    "benchmarks.bench_plot_randomized_svd.bench_b",
    "benchmarks.bench_plot_randomized_svd.bench_c",
    "benchmarks.bench_plot_randomized_svd.scatter_time_vs_s",
    "benchmarks.bench_plot_svd.compute_bench",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_saga.exp",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "build_tools.generate_authors_table.get_profile",
    "build_tools.get_comment.get_versions",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asDict",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asXML",
    "examples.applications.plot_outlier_detection_wine.$toplevel",
    "examples.applications.plot_prediction_latency.benchmark_throughputs",
    "examples.applications.plot_prediction_latency.n_feature_influence",
    "examples.applications.plot_species_distribution_modeling.create_species_bunch",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.cluster.plot_agglomerative_clustering.$toplevel",
    "examples.cluster.plot_cluster_iris.$toplevel",
    "examples.compose.plot_digits_pipe.$toplevel",
    "examples.compose.plot_feature_union.$toplevel",
    "examples.decomposition.plot_pca_iris.$toplevel",
    "examples.ensemble.plot_ensemble_oob.$toplevel",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "examples.linear_model.plot_ols_ridge_variance.$toplevel",
    "examples.linear_model.plot_robust_fit.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.scoring_on_bootstrap",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.neighbors.plot_digits_kde_sampling.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "examples.svm.plot_rbf_parameters.$toplevel",
    "examples.text.plot_document_clustering.fit_and_evaluate",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "examples.text.plot_hashing_vs_dict_vectorizer.token_freqs",
    "graphql.pyutils.default_ordered_dict.DefaultOrderedDict.__copy__",
    "jinja2.environment.Template.render",
    "jinja2.environment.Template.render_async",
    "jinja2.nativetypes.NativeTemplate.render",
    "jinja2.nativetypes.NativeTemplate.render_async",
    "jinja2.nodes.Dict.as_const",
    "jinja2.nodes.args_as_const",
    "jinja2.runtime.Context.get_all",
    "jinja2.runtime.new_context",
    "maint_tools.sort_whats_new.$toplevel",
    "pip._vendor.distlib.compat.OrderedDict.copy",
    "pip._vendor.requests.structures.CaseInsensitiveDict.__repr__",
    "pip._vendor.tenacity.BaseRetrying.__repr__",
    "pip._vendor.urllib3._collections.HTTPHeaderDict.__repr__",
    "setup.setup_package",
    "sklearn._min_dependencies.$toplevel",
    "sklearn.base.BaseEstimator.__getstate__",
    "sklearn.base.BaseEstimator.get_params",
    "sklearn.base.BaseEstimator.set_params",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.cluster._agglomerative.$toplevel",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.fit",
    "sklearn.cluster._mean_shift.get_bin_seeds",
    "sklearn.cluster._optics._set_reach_dist",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.compose._column_transformer.ColumnTransformer.named_transformers_",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._base.load_breast_cancer",
    "sklearn.datasets._base.load_diabetes",
    "sklearn.datasets._base.load_digits",
    "sklearn.datasets._base.load_files",
    "sklearn.datasets._base.load_iris",
    "sklearn.datasets._base.load_linnerud",
    "sklearn.datasets._base.load_sample_images",
    "sklearn.datasets._base.load_wine",
    "sklearn.datasets._california_housing.fetch_california_housing",
    "sklearn.datasets._covtype.fetch_covtype",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._kddcup99.fetch_kddcup99",
    "sklearn.datasets._lfw.fetch_lfw_pairs",
    "sklearn.datasets._lfw.fetch_lfw_people",
    "sklearn.datasets._olivetti_faces.fetch_olivetti_faces",
    "sklearn.datasets._openml._download_data_to_bunch",
    "sklearn.datasets._openml._load_arff_response",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._species_distributions._load_coverage",
    "sklearn.datasets._species_distributions.fetch_species_distributions",
    "sklearn.datasets._twenty_newsgroups._download_20newsgroups",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized",
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble.named_estimators",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.ensemble._voting._BaseVoting.fit",
    "sklearn.feature_extraction.text.CountVectorizer._count_vocab",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.gaussian_process.kernels.CompoundKernel.get_params",
    "sklearn.gaussian_process.kernels.Exponentiation.get_params",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.gaussian_process.kernels.KernelOperator.get_params",
    "sklearn.impute._base._most_frequent",
    "sklearn.inspection._partial_dependence.partial_dependence",
    "sklearn.inspection._permutation_importance._create_importances_bunch",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_two_way_partial_dependence",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.isotonic.IsotonicRegression.fit",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.manifold._t_sne.TSNE._tsne",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.plot",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.from_predictions",
    "sklearn.metrics._scorer.$toplevel",
    "sklearn.metrics._scorer._MultimetricScorer.__call__",
    "sklearn.metrics._scorer._MultimetricScorer._use_cache",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.model_selection._search.BaseSearchCV.fit",
    "sklearn.model_selection._search.ParameterGrid.__iter__",
    "sklearn.model_selection._search.ParameterSampler.__iter__",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.model_selection._split._build_repr",
    "sklearn.model_selection._validation._warn_or_raise_about_fit_failures",
    "sklearn.multiclass._ConstantPredictor.fit",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.multioutput._MultiOutputEstimator.fit",
    "sklearn.multioutput._MultiOutputEstimator.partial_fit",
    "sklearn.neighbors._base.$toplevel",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit",
    "sklearn.pipeline.FeatureUnion.named_transformers",
    "sklearn.pipeline.Pipeline.named_steps",
    "sklearn.pipeline._name_estimators",
    "sklearn.preprocessing._label.MultiLabelBinarizer._build_cache",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit_transform",
    "sklearn.preprocessing._polynomial.SplineTransformer.transform",
    "sklearn.tree._classes.BaseDecisionTree._compute_missing_values_in_feature_mask",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._classes.BaseDecisionTree.cost_complexity_pruning_path",
    "sklearn.tree._export._MPLTreeExporter.__init__",
    "sklearn.tree._export._MPLTreeExporter.recurse",
    "sklearn.utils._encode._get_counts",
    "sklearn.utils._encode._map_to_integer",
    "sklearn.utils._metadata_requests.MetadataRequest._serialize",
    "sklearn.utils._metadata_requests.MetadataRouter.__init__",
    "sklearn.utils._metadata_requests.MetadataRouter._route_params",
    "sklearn.utils._metadata_requests.MetadataRouter._serialize",
    "sklearn.utils._metadata_requests.MetadataRouter.route_params",
    "sklearn.utils._metadata_requests.MethodMetadataRequest.__init__",
    "sklearn.utils._metadata_requests.MethodMetadataRequest._route_params",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils._metadata_requests.process_routing",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._pprint_estimator",
    "sklearn.utils._show_versions._get_sys_info",
    "sklearn.utils.estimator_checks.check_estimators_pickle",
    "sklearn.utils.multiclass.is_multilabel",
    "sklearn.utils.multiclass.type_of_target",
    "sklearn.utils.tests.test_shortest_path.test_shortest_path",
    "traitlets.config.loader.Config.__getitem__",
    "traitlets.config.loader.Config._ensure_subconfig",
    "traitlets.config.loader.Config.copy",
    "traitlets.traitlets.HasTraits._notify_observers",
    "traitlets.utils.getargspec.getargspec"
  ],
  "dict.__setitem__": [
    "Ovr{dict.__setitem__}",
    "examples.applications.plot_prediction_latency.n_feature_influence",
    "examples.applications.plot_species_distribution_modeling.create_species_bunch",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.text.plot_hashing_vs_dict_vectorizer.token_freqs",
    "pip._vendor.distlib.compat.ConvertingDict.__getitem__",
    "pip._vendor.distlib.compat.ConvertingDict.get",
    "sklearn.cluster._mean_shift.get_bin_seeds",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.ensemble._voting._BaseVoting.fit",
    "sklearn.inspection._partial_dependence.partial_dependence",
    "sklearn.pipeline._name_estimators",
    "sklearn.semi_supervised._label_propagation.LabelSpreading.$class_toplevel",
    "sklearn.utils._bunch.Bunch.__setattr__",
    "sklearn.utils._bunch.Bunch._set_deprecated",
    "sklearn.utils._metadata_requests.MetadataRouter.route_params",
    "sklearn.utils._metadata_requests.MethodMetadataRequest._route_params",
    "sklearn.utils.tests.test_estimator_checks.test_check_outlier_contamination",
    "traitlets.config.loader.Config.__getitem__",
    "traitlets.config.loader.Config.__setitem__"
  ],
  "dict.copy": [
    "Ovr{dict.copy}",
    "jinja2.environment.Environment.__init__",
    "traitlets.config.loader.Config.copy"
  ],
  "dict.fromkeys": [
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel"
  ],
  "dict.get": [
    "Ovr{dict.get}",
    "flask.sessions.SecureCookieSession.get",
    "pip._vendor.distlib.compat.ConvertingDict.get",
    "pip._vendor.html5lib._utils.MethodDispatcher.__getitem__",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit_transform"
  ],
  "dict.items": [
    "Ovr{dict.items}",
    "doc.conf.generate_min_dependency_substitutions",
    "doc.conf.generate_min_dependency_table",
    "examples.text.plot_document_clustering.fit_and_evaluate",
    "maint_tools.sort_whats_new.$toplevel",
    "sklearn.base.BaseEstimator.set_params",
    "sklearn.cluster._mean_shift.get_bin_seeds",
    "sklearn.impute._base._most_frequent",
    "sklearn.model_selection._validation._warn_or_raise_about_fit_failures",
    "sklearn.pipeline._name_estimators"
  ],
  "dict.keys": [
    "Ovr{dict.keys}",
    "sklearn.datasets.tests.test_olivetti_faces.test_olivetti_faces",
    "sklearn.feature_selection._univariate_selection.GenericUnivariateSelect.$class_toplevel",
    "sklearn.kernel_approximation.Nystroem.$class_toplevel",
    "sklearn.kernel_ridge.KernelRidge.$class_toplevel",
    "sklearn.neighbors._base.$toplevel",
    "sklearn.utils._bunch.Bunch.__dir__",
    "sklearn.utils._metadata_requests.MetadataRouter._route_params",
    "sklearn.utils.estimator_checks.check_estimator_get_tags_default_keys"
  ],
  "dict.pop": [
    "Ovr{dict.pop}",
    "sklearn.covariance._graph_lasso.BaseGraphicalLasso.$class_toplevel",
    "sklearn.cross_decomposition._pls.CCA.$class_toplevel",
    "sklearn.cross_decomposition._pls.PLSCanonical.$class_toplevel",
    "sklearn.cross_decomposition._pls.PLSRegression.$class_toplevel",
    "sklearn.ensemble._forest.ExtraTreesClassifier.$class_toplevel",
    "sklearn.ensemble._forest.ExtraTreesRegressor.$class_toplevel",
    "sklearn.ensemble._forest.RandomForestClassifier.$class_toplevel",
    "sklearn.ensemble._forest.RandomForestRegressor.$class_toplevel",
    "sklearn.ensemble._forest.RandomTreesEmbedding.$class_toplevel",
    "sklearn.ensemble._gb.BaseGradientBoosting.$class_toplevel",
    "sklearn.feature_selection._rfe.RFECV.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.Lasso.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNetCV.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.MultiTaskLasso.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.MultiTaskLassoCV.$class_toplevel",
    "sklearn.linear_model._least_angle.LarsCV.$class_toplevel",
    "sklearn.linear_model._least_angle.LassoLars.$class_toplevel",
    "sklearn.linear_model._least_angle.LassoLarsIC.$class_toplevel",
    "sklearn.linear_model._logistic.LogisticRegressionCV.$class_toplevel",
    "sklearn.linear_model._perceptron.Perceptron.$class_toplevel",
    "sklearn.linear_model._ridge.RidgeClassifierCV.$class_toplevel",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.$class_toplevel",
    "sklearn.neighbors._classification.KNeighborsClassifier.$class_toplevel",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.$class_toplevel",
    "sklearn.neighbors._graph.KNeighborsTransformer.$class_toplevel",
    "sklearn.neighbors._graph.RadiusNeighborsTransformer.$class_toplevel",
    "sklearn.neighbors._lof.LocalOutlierFactor.$class_toplevel",
    "sklearn.neighbors._regression.KNeighborsRegressor.$class_toplevel",
    "sklearn.neighbors._regression.RadiusNeighborsRegressor.$class_toplevel",
    "sklearn.semi_supervised._label_propagation.LabelPropagation.$class_toplevel",
    "sklearn.svm._base.BaseSVC.$class_toplevel",
    "sklearn.svm._classes.NuSVC.$class_toplevel",
    "sklearn.svm._classes.NuSVR.$class_toplevel",
    "sklearn.svm._classes.OneClassSVM.$class_toplevel",
    "sklearn.svm._classes.SVR.$class_toplevel"
  ],
  "dict.values": [
    "Ovr{dict.values}",
    "doc.conf.generate_min_dependency_table",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.from_predictions"
  ],
  "django.contrib.sessions.backends.base.SessionBase.items": [
    "Ovr{django.contrib.sessions.backends.base.SessionBase.items}"
  ],
  "django.contrib.sessions.backends.base.SessionBase.keys": [
    "Ovr{django.contrib.sessions.backends.base.SessionBase.keys}"
  ],
  "django.contrib.sessions.backends.base.SessionBase.values": [
    "Ovr{django.contrib.sessions.backends.base.SessionBase.values}"
  ],
  "django.core.files.base.ContentFile.close": [
    "Ovr{django.core.files.base.ContentFile.close}"
  ],
  "django.core.files.base.File.__next__": [
    "Ovr{django.core.files.base.File.__next__}"
  ],
  "django.core.files.base.File.close": [
    "Ovr{django.core.files.base.File.close}"
  ],
  "django.core.paginator.Page.__getitem__": [
    "Ovr{django.core.paginator.Page.__getitem__}"
  ],
  "django.db.models.query.RawQuerySet.__iter__": [
    "Ovr{django.db.models.query.RawQuerySet.__iter__}"
  ],
  "django.db.models.query._QuerySet.__iter__": [
    "Ovr{django.db.models.query._QuerySet.__iter__}"
  ],
  "django.http.request.QueryDict.__setitem__": [
    "Ovr{django.http.request.QueryDict.__setitem__}"
  ],
  "django.http.request.QueryDict.copy": [
    "Ovr{django.http.request.QueryDict.copy}"
  ],
  "django.http.request.QueryDict.pop": [
    "Ovr{django.http.request.QueryDict.pop}"
  ],
  "django.http.request.QueryDict.setdefault": [
    "Ovr{django.http.request.QueryDict.setdefault}"
  ],
  "django.http.request._ImmutableQueryDict.__getitem__": [
    "Ovr{django.http.request._ImmutableQueryDict.__getitem__}"
  ],
  "django.http.request._ImmutableQueryDict.__setitem__": [
    "Ovr{django.http.request._ImmutableQueryDict.__setitem__}"
  ],
  "django.http.request._ImmutableQueryDict.copy": [
    "Ovr{django.http.request._ImmutableQueryDict.copy}"
  ],
  "django.http.request._ImmutableQueryDict.pop": [
    "Ovr{django.http.request._ImmutableQueryDict.pop}"
  ],
  "django.http.request._ImmutableQueryDict.setdefault": [
    "Ovr{django.http.request._ImmutableQueryDict.setdefault}"
  ],
  "django.template.context.BaseContext.__iter__": [
    "Ovr{django.template.context.BaseContext.__iter__}"
  ],
  "django.test.utils.ContextList.__getitem__": [
    "Ovr{django.test.utils.ContextList.__getitem__}"
  ],
  "django.utils.datastructures.CaseInsensitiveMapping.__iter__": [
    "Ovr{django.utils.datastructures.CaseInsensitiveMapping.__iter__}"
  ],
  "django.utils.datastructures.DictWrapper.__getitem__": [
    "Ovr{django.utils.datastructures.DictWrapper.__getitem__}"
  ],
  "django.utils.datastructures.MultiValueDict.__getitem__": [
    "Ovr{django.utils.datastructures.MultiValueDict.__getitem__}"
  ],
  "django.utils.datastructures.MultiValueDict.__iter__": [
    "Ovr{django.utils.datastructures.MultiValueDict.__iter__}"
  ],
  "django.utils.datastructures.MultiValueDict.__setitem__": [
    "Ovr{django.utils.datastructures.MultiValueDict.__setitem__}"
  ],
  "django.utils.datastructures.MultiValueDict.copy": [
    "Ovr{django.utils.datastructures.MultiValueDict.copy}"
  ],
  "django.utils.datastructures.MultiValueDict.get": [
    "Ovr{django.utils.datastructures.MultiValueDict.get}"
  ],
  "django.utils.datastructures.MultiValueDict.items": [
    "Ovr{django.utils.datastructures.MultiValueDict.items}"
  ],
  "django.utils.datastructures.MultiValueDict.setdefault": [
    "Ovr{django.utils.datastructures.MultiValueDict.setdefault}"
  ],
  "django.utils.datastructures.MultiValueDict.values": [
    "Ovr{django.utils.datastructures.MultiValueDict.values}"
  ],
  "django.utils.datastructures.OrderedSet.__iter__": [
    "Ovr{django.utils.datastructures.OrderedSet.__iter__}"
  ],
  "django.utils.datetime_safe.datetime.strftime": [
    "maint_tools.update_tracking_issue.$toplevel"
  ],
  "django.utils.functional._StrPromise.__getitem__": [
    "Ovr{django.utils.functional._StrPromise.__getitem__}"
  ],
  "django.utils.safestring.SafeString.__add__": [
    "Ovr{django.utils.safestring.SafeString.__add__}"
  ],
  "doc.conf.SubSectionTitleOrder.__init__": [
    "doc.conf.$toplevel"
  ],
  "doc.sphinxext.allow_nan_estimators.AllowNanEstimators.make_paragraph_for_estimator_type": [
    "doc.sphinxext.allow_nan_estimators.AllowNanEstimators.run"
  ],
  "doc.sphinxext.sphinx_issues.IssueRole.__call__": [
    "doc.sphinxext.sphinx_issues.setup"
  ],
  "doc.sphinxext.sphinx_issues.IssueRole.__init__": [
    "doc.sphinxext.sphinx_issues.$toplevel"
  ],
  "doc.sphinxext.sphinx_issues.IssueRole.make_node": [
    "doc.sphinxext.sphinx_issues.IssueRole.__call__"
  ],
  "doc.tutorial.machine_learning_map.parse_path.CaselessPreservingLiteral.__init__": [
    "doc.tutorial.machine_learning_map.parse_path.Command"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.And.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__add__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__",
    "doc.tutorial.machine_learning_map.pyparsing.countedArray.countFieldParseAction",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousLiteral.copyTokenToRepeater"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.And.checkRecursion": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.And.checkRecursion}",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.validate"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.And.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.And.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.And._ErrorStop.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__sub__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.CaselessKeyword.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.CaselessKeyword.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.CaselessLiteral.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.CaselessLiteral.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.CaselessLiteral.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.nestedExpr"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.CloseMatch.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Combine.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing._makeTags",
    "doc.tutorial.machine_learning_map.pyparsing.delimitedList",
    "doc.tutorial.machine_learning_map.pyparsing.nestedExpr",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Combine.postParse": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.Combine.postParse}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Dict.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing._makeTags",
    "doc.tutorial.machine_learning_map.pyparsing.dictOf"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Dict.postParse": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.Dict.postParse}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Each.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__and__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Each.checkRecursion": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.Each.checkRecursion}",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.validate"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Empty.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.And._ErrorStop.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseString",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock",
    "doc.tutorial.machine_learning_map.pyparsing.locatedExpr",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousLiteral.copyTokenToRepeater",
    "doc.tutorial.machine_learning_map.pyparsing.originalTextFor"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.FollowedBy.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.infixNotation"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.FollowedBy.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.FollowedBy.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Forward.__ilshift__": [
    "doc.tutorial.machine_learning_map.pyparsing.Forward.copy",
    "doc.tutorial.machine_learning_map.pyparsing.infixNotation",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousExpr",
    "doc.tutorial.machine_learning_map.pyparsing.nestedExpr"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Forward.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.Forward.copy",
    "doc.tutorial.machine_learning_map.pyparsing.countedArray",
    "doc.tutorial.machine_learning_map.pyparsing.infixNotation",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousExpr",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousLiteral",
    "doc.tutorial.machine_learning_map.pyparsing.nestedExpr"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Forward.__lshift__": [
    "doc.tutorial.machine_learning_map.pyparsing.Forward.__ilshift__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Forward.copy": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.Forward.copy}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Forward.streamline": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.Forward.streamline}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.GoToColumn.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.GoToColumn.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.GoToColumn.preParse": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.GoToColumn.preParse}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Group.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing._makeTags",
    "doc.tutorial.machine_learning_map.pyparsing.countedArray.countFieldParseAction",
    "doc.tutorial.machine_learning_map.pyparsing.dictOf",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock",
    "doc.tutorial.machine_learning_map.pyparsing.infixNotation",
    "doc.tutorial.machine_learning_map.pyparsing.locatedExpr",
    "doc.tutorial.machine_learning_map.pyparsing.nestedExpr"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Group.postParse": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.Group.postParse}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Keyword.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.CaselessKeyword.__init__",
    "doc.tutorial.machine_learning_map.pyparsing._makeTags"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Keyword.copy": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.Keyword.copy}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Keyword.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.Keyword.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.LineEnd.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.LineEnd.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.LineEnd.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.LineStart.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.LineStart.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.LineStart.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Literal.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.CaselessLiteral.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.runTests",
    "doc.tutorial.machine_learning_map.pyparsing._makeTags",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousLiteral.copyTokenToRepeater",
    "doc.tutorial.machine_learning_map.pyparsing.nestedExpr",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Literal.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.Literal.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__or__",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.checkRecursion": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.MatchFirst.checkRecursion}",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.validate"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.MatchFirst.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.NoMatch.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.oneOf"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.NoMatch.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.NoMatch.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.NotAny.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__invert__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.NotAny.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.NotAny.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Optional.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__.makeOptionalList",
    "doc.tutorial.machine_learning_map.pyparsing._makeTags",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock",
    "doc.tutorial.machine_learning_map.pyparsing.infixNotation",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Optional.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.Optional.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Or.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__xor__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Or.checkRecursion": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.Or.checkRecursion}",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.validate"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Or.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.Or.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseBaseException.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.And.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.CaselessKeyword.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.CaselessLiteral.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.GoToColumn.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Keyword.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.LineEnd.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.LineStart.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Literal.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.NoMatch.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.NotAny.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.OnlyOnce.__call__",
    "doc.tutorial.machine_learning_map.pyparsing.Or.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseBaseException._from_exception",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._parseCache",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._parseNoCache",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.tryParse",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.SkipTo.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.StringEnd.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.StringStart.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.White.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Word.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.WordEnd.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.WordStart.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock.checkPeerIndent",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock.checkSubIndent",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock.checkUnindent",
    "doc.tutorial.machine_learning_map.pyparsing.matchOnlyAtCol.verifyCol",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousExpr.copyTokenToRepeater.mustMatchTheseTokens",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.convertToDate.cvt_fn",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.convertToDatetime.cvt_fn",
    "doc.tutorial.machine_learning_map.pyparsing.withAttribute.pa"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseBaseException.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseBaseException.__str__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.runTests"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseBaseException._from_exception": [
    "doc.tutorial.machine_learning_map.pyparsing.And.parseImpl"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.FollowedBy.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Forward.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.NotAny.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Optional.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.SkipTo.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.TokenConverter.__init__",
    "doc.tutorial.machine_learning_map.pyparsing._MultipleMatch.__init__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.checkRecursion": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.checkRecursion}",
    "doc.tutorial.machine_learning_map.pyparsing.Forward.validate",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.validate"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.ignore": [
    "doc.tutorial.machine_learning_map.pyparsing.Combine.ignore"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.leaveWhitespace": [
    "doc.tutorial.machine_learning_map.pyparsing.Combine.__init__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.streamline": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.streamline}",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.And.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Each.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Or.__init__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.append": [
    "doc.tutorial.machine_learning_map.pyparsing.And.__iadd__",
    "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.__ior__",
    "doc.tutorial.machine_learning_map.pyparsing.Or.__ixor__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.copy": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParseExpression.copy}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.setResultsName": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParseExpression.setResultsName}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.streamline": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParseExpression.streamline}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__getitem__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__getattr__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults._iteritems",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults._itervalues",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.get",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.pop"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__iadd__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.extend",
    "doc.tutorial.machine_learning_map.pyparsing.SkipTo.parseImpl"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Combine.postParse",
    "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Optional.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__getitem__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.copy",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._parseNoCache",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.searchString",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.SkipTo.parseImpl"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__iter__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asDict.toItem",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.dump"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__new__": [
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Combine.postParse",
    "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Optional.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__getitem__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.copy",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._parseNoCache",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.searchString",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.SkipTo.parseImpl"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__setitem__": [
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Optional.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__iadd__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.parseImpl"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseResults._asStringList": [
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults._asStringList"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseResults._iterkeys": [
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults._iteritems",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults._itervalues"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asDict": [
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asDict.toItem"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asList": [
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.dump",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.pprint",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.transformString"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asXML": [
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asXML"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseResults.copy": [
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__add__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__radd__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseResults.dump": [
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.dump"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParseResults.haskeys": [
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asDict.toItem",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.dump"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__add__": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__.makeOptionalList",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__radd__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__sub__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseString",
    "doc.tutorial.machine_learning_map.pyparsing._makeTags",
    "doc.tutorial.machine_learning_map.pyparsing.delimitedList",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock",
    "doc.tutorial.machine_learning_map.pyparsing.infixNotation",
    "doc.tutorial.machine_learning_map.pyparsing.nestedExpr",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__and__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rand__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__call__": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.And._ErrorStop.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.And.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.And.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.And.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.CaselessKeyword.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.CaselessKeyword.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.CaselessLiteral.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.CaselessLiteral.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Combine.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Combine.ignore",
    "doc.tutorial.machine_learning_map.pyparsing.Dict.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Each.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Each.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Empty.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.FollowedBy.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Forward.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Forward.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Forward.copy",
    "doc.tutorial.machine_learning_map.pyparsing.GoToColumn.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.GoToColumn.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Group.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Keyword.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Keyword.copy",
    "doc.tutorial.machine_learning_map.pyparsing.Keyword.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.LineEnd.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.LineEnd.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.LineStart.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.LineStart.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Literal.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Literal.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.NoMatch.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.NoMatch.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.NotAny.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.NotAny.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.NotAny.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.OneOrMore.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Optional.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Optional.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Or.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Or.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Or.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.ignore",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.streamline",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.copy",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.ignore",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.setResultsName",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.streamline",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__eq__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__hash__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__invert__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__.makeOptionalList",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__radd__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rand__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__repr__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__ror__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rsub__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rxor__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__sub__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._parseNoCache",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.copy",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.ignore",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseString",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setName",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.suppress",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.tryParse",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.SkipTo.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.SkipTo.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.StringEnd.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.StringEnd.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.StringStart.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.StringStart.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Token.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.TokenConverter.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.White.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.White.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Word.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.WordEnd.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.WordEnd.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.WordStart.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.WordStart.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ZeroOrMore.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ZeroOrMore.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ZeroOrMore.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing._MultipleMatch.__init__",
    "doc.tutorial.machine_learning_map.pyparsing._PositionToken.__init__",
    "doc.tutorial.machine_learning_map.pyparsing._makeTags",
    "doc.tutorial.machine_learning_map.pyparsing.countedArray",
    "doc.tutorial.machine_learning_map.pyparsing.countedArray.countFieldParseAction",
    "doc.tutorial.machine_learning_map.pyparsing.delimitedList",
    "doc.tutorial.machine_learning_map.pyparsing.dictOf",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock",
    "doc.tutorial.machine_learning_map.pyparsing.infixNotation",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousLiteral.copyTokenToRepeater",
    "doc.tutorial.machine_learning_map.pyparsing.nestedExpr",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__eq__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__ne__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__req__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rne__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Token.__init__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rmul__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__or__": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__ror__",
    "doc.tutorial.machine_learning_map.pyparsing.nestedExpr"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__str__": [
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__str__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__sub__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rsub__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__xor__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rxor__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement._parseNoCache": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._parseCache"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement._skipIgnorables": [
    "doc.tutorial.machine_learning_map.pyparsing.GoToColumn.preParse",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.preParse",
    "doc.tutorial.machine_learning_map.pyparsing._MultipleMatch.parseImpl"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.checkRecursion": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.checkRecursion}",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.validate"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.copy": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.copy}",
    "doc.tutorial.machine_learning_map.pyparsing.Forward.copy",
    "doc.tutorial.machine_learning_map.pyparsing.Keyword.copy",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.copy"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.ignore": [
    "doc.tutorial.machine_learning_map.pyparsing.Combine.ignore",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.ignore",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.ignore"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.leaveWhitespace": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.And._ErrorStop.__init__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.matches": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__eq__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseString": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.matches",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseFile",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.runTests"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.postParse": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.postParse}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.preParse": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.preParse}",
    "doc.tutorial.machine_learning_map.pyparsing.StringStart.parseImpl"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.resetCache": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseString",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.scanString"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.scanString": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.searchString",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.split",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.transformString"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setDebugActions": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setDebug"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setName": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.delimitedList",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock",
    "doc.tutorial.machine_learning_map.pyparsing.infixNotation",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousLiteral",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setParseAction": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing._makeTags",
    "doc.tutorial.machine_learning_map.pyparsing._ustr",
    "doc.tutorial.machine_learning_map.pyparsing.countedArray",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock",
    "doc.tutorial.machine_learning_map.pyparsing.locatedExpr",
    "doc.tutorial.machine_learning_map.pyparsing.nestedExpr",
    "doc.tutorial.machine_learning_map.pyparsing.originalTextFor",
    "doc.tutorial.machine_learning_map.pyparsing.ungroup"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setResultsName": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.setResultsName}",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.setResultsName",
    "doc.tutorial.machine_learning_map.pyparsing._makeTags"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setWhitespaceChars": [
    "doc.tutorial.machine_learning_map.pyparsing.And.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Forward.__lshift__",
    "doc.tutorial.machine_learning_map.pyparsing.LineEnd.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.White.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.streamline": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.streamline}",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.streamline",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.streamline"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.suppress": [
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.transformString": [
    "doc.tutorial.machine_learning_map.pyparsing._ustr"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement.tryParse": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.canParseNext"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ParserElement._UnboundedCache.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.enablePackrat"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.QuotedString.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.QuotedString.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.RecursiveGrammarException.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.checkRecursion"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Regex.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing._ustr",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Regex.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.Regex.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.SkipTo.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.SkipTo.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.StringEnd.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseString"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.StringEnd.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.StringEnd.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.StringStart.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.StringStart.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.StringStart.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Suppress.postParse": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.Suppress.postParse}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Token.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Empty.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Keyword.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Literal.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.NoMatch.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.White.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__init__",
    "doc.tutorial.machine_learning_map.pyparsing._PositionToken.__init__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.TokenConverter.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.Combine.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Dict.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Group.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.ignore",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.suppress",
    "doc.tutorial.machine_learning_map.pyparsing._makeTags",
    "doc.tutorial.machine_learning_map.pyparsing.delimitedList",
    "doc.tutorial.machine_learning_map.pyparsing.infixNotation",
    "doc.tutorial.machine_learning_map.pyparsing.nestedExpr",
    "doc.tutorial.machine_learning_map.pyparsing.ungroup"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.White.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.White.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.White.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Word.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing._makeTags",
    "doc.tutorial.machine_learning_map.pyparsing.countedArray",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.Word.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.Word.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.WordEnd.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.WordEnd.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.WordStart.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.WordStart.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ZeroOrMore.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__",
    "doc.tutorial.machine_learning_map.pyparsing._makeTags",
    "doc.tutorial.machine_learning_map.pyparsing.delimitedList",
    "doc.tutorial.machine_learning_map.pyparsing.dictOf",
    "doc.tutorial.machine_learning_map.pyparsing.nestedExpr"
  ],
  "doc.tutorial.machine_learning_map.pyparsing.ZeroOrMore.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ZeroOrMore.parseImpl}"
  ],
  "doc.tutorial.machine_learning_map.pyparsing._MultipleMatch.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__",
    "doc.tutorial.machine_learning_map.pyparsing.ZeroOrMore.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock",
    "doc.tutorial.machine_learning_map.pyparsing.infixNotation",
    "doc.tutorial.machine_learning_map.pyparsing.nestedExpr",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel"
  ],
  "doc.tutorial.machine_learning_map.pyparsing._MultipleMatch.parseImpl": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing._MultipleMatch.parseImpl}",
    "doc.tutorial.machine_learning_map.pyparsing.ZeroOrMore.parseImpl"
  ],
  "doc.tutorial.machine_learning_map.pyparsing._ParseResultsWithOffset.__getitem__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__iadd__"
  ],
  "doc.tutorial.machine_learning_map.pyparsing._ParseResultsWithOffset.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.Dict.postParse",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__delitem__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__iadd__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__setitem__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.insert"
  ],
  "doc.tutorial.machine_learning_map.pyparsing._PositionToken.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.GoToColumn.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.LineEnd.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.LineStart.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.StringEnd.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.StringStart.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.WordEnd.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.WordStart.__init__"
  ],
  "dockerfile_parse.parser.KeyValues.__eq__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__eq__"
  ],
  "dockerfile_parse.parser.KeyValues.__setitem__": [
    "Ovr{dockerfile_parse.parser.KeyValues.__setitem__}"
  ],
  "docutils.nodes.Text.lstrip": [
    "Ovr{docutils.nodes.Text.lstrip}"
  ],
  "docutils.nodes.Text.rstrip": [
    "Ovr{docutils.nodes.Text.rstrip}"
  ],
  "enum.Enum.name": [
    "parso.python.tokenize.PythonToken.__repr__"
  ],
  "enum.IntFlag.__or__": [
    "Ovr{enum.IntFlag.__or__}"
  ],
  "enum._EnumDict.__setitem__": [
    "Ovr{enum._EnumDict.__setitem__}"
  ],
  "enumerate.__init__": [
    "benchmarks.bench_feature_expansions.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_adult.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "benchmarks.bench_multilabel_metrics._plot",
    "benchmarks.bench_multilabel_metrics.benchmark",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_plot_nmf.plot_results",
    "benchmarks.bench_plot_nmf.run_bench",
    "benchmarks.bench_plot_omp_lars.$toplevel",
    "benchmarks.bench_plot_omp_lars.compute_bench",
    "benchmarks.bench_plot_randomized_svd.plot_time_vs_s",
    "benchmarks.bench_plot_randomized_svd.scatter_time_vs_s",
    "benchmarks.bench_plot_ward.$toplevel",
    "benchmarks.bench_sgd_regression.$toplevel",
    "click._textwrap.TextWrapper.indent_only",
    "click.formatting.measure_table",
    "click.parser.OptionParser._process_args_for_args",
    "click.shell_completion._is_incomplete_option",
    "click.utils.make_default_short_help",
    "doc.sphinxext.sphinx_issues.IssueRole.__call__",
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Dict.postParse",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__delitem__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asXML",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.dump",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.insert",
    "doc.tutorial.machine_learning_map.pyparsing.infixNotation",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_outlier_detection_wine.$toplevel",
    "examples.applications.plot_prediction_latency.plot_n_features_influence",
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.applications.plot_tomography_l1_reconstruction.build_projection_operator",
    "examples.applications.plot_topics_extraction_with_nmf_lda.plot_top_words",
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.calibration.plot_compare_calibration.$toplevel",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.classification.plot_lda_qda.$toplevel",
    "examples.cluster.plot_adjusted_for_chance_measures.fixed_classes_uniform_labelings_scores",
    "examples.cluster.plot_adjusted_for_chance_measures.uniform_labelings_scores",
    "examples.cluster.plot_agglomerative_clustering.$toplevel",
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel",
    "examples.cluster.plot_agglomerative_dendrogram.plot_dendrogram",
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel",
    "examples.cluster.plot_bisect_kmeans.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_cluster_iris.$toplevel",
    "examples.cluster.plot_dict_face_patches.$toplevel",
    "examples.cluster.plot_hdbscan.$toplevel",
    "examples.cluster.plot_kmeans_plusplus.$toplevel",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.compose.plot_column_transformer.subject_body_extractor",
    "examples.covariance.plot_lw_vs_oas.$toplevel",
    "examples.covariance.plot_robust_vs_empirical_covariance.$toplevel",
    "examples.covariance.plot_sparse_cov.$toplevel",
    "examples.cross_decomposition.plot_pcr_vs_pls.$toplevel",
    "examples.decomposition.plot_ica_blind_source_separation.$toplevel",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "examples.decomposition.plot_sparse_coding.$toplevel",
    "examples.decomposition.plot_sparse_coding.ricker_matrix",
    "examples.ensemble.plot_adaboost_hastie_10_2.$toplevel",
    "examples.ensemble.plot_bias_variance.$toplevel",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_early_stopping.autolabel",
    "examples.ensemble.plot_gradient_boosting_oob.heldout_score",
    "examples.ensemble.plot_gradient_boosting_regression.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "examples.exercises.plot_cv_diabetes.$toplevel",
    "examples.gaussian_process.plot_gpc_iris.$toplevel",
    "examples.gaussian_process.plot_gpc_xor.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.plot_gpr_samples",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "examples.linear_model.plot_bayesian_ridge_curvefit.$toplevel",
    "examples.linear_model.plot_huber_vs_ridge.$toplevel",
    "examples.linear_model.plot_logistic_l1_l2_sparsity.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss._mean_frequency_by_risk_group",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.manifold.plot_manifold_sphere.$toplevel",
    "examples.manifold.plot_t_sne_perplexity.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.$toplevel",
    "examples.mixture.plot_concentration_prior.$toplevel",
    "examples.mixture.plot_concentration_prior.plot_results",
    "examples.mixture.plot_gmm.plot_results",
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.mixture.plot_gmm_covariances.make_ellipses",
    "examples.mixture.plot_gmm_init.$toplevel",
    "examples.mixture.plot_gmm_selection.$toplevel",
    "examples.mixture.plot_gmm_sin.plot_results",
    "examples.model_selection.plot_cv_indices.$toplevel",
    "examples.model_selection.plot_cv_indices.plot_cv_indices",
    "examples.model_selection.plot_learning_curve.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.model_selection.plot_roc_crossval.$toplevel",
    "examples.neighbors.plot_kde_1d.$toplevel",
    "examples.neighbors.plot_nca_dim_reduction.$toplevel",
    "examples.neighbors.plot_nca_illustration.relate_point",
    "examples.neighbors.plot_regression.$toplevel",
    "examples.neural_networks.plot_rbm_logistic_classification.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_discretization_strategies.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel",
    "examples.semi_supervised.plot_self_training_varying_threshold.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_versus_svm_iris.$toplevel",
    "examples.svm.plot_linearsvc_support_vectors.$toplevel",
    "examples.svm.plot_rbf_parameters.$toplevel",
    "examples.svm.plot_svm_regression.$toplevel",
    "examples.svm.plot_svm_scale_c.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.plot_feature_effects",
    "examples.tree.plot_iris_dtc.$toplevel",
    "jinja2.lexer.Lexer.tokeniter",
    "pip._vendor.pyparsing.And.streamline",
    "sklearn.__check_build.raise_build_error",
    "sklearn.base.BaseEstimator._check_feature_names.add_names",
    "sklearn.cluster._agglomerative._hc_cut",
    "sklearn.cluster._agglomerative._single_linkage_tree",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.cluster._birch._split_node",
    "sklearn.cluster._bisect_k_means.BisectingKMeans.fit",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.fit",
    "sklearn.cluster._hdbscan.hdbscan._get_finite_row_indices",
    "sklearn.cluster._hdbscan.hdbscan.remap_single_linkage_tree",
    "sklearn.cluster._mean_shift.MeanShift.fit",
    "sklearn.compose._column_transformer.ColumnTransformer._fit_transform",
    "sklearn.compose._column_transformer.ColumnTransformer._record_output_indices",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._arff_parser._pandas_arff_parser",
    "sklearn.datasets._arff_parser._sparse_data_to_array",
    "sklearn.datasets._arff_parser._split_sparse_columns",
    "sklearn.datasets._base.load_csv_data",
    "sklearn.datasets._base.load_files",
    "sklearn.datasets._base.load_sample_image",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._lfw._load_imgs",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.decomposition._fastica._logcosh",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_svd",
    "sklearn.discriminant_analysis._class_cov",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.make_known_categories_bitsets",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._compute_partial_dependence_recursion",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._predict_iterations",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._iforest.IsolationForest._compute_score_samples",
    "sklearn.ensemble._stacking.StackingClassifier.fit",
    "sklearn.ensemble._stacking.StackingClassifier.predict",
    "sklearn.ensemble._stacking._BaseStacking._concatenate_predictions",
    "sklearn.ensemble._voting._BaseVoting.fit",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor.staged_predict",
    "sklearn.externals._arff.COOData.decode_rows",
    "sklearn.externals._arff.EncodedNominalConversor.__init__",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._transform",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.inverse_transform",
    "sklearn.feature_extraction.image.PatchExtractor.transform",
    "sklearn.feature_extraction.text.CountVectorizer._sort_features",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood",
    "sklearn.gaussian_process.kernels.CompoundKernel.theta@setter",
    "sklearn.impute._base.SimpleImputer._dense_fit",
    "sklearn.impute._iterative.IterativeImputer.transform",
    "sklearn.inspection._partial_dependence._grid_from_X",
    "sklearn.inspection._partial_dependence._partial_dependence_brute",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_ice_lines",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._coordinate_descent.enet_path",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._least_angle.LassoLarsIC.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._omp.orthogonal_mp",
    "sklearn.linear_model._omp.orthogonal_mp_gram",
    "sklearn.linear_model._ridge._BaseRidgeCV.fit",
    "sklearn.linear_model._ridge._RidgeGCV.fit",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit_multiclass",
    "sklearn.linear_model._theil_sen._lstsq",
    "sklearn.manifold._locally_linear.barycenter_weights",
    "sklearn.metrics._base._average_multiclass_ovo_score",
    "sklearn.metrics._classification.confusion_matrix",
    "sklearn.metrics._ranking.label_ranking_average_precision_score",
    "sklearn.metrics._ranking.label_ranking_loss",
    "sklearn.metrics.pairwise._euclidean_distances_upcast",
    "sklearn.mixture._base.BaseMixture.sample",
    "sklearn.mixture._gaussian_mixture.GaussianMixture._set_parameters",
    "sklearn.mixture._gaussian_mixture._compute_precision_cholesky",
    "sklearn.mixture._gaussian_mixture._estimate_log_gaussian_prob",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._split.GroupKFold._iter_test_indices",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.model_selection._split._pprint",
    "sklearn.model_selection._validation._insert_error_scores",
    "sklearn.multiclass.OneVsRestClassifier.fit",
    "sklearn.multiclass.OneVsRestClassifier.predict",
    "sklearn.multiclass.OutputCodeClassifier.fit",
    "sklearn.multioutput.ClassifierChain.decision_function",
    "sklearn.multioutput.ClassifierChain.fit",
    "sklearn.multioutput.ClassifierChain.predict_proba",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.multioutput._BaseChain.predict",
    "sklearn.neighbors._base.RadiusNeighborsMixin._radius_neighbors_reduce_func",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors",
    "sklearn.neighbors._base._get_weights",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict_proba",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.fit",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba",
    "sklearn.neighbors._regression.RadiusNeighborsRegressor.predict",
    "sklearn.pipeline.FeatureUnion._parallel_func",
    "sklearn.pipeline.Pipeline._iter",
    "sklearn.preprocessing._data.PowerTransformer._fit",
    "sklearn.preprocessing._data.PowerTransformer.inverse_transform",
    "sklearn.preprocessing._data.PowerTransformer.transform",
    "sklearn.preprocessing._encoders.OneHotEncoder._compute_n_features_outs",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._encoders.OneHotEncoder.get_feature_names_out",
    "sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform",
    "sklearn.preprocessing._encoders.OneHotEncoder.transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.preprocessing._encoders._BaseEncoder._fit_infrequent_category_mapping",
    "sklearn.preprocessing._encoders._BaseEncoder._map_infrequent_categories",
    "sklearn.preprocessing._target_encoder.TargetEncoder._transform_X_ordinal",
    "sklearn.tree._reingold_tilford.DrawTree.__init__",
    "sklearn.utils._encode._get_counts",
    "sklearn.utils._encode._map_to_integer",
    "sklearn.utils._show_versions.show_versions",
    "sklearn.utils._testing._convert_container",
    "sklearn.utils._testing._create_aligned_memmap_backed_arrays",
    "sklearn.utils.class_weight.compute_class_weight",
    "sklearn.utils.extmath.cartesian",
    "sklearn.utils.metaestimators._BaseComposition._replace_estimator",
    "sklearn.utils.sparsefuncs.csc_median_axis_0",
    "sklearn.utils.validation._check_monotonic_cst"
  ],
  "enumerate.__iter__": [
    "Ovr{enumerate.__iter__}",
    "benchmarks.bench_feature_expansions.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_adult.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "benchmarks.bench_multilabel_metrics._plot",
    "benchmarks.bench_multilabel_metrics.benchmark",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_plot_nmf.plot_results",
    "benchmarks.bench_plot_nmf.run_bench",
    "benchmarks.bench_plot_omp_lars.$toplevel",
    "benchmarks.bench_plot_omp_lars.compute_bench",
    "benchmarks.bench_plot_randomized_svd.plot_time_vs_s",
    "benchmarks.bench_plot_randomized_svd.scatter_time_vs_s",
    "benchmarks.bench_plot_ward.$toplevel",
    "benchmarks.bench_sgd_regression.$toplevel",
    "click._textwrap.TextWrapper.indent_only",
    "click.formatting.measure_table",
    "click.parser.OptionParser._process_args_for_args",
    "click.shell_completion._is_incomplete_option",
    "click.utils.make_default_short_help",
    "doc.sphinxext.sphinx_issues.IssueRole.__call__",
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Dict.postParse",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__delitem__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asXML",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.dump",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.insert",
    "doc.tutorial.machine_learning_map.pyparsing.infixNotation",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_outlier_detection_wine.$toplevel",
    "examples.applications.plot_prediction_latency.plot_n_features_influence",
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.applications.plot_tomography_l1_reconstruction.build_projection_operator",
    "examples.applications.plot_topics_extraction_with_nmf_lda.plot_top_words",
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.calibration.plot_compare_calibration.$toplevel",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.classification.plot_lda_qda.$toplevel",
    "examples.cluster.plot_adjusted_for_chance_measures.fixed_classes_uniform_labelings_scores",
    "examples.cluster.plot_adjusted_for_chance_measures.uniform_labelings_scores",
    "examples.cluster.plot_agglomerative_clustering.$toplevel",
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel",
    "examples.cluster.plot_agglomerative_dendrogram.plot_dendrogram",
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel",
    "examples.cluster.plot_bisect_kmeans.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_cluster_iris.$toplevel",
    "examples.cluster.plot_dict_face_patches.$toplevel",
    "examples.cluster.plot_hdbscan.$toplevel",
    "examples.cluster.plot_kmeans_plusplus.$toplevel",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.compose.plot_column_transformer.subject_body_extractor",
    "examples.covariance.plot_lw_vs_oas.$toplevel",
    "examples.covariance.plot_robust_vs_empirical_covariance.$toplevel",
    "examples.covariance.plot_sparse_cov.$toplevel",
    "examples.cross_decomposition.plot_pcr_vs_pls.$toplevel",
    "examples.decomposition.plot_ica_blind_source_separation.$toplevel",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "examples.decomposition.plot_sparse_coding.$toplevel",
    "examples.decomposition.plot_sparse_coding.ricker_matrix",
    "examples.ensemble.plot_adaboost_hastie_10_2.$toplevel",
    "examples.ensemble.plot_bias_variance.$toplevel",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_early_stopping.autolabel",
    "examples.ensemble.plot_gradient_boosting_oob.heldout_score",
    "examples.ensemble.plot_gradient_boosting_regression.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "examples.exercises.plot_cv_diabetes.$toplevel",
    "examples.gaussian_process.plot_gpc_iris.$toplevel",
    "examples.gaussian_process.plot_gpc_xor.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.plot_gpr_samples",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "examples.linear_model.plot_bayesian_ridge_curvefit.$toplevel",
    "examples.linear_model.plot_huber_vs_ridge.$toplevel",
    "examples.linear_model.plot_logistic_l1_l2_sparsity.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss._mean_frequency_by_risk_group",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.manifold.plot_manifold_sphere.$toplevel",
    "examples.manifold.plot_t_sne_perplexity.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.$toplevel",
    "examples.mixture.plot_concentration_prior.$toplevel",
    "examples.mixture.plot_concentration_prior.plot_results",
    "examples.mixture.plot_gmm.plot_results",
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.mixture.plot_gmm_covariances.make_ellipses",
    "examples.mixture.plot_gmm_init.$toplevel",
    "examples.mixture.plot_gmm_selection.$toplevel",
    "examples.mixture.plot_gmm_sin.plot_results",
    "examples.model_selection.plot_cv_indices.$toplevel",
    "examples.model_selection.plot_cv_indices.plot_cv_indices",
    "examples.model_selection.plot_learning_curve.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.model_selection.plot_roc_crossval.$toplevel",
    "examples.neighbors.plot_kde_1d.$toplevel",
    "examples.neighbors.plot_nca_dim_reduction.$toplevel",
    "examples.neighbors.plot_nca_illustration.relate_point",
    "examples.neighbors.plot_regression.$toplevel",
    "examples.neural_networks.plot_rbm_logistic_classification.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_discretization_strategies.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel",
    "examples.semi_supervised.plot_self_training_varying_threshold.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_versus_svm_iris.$toplevel",
    "examples.svm.plot_linearsvc_support_vectors.$toplevel",
    "examples.svm.plot_rbf_parameters.$toplevel",
    "examples.svm.plot_svm_regression.$toplevel",
    "examples.svm.plot_svm_scale_c.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.plot_feature_effects",
    "examples.tree.plot_iris_dtc.$toplevel",
    "jinja2.lexer.Lexer.tokeniter",
    "pip._vendor.pyparsing.And.streamline",
    "sklearn.__check_build.raise_build_error",
    "sklearn.base.BaseEstimator._check_feature_names.add_names",
    "sklearn.cluster._agglomerative._hc_cut",
    "sklearn.cluster._agglomerative._single_linkage_tree",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.cluster._birch._split_node",
    "sklearn.cluster._bisect_k_means.BisectingKMeans.fit",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.fit",
    "sklearn.cluster._hdbscan.hdbscan._get_finite_row_indices",
    "sklearn.cluster._hdbscan.hdbscan.remap_single_linkage_tree",
    "sklearn.cluster._mean_shift.MeanShift.fit",
    "sklearn.compose._column_transformer.ColumnTransformer._fit_transform",
    "sklearn.compose._column_transformer.ColumnTransformer._record_output_indices",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._arff_parser._pandas_arff_parser",
    "sklearn.datasets._arff_parser._sparse_data_to_array",
    "sklearn.datasets._arff_parser._split_sparse_columns",
    "sklearn.datasets._base.load_csv_data",
    "sklearn.datasets._base.load_files",
    "sklearn.datasets._base.load_sample_image",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._lfw._load_imgs",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.decomposition._fastica._logcosh",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_svd",
    "sklearn.discriminant_analysis._class_cov",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.make_known_categories_bitsets",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._compute_partial_dependence_recursion",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._predict_iterations",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._iforest.IsolationForest._compute_score_samples",
    "sklearn.ensemble._stacking.StackingClassifier.fit",
    "sklearn.ensemble._stacking.StackingClassifier.predict",
    "sklearn.ensemble._stacking._BaseStacking._concatenate_predictions",
    "sklearn.ensemble._voting._BaseVoting.fit",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor.staged_predict",
    "sklearn.externals._arff.COOData.decode_rows",
    "sklearn.externals._arff.EncodedNominalConversor.__init__",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._transform",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.inverse_transform",
    "sklearn.feature_extraction.image.PatchExtractor.transform",
    "sklearn.feature_extraction.text.CountVectorizer._sort_features",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood",
    "sklearn.gaussian_process.kernels.CompoundKernel.theta@setter",
    "sklearn.impute._base.SimpleImputer._dense_fit",
    "sklearn.impute._iterative.IterativeImputer.transform",
    "sklearn.inspection._partial_dependence._grid_from_X",
    "sklearn.inspection._partial_dependence._partial_dependence_brute",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_ice_lines",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._coordinate_descent.enet_path",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._least_angle.LassoLarsIC.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._omp.orthogonal_mp",
    "sklearn.linear_model._omp.orthogonal_mp_gram",
    "sklearn.linear_model._ridge._BaseRidgeCV.fit",
    "sklearn.linear_model._ridge._RidgeGCV.fit",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit_multiclass",
    "sklearn.linear_model._theil_sen._lstsq",
    "sklearn.manifold._locally_linear.barycenter_weights",
    "sklearn.metrics._base._average_multiclass_ovo_score",
    "sklearn.metrics._classification.confusion_matrix",
    "sklearn.metrics._ranking.label_ranking_average_precision_score",
    "sklearn.metrics._ranking.label_ranking_loss",
    "sklearn.metrics.pairwise._euclidean_distances_upcast",
    "sklearn.mixture._base.BaseMixture.sample",
    "sklearn.mixture._gaussian_mixture.GaussianMixture._set_parameters",
    "sklearn.mixture._gaussian_mixture._compute_precision_cholesky",
    "sklearn.mixture._gaussian_mixture._estimate_log_gaussian_prob",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.model_selection._split.GroupKFold._iter_test_indices",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.model_selection._split._pprint",
    "sklearn.model_selection._validation._insert_error_scores",
    "sklearn.multiclass.OneVsRestClassifier.fit",
    "sklearn.multiclass.OneVsRestClassifier.predict",
    "sklearn.multiclass.OutputCodeClassifier.fit",
    "sklearn.multioutput.ClassifierChain.decision_function",
    "sklearn.multioutput.ClassifierChain.fit",
    "sklearn.multioutput.ClassifierChain.predict_proba",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.multioutput._BaseChain.predict",
    "sklearn.neighbors._base.RadiusNeighborsMixin._radius_neighbors_reduce_func",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors",
    "sklearn.neighbors._base._get_weights",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict_proba",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.fit",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba",
    "sklearn.neighbors._regression.RadiusNeighborsRegressor.predict",
    "sklearn.pipeline.FeatureUnion._parallel_func",
    "sklearn.pipeline.Pipeline._iter",
    "sklearn.preprocessing._data.PowerTransformer._fit",
    "sklearn.preprocessing._data.PowerTransformer.inverse_transform",
    "sklearn.preprocessing._data.PowerTransformer.transform",
    "sklearn.preprocessing._encoders.OneHotEncoder._compute_n_features_outs",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._encoders.OneHotEncoder.get_feature_names_out",
    "sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform",
    "sklearn.preprocessing._encoders.OneHotEncoder.transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.preprocessing._encoders._BaseEncoder._fit_infrequent_category_mapping",
    "sklearn.preprocessing._encoders._BaseEncoder._map_infrequent_categories",
    "sklearn.preprocessing._target_encoder.TargetEncoder._transform_X_ordinal",
    "sklearn.tree._reingold_tilford.DrawTree.__init__",
    "sklearn.utils._encode._get_counts",
    "sklearn.utils._encode._map_to_integer",
    "sklearn.utils._show_versions.show_versions",
    "sklearn.utils._testing._convert_container",
    "sklearn.utils._testing._create_aligned_memmap_backed_arrays",
    "sklearn.utils.class_weight.compute_class_weight",
    "sklearn.utils.extmath.cartesian",
    "sklearn.utils.metaestimators._BaseComposition._replace_estimator",
    "sklearn.utils.sparsefuncs.csc_median_axis_0",
    "sklearn.utils.validation._check_monotonic_cst"
  ],
  "enumerate.__next__": [
    "Ovr{enumerate.__next__}",
    "benchmarks.bench_feature_expansions.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_adult.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "benchmarks.bench_multilabel_metrics._plot",
    "benchmarks.bench_multilabel_metrics.benchmark",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_plot_nmf.plot_results",
    "benchmarks.bench_plot_nmf.run_bench",
    "benchmarks.bench_plot_omp_lars.$toplevel",
    "benchmarks.bench_plot_omp_lars.compute_bench",
    "benchmarks.bench_plot_randomized_svd.plot_time_vs_s",
    "benchmarks.bench_plot_randomized_svd.scatter_time_vs_s",
    "benchmarks.bench_plot_ward.$toplevel",
    "benchmarks.bench_sgd_regression.$toplevel",
    "click._textwrap.TextWrapper.indent_only",
    "click.formatting.measure_table",
    "click.parser.OptionParser._process_args_for_args",
    "click.shell_completion._is_incomplete_option",
    "click.utils.make_default_short_help",
    "doc.sphinxext.sphinx_issues.IssueRole.__call__",
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Dict.postParse",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__delitem__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asXML",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.dump",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.insert",
    "doc.tutorial.machine_learning_map.pyparsing.infixNotation",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_outlier_detection_wine.$toplevel",
    "examples.applications.plot_prediction_latency.plot_n_features_influence",
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.applications.plot_tomography_l1_reconstruction.build_projection_operator",
    "examples.applications.plot_topics_extraction_with_nmf_lda.plot_top_words",
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.calibration.plot_compare_calibration.$toplevel",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.classification.plot_lda_qda.$toplevel",
    "examples.cluster.plot_adjusted_for_chance_measures.fixed_classes_uniform_labelings_scores",
    "examples.cluster.plot_adjusted_for_chance_measures.uniform_labelings_scores",
    "examples.cluster.plot_agglomerative_clustering.$toplevel",
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel",
    "examples.cluster.plot_agglomerative_dendrogram.plot_dendrogram",
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel",
    "examples.cluster.plot_bisect_kmeans.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_cluster_iris.$toplevel",
    "examples.cluster.plot_dict_face_patches.$toplevel",
    "examples.cluster.plot_hdbscan.$toplevel",
    "examples.cluster.plot_kmeans_plusplus.$toplevel",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.compose.plot_column_transformer.subject_body_extractor",
    "examples.covariance.plot_lw_vs_oas.$toplevel",
    "examples.covariance.plot_robust_vs_empirical_covariance.$toplevel",
    "examples.covariance.plot_sparse_cov.$toplevel",
    "examples.cross_decomposition.plot_pcr_vs_pls.$toplevel",
    "examples.decomposition.plot_ica_blind_source_separation.$toplevel",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "examples.decomposition.plot_sparse_coding.$toplevel",
    "examples.decomposition.plot_sparse_coding.ricker_matrix",
    "examples.ensemble.plot_adaboost_hastie_10_2.$toplevel",
    "examples.ensemble.plot_bias_variance.$toplevel",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_early_stopping.autolabel",
    "examples.ensemble.plot_gradient_boosting_oob.heldout_score",
    "examples.ensemble.plot_gradient_boosting_regression.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "examples.exercises.plot_cv_diabetes.$toplevel",
    "examples.gaussian_process.plot_gpc_iris.$toplevel",
    "examples.gaussian_process.plot_gpc_xor.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.plot_gpr_samples",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "examples.linear_model.plot_bayesian_ridge_curvefit.$toplevel",
    "examples.linear_model.plot_huber_vs_ridge.$toplevel",
    "examples.linear_model.plot_logistic_l1_l2_sparsity.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss._mean_frequency_by_risk_group",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.manifold.plot_manifold_sphere.$toplevel",
    "examples.manifold.plot_t_sne_perplexity.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.$toplevel",
    "examples.mixture.plot_concentration_prior.$toplevel",
    "examples.mixture.plot_concentration_prior.plot_results",
    "examples.mixture.plot_gmm.plot_results",
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.mixture.plot_gmm_covariances.make_ellipses",
    "examples.mixture.plot_gmm_init.$toplevel",
    "examples.mixture.plot_gmm_selection.$toplevel",
    "examples.mixture.plot_gmm_sin.plot_results",
    "examples.model_selection.plot_cv_indices.$toplevel",
    "examples.model_selection.plot_cv_indices.plot_cv_indices",
    "examples.model_selection.plot_learning_curve.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.model_selection.plot_roc_crossval.$toplevel",
    "examples.neighbors.plot_kde_1d.$toplevel",
    "examples.neighbors.plot_nca_dim_reduction.$toplevel",
    "examples.neighbors.plot_nca_illustration.relate_point",
    "examples.neighbors.plot_regression.$toplevel",
    "examples.neural_networks.plot_rbm_logistic_classification.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_discretization_strategies.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel",
    "examples.semi_supervised.plot_self_training_varying_threshold.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_versus_svm_iris.$toplevel",
    "examples.svm.plot_linearsvc_support_vectors.$toplevel",
    "examples.svm.plot_rbf_parameters.$toplevel",
    "examples.svm.plot_svm_regression.$toplevel",
    "examples.svm.plot_svm_scale_c.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.plot_feature_effects",
    "examples.tree.plot_iris_dtc.$toplevel",
    "jinja2.lexer.Lexer.tokeniter",
    "pip._vendor.pyparsing.And.streamline",
    "sklearn.__check_build.raise_build_error",
    "sklearn.base.BaseEstimator._check_feature_names.add_names",
    "sklearn.cluster._agglomerative._hc_cut",
    "sklearn.cluster._agglomerative._single_linkage_tree",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.cluster._birch._split_node",
    "sklearn.cluster._bisect_k_means.BisectingKMeans.fit",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.fit",
    "sklearn.cluster._hdbscan.hdbscan._get_finite_row_indices",
    "sklearn.cluster._hdbscan.hdbscan.remap_single_linkage_tree",
    "sklearn.cluster._mean_shift.MeanShift.fit",
    "sklearn.compose._column_transformer.ColumnTransformer._fit_transform",
    "sklearn.compose._column_transformer.ColumnTransformer._record_output_indices",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._arff_parser._pandas_arff_parser",
    "sklearn.datasets._arff_parser._sparse_data_to_array",
    "sklearn.datasets._arff_parser._split_sparse_columns",
    "sklearn.datasets._base.load_csv_data",
    "sklearn.datasets._base.load_files",
    "sklearn.datasets._base.load_sample_image",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._lfw._load_imgs",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.decomposition._fastica._logcosh",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_svd",
    "sklearn.discriminant_analysis._class_cov",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.make_known_categories_bitsets",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._compute_partial_dependence_recursion",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._predict_iterations",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._iforest.IsolationForest._compute_score_samples",
    "sklearn.ensemble._stacking.StackingClassifier.fit",
    "sklearn.ensemble._stacking.StackingClassifier.predict",
    "sklearn.ensemble._stacking._BaseStacking._concatenate_predictions",
    "sklearn.ensemble._voting._BaseVoting.fit",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor.staged_predict",
    "sklearn.externals._arff.COOData.decode_rows",
    "sklearn.externals._arff.EncodedNominalConversor.__init__",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._transform",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.inverse_transform",
    "sklearn.feature_extraction.image.PatchExtractor.transform",
    "sklearn.feature_extraction.text.CountVectorizer._sort_features",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood",
    "sklearn.gaussian_process.kernels.CompoundKernel.theta@setter",
    "sklearn.impute._base.SimpleImputer._dense_fit",
    "sklearn.impute._iterative.IterativeImputer.transform",
    "sklearn.inspection._partial_dependence._grid_from_X",
    "sklearn.inspection._partial_dependence._partial_dependence_brute",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_ice_lines",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._coordinate_descent.enet_path",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._least_angle.LassoLarsIC.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._omp.orthogonal_mp",
    "sklearn.linear_model._omp.orthogonal_mp_gram",
    "sklearn.linear_model._ridge._BaseRidgeCV.fit",
    "sklearn.linear_model._ridge._RidgeGCV.fit",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit_multiclass",
    "sklearn.linear_model._theil_sen._lstsq",
    "sklearn.manifold._locally_linear.barycenter_weights",
    "sklearn.metrics._base._average_multiclass_ovo_score",
    "sklearn.metrics._classification.confusion_matrix",
    "sklearn.metrics._ranking.label_ranking_average_precision_score",
    "sklearn.metrics._ranking.label_ranking_loss",
    "sklearn.metrics.pairwise._euclidean_distances_upcast",
    "sklearn.mixture._base.BaseMixture.sample",
    "sklearn.mixture._gaussian_mixture.GaussianMixture._set_parameters",
    "sklearn.mixture._gaussian_mixture._compute_precision_cholesky",
    "sklearn.mixture._gaussian_mixture._estimate_log_gaussian_prob",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.model_selection._split.GroupKFold._iter_test_indices",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.model_selection._split._pprint",
    "sklearn.model_selection._validation._insert_error_scores",
    "sklearn.multiclass.OneVsRestClassifier.fit",
    "sklearn.multiclass.OneVsRestClassifier.predict",
    "sklearn.multiclass.OutputCodeClassifier.fit",
    "sklearn.multioutput.ClassifierChain.decision_function",
    "sklearn.multioutput.ClassifierChain.fit",
    "sklearn.multioutput.ClassifierChain.predict_proba",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.multioutput._BaseChain.predict",
    "sklearn.neighbors._base.RadiusNeighborsMixin._radius_neighbors_reduce_func",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors",
    "sklearn.neighbors._base._get_weights",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict_proba",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.fit",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba",
    "sklearn.neighbors._regression.RadiusNeighborsRegressor.predict",
    "sklearn.pipeline.FeatureUnion._parallel_func",
    "sklearn.pipeline.Pipeline._iter",
    "sklearn.preprocessing._data.PowerTransformer._fit",
    "sklearn.preprocessing._data.PowerTransformer.inverse_transform",
    "sklearn.preprocessing._data.PowerTransformer.transform",
    "sklearn.preprocessing._encoders.OneHotEncoder._compute_n_features_outs",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._encoders.OneHotEncoder.get_feature_names_out",
    "sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform",
    "sklearn.preprocessing._encoders.OneHotEncoder.transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.preprocessing._encoders._BaseEncoder._fit_infrequent_category_mapping",
    "sklearn.preprocessing._encoders._BaseEncoder._map_infrequent_categories",
    "sklearn.preprocessing._target_encoder.TargetEncoder._transform_X_ordinal",
    "sklearn.tree._reingold_tilford.DrawTree.__init__",
    "sklearn.utils._encode._get_counts",
    "sklearn.utils._encode._map_to_integer",
    "sklearn.utils._show_versions.show_versions",
    "sklearn.utils._testing._convert_container",
    "sklearn.utils._testing._create_aligned_memmap_backed_arrays",
    "sklearn.utils.class_weight.compute_class_weight",
    "sklearn.utils.extmath.cartesian",
    "sklearn.utils.metaestimators._BaseComposition._replace_estimator",
    "sklearn.utils.sparsefuncs.csc_median_axis_0",
    "sklearn.utils.validation._check_monotonic_cst"
  ],
  "examples.applications.plot_out_of_core_classification.ReutersParser.__init__": [
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents"
  ],
  "examples.applications.plot_out_of_core_classification.ReutersParser._reset": [
    "examples.applications.plot_out_of_core_classification.ReutersParser.__init__",
    "examples.applications.plot_out_of_core_classification.ReutersParser.end_reuters"
  ],
  "examples.applications.plot_out_of_core_classification.ReutersParser.parse": [
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents"
  ],
  "examples.applications.svm_gui.ControllBar.__init__": [
    "examples.applications.svm_gui.View.__init__"
  ],
  "examples.applications.svm_gui.Controller.__init__": [
    "examples.applications.svm_gui.main"
  ],
  "examples.applications.svm_gui.Controller.decision_surface": [
    "examples.applications.svm_gui.Controller.fit"
  ],
  "examples.applications.svm_gui.Controller.fit": [
    "examples.applications.svm_gui.Controller.refit"
  ],
  "examples.applications.svm_gui.Controller.refit": [
    "examples.applications.svm_gui.Controller.add_example"
  ],
  "examples.applications.svm_gui.Model.__init__": [
    "examples.applications.svm_gui.main"
  ],
  "examples.applications.svm_gui.Model.add_observer": [
    "examples.applications.svm_gui.main"
  ],
  "examples.applications.svm_gui.Model.dump_svmlight_file": [
    "examples.applications.svm_gui.main"
  ],
  "examples.applications.svm_gui.View.__init__": [
    "examples.applications.svm_gui.main"
  ],
  "examples.applications.svm_gui.View.onclick": [
    "examples.applications.svm_gui.View.__init__"
  ],
  "examples.applications.svm_gui.View.plot_decision_surface": [
    "examples.applications.svm_gui.View.update"
  ],
  "examples.applications.svm_gui.View.plot_kernels": [
    "examples.applications.svm_gui.View.__init__",
    "examples.applications.svm_gui.View.update"
  ],
  "examples.applications.svm_gui.View.plot_support_vectors": [
    "examples.applications.svm_gui.View.update"
  ],
  "examples.applications.svm_gui.View.remove_surface": [
    "examples.applications.svm_gui.View.update"
  ],
  "examples.applications.svm_gui.View.update_example": [
    "examples.applications.svm_gui.View.update"
  ],
  "examples.bicluster.plot_bicluster_newsgroups.NumberNormalizingVectorizer.build_tokenizer": [
    "Ovr{examples.bicluster.plot_bicluster_newsgroups.NumberNormalizingVectorizer.build_tokenizer}"
  ],
  "examples.calibration.plot_calibration_curve.NaivelyCalibratedLinearSVC.predict_proba": [
    "examples.calibration.plot_calibration_curve.$toplevel"
  ],
  "examples.cluster.plot_inductive_clustering.InductiveClusterer.__init__": [
    "examples.cluster.plot_inductive_clustering.$toplevel"
  ],
  "examples.cluster.plot_inductive_clustering.InductiveClusterer.fit": [
    "examples.cluster.plot_inductive_clustering.$toplevel"
  ],
  "examples.gaussian_process.plot_gpr_on_structured_data.SequenceKernel.__call__": [
    "examples.gaussian_process.plot_gpr_on_structured_data.$toplevel",
    "examples.gaussian_process.plot_gpr_on_structured_data.SequenceKernel.clone_with_theta"
  ],
  "examples.gaussian_process.plot_gpr_on_structured_data.SequenceKernel.__init__": [
    "examples.gaussian_process.plot_gpr_on_structured_data.$toplevel"
  ],
  "examples.gaussian_process.plot_gpr_on_structured_data.SequenceKernel._f": [
    "examples.gaussian_process.plot_gpr_on_structured_data.SequenceKernel.__call__",
    "examples.gaussian_process.plot_gpr_on_structured_data.SequenceKernel.diag"
  ],
  "examples.gaussian_process.plot_gpr_on_structured_data.SequenceKernel._g": [
    "examples.gaussian_process.plot_gpr_on_structured_data.SequenceKernel.__call__"
  ],
  "examples.gaussian_process.plot_gpr_on_structured_data.SequenceKernel.diag": [
    "examples.gaussian_process.plot_gpr_on_structured_data.$toplevel"
  ],
  "examples.miscellaneous.plot_metadata_routing.ExampleClassifier.fit": [
    "examples.miscellaneous.plot_metadata_routing.$toplevel"
  ],
  "examples.miscellaneous.plot_metadata_routing.ExampleClassifier.predict": [
    "examples.miscellaneous.plot_metadata_routing.$toplevel"
  ],
  "examples.miscellaneous.plot_metadata_routing.MetaClassifier.__init__": [
    "examples.miscellaneous.plot_metadata_routing.$toplevel"
  ],
  "examples.miscellaneous.plot_metadata_routing.MetaClassifier.fit": [
    "examples.miscellaneous.plot_metadata_routing.$toplevel"
  ],
  "examples.miscellaneous.plot_metadata_routing.MetaRegressor.__init__": [
    "examples.miscellaneous.plot_metadata_routing.$toplevel"
  ],
  "examples.miscellaneous.plot_metadata_routing.MetaRegressor.fit": [
    "examples.miscellaneous.plot_metadata_routing.$toplevel"
  ],
  "examples.miscellaneous.plot_metadata_routing.RouterConsumerClassifier.__init__": [
    "examples.miscellaneous.plot_metadata_routing.$toplevel"
  ],
  "examples.miscellaneous.plot_metadata_routing.SimplePipeline.__init__": [
    "examples.miscellaneous.plot_metadata_routing.$toplevel"
  ],
  "examples.miscellaneous.plot_metadata_routing.SimplePipeline.fit": [
    "examples.miscellaneous.plot_metadata_routing.$toplevel"
  ],
  "examples.miscellaneous.plot_metadata_routing.WeightedMetaRegressor.__init__": [
    "examples.miscellaneous.plot_metadata_routing.$toplevel"
  ],
  "examples.miscellaneous.plot_metadata_routing.WeightedMetaRegressor.fit": [
    "examples.miscellaneous.plot_metadata_routing.$toplevel"
  ],
  "examples.neighbors.approximate_nearest_neighbors.NMSlibTransformer.__init__": [
    "examples.neighbors.approximate_nearest_neighbors.$toplevel"
  ],
  "examples.svm.plot_rbf_parameters.MidpointNormalize.__call__": [
    "examples.svm.plot_rbf_parameters.$toplevel",
    "examples.svm.plot_rbf_parameters.MidpointNormalize.__init__"
  ],
  "examples.svm.plot_rbf_parameters.MidpointNormalize.__init__": [
    "examples.svm.plot_rbf_parameters.$toplevel"
  ],
  "fileinput.FileInput.__iter__": [
    "Ovr{fileinput.FileInput.__iter__}"
  ],
  "fileinput.FileInput.__next__": [
    "Ovr{fileinput.FileInput.__next__}"
  ],
  "filter.__init__": [
    "importlib_metadata.Distribution._discover_resolvers",
    "sklearn.utils._testing.check_docstring_parameters"
  ],
  "filter.__iter__": [
    "Ovr{filter.__iter__}"
  ],
  "filter.__next__": [
    "Ovr{filter.__next__}"
  ],
  "flask.cli.CertParamType.convert": [
    "Ovr{flask.cli.CertParamType.convert}"
  ],
  "flask.cli.FlaskGroup._load_plugin_commands": [
    "flask.cli.FlaskGroup.get_command",
    "flask.cli.FlaskGroup.list_commands"
  ],
  "flask.cli.FlaskGroup.get_command": [
    "Ovr{flask.cli.FlaskGroup.get_command}"
  ],
  "flask.cli.FlaskGroup.list_commands": [
    "Ovr{flask.cli.FlaskGroup.list_commands}"
  ],
  "flask.cli.FlaskGroup.make_context": [
    "Ovr{flask.cli.FlaskGroup.make_context}",
    "click.core.MultiCommand.invoke",
    "click.shell_completion._resolve_context"
  ],
  "flask.cli.FlaskGroup.parse_args": [
    "Ovr{flask.cli.FlaskGroup.parse_args}"
  ],
  "flask.cli.ScriptInfo.__init__": [
    "flask.cli.FlaskGroup.make_context"
  ],
  "flask.cli.SeparatedPathType.convert": [
    "Ovr{flask.cli.SeparatedPathType.convert}"
  ],
  "flask.config.Config.__repr__": [
    "jinja2.utils.LRUCache.__repr__",
    "pip._vendor.requests.structures.CaseInsensitiveDict.__repr__",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit",
    "sklearn.metrics._scorer._check_multimetric_scoring"
  ],
  "flask.ctx._AppCtxGlobals.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "flask.sessions.SecureCookieSession.__getitem__": [
    "Ovr{flask.sessions.SecureCookieSession.__getitem__}"
  ],
  "flask.sessions.SecureCookieSession.get": [
    "Ovr{flask.sessions.SecureCookieSession.get}"
  ],
  "flask.sessions.SecureCookieSession.setdefault": [
    "Ovr{flask.sessions.SecureCookieSession.setdefault}"
  ],
  "float.__abs__": [
    "Ovr{float.__abs__}"
  ],
  "float.__add__": [
    "Ovr{float.__add__}"
  ],
  "float.__eq__": [
    "Ovr{float.__eq__}",
    "sklearn.cluster._optics.OPTICS.fit"
  ],
  "float.__ge__": [
    "Ovr{float.__ge__}"
  ],
  "float.__gt__": [
    "Ovr{float.__gt__}"
  ],
  "float.__le__": [
    "Ovr{float.__le__}"
  ],
  "float.__lt__": [
    "Ovr{float.__lt__}"
  ],
  "float.__mul__": [
    "Ovr{float.__mul__}"
  ],
  "float.__ne__": [
    "Ovr{float.__ne__}",
    "sklearn.cluster._optics.OPTICS.fit"
  ],
  "float.__new__": [
    "asv_benchmarks.benchmarks.common.Estimator.track_test_score",
    "asv_benchmarks.benchmarks.common.Estimator.track_train_score",
    "asv_benchmarks.benchmarks.model_selection.CrossValidationBenchmark.track_crossval",
    "benchmarks.bench_random_projections.type_auto_or_float",
    "benchmarks.bench_sparsify.sparsity_ratio",
    "click.core.iter_params_for_processing.sort_key",
    "doc.conf.SKExampleTitleSortKey.__call__",
    "doc.tutorial.machine_learning_map.parse_path.convertToFloat",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "examples.applications.plot_model_complexity_influence.benchmark_influence",
    "examples.applications.plot_prediction_latency.bulk_benchmark_estimator",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.applications.svm_gui.Controller.fit",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.cluster.plot_coin_segmentation.$toplevel",
    "examples.cluster.plot_coin_ward_segmentation.$toplevel",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.$toplevel",
    "examples.cluster.plot_ward_structured_vs_unstructured.$toplevel",
    "examples.linear_model.plot_lasso_dense_vs_sparse_data.$toplevel",
    "examples.svm.plot_svm_scale_c.$toplevel",
    "pip._vendor.tenacity.BaseRetrying.iter",
    "pip._vendor.tenacity.RetryAction.__init__",
    "sklearn._loss.loss.HalfTweedieLoss.__init__",
    "sklearn._loss.loss.HalfTweedieLossIdentity.__init__",
    "sklearn._loss.loss.HuberLoss.__init__",
    "sklearn._loss.loss.PinballLoss.__init__",
    "sklearn.calibration._sigmoid_calibration",
    "sklearn.covariance._robust_covariance.fast_mcd",
    "sklearn.datasets._lfw._load_imgs",
    "sklearn.datasets._openml._get_num_samples",
    "sklearn.datasets._species_distributions._load_coverage",
    "sklearn.decomposition._dict_learning._sparse_encode_precomputed",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._fastica._ica_par",
    "sklearn.decomposition._lda.LatentDirichletAllocation._approx_bound",
    "sklearn.decomposition._lda.LatentDirichletAllocation._em_step",
    "sklearn.decomposition._lda.LatentDirichletAllocation._perplexity_precomp_distr",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit",
    "sklearn.ensemble._gb.VerboseReporter.update",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeNode.__init__",
    "sklearn.externals._arff.ArffDecoder._decode",
    "sklearn.feature_extraction.image.reconstruct_from_patches_2d",
    "sklearn.feature_selection._from_model._calculate_threshold",
    "sklearn.feature_selection._univariate_selection.SelectFdr._get_support_mask",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._ransac._dynamic_max_trials",
    "sklearn.linear_model._ridge._RidgeGCV.fit",
    "sklearn.linear_model._sag.sag_solver",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._regression.d2_pinball_score",
    "sklearn.metrics._regression.d2_tweedie_score",
    "sklearn.metrics._regression.r2_score",
    "sklearn.model_selection._split._validate_shuffle_split",
    "sklearn.naive_bayes.GaussianNB._update_mean_variance",
    "sklearn.neural_network._rbm.BernoulliRBM._fit",
    "sklearn.neural_network._rbm.BernoulliRBM.fit",
    "sklearn.neural_network._stochastic_optimizers.BaseOptimizer.__init__",
    "sklearn.neural_network._stochastic_optimizers.SGDOptimizer.iteration_ends",
    "sklearn.tree._export._BaseTreeExporter.node_to_str",
    "sklearn.utils._param_validation.Interval.__str__",
    "sklearn.utils.estimator_checks.check_class_weight_balanced_linear_classifier",
    "sklearn.utils.estimator_checks.check_outliers_fit_predict",
    "sklearn.utils.extmath.density",
    "sklearn.utils.tests.test_pprint.test_bruteforce_ellipsis",
    "sklearn.utils.tests.test_pprint.test_changed_only"
  ],
  "float.__pow__": [
    "Ovr{float.__pow__}"
  ],
  "float.__sub__": [
    "Ovr{float.__sub__}"
  ],
  "float.__truediv__": [
    "Ovr{float.__truediv__}"
  ],
  "float.is_integer": [
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot"
  ],
  "fpdf.drawing.Point.__add__": [
    "Ovr{fpdf.drawing.Point.__add__}"
  ],
  "fpdf.drawing.Point.__mul__": [
    "Ovr{fpdf.drawing.Point.__mul__}"
  ],
  "fpdf.drawing.Transform.__mul__": [
    "Ovr{fpdf.drawing.Transform.__mul__}"
  ],
  "fractions.Fraction.__le__": [
    "Ovr{fractions.Fraction.__le__}"
  ],
  "fractions.Fraction.__lt__": [
    "Ovr{fractions.Fraction.__lt__}"
  ],
  "fractions.Fraction.__mul__": [
    "sklearn.feature_extraction.image._compute_n_patches"
  ],
  "frozenset.__iter__": [
    "Ovr{frozenset.__iter__}"
  ],
  "frozenset.__new__": [
    "sklearn.base._clone_parametrized",
    "sklearn.datasets._base.load_files",
    "sklearn.feature_extraction._stop_words.$toplevel",
    "sklearn.feature_extraction.text._check_stop_list",
    "sklearn.metrics.pairwise.$toplevel"
  ],
  "functools.partial.__call__": [
    "benchmarks.bench_multilabel_metrics.benchmark",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.datasets.tests.test_rcv1.test_fetch_rcv1",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._predict_iterations",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._ridge._BaseRidgeCV.fit",
    "sklearn.metrics._ranking.average_precision_score",
    "sklearn.metrics._ranking.roc_auc_score",
    "sklearn.metrics._scorer._BaseScorer.__call__",
    "sklearn.metrics._scorer._MultimetricScorer.__call__",
    "sklearn.metrics.cluster._unsupervised.silhouette_samples",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.model_selection._search.ParameterGrid.__len__",
    "sklearn.model_selection._validation._incremental_fit_estimator",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors",
    "sklearn.utils._testing.create_memmap_backed_data",
    "sklearn.utils.estimator_checks.parametrize_with_checks.checks_generator"
  ],
  "functools.partial.args": [
    "traitlets.utils.getargspec.getargspec"
  ],
  "functools.partial.func": [
    "sklearn.utils.estimator_checks._get_check_estimator_ids",
    "traitlets.utils.getargspec.getargspec"
  ],
  "functools.partial.keywords": [
    "sklearn.utils.estimator_checks._get_check_estimator_ids",
    "traitlets.utils.getargspec.getargspec"
  ],
  "gdb.LineTable.__iter__": [
    "Ovr{gdb.LineTable.__iter__}"
  ],
  "gdb.LineTable.__next__": [
    "Ovr{gdb.LineTable.__next__}"
  ],
  "gdb.RegisterDescriptorIterator.__next__": [
    "Ovr{gdb.RegisterDescriptorIterator.__next__}"
  ],
  "gdb.RegisterGroupsIterator.__next__": [
    "Ovr{gdb.RegisterGroupsIterator.__next__}"
  ],
  "google.protobuf.internal.containers.BaseContainer.__getitem__": [
    "Ovr{google.protobuf.internal.containers.BaseContainer.__getitem__}"
  ],
  "google.protobuf.internal.containers.BaseContainer.__ne__": [
    "click.parser.Argument.process"
  ],
  "google.protobuf.internal.containers.MessageMap.__iter__": [
    "Ovr{google.protobuf.internal.containers.MessageMap.__iter__}"
  ],
  "google.protobuf.internal.containers.MessageMap.__setitem__": [
    "Ovr{google.protobuf.internal.containers.MessageMap.__setitem__}"
  ],
  "google.protobuf.internal.containers.MessageMap.get": [
    "Ovr{google.protobuf.internal.containers.MessageMap.get}"
  ],
  "google.protobuf.internal.containers.RepeatedCompositeFieldContainer.__eq__": [
    "click.parser.Argument.process"
  ],
  "google.protobuf.internal.containers.ScalarMap.__iter__": [
    "Ovr{google.protobuf.internal.containers.ScalarMap.__iter__}"
  ],
  "google.protobuf.internal.containers.ScalarMap.__setitem__": [
    "Ovr{google.protobuf.internal.containers.ScalarMap.__setitem__}"
  ],
  "google.protobuf.internal.containers.ScalarMap.get": [
    "Ovr{google.protobuf.internal.containers.ScalarMap.get}"
  ],
  "graphql.pyutils.default_ordered_dict.DefaultOrderedDict.__copy__": [
    "graphql.pyutils.default_ordered_dict.DefaultOrderedDict.copy"
  ],
  "graphql.pyutils.default_ordered_dict.DefaultOrderedDict.__init__": [
    "graphql.pyutils.default_ordered_dict.DefaultOrderedDict.__copy__"
  ],
  "graphql.pyutils.default_ordered_dict.DefaultOrderedDict.__repr__": [
    "jinja2.utils.LRUCache.__repr__",
    "pip._vendor.requests.structures.CaseInsensitiveDict.__repr__",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit",
    "sklearn.metrics._scorer._check_multimetric_scoring"
  ],
  "graphql.pyutils.default_ordered_dict.DefaultOrderedDict.copy": [
    "Ovr{graphql.pyutils.default_ordered_dict.DefaultOrderedDict.copy}"
  ],
  "graphql.pyutils.enum.EnumMeta.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "gzip.GzipFile.__init__": [
    "benchmarks.bench_hist_gradient_boosting_higgsboson.load_data",
    "sklearn.datasets._covtype.fetch_covtype",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._openml._open_openml_url",
    "sklearn.datasets._rcv1.fetch_rcv1"
  ],
  "gzip.GzipFile.close": [
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99"
  ],
  "hashlib._Hash.hexdigest": [
    "doc.tutorial.text_analytics.data.movie_reviews.fetch_data.$toplevel",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents",
    "sklearn.datasets._base._sha256",
    "sklearn.datasets._openml._load_arff_response"
  ],
  "hashlib._Hash.update": [
    "sklearn.datasets._base._sha256",
    "sklearn.datasets._openml._load_arff_response"
  ],
  "html.parser.HTMLParser.__init__": [
    "examples.applications.plot_out_of_core_classification.ReutersParser.__init__"
  ],
  "html.parser.HTMLParser.close": [
    "examples.applications.plot_out_of_core_classification.ReutersParser.parse"
  ],
  "html.parser.HTMLParser.feed": [
    "examples.applications.plot_out_of_core_classification.ReutersParser.parse"
  ],
  "html5lib._inputstream.EncodingBytes.__iter__": [
    "Ovr{html5lib._inputstream.EncodingBytes.__iter__}"
  ],
  "html5lib._trie.py.Trie.__iter__": [
    "Ovr{html5lib._trie.py.Trie.__iter__}"
  ],
  "html5lib._utils.BoundMethodDispatcher.__iter__": [
    "Ovr{html5lib._utils.BoundMethodDispatcher.__iter__}"
  ],
  "html5lib._utils.BoundMethodDispatcher.get": [
    "Ovr{html5lib._utils.BoundMethodDispatcher.get}"
  ],
  "html5lib._utils.MethodDispatcher.__getitem__": [
    "Ovr{html5lib._utils.MethodDispatcher.__getitem__}"
  ],
  "html5lib.treebuilders.base.ActiveFormattingElements.append": [
    "Ovr{html5lib.treebuilders.base.ActiveFormattingElements.append}"
  ],
  "http.cookiejar.Cookie.__init__": [
    "pip._vendor.requests.cookies.create_cookie"
  ],
  "http.cookiejar.CookieJar.__iter__": [
    "Ovr{http.cookiejar.CookieJar.__iter__}"
  ],
  "http.cookies.BaseCookie.__setitem__": [
    "Ovr{http.cookies.BaseCookie.__setitem__}"
  ],
  "http.cookies.Morsel.__eq__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__eq__"
  ],
  "http.cookies.Morsel.__setitem__": [
    "Ovr{http.cookies.Morsel.__setitem__}"
  ],
  "http.cookies.Morsel.setdefault": [
    "click.globals.push_context",
    "click.parser.Option.process",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary"
  ],
  "http.cookies.Morsel.update": [
    "benchmarks.bench_text_vectorizers.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "importlib_metadata.DistributionFinder.Context.__init__",
    "importlib_metadata.EntryPoint.__init__",
    "jinja2.nodes.args_as_const",
    "pip._vendor.requests.cookies.create_cookie",
    "sklearn.base.BaseEstimator.__setstate__",
    "sklearn.base.BaseEstimator._get_tags",
    "sklearn.base.BaseEstimator.get_params",
    "sklearn.calibration.CalibrationDisplay.plot",
    "sklearn.externals._arff.$toplevel",
    "sklearn.gaussian_process.kernels.Exponentiation.get_params",
    "sklearn.gaussian_process.kernels.KernelOperator.get_params",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.plot",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.plot",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.metrics.pairwise.pairwise_distances_chunked",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f"
  ],
  "humanfriendly.case.CaseInsensitiveDict.__setitem__": [
    "Ovr{humanfriendly.case.CaseInsensitiveDict.__setitem__}"
  ],
  "humanfriendly.case.CaseInsensitiveDict.get": [
    "Ovr{humanfriendly.case.CaseInsensitiveDict.get}"
  ],
  "humanfriendly.case.CaseInsensitiveDict.pop": [
    "Ovr{humanfriendly.case.CaseInsensitiveDict.pop}"
  ],
  "humanfriendly.case.CaseInsensitiveDict.setdefault": [
    "Ovr{humanfriendly.case.CaseInsensitiveDict.setdefault}"
  ],
  "humanfriendly.case.CaseInsensitiveDict.update": [
    "benchmarks.bench_text_vectorizers.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "importlib_metadata.DistributionFinder.Context.__init__",
    "importlib_metadata.EntryPoint.__init__",
    "jinja2.nodes.args_as_const",
    "pip._vendor.requests.cookies.create_cookie",
    "sklearn.base.BaseEstimator.__setstate__",
    "sklearn.base.BaseEstimator._get_tags",
    "sklearn.base.BaseEstimator.get_params",
    "sklearn.calibration.CalibrationDisplay.plot",
    "sklearn.externals._arff.$toplevel",
    "sklearn.gaussian_process.kernels.Exponentiation.get_params",
    "sklearn.gaussian_process.kernels.KernelOperator.get_params",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.plot",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.plot",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.metrics.pairwise.pairwise_distances_chunked",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f"
  ],
  "humanfriendly.case.CaseInsensitiveKey.__eq__": [
    "Ovr{humanfriendly.case.CaseInsensitiveKey.__eq__}"
  ],
  "importlib_metadata.Distribution._discover_resolvers": [
    "importlib_metadata.Distribution.discover"
  ],
  "importlib_metadata.Distribution.discover": [
    "importlib_metadata.distributions"
  ],
  "importlib_metadata.DistributionFinder.Context.__init__": [
    "importlib_metadata.Distribution.discover"
  ],
  "importlib_metadata.EntryPoint.__init__": [
    "importlib_metadata.compat.py39.ep_matches"
  ],
  "importlib_metadata.EntryPoint.matches": [
    "importlib_metadata.compat.py39.ep_matches"
  ],
  "importlib_metadata.EntryPoints.__getitem__": [
    "Ovr{importlib_metadata.EntryPoints.__getitem__}"
  ],
  "importlib_metadata.EntryPoints.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "importlib_metadata.EntryPoints.select": [
    "importlib_metadata.EntryPoints.__getitem__",
    "importlib_metadata.entry_points"
  ],
  "importlib_metadata._text.FoldedCase.__eq__": [
    "Ovr{importlib_metadata._text.FoldedCase.__eq__}"
  ],
  "importlib_metadata._text.FoldedCase.__lt__": [
    "Ovr{importlib_metadata._text.FoldedCase.__lt__}"
  ],
  "importlib_metadata._text.FoldedCase.__ne__": [
    "Ovr{importlib_metadata._text.FoldedCase.__ne__}"
  ],
  "importlib_metadata._text.FoldedCase.index": [
    "Ovr{importlib_metadata._text.FoldedCase.index}"
  ],
  "importlib_metadata._text.FoldedCase.lower": [
    "Ovr{importlib_metadata._text.FoldedCase.lower}",
    "importlib_metadata._text.FoldedCase.__eq__",
    "importlib_metadata._text.FoldedCase.__lt__",
    "importlib_metadata._text.FoldedCase.__ne__",
    "importlib_metadata._text.FoldedCase.index"
  ],
  "importlib_metadata._text.FoldedCase.split": [
    "Ovr{importlib_metadata._text.FoldedCase.split}"
  ],
  "influxdb_client.client.flux_table.CSVIterator.__iter__": [
    "Ovr{influxdb_client.client.flux_table.CSVIterator.__iter__}"
  ],
  "influxdb_client.client.flux_table.CSVIterator.__next__": [
    "Ovr{influxdb_client.client.flux_table.CSVIterator.__next__}"
  ],
  "inspect.BoundArguments.apply_defaults": [
    "sklearn.utils._param_validation.validate_params.decorator.wrapper"
  ],
  "inspect.FullArgSpec.__init__": [
    "traitlets.utils.getargspec.getargspec"
  ],
  "inspect.FullArgSpec.__new__": [
    "traitlets.utils.getargspec.getargspec"
  ],
  "inspect.Parameter.__init__": [
    "sklearn.utils._metadata_requests.RequestMethod.__get__"
  ],
  "inspect.Parameter.default": [
    "sklearn.metrics._scorer._BaseScorer._get_pos_label",
    "sklearn.utils._pprint._changed_params",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible"
  ],
  "inspect.Parameter.kind": [
    "sklearn.base.BaseEstimator._get_param_names",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.model_selection._split._build_repr",
    "sklearn.utils._metadata_requests._MetadataRequester._build_request_for_signature",
    "sklearn.utils._param_validation.validate_params.decorator.wrapper",
    "sklearn.utils._testing._get_args",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args"
  ],
  "inspect.Parameter.name": [
    "sklearn.base.BaseEstimator._get_param_names",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.model_selection._split._build_repr",
    "sklearn.utils._param_validation.validate_params.decorator.wrapper",
    "sklearn.utils._testing._get_args",
    "sklearn.utils.estimator_checks.check_fit_score_takes_y",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible"
  ],
  "inspect.Signature.__init__": [
    "sklearn.utils._metadata_requests.RequestMethod.__get__"
  ],
  "inspect.Signature.bind": [
    "sklearn.utils._param_validation.validate_params.decorator.wrapper"
  ],
  "inspect.Signature.parameters": [
    "sklearn.base.BaseEstimator._get_param_names",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.metrics._scorer._BaseScorer._get_pos_label",
    "sklearn.model_selection._split._build_repr",
    "sklearn.utils._metadata_requests._MetadataRequester._build_request_for_signature",
    "sklearn.utils._param_validation.validate_params.decorator.wrapper",
    "sklearn.utils._pprint._changed_params",
    "sklearn.utils._testing._get_args",
    "sklearn.utils.estimator_checks.check_fit_score_takes_y",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args",
    "sklearn.utils.validation.has_fit_parameter"
  ],
  "int.__abs__": [
    "Ovr{int.__abs__}"
  ],
  "int.__add__": [
    "Ovr{int.__add__}",
    "asv_benchmarks.benchmarks.common.get_from_config",
    "benchmarks.bench_glm.$toplevel",
    "benchmarks.bench_glmnet.$toplevel",
    "benchmarks.bench_isotonic.generate_perturbed_logarithm_dataset",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "benchmarks.bench_lasso.compute_bench",
    "benchmarks.bench_multilabel_metrics._tabulate",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_plot_fastkmeans.$toplevel",
    "benchmarks.bench_plot_fastkmeans.compute_bench",
    "benchmarks.bench_plot_fastkmeans.compute_bench_2",
    "benchmarks.bench_plot_hierarchical.compute_bench",
    "benchmarks.bench_plot_lasso_path.$toplevel",
    "benchmarks.bench_plot_lasso_path.compute_bench",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_plot_nmf.plot_results",
    "benchmarks.bench_plot_omp_lars.$toplevel",
    "benchmarks.bench_plot_omp_lars.compute_bench",
    "benchmarks.bench_plot_randomized_svd.get_data",
    "benchmarks.bench_plot_svd.compute_bench",
    "benchmarks.bench_saga.exp",
    "benchmarks.bench_sgd_regression.$toplevel",
    "benchmarks.bench_tree.$toplevel",
    "benchmarks.bench_tree.bench_scikit_tree_classifier",
    "benchmarks.bench_tree.bench_scikit_tree_regressor",
    "build_tools.github.check_wheels.$toplevel",
    "click.core.Context.__enter__",
    "click.core.Context.scope",
    "click.core.Option.value_from_envvar",
    "click.formatting.HelpFormatter.indent",
    "click.formatting.HelpFormatter.write_dl",
    "click.formatting.HelpFormatter.write_usage",
    "click.parser.OptionParser._match_short_opt",
    "click.parser._unpack_args",
    "click.shell_completion._is_incomplete_option",
    "click.termui._interpret_color",
    "click.types.IntRange._clamp",
    "click.utils.make_default_short_help",
    "doc.conf.generate_min_dependency_table",
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__delitem__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._parseCache",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.scanString",
    "doc.tutorial.machine_learning_map.pyparsing._trim_arity.extract_stack",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "doc.tutorial.machine_learning_map.pyparsing.srange",
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "examples.applications.plot_face_recognition.plot_gallery",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_prediction_latency.benchmark_throughputs",
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.applications.plot_topics_extraction_with_nmf_lda.plot_top_words",
    "examples.applications.svm_gui.Controller.decision_surface",
    "examples.applications.wikipedia_principal_eigenvector.$toplevel",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.classification.plot_lda.$toplevel",
    "examples.classification.plot_lda_qda.$toplevel",
    "examples.classification.plot_lda_qda.plot_ellipse",
    "examples.cluster.plot_agglomerative_clustering.$toplevel",
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_cluster_iris.$toplevel",
    "examples.cluster.plot_coin_segmentation.$toplevel",
    "examples.cluster.plot_dict_face_patches.$toplevel",
    "examples.cluster.plot_digits_agglomeration.$toplevel",
    "examples.cluster.plot_hdbscan.plot",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.cluster.plot_segmentation_toy.$toplevel",
    "examples.covariance.plot_robust_vs_empirical_covariance.$toplevel",
    "examples.covariance.plot_sparse_cov.$toplevel",
    "examples.cross_decomposition.plot_pcr_vs_pls.$toplevel",
    "examples.datasets.plot_random_multilabel_dataset.plot_2d",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "examples.decomposition.plot_sparse_coding.$toplevel",
    "examples.ensemble.plot_adaboost_multiclass.$toplevel",
    "examples.ensemble.plot_bias_variance.$toplevel",
    "examples.ensemble.plot_ensemble_oob.$toplevel",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.feature_selection.plot_f_test_vs_mi.$toplevel",
    "examples.feature_selection.plot_rfe_with_cross_validation.$toplevel",
    "examples.gaussian_process.plot_gpc_iris.$toplevel",
    "examples.gaussian_process.plot_gpc_xor.$toplevel",
    "examples.gaussian_process.plot_gpr_co2.$toplevel",
    "examples.gaussian_process.plot_gpr_on_structured_data.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.plot_gpr_samples",
    "examples.linear_model.plot_bayesian_ridge_curvefit.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.linear_model.plot_ransac.$toplevel",
    "examples.linear_model.plot_sgd_loss_functions.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_mnist.$toplevel",
    "examples.manifold.plot_manifold_sphere.$toplevel",
    "examples.manifold.plot_t_sne_perplexity.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "examples.mixture.plot_concentration_prior.plot_ellipses",
    "examples.mixture.plot_gmm.plot_results",
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.mixture.plot_gmm_covariances.make_ellipses",
    "examples.mixture.plot_gmm_init.$toplevel",
    "examples.mixture.plot_gmm_sin.plot_results",
    "examples.mixture.plot_gmm_sin.plot_samples",
    "examples.model_selection.plot_cv_indices.plot_cv_indices",
    "examples.model_selection.plot_train_error_vs_test_error.$toplevel",
    "examples.model_selection.plot_underfitting_overfitting.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.neighbors.plot_digits_kde_sampling.$toplevel",
    "examples.neighbors.plot_regression.$toplevel",
    "examples.neighbors.plot_species_kde.$toplevel",
    "examples.neural_networks.plot_mlp_alpha.$toplevel",
    "examples.neural_networks.plot_rbm_logistic_classification.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_discretization_strategies.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_versus_svm_iris.$toplevel",
    "examples.svm.plot_linearsvc_support_vectors.$toplevel",
    "examples.svm.plot_rbf_parameters.$toplevel",
    "examples.svm.plot_svm_kernels.$toplevel",
    "examples.svm.plot_svm_margin.$toplevel",
    "examples.text.plot_hashing_vs_dict_vectorizer.token_freqs",
    "examples.tree.plot_iris_dtc.$toplevel",
    "examples.tree.plot_unveil_tree_structure.$toplevel",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.runtime.AsyncLoopContext.length",
    "jinja2.runtime.LoopContext.depth",
    "jinja2.runtime.LoopContext.index",
    "jinja2.runtime.LoopContext.length",
    "pip._vendor.html5lib.treebuilders.base.ActiveFormattingElements.append",
    "pip._vendor.pyparsing.And.streamline",
    "pip._vendor.pyparsing.ParserElement.scanString",
    "pip._vendor.pyparsing._trim_arity.extract_stack",
    "pip._vendor.tenacity.RetryCallState.prepare_for_next_attempt",
    "prompt_toolkit.layout.utils._ExplodedList.__setitem__",
    "sklearn.__check_build.raise_build_error",
    "sklearn._loss.link._inclusive_low_high",
    "sklearn.cluster._affinity_propagation._affinity_propagation",
    "sklearn.cluster._bicluster.SpectralCoclustering._fit",
    "sklearn.cluster._birch._CFNode.append_subcluster",
    "sklearn.cluster._birch._iterate_sparse_X",
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans._kmeans_plusplus",
    "sklearn.cluster._kmeans._kmeans_single_elkan",
    "sklearn.cluster._kmeans._kmeans_single_lloyd",
    "sklearn.cluster._mean_shift._mean_shift_single_seed",
    "sklearn.cluster._mean_shift.get_bin_seeds",
    "sklearn.cluster._optics._extend_region",
    "sklearn.cluster._optics._extract_xi_labels",
    "sklearn.cluster._spectral.discretize",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.covariance._robust_covariance.fast_mcd",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf_shrinkage",
    "sklearn.cross_decomposition._pls._get_first_singular_vectors_power_method",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._lfw._load_imgs",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.datasets._samples_generator.make_swiss_roll",
    "sklearn.decomposition._base._BasePCA.get_covariance",
    "sklearn.decomposition._base._BasePCA.get_precision",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._check_convergence",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning._update_dict",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.get_covariance",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.get_precision",
    "sklearn.decomposition._factor_analysis._ortho_rotation",
    "sklearn.decomposition._fastica._ica_def",
    "sklearn.decomposition._fastica._ica_par",
    "sklearn.decomposition._lda.LatentDirichletAllocation._approx_bound",
    "sklearn.decomposition._lda.LatentDirichletAllocation.fit",
    "sklearn.decomposition._lda._update_doc_distribution",
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform",
    "sklearn.decomposition._nmf.MiniBatchNMF._minibatch_convergence",
    "sklearn.decomposition._nmf._fit_coordinate_descent",
    "sklearn.decomposition._nmf._special_sparse_dot",
    "sklearn.decomposition._pca._assess_dimension",
    "sklearn.ensemble._bagging.BaggingClassifier._set_oob_score",
    "sklearn.ensemble._bagging.BaggingClassifier.decision_function",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_proba",
    "sklearn.ensemble._bagging.BaggingRegressor.predict",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._bagging._parallel_build_estimators",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._should_stop",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._staged_raw_predict",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.split_next",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.ensemble._voting._BaseVoting.fit",
    "sklearn.externals._arff.ArffDecoder._decode",
    "sklearn.externals._arff.ArffDecoder._decode.stream",
    "sklearn.externals._arff.COOData.encode_data",
    "sklearn.externals._arff.DenseGeneratorData.encode_data",
    "sklearn.externals._arff.LODGeneratorData.encode_data",
    "sklearn.feature_extraction.image.PatchExtractor.transform",
    "sklearn.feature_extraction.image.reconstruct_from_patches_2d",
    "sklearn.feature_extraction.text._VectorizerMixin._char_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin._char_wb_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin._word_ngrams",
    "sklearn.feature_selection._univariate_selection.SelectFdr._get_support_mask",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood",
    "sklearn.gaussian_process.kernels.Kernel._check_bounds_params",
    "sklearn.gaussian_process.kernels.RationalQuadratic.__call__",
    "sklearn.impute._base.SimpleImputer._sparse_fit",
    "sklearn.impute._base.SimpleImputer.inverse_transform",
    "sklearn.impute._iterative.IterativeImputer.transform",
    "sklearn.linear_model._bayes.ARDRegression.fit",
    "sklearn.linear_model._bayes.BayesianRidge.fit",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.line_search",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.solve",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._omp._cholesky_omp",
    "sklearn.linear_model._omp._gram_omp",
    "sklearn.linear_model._omp.orthogonal_mp",
    "sklearn.linear_model._omp.orthogonal_mp_gram",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.linear_model._ridge._RidgeGCV._sparse_multidot_diag",
    "sklearn.linear_model._sag.sag_solver",
    "sklearn.manifold._locally_linear.locally_linear_embedding",
    "sklearn.manifold._mds._smacof_single",
    "sklearn.manifold._t_sne._gradient_descent",
    "sklearn.metrics._classification.precision_recall_fscore_support",
    "sklearn.metrics._ranking._binary_clf_curve",
    "sklearn.metrics._ranking._binary_roc_auc_score",
    "sklearn.metrics.cluster._supervised.adjusted_rand_score",
    "sklearn.metrics.cluster._supervised.homogeneity_completeness_v_measure",
    "sklearn.metrics.cluster._unsupervised._silhouette_reduce",
    "sklearn.mixture._base.BaseMixture.fit_predict",
    "sklearn.mixture._gaussian_mixture._estimate_gaussian_covariances_tied",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.model_selection._split.TimeSeriesSplit.split",
    "sklearn.model_selection._split._pprint",
    "sklearn.multiclass.OneVsOneClassifier.fit",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_lbfgs",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._forward_pass",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._initialize",
    "sklearn.neural_network._stochastic_optimizers.AdamOptimizer._get_updates",
    "sklearn.pipeline._name_estimators",
    "sklearn.preprocessing._data.QuantileTransformer._sparse_fit",
    "sklearn.preprocessing._data.QuantileTransformer._transform",
    "sklearn.preprocessing._data.RobustScaler.fit",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform",
    "sklearn.preprocessing._polynomial.SplineTransformer.transform",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.fit",
    "sklearn.svm._base._one_vs_one_coef",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.tree._reingold_tilford.DrawTree.__init__",
    "sklearn.utils._estimator_html_repr._IDCounter.get_id",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._format_items",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._format_params_or_dict_items",
    "sklearn.utils.estimator_checks._enforce_estimator_tags_y",
    "sklearn.utils.estimator_checks.check_regressor_multioutput",
    "sklearn.utils.graph.single_source_shortest_path_length",
    "sklearn.utils.multiclass._ovr_decision_function",
    "sklearn.utils.multiclass.class_distribution",
    "sklearn.utils.optimize._cg",
    "sklearn.utils.optimize._newton_cg",
    "sklearn.utils.sparsefuncs._get_median",
    "sklearn.utils.tests.test_fast_dict.test_int_float_dict",
    "sklearn.utils.tests.test_pprint.test_n_max_elements_to_show",
    "traitlets.traitlets._CallbackWrapper.__init__"
  ],
  "int.__eq__": [
    "Ovr{int.__eq__}",
    "benchmarks.bench_plot_hierarchical.$toplevel",
    "benchmarks.bench_plot_nmf._fit_projected_gradient",
    "benchmarks.bench_plot_nmf._nls_subproblem",
    "benchmarks.bench_plot_randomized_svd.bench_c",
    "build_tools.github.check_wheels.$toplevel",
    "click._compat.open_stream",
    "click.core.Argument._parse_decls",
    "click.core.Argument.make_metavar",
    "click.core.BaseCommand.main",
    "click.core.Option.__init__",
    "click.core.Option.value_from_envvar",
    "click.core.Parameter.__init__",
    "click.core.Parameter.make_metavar",
    "click.core.Parameter.type_cast_value",
    "click.core.Parameter.type_cast_value.convert",
    "click.core.Parameter.value_from_envvar",
    "click.core.Parameter.value_is_missing",
    "click.formatting.HelpFormatter.write_dl",
    "click.parser.Argument.process",
    "click.parser.Option.__init__",
    "click.parser.OptionParser._get_value_from_state",
    "click.parser._unpack_args",
    "click.shell_completion._is_incomplete_argument",
    "click.types.Tuple.convert",
    "click.utils.make_default_short_help",
    "doc.sphinxext.sphinx_issues.IssueRole.__call__",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.Dict.postParse",
    "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.streamline",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.getName",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.pop",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.infixNotation",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousLiteral.copyTokenToRepeater",
    "doc.tutorial.machine_learning_map.pyparsing.nestedExpr",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.svm_gui.Controller.fit",
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_dict_face_patches.$toplevel",
    "examples.cluster.plot_digits_agglomeration.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.ensemble.plot_bias_variance.$toplevel",
    "examples.feature_selection.plot_f_test_vs_mi.$toplevel",
    "examples.linear_model.plot_bayesian_ridge_curvefit.$toplevel",
    "examples.linear_model.plot_logistic_l1_l2_sparsity.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.score_estimator",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.$toplevel",
    "examples.mixture.plot_concentration_prior.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.model_selection.plot_roc_crossval.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_discretization_strategies.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.plot_feature_effects",
    "jinja2.environment.create_cache",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.nodes.Node.__init__",
    "jinja2.parser.Parser.parse_concat",
    "jinja2.parser.Parser.parse_subscript",
    "packaging.version.Version.__str__",
    "parso.utils.PythonVersionInfo.__eq__",
    "parso.utils.PythonVersionInfo.__gt__",
    "pip._vendor.distlib.compat.OrderedDict.__eq__",
    "pip._vendor.distlib.compat.OrderedDict.update",
    "pip._vendor.html5lib.treebuilders.base.ActiveFormattingElements.append",
    "pip._vendor.packaging.version.Version.__str__",
    "pip._vendor.pyparsing.ParseExpression.streamline",
    "sklearn._build_utils.openmp_helpers.check_openmp_support",
    "sklearn.base.BaseEstimator._check_feature_names",
    "sklearn.base.BaseEstimator._get_param_names",
    "sklearn.calibration._CalibratedClassifier.predict_proba",
    "sklearn.cluster._affinity_propagation._affinity_propagation",
    "sklearn.cluster._mean_shift._mean_shift_single_seed",
    "sklearn.cluster._mean_shift.get_bin_seeds",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.compose._column_transformer._is_empty_column_selection",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._shrunk_covariance._ledoit_wolf",
    "sklearn.covariance._shrunk_covariance._oas",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf_shrinkage",
    "sklearn.cross_decomposition._pls._get_first_singular_vectors_power_method",
    "sklearn.datasets._arff_parser._post_process_frame",
    "sklearn.datasets._kddcup99._mkdirp",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._lfw._fetch_lfw_people",
    "sklearn.datasets._lfw._load_imgs",
    "sklearn.datasets._openml._get_data_info_by_name",
    "sklearn.datasets._openml._get_json_content_from_openml_api",
    "sklearn.datasets._openml._retry_on_network_error.decorator.wrapper",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_circles",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.datasets._samples_generator.make_multilabel_classification",
    "sklearn.datasets._samples_generator.make_multilabel_classification.sample_example",
    "sklearn.datasets._species_distributions._load_coverage",
    "sklearn.datasets.tests.test_rcv1.test_fetch_rcv1",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit",
    "sklearn.decomposition._lda.LatentDirichletAllocation.fit",
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform",
    "sklearn.decomposition._nmf._fit_coordinate_descent",
    "sklearn.decomposition._nmf._fit_multiplicative_update",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit",
    "sklearn.dummy.DummyRegressor.fit",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._bagging.BaseBagging._validate_y",
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble._validate_estimators",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._forest.ForestClassifier.predict_proba",
    "sklearn.ensemble._forest._accumulate_prediction",
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stages",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._print_iteration_stats",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.split_next",
    "sklearn.ensemble._stacking.StackingClassifier._validate_estimators",
    "sklearn.ensemble._stacking._BaseStacking._concatenate_predictions",
    "sklearn.ensemble._voting._BaseVoting.fit",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost_discrete",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.feature_importances_",
    "sklearn.externals._arff.ArffEncoder.iter_encode",
    "sklearn.externals._arff.DenseGeneratorData.decode_rows",
    "sklearn.externals._arff.DenseGeneratorData.encode_data",
    "sklearn.externals._arff._escape_sub_callback",
    "sklearn.externals._packaging.version.Version.__str__",
    "sklearn.externals._packaging.version.Version.base_version",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._transform",
    "sklearn.feature_extraction.image.PatchExtractor.transform",
    "sklearn.feature_extraction.text.CountVectorizer._limit_features",
    "sklearn.feature_extraction.text.TfidfVectorizer.idf_@setter",
    "sklearn.feature_extraction.text._VectorizerMixin._char_wb_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin._check_stop_words_consistency",
    "sklearn.feature_extraction.text._VectorizerMixin._check_vocabulary",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.gaussian_process.kernels.CompoundKernel.__eq__",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.impute._base.SimpleImputer._dense_fit",
    "sklearn.impute._base.SimpleImputer._sparse_fit",
    "sklearn.impute._base._most_frequent",
    "sklearn.impute._knn.KNNImputer.transform.process_chunk",
    "sklearn.inspection._partial_dependence._grid_from_X",
    "sklearn.inspection._pd_utils._check_feature_names",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.isotonic.IsotonicRegression._build_f",
    "sklearn.kernel_ridge.KernelRidge.fit",
    "sklearn.linear_model._base.LinearClassifierMixin.predict",
    "sklearn.linear_model._base._deprecate_normalize",
    "sklearn.linear_model._bayes.BayesianRidge.fit",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._omp._cholesky_omp",
    "sklearn.linear_model._omp._gram_omp",
    "sklearn.linear_model._ridge._BaseRidgeCV.fit",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance_intercept",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance_no_intercept",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_gram",
    "sklearn.linear_model._ridge._RidgeGCV._solve_svd_design_matrix",
    "sklearn.linear_model._ridge._RidgeGCV.fit",
    "sklearn.linear_model._stochastic_gradient.SGDClassifier.predict_proba",
    "sklearn.linear_model._stochastic_gradient._prepare_fit_binary",
    "sklearn.linear_model._stochastic_gradient.fit_binary",
    "sklearn.manifold._t_sne._gradient_descent",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._classification.confusion_matrix",
    "sklearn.metrics._classification.log_loss",
    "sklearn.metrics._classification.precision_recall_fscore_support",
    "sklearn.metrics._ranking._binary_roc_auc_score",
    "sklearn.metrics._ranking._multiclass_roc_auc_score",
    "sklearn.metrics._ranking.average_precision_score",
    "sklearn.metrics._ranking.det_curve",
    "sklearn.metrics._ranking.top_k_accuracy_score",
    "sklearn.metrics._scorer._MultimetricScorer._use_cache",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.metrics.cluster._supervised.adjusted_rand_score",
    "sklearn.metrics.cluster._supervised.entropy",
    "sklearn.metrics.cluster._supervised.homogeneity_completeness_v_measure",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._search.ParameterGrid.__init__",
    "sklearn.model_selection._split._validate_shuffle_split",
    "sklearn.model_selection._split.train_test_split",
    "sklearn.model_selection._validation._check_is_permutation",
    "sklearn.model_selection._validation._warn_or_raise_about_fit_failures",
    "sklearn.multiclass.OneVsOneClassifier.fit",
    "sklearn.multiclass.OneVsRestClassifier.decision_function",
    "sklearn.multiclass.OneVsRestClassifier.predict_proba",
    "sklearn.multiclass._fit_binary",
    "sklearn.multiclass._partial_fit_ovo_binary",
    "sklearn.multioutput._BaseChain.predict",
    "sklearn.naive_bayes.ComplementNB._joint_log_likelihood",
    "sklearn.naive_bayes.GaussianNB._partial_fit",
    "sklearn.naive_bayes._BaseDiscreteNB._update_class_log_prior",
    "sklearn.naive_bayes._BaseDiscreteNB.fit",
    "sklearn.naive_bayes._BaseDiscreteNB.partial_fit",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.fit",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._forward_pass",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._forward_pass_fast",
    "sklearn.pipeline._name_estimators",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.preprocessing._encoders._BaseEncoder._identify_infrequent",
    "sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform",
    "sklearn.preprocessing._label._inverse_binarize_thresholding",
    "sklearn.preprocessing._label.label_binarize",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.fit",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.fit",
    "sklearn.svm._base.BaseLibSVM._decision_function",
    "sklearn.svm._base.BaseLibSVM._warn_from_fit_status",
    "sklearn.svm._base.BaseLibSVM.fit",
    "sklearn.svm._classes.LinearSVC.fit",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._export._BaseTreeExporter.get_color",
    "sklearn.tree._export._BaseTreeExporter.get_fill_color",
    "sklearn.tree._export._DOTTreeExporter.export",
    "sklearn.tree._export.export_text",
    "sklearn.tree._reingold_tilford.first_walk",
    "sklearn.utils.$toplevel",
    "sklearn.utils._approximate_mode",
    "sklearn.utils._array_api._ArrayAPIWrapper.take",
    "sklearn.utils._determine_key_type",
    "sklearn.utils._encode._extract_missing",
    "sklearn.utils._encode._unique_np",
    "sklearn.utils._encode._unique_python",
    "sklearn.utils._mocking.CheckingClassifier.decision_function",
    "sklearn.utils._param_validation.HasMethods.__str__",
    "sklearn.utils._param_validation.validate_parameter_constraints",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._format_items",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._format_params_or_dict_items",
    "sklearn.utils._pprint._safe_repr",
    "sklearn.utils._response._get_response_values_binary",
    "sklearn.utils._safe_indexing",
    "sklearn.utils._show_versions.show_versions",
    "sklearn.utils._testing._get_args",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.class_weight.compute_class_weight",
    "sklearn.utils.class_weight.compute_sample_weight",
    "sklearn.utils.estimator_checks.check_class_weight_classifiers",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.estimator_checks.check_classifiers_predictions",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.estimator_checks.check_outlier_corruption",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out_pandas",
    "sklearn.utils.extmath._nanaverage",
    "sklearn.utils.metaestimators._BaseComposition._validate_names",
    "sklearn.utils.multiclass.is_multilabel",
    "sklearn.utils.resample",
    "sklearn.utils.tests.test_fast_dict.test_int_float_dict",
    "sklearn.utils.tests.test_pprint.test_complexity_print_changed_only",
    "sklearn.utils.validation._check_feature_names_in",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args",
    "sklearn.utils.validation._ensure_sparse_format",
    "sklearn.utils.validation._get_feature_names",
    "sklearn.utils.validation._num_samples",
    "sklearn.utils.validation.check_array",
    "sklearn.utils.validation.column_or_1d"
  ],
  "int.__floordiv__": [
    "benchmarks.bench_sparsify.$toplevel",
    "examples.applications.plot_tomography_l1_reconstruction.$toplevel",
    "examples.calibration.plot_calibration.$toplevel",
    "examples.cross_decomposition.plot_compare_cross_decomposition.$toplevel",
    "examples.decomposition.plot_sparse_coding.$toplevel",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.$toplevel",
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.mixture.plot_gmm_init.$toplevel",
    "examples.preprocessing.plot_discretization_strategies.$toplevel",
    "examples.svm.plot_svm_scale_c.$toplevel",
    "sklearn.covariance._robust_covariance.fast_mcd",
    "sklearn.datasets._olivetti_faces.fetch_olivetti_faces",
    "sklearn.impute._iterative.IterativeImputer.transform",
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.multiclass.OneVsOneClassifier.partial_fit",
    "sklearn.preprocessing._data.QuantileTransformer._sparse_fit"
  ],
  "int.__ge__": [
    "Ovr{int.__ge__}",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_plot_hierarchical.$toplevel",
    "click.formatting.HelpFormatter.write_usage",
    "click.parser.OptionParser._get_value_from_state",
    "click.parser.OptionParser._match_short_opt",
    "click.parser._unpack_args",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__delitem__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.scanString",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel",
    "jinja2.debug.get_template_locals",
    "jinja2.environment.create_cache",
    "jinja2.lexer.Lexer.tokeniter",
    "pip._vendor.pyparsing.ParserElement.scanString",
    "sklearn.base.BaseEstimator._check_feature_names.add_names",
    "sklearn.cluster._affinity_propagation._affinity_propagation",
    "sklearn.cluster._agglomerative._single_linkage_tree",
    "sklearn.cluster._birch.Birch._global_clustering",
    "sklearn.cluster._birch._CFNode.insert_cf_subcluster",
    "sklearn.cluster._kmeans.KMeans.fit",
    "sklearn.cluster._kmeans._BaseKMeans._check_mkl_vcomp",
    "sklearn.cluster._mean_shift.estimate_bandwidth",
    "sklearn.cluster._mean_shift.get_bin_seeds",
    "sklearn.cluster._spectral.discretize",
    "sklearn.covariance._robust_covariance.fast_mcd",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._arff_parser._post_process_frame",
    "sklearn.datasets._lfw._fetch_lfw_people",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._pca.PCA._fit_full",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._should_stop",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.fit",
    "sklearn.externals._arff.COOData.encode_data",
    "sklearn.externals._packaging.version.Version.major",
    "sklearn.externals._packaging.version.Version.micro",
    "sklearn.externals._packaging.version.Version.minor",
    "sklearn.feature_extraction.image._compute_n_patches",
    "sklearn.feature_extraction.text._VectorizerMixin._char_wb_ngrams",
    "sklearn.impute._base.SimpleImputer.inverse_transform",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._quantile.QuantileRegressor.fit",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.metrics._classification._check_set_wise_labels",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.plot",
    "sklearn.metrics.cluster._unsupervised.check_number_of_labels",
    "sklearn.metrics.pairwise._euclidean_distances_upcast",
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._search.ParameterSampler.__iter__",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit",
    "sklearn.preprocessing._label.label_binarize",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.fit",
    "sklearn.svm._base.BaseSVC._validate_targets",
    "sklearn.svm._base._fit_liblinear",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.estimator_checks.check_clustering",
    "sklearn.utils.gen_even_slices",
    "sklearn.utils.get_chunk_n_rows",
    "sklearn.utils.optimize._newton_cg"
  ],
  "int.__gt__": [
    "Ovr{int.__gt__}",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "build_tools.get_comment.find_lint_bot_comments",
    "click._textwrap.TextWrapper.indent_only",
    "click.core.Parameter.__init__",
    "click.formatting.HelpFormatter.write_dl",
    "click.parser.Argument.process",
    "click.parser.OptionParser._get_value_from_state",
    "click.parser.OptionParser._process_args_for_options",
    "click.parser._unpack_args",
    "click.shell_completion._is_incomplete_argument",
    "click.shell_completion._is_incomplete_option",
    "click.utils.make_default_short_help",
    "doc.sphinxext.add_toctree_functions.docutils_node_to_jinja",
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Or.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._FifoCache.__init__.set",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__str__.charsAsStr",
    "doc.tutorial.machine_learning_map.pyparsing.WordEnd.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.traceParseAction.z",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution",
    "examples.applications.svm_gui.View.remove_surface",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.tree.plot_unveil_tree_structure.$toplevel",
    "maint_tools.sort_whats_new.$toplevel",
    "maint_tools.update_tracking_issue.create_or_update_issue",
    "pip._vendor.distlib.compat.OrderedDict.__init__",
    "pip._vendor.distlib.compat.OrderedDict.update",
    "pip._vendor.urllib3._collections.RecentlyUsedContainer.__setitem__",
    "sklearn.base.BaseEstimator.__repr__",
    "sklearn.calibration.calibration_curve",
    "sklearn.cluster._birch._CFNode.insert_cf_subcluster",
    "sklearn.cluster._optics._extend_region",
    "sklearn.cluster._spectral.discretize",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._openml._download_data_to_bunch",
    "sklearn.datasets._openml._get_data_info_by_name",
    "sklearn.datasets._openml._verify_target_data_type",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._twenty_newsgroups.strip_newsgroup_footer",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning._update_dict",
    "sklearn.decomposition._fastica.FastICA._fit_transform",
    "sklearn.decomposition._pca.PCA._fit",
    "sklearn.decomposition._pca.PCA._fit_full",
    "sklearn.decomposition._pca.PCA._fit_truncated",
    "sklearn.decomposition._pca._assess_dimension",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._gb.BaseGradientBoosting._check_params",
    "sklearn.ensemble._gb.BaseGradientBoosting._is_initialized",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.fit",
    "sklearn.ensemble._hist_gradient_boosting.binning._find_binning_thresholds",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_interaction_cst",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._is_fitted",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._finalize_splittable_nodes",
    "sklearn.ensemble._voting.VotingClassifier.fit",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor._boost",
    "sklearn.externals._arff.LODGeneratorData.encode_data",
    "sklearn.feature_extraction.text._VectorizerMixin.build_tokenizer",
    "sklearn.gaussian_process.kernels.Kernel.bounds",
    "sklearn.gaussian_process.kernels.Kernel.set_params",
    "sklearn.gaussian_process.kernels.Kernel.theta",
    "sklearn.gaussian_process.kernels.RBF.anisotropic",
    "sklearn.gaussian_process.kernels.RationalQuadratic.__call__",
    "sklearn.inspection._plot.decision_boundary._check_boundary_response_method",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.isotonic.check_increasing",
    "sklearn.linear_model._bayes.ARDRegression.fit",
    "sklearn.linear_model._coordinate_descent.enet_path",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.solve",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._omp._cholesky_omp",
    "sklearn.linear_model._omp._gram_omp",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.linear_model._ridge._RidgeGCV._diag_dot",
    "sklearn.manifold._t_sne.TSNE._tsne",
    "sklearn.metrics._classification._check_targets",
    "sklearn.metrics._ranking.precision_recall_curve",
    "sklearn.metrics._ranking.roc_curve",
    "sklearn.metrics._ranking.top_k_accuracy_score",
    "sklearn.metrics._regression.mean_tweedie_deviance",
    "sklearn.metrics._scorer._MultimetricScorer._use_cache",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.model_selection._split.LeaveOneGroupOut._iter_test_masks",
    "sklearn.model_selection._split.TimeSeriesSplit.split",
    "sklearn.model_selection._split._BaseKFold.__init__",
    "sklearn.model_selection._split._pprint",
    "sklearn.model_selection._validation._enforce_prediction_order",
    "sklearn.preprocessing._data.QuantileTransformer._sparse_fit",
    "sklearn.preprocessing._data.RobustScaler.fit",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform",
    "sklearn.svm._base.BaseSVC.decision_function",
    "sklearn.svm._base.BaseSVC.predict",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.tree._export._DOTTreeExporter.head",
    "sklearn.utils._approximate_mode",
    "sklearn.utils._testing.assert_no_warnings",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.estimator_checks.check_supervised_y_2d",
    "sklearn.utils.multiclass.type_of_target",
    "sklearn.utils.multiclass.unique_labels",
    "sklearn.utils.optimize._cg",
    "sklearn.utils.tests.test_estimator_checks.OneClassSampleErrorClassifier.fit",
    "sklearn.utils.tests.test_estimator_checks.UntaggedBinaryClassifier.fit",
    "sklearn.utils.tests.test_estimator_checks.UntaggedBinaryClassifier.partial_fit",
    "sklearn.utils.validation._check_monotonic_cst",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f",
    "sklearn.utils.validation._get_feature_names",
    "sklearn.utils.validation._is_fitted",
    "sklearn.utils.validation._num_features",
    "sklearn.utils.validation.check_array",
    "sklearn.utils.validation.check_consistent_length"
  ],
  "int.__le__": [
    "Ovr{int.__le__}",
    "benchmarks.bench_hist_gradient_boosting.$toplevel",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "build_tools.get_comment.find_lint_bot_comments",
    "click._textwrap.TextWrapper.indent_only",
    "click.core.Parameter.__init__",
    "click.formatting.HelpFormatter.write_dl",
    "click.parser.Argument.process",
    "click.parser.OptionParser._get_value_from_state",
    "click.parser.OptionParser._process_args_for_options",
    "click.parser._unpack_args",
    "click.shell_completion._is_incomplete_option",
    "click.utils.make_default_short_help",
    "doc.sphinxext.add_toctree_functions.docutils_node_to_jinja",
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Or.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._FifoCache.__init__.set",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__str__.charsAsStr",
    "doc.tutorial.machine_learning_map.pyparsing.WordEnd.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.traceParseAction.z",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution",
    "examples.applications.svm_gui.View.remove_surface",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.tree.plot_unveil_tree_structure.$toplevel",
    "maint_tools.sort_whats_new.$toplevel",
    "maint_tools.update_tracking_issue.create_or_update_issue",
    "pip._vendor.distlib.compat.OrderedDict.__init__",
    "pip._vendor.distlib.compat.OrderedDict.update",
    "pip._vendor.urllib3._collections.RecentlyUsedContainer.__setitem__",
    "sklearn.base.BaseEstimator.__repr__",
    "sklearn.calibration.calibration_curve",
    "sklearn.cluster._birch._CFNode.insert_cf_subcluster",
    "sklearn.cluster._optics._extend_region",
    "sklearn.cluster._spectral.discretize",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.datasets._openml._download_data_to_bunch",
    "sklearn.datasets._openml._get_data_info_by_name",
    "sklearn.datasets._openml._verify_target_data_type",
    "sklearn.datasets._twenty_newsgroups.strip_newsgroup_footer",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning._update_dict",
    "sklearn.decomposition._fastica.FastICA._fit_transform",
    "sklearn.decomposition._pca.PCA._fit",
    "sklearn.decomposition._pca.PCA._fit_full",
    "sklearn.decomposition._pca.PCA._fit_truncated",
    "sklearn.decomposition._pca._assess_dimension",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.fit",
    "sklearn.ensemble._hist_gradient_boosting.binning._find_binning_thresholds",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_interaction_cst",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._finalize_splittable_nodes",
    "sklearn.ensemble._voting.VotingClassifier.fit",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor._boost",
    "sklearn.externals._arff.LODGeneratorData.encode_data",
    "sklearn.feature_extraction.text._VectorizerMixin.build_tokenizer",
    "sklearn.gaussian_process.kernels.Kernel.bounds",
    "sklearn.gaussian_process.kernels.Kernel.set_params",
    "sklearn.gaussian_process.kernels.Kernel.theta",
    "sklearn.gaussian_process.kernels.RationalQuadratic.__call__",
    "sklearn.inspection._partial_dependence._grid_from_X",
    "sklearn.inspection._plot.decision_boundary._check_boundary_response_method",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.isotonic.check_increasing",
    "sklearn.linear_model._bayes.ARDRegression.fit",
    "sklearn.linear_model._coordinate_descent.enet_path",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.solve",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._omp._cholesky_omp",
    "sklearn.linear_model._omp._gram_omp",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.linear_model._ridge._RidgeGCV._diag_dot",
    "sklearn.manifold._t_sne.TSNE._tsne",
    "sklearn.metrics._classification._check_targets",
    "sklearn.metrics._ranking.precision_recall_curve",
    "sklearn.metrics._ranking.roc_curve",
    "sklearn.metrics._ranking.top_k_accuracy_score",
    "sklearn.metrics._regression.mean_tweedie_deviance",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.model_selection._split.LeaveOneGroupOut._iter_test_masks",
    "sklearn.model_selection._split.TimeSeriesSplit.split",
    "sklearn.model_selection._split._BaseKFold.__init__",
    "sklearn.model_selection._split._pprint",
    "sklearn.model_selection._validation._enforce_prediction_order",
    "sklearn.preprocessing._data.QuantileTransformer._sparse_fit",
    "sklearn.preprocessing._data.RobustScaler.fit",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform",
    "sklearn.svm._base.BaseSVC.decision_function",
    "sklearn.svm._base.BaseSVC.predict",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.tree._export._DOTTreeExporter.head",
    "sklearn.utils._approximate_mode",
    "sklearn.utils._response._get_response_values",
    "sklearn.utils._testing.assert_no_warnings",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.multiclass.type_of_target",
    "sklearn.utils.multiclass.unique_labels",
    "sklearn.utils.optimize._cg",
    "sklearn.utils.tests.test_estimator_checks.OneClassSampleErrorClassifier.fit",
    "sklearn.utils.tests.test_estimator_checks.UntaggedBinaryClassifier.fit",
    "sklearn.utils.tests.test_estimator_checks.UntaggedBinaryClassifier.partial_fit",
    "sklearn.utils.validation._check_monotonic_cst",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f",
    "sklearn.utils.validation._get_feature_names",
    "sklearn.utils.validation._num_features",
    "sklearn.utils.validation.check_array",
    "sklearn.utils.validation.check_consistent_length"
  ],
  "int.__lshift__": [
    "click._compat.open_stream"
  ],
  "int.__lt__": [
    "Ovr{int.__lt__}",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_plot_hierarchical.$toplevel",
    "click.formatting.HelpFormatter.write_usage",
    "click.parser.OptionParser._get_value_from_state",
    "click.parser.OptionParser._match_short_opt",
    "click.parser._unpack_args",
    "click.shell_completion._is_incomplete_argument",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__delitem__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.scanString",
    "doc.tutorial.machine_learning_map.pyparsing.col",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel",
    "jinja2.debug.get_template_locals",
    "jinja2.environment.create_cache",
    "jinja2.lexer.Lexer.tokeniter",
    "pip._vendor.pyparsing.ParserElement.scanString",
    "pip._vendor.pyparsing.col",
    "sklearn.base.BaseEstimator._check_feature_names.add_names",
    "sklearn.cluster._affinity_propagation._affinity_propagation",
    "sklearn.cluster._agglomerative._single_linkage_tree",
    "sklearn.cluster._birch.Birch._global_clustering",
    "sklearn.cluster._birch._CFNode.insert_cf_subcluster",
    "sklearn.cluster._kmeans.KMeans.fit",
    "sklearn.cluster._kmeans._BaseKMeans._check_mkl_vcomp",
    "sklearn.cluster._mean_shift.estimate_bandwidth",
    "sklearn.cluster._spectral.discretize",
    "sklearn.covariance._robust_covariance.fast_mcd",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._arff_parser._post_process_frame",
    "sklearn.datasets._lfw._fetch_lfw_people",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._pca.PCA._fit_full",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._should_stop",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.fit",
    "sklearn.externals._arff.COOData.encode_data",
    "sklearn.feature_extraction.image._compute_n_patches",
    "sklearn.feature_extraction.text._VectorizerMixin._char_wb_ngrams",
    "sklearn.impute._base.SimpleImputer.inverse_transform",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._quantile.QuantileRegressor.fit",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.metrics._classification._check_set_wise_labels",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.plot",
    "sklearn.metrics.cluster._unsupervised.check_number_of_labels",
    "sklearn.metrics.pairwise._euclidean_distances_upcast",
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._search.ParameterSampler.__iter__",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit",
    "sklearn.preprocessing._label.label_binarize",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.fit",
    "sklearn.svm._base.BaseSVC._validate_targets",
    "sklearn.svm._base._fit_liblinear",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.gen_even_slices",
    "sklearn.utils.get_chunk_n_rows",
    "sklearn.utils.multiclass.is_multilabel",
    "sklearn.utils.optimize._newton_cg",
    "sklearn.utils.validation._check_psd_eigenvalues"
  ],
  "int.__mod__": [
    "benchmarks.bench_multilabel_metrics._plot",
    "benchmarks.bench_plot_hierarchical.$toplevel",
    "benchmarks.bench_plot_nmf.plot_results",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects",
    "examples.cluster.plot_dict_face_patches.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.$toplevel",
    "sklearn.__check_build.raise_build_error",
    "sklearn.cluster._affinity_propagation._affinity_propagation",
    "sklearn.datasets._lfw._load_imgs",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._lda.LatentDirichletAllocation.fit",
    "sklearn.decomposition._nmf._fit_multiplicative_update",
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stages",
    "sklearn.impute._iterative.IterativeImputer.transform",
    "sklearn.manifold._t_sne._gradient_descent",
    "sklearn.preprocessing._polynomial.SplineTransformer.transform"
  ],
  "int.__mul__": [
    "Ovr{int.__mul__}",
    "benchmarks.bench_glm.$toplevel",
    "benchmarks.bench_glmnet.$toplevel",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_plot_fastkmeans.compute_bench",
    "benchmarks.bench_plot_hierarchical.compute_bench",
    "benchmarks.bench_plot_lasso_path.compute_bench",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_plot_omp_lars.compute_bench",
    "benchmarks.bench_plot_polynomial_kernel_approximation.$toplevel",
    "benchmarks.bench_plot_randomized_svd.bench_b",
    "benchmarks.bench_plot_randomized_svd.get_data",
    "benchmarks.bench_plot_svd.compute_bench",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "benchmarks.bench_sgd_regression.$toplevel",
    "benchmarks.bench_sparsify.$toplevel",
    "benchmarks.bench_tree.$toplevel",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.applications.plot_tomography_l1_reconstruction.build_projection_operator",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.classification.plot_lda_qda.$toplevel",
    "examples.classification.plot_lda_qda.plot_ellipse",
    "examples.cluster.plot_agglomerative_clustering.$toplevel",
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel",
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_coin_segmentation.$toplevel",
    "examples.cluster.plot_dict_face_patches.$toplevel",
    "examples.cluster.plot_hdbscan.$toplevel",
    "examples.cluster.plot_hdbscan.plot",
    "examples.cluster.plot_kmeans_digits.$toplevel",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.cluster.plot_optics.$toplevel",
    "examples.covariance.plot_covariance_estimation.$toplevel",
    "examples.covariance.plot_robust_vs_empirical_covariance.$toplevel",
    "examples.cross_decomposition.plot_compare_cross_decomposition.$toplevel",
    "examples.datasets.plot_random_multilabel_dataset.plot_2d",
    "examples.decomposition.plot_faces_decomposition.$toplevel",
    "examples.decomposition.plot_ica_blind_source_separation.$toplevel",
    "examples.decomposition.plot_pca_3d.$toplevel",
    "examples.decomposition.plot_pca_3d.plot_figs",
    "examples.decomposition.plot_sparse_coding.ricker_function",
    "examples.ensemble.plot_adaboost_regression.$toplevel",
    "examples.ensemble.plot_bias_variance.$toplevel",
    "examples.ensemble.plot_gradient_boosting_early_stopping.$toplevel",
    "examples.ensemble.plot_gradient_boosting_oob.$toplevel",
    "examples.ensemble.plot_gradient_boosting_oob.heldout_score",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "examples.ensemble.plot_isolation_forest.$toplevel",
    "examples.ensemble.plot_monotonic_constraints.$toplevel",
    "examples.ensemble.plot_random_forest_regression_multioutput.$toplevel",
    "examples.feature_selection.plot_f_test_vs_mi.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy.target_generator",
    "examples.gaussian_process.plot_gpr_noisy_targets.$toplevel",
    "examples.inspection.plot_causal_interpretation.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.linear_model.plot_ard.$toplevel",
    "examples.linear_model.plot_bayesian_ridge_curvefit.func",
    "examples.linear_model.plot_lasso_and_elasticnet.$toplevel",
    "examples.linear_model.plot_lasso_lars_ic.zou_et_al_criterion_rescaling",
    "examples.linear_model.plot_multi_task_lasso_support.$toplevel",
    "examples.linear_model.plot_nnls.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_polynomial_interpolation.$toplevel",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.linear_model.plot_ransac.$toplevel",
    "examples.linear_model.plot_sgd_loss_functions.modified_huber_loss",
    "examples.linear_model.plot_sgd_weighted_samples.$toplevel",
    "examples.linear_model.plot_theilsen.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.manifold.plot_manifold_sphere.$toplevel",
    "examples.manifold.plot_mds.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.miscellaneous.plot_kernel_ridge_regression.$toplevel",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.$toplevel",
    "examples.mixture.plot_concentration_prior.$toplevel",
    "examples.mixture.plot_concentration_prior.plot_ellipses",
    "examples.mixture.plot_concentration_prior.plot_results",
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.mixture.plot_gmm_covariances.make_ellipses",
    "examples.mixture.plot_gmm_init.$toplevel",
    "examples.mixture.plot_gmm_sin.$toplevel",
    "examples.model_selection.plot_cv_indices.$toplevel",
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.model_selection.plot_roc_crossval.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.neighbors.plot_lof_outlier_detection.$toplevel",
    "examples.neighbors.plot_nca_illustration.relate_point",
    "examples.neighbors.plot_regression.$toplevel",
    "examples.neural_networks.plot_mlp_alpha.$toplevel",
    "examples.preprocessing.plot_discretization_strategies.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel",
    "examples.svm.plot_svm_anova.$toplevel",
    "examples.svm.plot_svm_regression.$toplevel",
    "examples.svm.plot_svm_scale_c.$toplevel",
    "examples.svm.plot_weighted_samples.plot_decision_function",
    "examples.text.plot_document_classification_20newsgroups.plot_feature_effects",
    "examples.tree.plot_tree_regression.$toplevel",
    "examples.tree.plot_tree_regression_multioutput.$toplevel",
    "examples.tree.plot_unveil_tree_structure.$toplevel",
    "sklearn._loss.link.HalfLogitLink.inverse",
    "sklearn._loss.link._inclusive_low_high",
    "sklearn._loss.loss.BaseLoss.fit_intercept_only",
    "sklearn._loss.loss.ExponentialLoss.constant_to_optimal_zero",
    "sklearn._loss.loss.PinballLoss.fit_intercept_only",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.cluster._kmeans.MiniBatchKMeans._check_params_vs_input",
    "sklearn.cluster._kmeans.MiniBatchKMeans._random_reassign",
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._optics._compute_core_distances_",
    "sklearn.cluster._spectral.discretize",
    "sklearn.covariance._empirical_covariance.log_likelihood",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.covariance._graph_lasso._objective",
    "sklearn.covariance._robust_covariance.fast_mcd",
    "sklearn.cross_decomposition._pls._PLS.fit",
    "sklearn.datasets._base.load_files",
    "sklearn.datasets._samples_generator.make_circles",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.datasets._samples_generator.make_friedman1",
    "sklearn.datasets._samples_generator.make_friedman2",
    "sklearn.datasets._samples_generator.make_friedman3",
    "sklearn.datasets._samples_generator.make_regression",
    "sklearn.datasets._samples_generator.make_s_curve",
    "sklearn.datasets._samples_generator.make_sparse_uncorrelated",
    "sklearn.datasets._samples_generator.make_swiss_roll",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.decomposition._dict_learning._BaseSparseCoding._transform",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._fastica._cube",
    "sklearn.decomposition._incremental_pca.IncrementalPCA.fit",
    "sklearn.decomposition._nmf._beta_divergence",
    "sklearn.ensemble._gb_losses.BinomialDeviance.__call__",
    "sklearn.ensemble._gb_losses.ExponentialLoss.__call__",
    "sklearn.ensemble._gb_losses.LeastAbsoluteError.negative_gradient",
    "sklearn.ensemble._gb_losses.MultinomialDeviance.__call__",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._print_iteration_stats",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._intilialize_root",
    "sklearn.ensemble._iforest.IsolationForest._compute_chunked_score_samples",
    "sklearn.ensemble._iforest.IsolationForest._compute_score_samples",
    "sklearn.feature_extraction.image.PatchExtractor.transform",
    "sklearn.feature_extraction.image.reconstruct_from_patches_2d",
    "sklearn.feature_selection._univariate_selection.SelectPercentile._get_support_mask",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace._posterior_mode",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.log_marginal_likelihood",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.predict_proba",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.log_marginal_likelihood",
    "sklearn.gaussian_process.kernels.CompoundKernel.theta@setter",
    "sklearn.gaussian_process.kernels.DotProduct.__call__",
    "sklearn.gaussian_process.kernels.ExpSineSquared.__call__",
    "sklearn.gaussian_process.kernels.Matern.__call__",
    "sklearn.gaussian_process.kernels.RationalQuadratic.__call__",
    "sklearn.kernel_approximation.AdditiveChi2Sampler._transform_dense",
    "sklearn.kernel_approximation.AdditiveChi2Sampler._transform_sparse",
    "sklearn.kernel_approximation.RBFSampler.fit",
    "sklearn.kernel_approximation.SkewedChi2Sampler.fit",
    "sklearn.linear_model._bayes.BayesianRidge._log_marginal_likelihood",
    "sklearn.linear_model._bayes.BayesianRidge.fit",
    "sklearn.linear_model._coordinate_descent._alpha_grid",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.fallback_lbfgs_solve",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.line_search",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit",
    "sklearn.linear_model._least_angle.LassoLarsIC.fit",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._quantile.QuantileRegressor.fit",
    "sklearn.linear_model._ridge._RidgeClassifierMixin.predict",
    "sklearn.linear_model._ridge._solve_cholesky",
    "sklearn.linear_model._sag.get_auto_step_size",
    "sklearn.manifold._locally_linear.locally_linear_embedding",
    "sklearn.manifold._spectral_embedding.spectral_embedding",
    "sklearn.metrics._classification.log_loss",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_predictions",
    "sklearn.metrics._ranking.auc",
    "sklearn.metrics._regression._mean_tweedie_deviance",
    "sklearn.metrics.cluster._supervised.adjusted_rand_score",
    "sklearn.metrics.cluster._unsupervised.calinski_harabasz_score",
    "sklearn.metrics.pairwise._euclidean_distances",
    "sklearn.metrics.pairwise._euclidean_distances_upcast",
    "sklearn.metrics.pairwise.pairwise_distances_chunked",
    "sklearn.mixture._gaussian_mixture.GaussianMixture.aic",
    "sklearn.mixture._gaussian_mixture.GaussianMixture.bic",
    "sklearn.mixture._gaussian_mixture._estimate_gaussian_covariances_diag",
    "sklearn.mixture._gaussian_mixture._estimate_gaussian_parameters",
    "sklearn.mixture._gaussian_mixture._estimate_log_gaussian_prob",
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._loss_grad_lbfgs",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_kneighbors_regressor",
    "sklearn.neural_network._rbm.BernoulliRBM.fit",
    "sklearn.neural_network._rbm.BernoulliRBM.score_samples",
    "sklearn.preprocessing._data._handle_zeros_in_scale",
    "sklearn.preprocessing._polynomial.SplineTransformer._get_base_knot_positions",
    "sklearn.preprocessing._polynomial.SplineTransformer.transform",
    "sklearn.random_projection.johnson_lindenstrauss_min_dim",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._export._MPLTreeExporter.recurse",
    "sklearn.tree._export._color_brew",
    "sklearn.utils.$toplevel",
    "sklearn.utils._message_with_time",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._format_items",
    "sklearn.utils.class_weight.compute_class_weight",
    "sklearn.utils.estimator_checks.check_dict_unchanged",
    "sklearn.utils.estimator_checks.check_dont_overwrite_parameters",
    "sklearn.utils.estimator_checks.check_estimator_sparse_data",
    "sklearn.utils.estimator_checks.check_estimators_dtypes",
    "sklearn.utils.estimator_checks.check_fit1d",
    "sklearn.utils.estimator_checks.check_fit2d_1feature",
    "sklearn.utils.estimator_checks.check_fit2d_1sample",
    "sklearn.utils.estimator_checks.check_fit2d_predict1d",
    "sklearn.utils.estimator_checks.check_fit_idempotent",
    "sklearn.utils.estimator_checks.check_methods_sample_order_invariance",
    "sklearn.utils.estimator_checks.check_methods_subset_invariance",
    "sklearn.utils.estimator_checks.check_regressors_int",
    "sklearn.utils.estimator_checks.check_regressors_train",
    "sklearn.utils.estimator_checks.check_sample_weights_invariance",
    "sklearn.utils.estimator_checks.check_sample_weights_shape",
    "sklearn.utils.multiclass._ovr_decision_function",
    "sklearn.utils.optimize._cg",
    "sklearn.utils.tests.test_murmurhash.test_mmhash3_int_array"
  ],
  "int.__ne__": [
    "Ovr{int.__ne__}",
    "benchmarks.bench_plot_hierarchical.$toplevel",
    "benchmarks.bench_plot_nmf._fit_projected_gradient",
    "benchmarks.bench_plot_nmf._nls_subproblem",
    "benchmarks.bench_plot_randomized_svd.bench_c",
    "build_tools.github.check_wheels.$toplevel",
    "click._compat.open_stream",
    "click.core.Argument._parse_decls",
    "click.core.Argument.make_metavar",
    "click.core.BaseCommand.main",
    "click.core.Option.__init__",
    "click.core.Option.value_from_envvar",
    "click.core.Parameter.__init__",
    "click.core.Parameter.make_metavar",
    "click.core.Parameter.type_cast_value",
    "click.core.Parameter.type_cast_value.convert",
    "click.core.Parameter.value_from_envvar",
    "click.core.Parameter.value_is_missing",
    "click.formatting.HelpFormatter.write_dl",
    "click.parser.Argument.process",
    "click.parser.Option.__init__",
    "click.parser.OptionParser._get_value_from_state",
    "click.parser._unpack_args",
    "click.types.Tuple.convert",
    "click.utils.make_default_short_help",
    "doc.sphinxext.sphinx_issues.IssueRole.__call__",
    "doc.tutorial.machine_learning_map.pyparsing.Dict.postParse",
    "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.streamline",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.getName",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.pop",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.infixNotation",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousLiteral.copyTokenToRepeater",
    "doc.tutorial.machine_learning_map.pyparsing.nestedExpr",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.svm_gui.Controller.fit",
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_dict_face_patches.$toplevel",
    "examples.cluster.plot_digits_agglomeration.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.ensemble.plot_bias_variance.$toplevel",
    "examples.feature_selection.plot_f_test_vs_mi.$toplevel",
    "examples.linear_model.plot_bayesian_ridge_curvefit.$toplevel",
    "examples.linear_model.plot_logistic_l1_l2_sparsity.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.score_estimator",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_discretization_strategies.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.plot_feature_effects",
    "jinja2.environment.create_cache",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.nodes.Node.__init__",
    "jinja2.parser.Parser.parse_concat",
    "jinja2.parser.Parser.parse_subscript",
    "packaging.version.Version.__str__",
    "parso.utils.PythonVersionInfo.__eq__",
    "parso.utils.PythonVersionInfo.__gt__",
    "pip._vendor.distlib.compat.OrderedDict.update",
    "pip._vendor.html5lib.treebuilders.base.ActiveFormattingElements.append",
    "pip._vendor.packaging.version.Version.__str__",
    "pip._vendor.pyparsing.ParseExpression.streamline",
    "sklearn.base.BaseEstimator._check_feature_names",
    "sklearn.base.BaseEstimator._get_param_names",
    "sklearn.calibration._CalibratedClassifier.predict_proba",
    "sklearn.cluster._affinity_propagation._affinity_propagation",
    "sklearn.cluster._mean_shift._mean_shift_single_seed",
    "sklearn.cluster._mean_shift.get_bin_seeds",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._shrunk_covariance._ledoit_wolf",
    "sklearn.covariance._shrunk_covariance._oas",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf_shrinkage",
    "sklearn.cross_decomposition._pls._get_first_singular_vectors_power_method",
    "sklearn.datasets._arff_parser._post_process_frame",
    "sklearn.datasets._kddcup99._mkdirp",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._lfw._fetch_lfw_people",
    "sklearn.datasets._lfw._load_imgs",
    "sklearn.datasets._openml._get_data_info_by_name",
    "sklearn.datasets._openml._get_json_content_from_openml_api",
    "sklearn.datasets._openml._retry_on_network_error.decorator.wrapper",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_circles",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.datasets._samples_generator.make_multilabel_classification.sample_example",
    "sklearn.datasets._species_distributions._load_coverage",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit",
    "sklearn.decomposition._lda.LatentDirichletAllocation.fit",
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform",
    "sklearn.decomposition._nmf._fit_coordinate_descent",
    "sklearn.decomposition._nmf._fit_multiplicative_update",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit",
    "sklearn.dummy.DummyRegressor.fit",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._bagging.BaseBagging._validate_y",
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble._validate_estimators",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._forest.ForestClassifier.predict_proba",
    "sklearn.ensemble._forest._accumulate_prediction",
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stages",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._print_iteration_stats",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.split_next",
    "sklearn.ensemble._stacking.StackingClassifier._validate_estimators",
    "sklearn.ensemble._stacking._BaseStacking._concatenate_predictions",
    "sklearn.ensemble._voting._BaseVoting.fit",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost_discrete",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.feature_importances_",
    "sklearn.externals._arff.ArffEncoder.iter_encode",
    "sklearn.externals._arff.DenseGeneratorData.decode_rows",
    "sklearn.externals._arff.DenseGeneratorData.encode_data",
    "sklearn.externals._arff._escape_sub_callback",
    "sklearn.externals._packaging.version.Version.__str__",
    "sklearn.externals._packaging.version.Version.base_version",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._transform",
    "sklearn.feature_extraction.image.PatchExtractor.transform",
    "sklearn.feature_extraction.text.CountVectorizer._limit_features",
    "sklearn.feature_extraction.text.TfidfVectorizer.idf_@setter",
    "sklearn.feature_extraction.text._VectorizerMixin._char_wb_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin._check_stop_words_consistency",
    "sklearn.feature_extraction.text._VectorizerMixin._check_vocabulary",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.gaussian_process.kernels.CompoundKernel.__eq__",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.impute._base.SimpleImputer._dense_fit",
    "sklearn.impute._base.SimpleImputer._sparse_fit",
    "sklearn.impute._knn.KNNImputer.transform.process_chunk",
    "sklearn.inspection._partial_dependence._grid_from_X",
    "sklearn.inspection._pd_utils._check_feature_names",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.isotonic.IsotonicRegression._build_f",
    "sklearn.kernel_ridge.KernelRidge.fit",
    "sklearn.linear_model._base.LinearClassifierMixin.predict",
    "sklearn.linear_model._base._deprecate_normalize",
    "sklearn.linear_model._bayes.BayesianRidge.fit",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._omp._cholesky_omp",
    "sklearn.linear_model._omp._gram_omp",
    "sklearn.linear_model._ridge._BaseRidgeCV.fit",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance_intercept",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance_no_intercept",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_gram",
    "sklearn.linear_model._ridge._RidgeGCV._solve_svd_design_matrix",
    "sklearn.linear_model._ridge._RidgeGCV.fit",
    "sklearn.linear_model._stochastic_gradient._prepare_fit_binary",
    "sklearn.linear_model._stochastic_gradient.fit_binary",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._classification.confusion_matrix",
    "sklearn.metrics._classification.log_loss",
    "sklearn.metrics._ranking._binary_roc_auc_score",
    "sklearn.metrics._ranking._multiclass_roc_auc_score",
    "sklearn.metrics._ranking.average_precision_score",
    "sklearn.metrics._ranking.det_curve",
    "sklearn.metrics._ranking.top_k_accuracy_score",
    "sklearn.metrics._scorer._MultimetricScorer._use_cache",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.metrics.cluster._supervised.adjusted_rand_score",
    "sklearn.metrics.cluster._supervised.entropy",
    "sklearn.metrics.cluster._supervised.homogeneity_completeness_v_measure",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._search.ParameterGrid.__init__",
    "sklearn.model_selection._split._build_repr",
    "sklearn.model_selection._split._validate_shuffle_split",
    "sklearn.model_selection._split.train_test_split",
    "sklearn.model_selection._validation._check_is_permutation",
    "sklearn.model_selection._validation._warn_or_raise_about_fit_failures",
    "sklearn.multiclass.OneVsOneClassifier.fit",
    "sklearn.multiclass.OneVsRestClassifier.decision_function",
    "sklearn.multiclass.OneVsRestClassifier.predict_proba",
    "sklearn.multiclass._fit_binary",
    "sklearn.multiclass._partial_fit_ovo_binary",
    "sklearn.multioutput._BaseChain.predict",
    "sklearn.naive_bayes.ComplementNB._joint_log_likelihood",
    "sklearn.naive_bayes.GaussianNB._partial_fit",
    "sklearn.naive_bayes._BaseDiscreteNB._update_class_log_prior",
    "sklearn.naive_bayes._BaseDiscreteNB.fit",
    "sklearn.naive_bayes._BaseDiscreteNB.partial_fit",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.fit",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._forward_pass",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._forward_pass_fast",
    "sklearn.pipeline._name_estimators",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.preprocessing._encoders._BaseEncoder._identify_infrequent",
    "sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform",
    "sklearn.preprocessing._label._inverse_binarize_thresholding",
    "sklearn.preprocessing._label.label_binarize",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.fit",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform",
    "sklearn.preprocessing._polynomial.SplineTransformer.transform",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.fit",
    "sklearn.svm._base.BaseLibSVM._decision_function",
    "sklearn.svm._base.BaseLibSVM._warn_from_fit_status",
    "sklearn.svm._base.BaseLibSVM.fit",
    "sklearn.svm._classes.LinearSVC.fit",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._export._BaseTreeExporter.get_color",
    "sklearn.tree._export._BaseTreeExporter.get_fill_color",
    "sklearn.tree._export._DOTTreeExporter.export",
    "sklearn.tree._export.export_text",
    "sklearn.tree._reingold_tilford.first_walk",
    "sklearn.utils._approximate_mode",
    "sklearn.utils._array_api._ArrayAPIWrapper.take",
    "sklearn.utils._determine_key_type",
    "sklearn.utils._encode._extract_missing",
    "sklearn.utils._mocking.CheckingClassifier.decision_function",
    "sklearn.utils._param_validation.HasMethods.__str__",
    "sklearn.utils._param_validation.validate_parameter_constraints",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._format_items",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._format_params_or_dict_items",
    "sklearn.utils._pprint._safe_repr",
    "sklearn.utils._response._get_response_values_binary",
    "sklearn.utils._safe_indexing",
    "sklearn.utils._show_versions.show_versions",
    "sklearn.utils._testing._get_args",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.class_weight.compute_class_weight",
    "sklearn.utils.class_weight.compute_sample_weight",
    "sklearn.utils.estimator_checks.check_class_weight_classifiers",
    "sklearn.utils.estimator_checks.check_classifiers_predictions",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.extmath._nanaverage",
    "sklearn.utils.metaestimators._BaseComposition._validate_names",
    "sklearn.utils.resample",
    "sklearn.utils.validation._check_feature_names_in",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args",
    "sklearn.utils.validation._ensure_sparse_format",
    "sklearn.utils.validation._get_feature_names",
    "sklearn.utils.validation._num_samples",
    "sklearn.utils.validation.column_or_1d"
  ],
  "int.__new__": [
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_hist_gradient_boosting.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_plot_randomized_svd.$toplevel",
    "benchmarks.bench_plot_randomized_svd.bench_b",
    "benchmarks.bench_plot_randomized_svd.get_data",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_random_projections.type_auto_or_int",
    "benchmarks.bench_sparsify.$toplevel",
    "benchmarks.plot_tsne_mnist.$toplevel",
    "click.shell_completion.BashComplete.get_completion_args",
    "click.shell_completion.ZshComplete.get_completion_args",
    "doc.tutorial.machine_learning_map.parse_path.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing._ustr",
    "doc.tutorial.machine_learning_map.pyparsing.countedArray",
    "examples.applications.plot_prediction_latency.$toplevel",
    "examples.applications.svm_gui.Controller.fit",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_oob.$toplevel",
    "examples.exercises.plot_digits_classification_exercise.$toplevel",
    "examples.exercises.plot_iris_exercise.$toplevel",
    "examples.impute.plot_missing_values.add_missing_values",
    "examples.linear_model.plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.$toplevel",
    "examples.linear_model.plot_logistic_path.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.manifold.plot_t_sne_perplexity.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.preprocess_dataset",
    "examples.model_selection.plot_cv_indices.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.neighbors.plot_kde_1d.$toplevel",
    "examples.preprocessing.plot_target_encoder_cross_val.$toplevel",
    "jinja2.debug.get_template_locals",
    "jinja2.lexer.Lexer.wrap",
    "packaging.version.Version.__init__",
    "packaging.version._parse_letter_version",
    "packaging.version._parse_local_version",
    "pip._vendor.packaging.version.Version.__init__",
    "pip._vendor.packaging.version._parse_letter_version",
    "pip._vendor.packaging.version._parse_local_version",
    "pip._vendor.pyparsing._ustr",
    "pip._vendor.requests.cookies.morsel_to_cookie",
    "setup.build_ext_subclass.finalize_options",
    "sklearn._build_utils.openmp_helpers.check_openmp_support",
    "sklearn._config.$toplevel",
    "sklearn.cluster._bicluster.SpectralCoclustering._fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans._BaseKMeans._check_mkl_vcomp",
    "sklearn.cluster._kmeans._kmeans_plusplus",
    "sklearn.cluster._kmeans._mini_batch_step",
    "sklearn.cluster._mean_shift.estimate_bandwidth",
    "sklearn.cluster._optics.cluster_optics_xi",
    "sklearn.cluster._optics.compute_optics_graph",
    "sklearn.conftest.pytest_configure",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._robust_covariance.fast_mcd",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf_shrinkage",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._base.load_csv_data",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._lfw._load_imgs",
    "sklearn.datasets._openml._download_data_to_bunch",
    "sklearn.datasets._openml._get_num_samples",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.datasets._species_distributions._load_coverage",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning._sparse_encode_precomputed",
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._gb.BaseGradientBoosting._check_params",
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stages",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.__init__",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._print_iteration_stats",
    "sklearn.ensemble._hist_gradient_boosting.predictor.TreePredictor.get_max_depth",
    "sklearn.ensemble._hist_gradient_boosting.predictor.TreePredictor.get_n_leaf_nodes",
    "sklearn.ensemble._iforest.IsolationForest.fit",
    "sklearn.externals._arff.ArffDecoder._decode",
    "sklearn.externals._arff._escape_sub_callback",
    "sklearn.externals._arff._parse_values",
    "sklearn.externals._packaging.version.Version.__init__",
    "sklearn.externals._packaging.version._parse_letter_version",
    "sklearn.externals._packaging.version._parse_local_version",
    "sklearn.feature_extraction.image._compute_n_patches",
    "sklearn.feature_extraction.text.TfidfTransformer.fit",
    "sklearn.feature_selection._rfe.RFE._fit",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector.fit",
    "sklearn.feature_selection._univariate_selection.SelectPercentile._get_support_mask",
    "sklearn.inspection._permutation_importance.permutation_importance",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._linear_loss.LinearModelLoss.gradient",
    "sklearn.linear_model._linear_loss.LinearModelLoss.gradient_hessian",
    "sklearn.linear_model._linear_loss.LinearModelLoss.gradient_hessian_product",
    "sklearn.linear_model._linear_loss.LinearModelLoss.loss_gradient",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuit.fit",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.fit",
    "sklearn.linear_model._omp.orthogonal_mp",
    "sklearn.linear_model._omp.orthogonal_mp_gram",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.linear_model._sag.get_auto_step_size",
    "sklearn.linear_model._sag.sag_solver",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._fit_regressor",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._fit_one_class",
    "sklearn.linear_model._stochastic_gradient.fit_binary",
    "sklearn.linear_model._theil_sen.TheilSenRegressor._check_subparams",
    "sklearn.linear_model._theil_sen.TheilSenRegressor.fit",
    "sklearn.linear_model._theil_sen._lstsq",
    "sklearn.linear_model._theil_sen._modified_weiszfeld_step",
    "sklearn.linear_model.tests.test_huber.make_regression_with_outliers",
    "sklearn.manifold._spectral_embedding.SpectralEmbedding._get_affinity_matrix",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_predictions",
    "sklearn.metrics.cluster._supervised.adjusted_rand_score",
    "sklearn.metrics.pairwise._euclidean_distances_upcast",
    "sklearn.mixture._base.BaseMixture.sample",
    "sklearn.mixture._gaussian_mixture.GaussianMixture._n_parameters",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.model_selection._search_successive_halving._SubsampleMetaSplitter.split",
    "sklearn.model_selection._split.LeavePGroupsOut.get_n_splits",
    "sklearn.model_selection._split.LeavePOut.get_n_splits",
    "sklearn.model_selection._split._BaseKFold.__init__",
    "sklearn.model_selection._split._validate_shuffle_split",
    "sklearn.multiclass.OutputCodeClassifier.fit",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_kneighbors_regressor",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_tsne",
    "sklearn.neural_network._rbm.BernoulliRBM.fit",
    "sklearn.preprocessing._data.quantile_transform",
    "sklearn.setup_module",
    "sklearn.svm._base.BaseLibSVM._sparse_fit",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._export._BaseTreeExporter.get_color",
    "sklearn.tree._export._color_brew",
    "sklearn.utils._approximate_mode",
    "sklearn.utils._testing.check_skip_network",
    "sklearn.utils.gen_batches",
    "sklearn.utils.get_chunk_n_rows",
    "sklearn.utils.random._random_choice_csc",
    "sklearn.utils.tests.test_murmurhash.test_mmhash3_int_array",
    "sklearn.utils.validation.check_consistent_length"
  ],
  "int.__or__": [
    "Ovr{int.__or__}",
    "click._compat.open_stream"
  ],
  "int.__pow__": [
    "Ovr{int.__pow__}",
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel",
    "benchmarks.bench_isotonic.$toplevel",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_random_projections.compute_time",
    "benchmarks.bench_sample_without_replacement.compute_time",
    "benchmarks.bench_tree.$toplevel",
    "examples.applications.plot_model_complexity_influence.$toplevel",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution",
    "examples.cluster.plot_feature_agglomeration_vs_univariate_selection.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.$toplevel",
    "examples.cluster.plot_segmentation_toy.$toplevel",
    "examples.datasets.plot_random_multilabel_dataset.$toplevel",
    "examples.linear_model.plot_lasso_and_elasticnet.$toplevel",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "sklearn.datasets._samples_generator._generate_hypercube",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.ensemble._iforest.IsolationForest._compute_score_samples",
    "sklearn.feature_extraction._hash.FeatureHasher.__init__",
    "sklearn.feature_extraction.text.HashingVectorizer.__init__",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.gaussian_process.kernels.Matern.__call__",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.metrics.pairwise._euclidean_distances_upcast",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_base_optimizer",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_no_momentum",
    "sklearn.utils._param_validation._RandomStates.__init__",
    "sklearn.utils.get_chunk_n_rows"
  ],
  "int.__sub__": [
    "Ovr{int.__sub__}",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "benchmarks.bench_plot_nmf._nls_subproblem",
    "benchmarks.bench_plot_nmf.run_bench",
    "benchmarks.bench_plot_omp_lars.$toplevel",
    "click.core.Context.scope",
    "click.core.MultiCommand.format_commands",
    "click.formatting.HelpFormatter.__init__",
    "click.formatting.HelpFormatter.dedent",
    "click.formatting.HelpFormatter.write_dl",
    "click.formatting.HelpFormatter.write_usage",
    "click.formatting.iter_rows",
    "click.formatting.wrap_text",
    "click.utils.make_default_short_help",
    "doc.sphinxext.sphinx_issues.IssueRole.__call__",
    "doc.tutorial.machine_learning_map.pyparsing.CaselessKeyword.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Keyword.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_prediction_latency.plot_benchmark_throughput",
    "examples.applications.plot_tomography_l1_reconstruction._weights",
    "examples.applications.wikipedia_principal_eigenvector.centrality_scores",
    "examples.calibration.plot_calibration_curve.NaivelyCalibratedLinearSVC.predict_proba",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.calibration.plot_compare_calibration.$toplevel",
    "examples.calibration.plot_compare_calibration.NaivelyCalibratedLinearSVC.predict_proba",
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.cluster.plot_hdbscan.plot",
    "examples.covariance.plot_mahalanobis_distances.$toplevel",
    "examples.covariance.plot_robust_vs_empirical_covariance.$toplevel",
    "examples.cross_decomposition.plot_compare_cross_decomposition.$toplevel",
    "examples.decomposition.plot_sparse_coding.$toplevel",
    "examples.decomposition.plot_sparse_coding.ricker_function",
    "examples.ensemble.plot_bias_variance.$toplevel",
    "examples.ensemble.plot_ensemble_oob.$toplevel",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.linear_model.plot_sgd_comparison.$toplevel",
    "examples.linear_model.plot_sgd_loss_functions.$toplevel",
    "examples.linear_model.plot_sgd_loss_functions.modified_huber_loss",
    "examples.linear_model.plot_sgd_penalties.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.$toplevel",
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.model_selection.plot_roc_crossval.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.plot_feature_effects",
    "jinja2.debug.fake_traceback",
    "sklearn._loss.link._inclusive_low_high",
    "sklearn._loss.loss.ExponentialLoss.constant_to_optimal_zero",
    "sklearn._loss.loss.ExponentialLoss.predict_proba",
    "sklearn._loss.loss.HalfBinomialLoss.constant_to_optimal_zero",
    "sklearn._loss.loss.HalfBinomialLoss.predict_proba",
    "sklearn._loss.loss.HalfMultinomialLoss.fit_intercept_only",
    "sklearn._loss.loss.HalfTweedieLoss.constant_to_optimal_zero",
    "sklearn.base.BaseEstimator.__repr__",
    "sklearn.cluster._affinity_propagation._affinity_propagation",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.cluster._bisect_k_means.BisectingKMeans._bisect",
    "sklearn.cluster._kmeans.MiniBatchKMeans._mini_batch_convergence",
    "sklearn.cluster._optics._xi_cluster",
    "sklearn.cluster._spectral.discretize",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._openml._retry_on_network_error.decorator.wrapper",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_low_rank_matrix",
    "sklearn.datasets._samples_generator.make_moons",
    "sklearn.datasets._twenty_newsgroups.strip_newsgroup_footer",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._check_convergence",
    "sklearn.decomposition._fastica._exp",
    "sklearn.decomposition._fastica._logcosh",
    "sklearn.decomposition._lda.LatentDirichletAllocation._em_step",
    "sklearn.decomposition._nmf.MiniBatchNMF._minibatch_convergence",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit",
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stages",
    "sklearn.ensemble._gb.VerboseReporter.init",
    "sklearn.ensemble._gb_losses.BinomialDeviance._update_terminal_region",
    "sklearn.ensemble._gb_losses.BinomialDeviance.get_init_raw_predictions",
    "sklearn.ensemble._gb_losses.ExponentialLoss.get_init_raw_predictions",
    "sklearn.ensemble._gb_losses.MultinomialDeviance._update_terminal_region",
    "sklearn.ensemble._gb_losses.MultinomialDeviance.get_init_raw_predictions",
    "sklearn.ensemble._gb_losses.QuantileLossFunction.__call__",
    "sklearn.ensemble._gb_losses.QuantileLossFunction.negative_gradient",
    "sklearn.externals._arff.COOData.encode_data",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._transform",
    "sklearn.feature_extraction.text.CountVectorizer._count_vocab",
    "sklearn.feature_extraction.text._VectorizerMixin._char_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin._word_ngrams",
    "sklearn.feature_selection._base.SelectorMixin.inverse_transform",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.feature_selection._univariate_selection.SelectPercentile._get_support_mask",
    "sklearn.feature_selection._univariate_selection._chisquare",
    "sklearn.feature_selection._univariate_selection.chi2",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.feature_selection._univariate_selection.f_regression",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace._posterior_mode",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.log_marginal_likelihood",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.predict_proba",
    "sklearn.impute._base.SimpleImputer.transform",
    "sklearn.impute._iterative.IterativeImputer._get_ordered_idx",
    "sklearn.isotonic.check_increasing",
    "sklearn.linear_model._base.LinearClassifierMixin._predict_proba_lr",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.solve",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.score",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._omp._cholesky_omp",
    "sklearn.linear_model._omp._gram_omp",
    "sklearn.linear_model._quantile.QuantileRegressor.fit",
    "sklearn.linear_model._ransac._dynamic_max_trials",
    "sklearn.linear_model._ridge._RidgeGCV._diag_dot",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance_intercept",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance_no_intercept",
    "sklearn.linear_model._stochastic_gradient.BaseSGD._allocate_parameter_mem",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._fit_one_class",
    "sklearn.linear_model._theil_sen._breakdown_point",
    "sklearn.manifold._locally_linear.locally_linear_embedding",
    "sklearn.manifold._mds._smacof_single",
    "sklearn.manifold._t_sne._gradient_descent",
    "sklearn.metrics._classification.balanced_accuracy_score",
    "sklearn.metrics._classification.cohen_kappa_score",
    "sklearn.metrics._classification.hinge_loss",
    "sklearn.metrics._classification.log_loss",
    "sklearn.metrics._classification.multilabel_confusion_matrix",
    "sklearn.metrics._classification.zero_one_loss",
    "sklearn.metrics._ranking._binary_clf_curve",
    "sklearn.metrics._regression._assemble_r2_explained_variance",
    "sklearn.metrics._regression._mean_tweedie_deviance",
    "sklearn.metrics._regression.d2_pinball_score",
    "sklearn.metrics._regression.d2_tweedie_score",
    "sklearn.metrics._regression.mean_pinball_loss",
    "sklearn.metrics.cluster._supervised.adjusted_rand_score",
    "sklearn.metrics.cluster._unsupervised.calinski_harabasz_score",
    "sklearn.metrics.pairwise.nan_euclidean_distances",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.model_selection._split.TimeSeriesSplit.split",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.multiclass.OneVsRestClassifier.predict_proba",
    "sklearn.multiclass._ConstantPredictor.predict_proba",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.naive_bayes.BernoulliNB._joint_log_likelihood",
    "sklearn.naive_bayes._BaseDiscreteNB.fit",
    "sklearn.naive_bayes._BaseDiscreteNB.partial_fit",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._initialize",
    "sklearn.neural_network._base.binary_log_loss",
    "sklearn.neural_network._base.inplace_logistic_derivative",
    "sklearn.neural_network._base.inplace_tanh_derivative",
    "sklearn.neural_network._base.log_loss",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._backprop",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._initialize",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier.predict_proba",
    "sklearn.neural_network._rbm.BernoulliRBM.score_samples",
    "sklearn.neural_network._stochastic_optimizers.AdamOptimizer._get_updates",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_adam_optimizer",
    "sklearn.pipeline.Pipeline._iter",
    "sklearn.pipeline.Pipeline.fit",
    "sklearn.pipeline.Pipeline.fit_predict",
    "sklearn.pipeline.Pipeline.fit_transform",
    "sklearn.pipeline._name_estimators",
    "sklearn.preprocessing._data.PowerTransformer._yeo_johnson_inverse_transform",
    "sklearn.preprocessing._data.PowerTransformer._yeo_johnson_transform",
    "sklearn.preprocessing._data.QuantileTransformer._transform_col",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit",
    "sklearn.preprocessing._encoders.OneHotEncoder._compute_n_features_outs",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform",
    "sklearn.preprocessing._encoders._BaseEncoder._fit_infrequent_category_mapping",
    "sklearn.preprocessing._label.MultiLabelBinarizer._transform",
    "sklearn.preprocessing._polynomial.SplineTransformer.fit",
    "sklearn.preprocessing._polynomial.SplineTransformer.transform",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.fit",
    "sklearn.svm._base.BaseLibSVM._sparse_fit",
    "sklearn.svm._base._one_vs_one_coef",
    "sklearn.tree._export._BaseTreeExporter.get_color",
    "sklearn.tree._export._MPLTreeExporter.recurse",
    "sklearn.tree._export._color_brew",
    "sklearn.utils._approximate_mode",
    "sklearn.utils._message_with_time",
    "sklearn.utils._show_versions.show_versions",
    "sklearn.utils.class_weight.compute_class_weight",
    "sklearn.utils.estimator_checks.check_sample_weights_invariance",
    "sklearn.utils.random._random_choice_csc",
    "sklearn.utils.sparsefuncs._min_or_max_axis",
    "sklearn.utils.tests.test_pprint.test_bruteforce_ellipsis",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f",
    "traitlets.utils.getargspec.getargspec"
  ],
  "int.__truediv__": [
    "Ovr{int.__truediv__}",
    "benchmarks.bench_glmnet.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_plot_randomized_svd.bench_b",
    "benchmarks.bench_plot_randomized_svd.get_data",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_saga.fit_single",
    "benchmarks.bench_sparsify.$toplevel",
    "benchmarks.bench_tree.bench_scikit_tree_classifier",
    "benchmarks.bench_tree.bench_scikit_tree_regressor",
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "examples.applications.plot_prediction_latency.benchmark_throughputs",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.cluster.plot_coin_segmentation.$toplevel",
    "examples.cluster.plot_coin_ward_segmentation.$toplevel",
    "examples.covariance.plot_robust_vs_empirical_covariance.$toplevel",
    "examples.decomposition.plot_pca_3d.pdf",
    "examples.decomposition.plot_sparse_coding.$toplevel",
    "examples.decomposition.plot_sparse_coding.ricker_function",
    "examples.gaussian_process.plot_gpr_co2.$toplevel",
    "examples.linear_model.plot_bayesian_ridge_curvefit.$toplevel",
    "examples.linear_model.plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss._mean_frequency_by_risk_group",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_20newsgroups.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.$toplevel",
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "examples.model_selection.plot_grid_search_stats.corrected_std",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.svm.plot_svm_margin.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.size_mb",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "examples.tree.plot_unveil_tree_structure.$toplevel",
    "sklearn.calibration._CalibratedClassifier.predict_proba",
    "sklearn.cluster._birch._CFSubcluster.merge_subcluster",
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._optics._xi_cluster",
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform",
    "sklearn.covariance._robust_covariance.fast_mcd",
    "sklearn.datasets._samples_generator.make_friedman2",
    "sklearn.datasets._samples_generator.make_friedman3",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._kernel_pca.KernelPCA.fit",
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform",
    "sklearn.decomposition._nmf._multiplicative_update_h",
    "sklearn.ensemble._bagging.BaggingClassifier.decision_function",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_proba",
    "sklearn.ensemble._bagging.BaggingRegressor.predict",
    "sklearn.ensemble._gb_losses.BinomialDeviance.__call__",
    "sklearn.ensemble._gb_losses.LeastAbsoluteError.__call__",
    "sklearn.ensemble._gb_losses.LeastSquaresError.__call__",
    "sklearn.ensemble._gb_losses.MultinomialDeviance._update_terminal_region",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._print_iteration_stats",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.decision_function",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.feature_importances_",
    "sklearn.feature_selection._univariate_selection.SelectPercentile._get_support_mask",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.predict_proba",
    "sklearn.gaussian_process.kernels.ExpSineSquared.__call__",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.isotonic.check_increasing",
    "sklearn.linear_model._bayes.ARDRegression._update_sigma_woodbury",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance_intercept",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance_no_intercept",
    "sklearn.linear_model._theil_sen._breakdown_point",
    "sklearn.linear_model._theil_sen._modified_weiszfeld_step",
    "sklearn.metrics._classification.balanced_accuracy_score",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.from_predictions",
    "sklearn.metrics._ranking._dcg_sample_scores",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.neighbors._kde.KernelDensity.fit",
    "sklearn.preprocessing._data.PowerTransformer._box_cox_inverse_tranform",
    "sklearn.preprocessing._data.PowerTransformer._yeo_johnson_inverse_transform",
    "sklearn.preprocessing._data.StandardScaler.transform",
    "sklearn.preprocessing._data.scale",
    "sklearn.random_projection._check_density",
    "sklearn.random_projection._sparse_random_matrix",
    "sklearn.utils.class_weight.compute_class_weight",
    "sklearn.utils.estimator_checks.check_class_weight_balanced_linear_classifier",
    "sklearn.utils.estimator_checks.check_outliers_train",
    "sklearn.utils.random._random_choice_csc",
    "sklearn.utils.validation._check_psd_eigenvalues"
  ],
  "io.BufferedIOBase.read": [
    "sklearn.datasets._base._sha256",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.feature_extraction.text._VectorizerMixin.decode"
  ],
  "io.BufferedRandom.__enter__": [
    "Ovr{io.BufferedRandom.__enter__}"
  ],
  "io.BufferedReader.__enter__": [
    "Ovr{io.BufferedReader.__enter__}"
  ],
  "io.BufferedWriter.__enter__": [
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "doc.tutorial.text_analytics.data.movie_reviews.fetch_data.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.$toplevel",
    "sklearn.datasets._openml._open_openml_url",
    "sklearn.datasets._svmlight_format_io.dump_svmlight_file",
    "sklearn.datasets._twenty_newsgroups._download_20newsgroups",
    "sklearn.utils._testing.assert_run_python_script"
  ],
  "io.BufferedWriter.write": [
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "doc.tutorial.text_analytics.data.movie_reviews.fetch_data.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.$toplevel",
    "sklearn.datasets._twenty_newsgroups._download_20newsgroups",
    "sklearn.utils._testing.assert_run_python_script"
  ],
  "io.BytesIO.__init__": [
    "sklearn.datasets._species_distributions.fetch_species_distributions"
  ],
  "io.IOBase.__enter__": [
    "benchmarks.bench_hist_gradient_boosting_higgsboson.load_data",
    "sklearn.datasets._openml._open_openml_url",
    "sklearn.datasets._rcv1.fetch_rcv1"
  ],
  "io.IOBase.__iter__": [
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._rcv1.fetch_rcv1"
  ],
  "io.IOBase.close": [
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel"
  ],
  "io.IOBase.readlines": [
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99"
  ],
  "io.StringIO.__init__": [
    "doc.conf.generate_min_dependency_substitutions",
    "doc.conf.generate_min_dependency_table",
    "jinja2.compiler.CodeGenerator.__init__",
    "sklearn.tree._export.export_graphviz",
    "sklearn.utils._estimator_html_repr.estimator_html_repr"
  ],
  "io.StringIO.getvalue": [
    "doc.conf.generate_min_dependency_substitutions",
    "doc.conf.generate_min_dependency_table",
    "sklearn.utils._estimator_html_repr.estimator_html_repr"
  ],
  "io.TextIOBase.read": [
    "build_tools.get_comment.get_message",
    "doc.conf.SubSectionTitleOrder.__call__",
    "doc.conf.filter_search_index",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseFile",
    "setup.$toplevel",
    "sklearn._build_utils.gen_from_templates"
  ],
  "io.TextIOBase.write": [
    "build_tools.generate_authors_table.$toplevel",
    "build_tools.github.vendor.make_distributor_init_64_bits",
    "doc.conf.filter_search_index",
    "doc.conf.generate_min_dependency_substitutions",
    "doc.conf.generate_min_dependency_table",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel",
    "maint_tools.check_pxd_in_installation.$toplevel",
    "sklearn._build_utils.gen_from_templates",
    "sklearn._build_utils.pre_build_helpers.compile_test_program",
    "sklearn.utils._estimator_html_repr.estimator_html_repr"
  ],
  "io.TextIOWrapper.__enter__": [
    "asv_benchmarks.benchmarks.common.get_from_config",
    "benchmarks.bench_saga.exp",
    "benchmarks.bench_saga.plot",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "build_tools.generate_authors_table.$toplevel",
    "build_tools.get_comment.get_message",
    "build_tools.get_comment.get_versions",
    "build_tools.github.check_wheels.$toplevel",
    "build_tools.github.vendor.make_distributor_init_64_bits",
    "doc.conf.SubSectionTitleOrder.__call__",
    "doc.conf.filter_search_index",
    "doc.conf.generate_min_dependency_substitutions",
    "doc.conf.generate_min_dependency_table",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseFile",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "maint_tools.check_pxd_in_installation.$toplevel",
    "setup.$toplevel",
    "sklearn._build_utils.gen_from_templates",
    "sklearn._build_utils.pre_build_helpers.compile_test_program"
  ],
  "io.TextIOWrapper.__init__": [
    "click._compat._NonClosingTextIOWrapper.__init__"
  ],
  "io.TextIOWrapper.__iter__": [
    "asv_benchmarks.benchmarks.common.get_from_config",
    "build_tools.get_comment.get_versions",
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel"
  ],
  "io.TextIOWrapper.buffer": [
    "Ovr{io.TextIOWrapper.buffer}"
  ],
  "ipaddress._BaseNetwork.__iter__": [
    "Ovr{ipaddress._BaseNetwork.__iter__}"
  ],
  "itertools.accumulate.__iter__": [
    "Ovr{itertools.accumulate.__iter__}"
  ],
  "itertools.accumulate.__next__": [
    "Ovr{itertools.accumulate.__next__}"
  ],
  "itertools.chain.__init__": [
    "pip._vendor.resolvelib.structs.IteratorMapping.__iter__",
    "sklearn.compose._column_transformer.ColumnTransformer._iter",
    "sklearn.compose._column_transformer.ColumnTransformer._sk_visual_block_",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_remainder",
    "sklearn.compose._column_transformer.ColumnTransformer.set_output",
    "sklearn.compose._column_transformer.ColumnTransformer.transform",
    "sklearn.feature_extraction._hash.FeatureHasher.transform",
    "sklearn.neighbors._base.NeighborsBase.$class_toplevel",
    "sklearn.neighbors._kde.KernelDensity.$class_toplevel",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit",
    "sklearn.preprocessing._polynomial.PolynomialFeatures._combinations"
  ],
  "itertools.chain.__iter__": [
    "Ovr{itertools.chain.__iter__}",
    "sklearn.compose._column_transformer.ColumnTransformer.set_output",
    "sklearn.feature_extraction._hash.FeatureHasher.transform",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit"
  ],
  "itertools.chain.__next__": [
    "Ovr{itertools.chain.__next__}",
    "sklearn.compose._column_transformer.ColumnTransformer.set_output",
    "sklearn.feature_extraction._hash.FeatureHasher.transform",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit"
  ],
  "itertools.chain.from_iterable": [
    "importlib_metadata.Distribution.discover",
    "importlib_metadata.entry_points",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.model_selection._split.train_test_split",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit",
    "sklearn.preprocessing._polynomial.PolynomialFeatures._combinations",
    "sklearn.utils.multiclass.unique_labels"
  ],
  "itertools.combinations.__iter__": [
    "Ovr{itertools.combinations.__iter__}",
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "sklearn.metrics.pairwise._pairwise_callable",
    "sklearn.model_selection._split.LeavePGroupsOut._iter_test_masks",
    "sklearn.model_selection._split.LeavePOut._iter_test_indices"
  ],
  "itertools.combinations.__new__": [
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_interaction_cst",
    "sklearn.linear_model._theil_sen.TheilSenRegressor.fit",
    "sklearn.metrics._base._average_multiclass_ovo_score",
    "sklearn.metrics.pairwise._pairwise_callable",
    "sklearn.model_selection._split.LeavePGroupsOut._iter_test_masks",
    "sklearn.model_selection._split.LeavePOut._iter_test_indices",
    "sklearn.multiclass.OneVsOneClassifier.partial_fit",
    "sklearn.preprocessing._polynomial.PolynomialFeatures._combinations"
  ],
  "itertools.combinations.__next__": [
    "Ovr{itertools.combinations.__next__}",
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "sklearn.metrics.pairwise._pairwise_callable",
    "sklearn.model_selection._split.LeavePGroupsOut._iter_test_masks",
    "sklearn.model_selection._split.LeavePOut._iter_test_indices"
  ],
  "itertools.combinations_with_replacement.__init__": [
    "sklearn.preprocessing._polynomial.PolynomialFeatures._combinations"
  ],
  "itertools.combinations_with_replacement.__iter__": [
    "Ovr{itertools.combinations_with_replacement.__iter__}"
  ],
  "itertools.combinations_with_replacement.__next__": [
    "Ovr{itertools.combinations_with_replacement.__next__}"
  ],
  "itertools.compress.__init__": [
    "sklearn.utils._list_indexing"
  ],
  "itertools.compress.__iter__": [
    "Ovr{itertools.compress.__iter__}"
  ],
  "itertools.compress.__next__": [
    "Ovr{itertools.compress.__next__}"
  ],
  "itertools.count.__iter__": [
    "Ovr{itertools.count.__iter__}"
  ],
  "itertools.count.__next__": [
    "Ovr{itertools.count.__next__}"
  ],
  "itertools.cycle.__init__": [
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.linear_model.plot_lasso_coordinate_descent_path.$toplevel",
    "examples.mixture.plot_gmm.$toplevel",
    "examples.mixture.plot_gmm_sin.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform"
  ],
  "itertools.cycle.__iter__": [
    "Ovr{itertools.cycle.__iter__}"
  ],
  "itertools.cycle.__next__": [
    "Ovr{itertools.cycle.__next__}"
  ],
  "itertools.dropwhile.__init__": [
    "packaging.version._cmpkey",
    "pip._vendor.packaging.version._cmpkey",
    "sklearn.externals._packaging.version._cmpkey"
  ],
  "itertools.dropwhile.__iter__": [
    "Ovr{itertools.dropwhile.__iter__}"
  ],
  "itertools.dropwhile.__next__": [
    "Ovr{itertools.dropwhile.__next__}"
  ],
  "itertools.filterfalse.__iter__": [
    "Ovr{itertools.filterfalse.__iter__}"
  ],
  "itertools.filterfalse.__next__": [
    "Ovr{itertools.filterfalse.__next__}"
  ],
  "itertools.groupby.__iter__": [
    "Ovr{itertools.groupby.__iter__}"
  ],
  "itertools.groupby.__next__": [
    "Ovr{itertools.groupby.__next__}"
  ],
  "itertools.islice.__init__": [
    "examples.applications.plot_out_of_core_classification.get_minibatch",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "sklearn.pipeline.Pipeline._iter",
    "sklearn.utils._chunk_generator",
    "sklearn.utils._get_column_indices"
  ],
  "itertools.islice.__iter__": [
    "Ovr{itertools.islice.__iter__}",
    "examples.applications.plot_out_of_core_classification.get_minibatch"
  ],
  "itertools.islice.__next__": [
    "Ovr{itertools.islice.__next__}",
    "examples.applications.plot_out_of_core_classification.get_minibatch"
  ],
  "itertools.permutations.__iter__": [
    "Ovr{itertools.permutations.__iter__}"
  ],
  "itertools.permutations.__next__": [
    "Ovr{itertools.permutations.__next__}"
  ],
  "itertools.product.__iter__": [
    "Ovr{itertools.product.__iter__}",
    "benchmarks.bench_text_vectorizers.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.plot",
    "sklearn.metrics.pairwise._pairwise_callable",
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._search.ParameterGrid.__iter__",
    "sklearn.utils.estimator_checks._yield_checks"
  ],
  "itertools.product.__new__": [
    "asv_benchmarks.benchmarks.common.Estimator.setup_cache",
    "benchmarks.bench_multilabel_metrics.benchmark",
    "benchmarks.bench_text_vectorizers.$toplevel",
    "examples.ensemble.plot_voting_decision_regions.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "sklearn.feature_extraction.image.reconstruct_from_patches_2d",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.plot",
    "sklearn.metrics.pairwise._pairwise_callable",
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._search.ParameterGrid.__iter__",
    "sklearn.utils.estimator_checks._yield_checks"
  ],
  "itertools.product.__next__": [
    "Ovr{itertools.product.__next__}",
    "benchmarks.bench_text_vectorizers.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.plot",
    "sklearn.metrics.pairwise._pairwise_callable",
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._search.ParameterGrid.__iter__",
    "sklearn.utils.estimator_checks._yield_checks"
  ],
  "itertools.repeat.__init__": [
    "click.core.batch"
  ],
  "itertools.repeat.__iter__": [
    "Ovr{itertools.repeat.__iter__}"
  ],
  "itertools.repeat.__next__": [
    "Ovr{itertools.repeat.__next__}"
  ],
  "itertools.starmap.__iter__": [
    "Ovr{itertools.starmap.__iter__}"
  ],
  "itertools.starmap.__next__": [
    "Ovr{itertools.starmap.__next__}"
  ],
  "itertools.takewhile.__iter__": [
    "Ovr{itertools.takewhile.__iter__}"
  ],
  "itertools.takewhile.__next__": [
    "Ovr{itertools.takewhile.__next__}"
  ],
  "itertools.zip_longest.__iter__": [
    "Ovr{itertools.zip_longest.__iter__}"
  ],
  "itertools.zip_longest.__next__": [
    "Ovr{itertools.zip_longest.__next__}"
  ],
  "jinja2.compiler.CodeGenerator.__init__": [
    "jinja2.compiler.generate"
  ],
  "jinja2.environment.Environment.__init__": [
    "build_tools.update_environments_and_lock_files.$toplevel"
  ],
  "jinja2.environment.Environment._compile": [
    "jinja2.environment.Environment.compile"
  ],
  "jinja2.environment.Environment._generate": [
    "jinja2.environment.Environment.compile"
  ],
  "jinja2.environment.Environment._parse": [
    "jinja2.environment.Environment.compile"
  ],
  "jinja2.environment.Environment._tokenize": [
    "jinja2.parser.Parser.__init__"
  ],
  "jinja2.environment.Environment.compile": [
    "jinja2.environment.Environment.from_string"
  ],
  "jinja2.environment.Environment.from_string": [
    "build_tools.update_environments_and_lock_files.get_conda_environment_content",
    "build_tools.update_environments_and_lock_files.get_pip_requirements_content"
  ],
  "jinja2.environment.Environment.getattr": [
    "Ovr{jinja2.environment.Environment.getattr}"
  ],
  "jinja2.environment.Environment.getitem": [
    "Ovr{jinja2.environment.Environment.getitem}"
  ],
  "jinja2.environment.Environment.handle_exception": [
    "jinja2.environment.Template.render_async",
    "jinja2.nativetypes.NativeTemplate.render",
    "jinja2.nativetypes.NativeTemplate.render_async"
  ],
  "jinja2.environment.Environment.iter_extensions": [
    "jinja2.environment.Environment._tokenize",
    "jinja2.environment.Environment.preprocess",
    "jinja2.parser.Parser.__init__"
  ],
  "jinja2.environment.Environment.lexer": [
    "jinja2.environment.Environment._tokenize"
  ],
  "jinja2.environment.Environment.make_globals": [
    "jinja2.environment.Environment.from_string"
  ],
  "jinja2.environment.Environment.preprocess": [
    "jinja2.environment.Environment._tokenize"
  ],
  "jinja2.environment.Template._from_namespace": [
    "jinja2.environment.Template.from_code"
  ],
  "jinja2.environment.Template.from_code": [
    "jinja2.environment.Environment.from_string"
  ],
  "jinja2.environment.Template.new_context": [
    "jinja2.environment.Template.render",
    "jinja2.environment.Template.render_async",
    "jinja2.nativetypes.NativeTemplate.render",
    "jinja2.nativetypes.NativeTemplate.render_async"
  ],
  "jinja2.environment.Template.render": [
    "Ovr{jinja2.environment.Template.render}"
  ],
  "jinja2.environment.Template.render_async": [
    "Ovr{jinja2.environment.Template.render_async}"
  ],
  "jinja2.exceptions.TemplateError.__init__": [
    "jinja2.exceptions.TemplateSyntaxError.__init__"
  ],
  "jinja2.exceptions.TemplateSyntaxError.__init__": [
    "jinja2.lexer.Failure.__call__",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.lexer.Lexer.wrap"
  ],
  "jinja2.ext.DebugExtension.parse": [
    "Ovr{jinja2.ext.DebugExtension.parse}"
  ],
  "jinja2.ext.ExprStmtExtension.parse": [
    "Ovr{jinja2.ext.ExprStmtExtension.parse}"
  ],
  "jinja2.ext.Extension.__init__": [
    "jinja2.environment.load_extensions"
  ],
  "jinja2.ext.Extension.attr": [
    "jinja2.ext.Extension.call_method"
  ],
  "jinja2.ext.Extension.call_method": [
    "jinja2.ext.DebugExtension.parse"
  ],
  "jinja2.ext.Extension.filter_stream": [
    "jinja2.environment.Environment._tokenize"
  ],
  "jinja2.ext.Extension.parse": [
    "Ovr{jinja2.ext.Extension.parse}"
  ],
  "jinja2.ext.InternationalizationExtension._make_node": [
    "jinja2.ext.InternationalizationExtension.parse"
  ],
  "jinja2.ext.InternationalizationExtension._parse_block": [
    "jinja2.ext.InternationalizationExtension.parse"
  ],
  "jinja2.ext.InternationalizationExtension._trim_whitespace": [
    "jinja2.ext.InternationalizationExtension.parse"
  ],
  "jinja2.ext.InternationalizationExtension.parse": [
    "Ovr{jinja2.ext.InternationalizationExtension.parse}"
  ],
  "jinja2.ext.LoopControlExtension.parse": [
    "Ovr{jinja2.ext.LoopControlExtension.parse}"
  ],
  "jinja2.filters._GroupTuple.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "jinja2.idtracking.RootVisitor.generic_visit": [
    "Ovr{jinja2.idtracking.RootVisitor.generic_visit}"
  ],
  "jinja2.lexer.Failure.__call__": [
    "jinja2.lexer.Lexer.tokeniter"
  ],
  "jinja2.lexer.Failure.__init__": [
    "jinja2.lexer.Lexer.__init__"
  ],
  "jinja2.lexer.Lexer.__init__": [
    "jinja2.lexer.get_lexer"
  ],
  "jinja2.lexer.Lexer._normalize_newlines": [
    "jinja2.lexer.Lexer.wrap"
  ],
  "jinja2.lexer.Lexer.tokeniter": [
    "jinja2.lexer.Lexer.tokenize"
  ],
  "jinja2.lexer.Lexer.tokenize": [
    "jinja2.environment.Environment._tokenize"
  ],
  "jinja2.lexer.Lexer.wrap": [
    "jinja2.lexer.Lexer.tokenize"
  ],
  "jinja2.lexer.OptionalLStrip.__new__": [
    "jinja2.lexer.Lexer.__init__"
  ],
  "jinja2.lexer.Token.__init__": [
    "jinja2.lexer.Lexer.wrap",
    "jinja2.lexer.TokenStream.__init__",
    "jinja2.lexer.TokenStream.close"
  ],
  "jinja2.lexer.Token.__new__": [
    "jinja2.lexer.Lexer.wrap",
    "jinja2.lexer.TokenStream.__init__",
    "jinja2.lexer.TokenStream.close"
  ],
  "jinja2.lexer.TokenStream.__init__": [
    "jinja2.environment.Environment._tokenize",
    "jinja2.lexer.Lexer.tokenize"
  ],
  "jinja2.lexer.TokenStream.__next__": [
    "jinja2.lexer.TokenStream.__init__"
  ],
  "jinja2.lexer.TokenStream.close": [
    "jinja2.lexer.TokenStream.__next__"
  ],
  "jinja2.lexer._Rule.__init__": [
    "jinja2.lexer.Lexer.__init__"
  ],
  "jinja2.lexer._Rule.__new__": [
    "jinja2.lexer.Lexer.__init__"
  ],
  "jinja2.nativetypes.NativeTemplate.render": [
    "Ovr{jinja2.nativetypes.NativeTemplate.render}"
  ],
  "jinja2.nativetypes.NativeTemplate.render_async": [
    "Ovr{jinja2.nativetypes.NativeTemplate.render_async}"
  ],
  "jinja2.nodes.And.as_const": [
    "Ovr{jinja2.nodes.And.as_const}"
  ],
  "jinja2.nodes.BinExpr.as_const": [
    "Ovr{jinja2.nodes.BinExpr.as_const}"
  ],
  "jinja2.nodes.Compare.as_const": [
    "Ovr{jinja2.nodes.Compare.as_const}"
  ],
  "jinja2.nodes.Concat.as_const": [
    "Ovr{jinja2.nodes.Concat.as_const}"
  ],
  "jinja2.nodes.CondExpr.as_const": [
    "Ovr{jinja2.nodes.CondExpr.as_const}"
  ],
  "jinja2.nodes.Const.as_const": [
    "Ovr{jinja2.nodes.Const.as_const}"
  ],
  "jinja2.nodes.Const.from_untrusted": [
    "jinja2.optimizer.Optimizer.generic_visit"
  ],
  "jinja2.nodes.Dict.as_const": [
    "Ovr{jinja2.nodes.Dict.as_const}"
  ],
  "jinja2.nodes.EvalContext.__init__": [
    "jinja2.nodes.get_eval_context",
    "jinja2.runtime.Context.__init__"
  ],
  "jinja2.nodes.Expr.as_const": [
    "Ovr{jinja2.nodes.Expr.as_const}"
  ],
  "jinja2.nodes.Expr.can_assign": [
    "Ovr{jinja2.nodes.Expr.can_assign}"
  ],
  "jinja2.nodes.Filter.as_const": [
    "Ovr{jinja2.nodes.Filter.as_const}"
  ],
  "jinja2.nodes.Getattr.as_const": [
    "Ovr{jinja2.nodes.Getattr.as_const}"
  ],
  "jinja2.nodes.Getitem.as_const": [
    "Ovr{jinja2.nodes.Getitem.as_const}"
  ],
  "jinja2.nodes.Keyword.as_const": [
    "jinja2.nodes.args_as_const"
  ],
  "jinja2.nodes.List.as_const": [
    "Ovr{jinja2.nodes.List.as_const}"
  ],
  "jinja2.nodes.MarkSafe.as_const": [
    "Ovr{jinja2.nodes.MarkSafe.as_const}"
  ],
  "jinja2.nodes.MarkSafeIfAutoescape.as_const": [
    "Ovr{jinja2.nodes.MarkSafeIfAutoescape.as_const}"
  ],
  "jinja2.nodes.NSRef.can_assign": [
    "Ovr{jinja2.nodes.NSRef.can_assign}"
  ],
  "jinja2.nodes.Name.can_assign": [
    "Ovr{jinja2.nodes.Name.can_assign}"
  ],
  "jinja2.nodes.Node.__init__": [
    "jinja2.ext.DebugExtension.parse",
    "jinja2.ext.ExprStmtExtension.parse",
    "jinja2.ext.Extension.attr",
    "jinja2.ext.Extension.call_method",
    "jinja2.ext.InternationalizationExtension._make_node",
    "jinja2.ext.InternationalizationExtension.parse",
    "jinja2.ext.LoopControlExtension.parse",
    "jinja2.nodes.Const.from_untrusted",
    "jinja2.parser.Parser.parse",
    "jinja2.parser.Parser.parse_and",
    "jinja2.parser.Parser.parse_assign_target",
    "jinja2.parser.Parser.parse_call",
    "jinja2.parser.Parser.parse_call_args",
    "jinja2.parser.Parser.parse_call_block",
    "jinja2.parser.Parser.parse_compare",
    "jinja2.parser.Parser.parse_concat",
    "jinja2.parser.Parser.parse_condexpr",
    "jinja2.parser.Parser.parse_dict",
    "jinja2.parser.Parser.parse_filter",
    "jinja2.parser.Parser.parse_filter_block",
    "jinja2.parser.Parser.parse_list",
    "jinja2.parser.Parser.parse_not",
    "jinja2.parser.Parser.parse_or",
    "jinja2.parser.Parser.parse_pow",
    "jinja2.parser.Parser.parse_primary",
    "jinja2.parser.Parser.parse_subscribed",
    "jinja2.parser.Parser.parse_subscript",
    "jinja2.parser.Parser.parse_test",
    "jinja2.parser.Parser.parse_tuple",
    "jinja2.parser.Parser.parse_unary",
    "jinja2.parser.Parser.subparse",
    "jinja2.parser.Parser.subparse.flush_data"
  ],
  "jinja2.nodes.Node.iter_child_nodes": [
    "jinja2.nodes.Node.set_ctx",
    "jinja2.nodes.Node.set_environment",
    "jinja2.nodes.Node.set_lineno",
    "jinja2.visitor.NodeVisitor.generic_visit"
  ],
  "jinja2.nodes.Node.iter_fields": [
    "jinja2.nodes.Node.iter_child_nodes",
    "jinja2.visitor.NodeTransformer.generic_visit"
  ],
  "jinja2.nodes.Node.set_ctx": [
    "jinja2.parser.Parser.parse_assign_target",
    "jinja2.parser.Parser.parse_signature"
  ],
  "jinja2.nodes.Node.set_environment": [
    "jinja2.parser.Parser.parse"
  ],
  "jinja2.nodes.Node.set_lineno": [
    "jinja2.ext.InternationalizationExtension.parse"
  ],
  "jinja2.nodes.Or.as_const": [
    "Ovr{jinja2.nodes.Or.as_const}"
  ],
  "jinja2.nodes.Pair.as_const": [
    "jinja2.nodes.Dict.as_const",
    "jinja2.nodes.args_as_const"
  ],
  "jinja2.nodes.Slice.as_const": [
    "Ovr{jinja2.nodes.Slice.as_const}"
  ],
  "jinja2.nodes.TemplateData.as_const": [
    "Ovr{jinja2.nodes.TemplateData.as_const}"
  ],
  "jinja2.nodes.Tuple.as_const": [
    "Ovr{jinja2.nodes.Tuple.as_const}"
  ],
  "jinja2.nodes.Tuple.can_assign": [
    "Ovr{jinja2.nodes.Tuple.can_assign}",
    "jinja2.parser.Parser.parse_assign_target"
  ],
  "jinja2.nodes.UnaryExpr.as_const": [
    "Ovr{jinja2.nodes.UnaryExpr.as_const}"
  ],
  "jinja2.nodes._FilterTestCommon.as_const": [
    "Ovr{jinja2.nodes._FilterTestCommon.as_const}",
    "jinja2.nodes.Filter.as_const"
  ],
  "jinja2.optimizer.Optimizer.__init__": [
    "jinja2.compiler.CodeGenerator.__init__"
  ],
  "jinja2.optimizer.Optimizer.generic_visit": [
    "Ovr{jinja2.optimizer.Optimizer.generic_visit}"
  ],
  "jinja2.parser.Parser.__init__": [
    "jinja2.environment.Environment._parse"
  ],
  "jinja2.parser.Parser.is_tuple_end": [
    "jinja2.parser.Parser.parse_tuple"
  ],
  "jinja2.parser.Parser.parse": [
    "jinja2.environment.Environment._parse"
  ],
  "jinja2.parser.Parser.parse_and": [
    "jinja2.parser.Parser.parse_or"
  ],
  "jinja2.parser.Parser.parse_assign_target": [
    "jinja2.parser.Parser.parse_signature"
  ],
  "jinja2.parser.Parser.parse_call": [
    "jinja2.parser.Parser.parse_filter_expr",
    "jinja2.parser.Parser.parse_postfix"
  ],
  "jinja2.parser.Parser.parse_call_args": [
    "jinja2.parser.Parser.parse_call",
    "jinja2.parser.Parser.parse_filter",
    "jinja2.parser.Parser.parse_test"
  ],
  "jinja2.parser.Parser.parse_call_block": [
    "jinja2.parser.Parser.parse_statement"
  ],
  "jinja2.parser.Parser.parse_compare": [
    "jinja2.parser.Parser.parse_not"
  ],
  "jinja2.parser.Parser.parse_concat": [
    "jinja2.parser.Parser.parse_math1"
  ],
  "jinja2.parser.Parser.parse_condexpr": [
    "jinja2.parser.Parser.parse_condexpr",
    "jinja2.parser.Parser.parse_expression"
  ],
  "jinja2.parser.Parser.parse_dict": [
    "jinja2.parser.Parser.parse_primary"
  ],
  "jinja2.parser.Parser.parse_expression": [
    "jinja2.ext.InternationalizationExtension.parse",
    "jinja2.parser.Parser.parse_call_args",
    "jinja2.parser.Parser.parse_call_block",
    "jinja2.parser.Parser.parse_dict",
    "jinja2.parser.Parser.parse_list",
    "jinja2.parser.Parser.parse_signature",
    "jinja2.parser.Parser.parse_subscribed"
  ],
  "jinja2.parser.Parser.parse_filter": [
    "jinja2.parser.Parser.parse_filter_block",
    "jinja2.parser.Parser.parse_filter_expr"
  ],
  "jinja2.parser.Parser.parse_filter_block": [
    "jinja2.parser.Parser.parse_statement"
  ],
  "jinja2.parser.Parser.parse_filter_expr": [
    "jinja2.parser.Parser.parse_unary"
  ],
  "jinja2.parser.Parser.parse_list": [
    "jinja2.parser.Parser.parse_primary"
  ],
  "jinja2.parser.Parser.parse_math1": [
    "jinja2.parser.Parser.parse_compare"
  ],
  "jinja2.parser.Parser.parse_math2": [
    "jinja2.parser.Parser.parse_concat"
  ],
  "jinja2.parser.Parser.parse_not": [
    "jinja2.parser.Parser.parse_and",
    "jinja2.parser.Parser.parse_not"
  ],
  "jinja2.parser.Parser.parse_or": [
    "jinja2.parser.Parser.parse_condexpr",
    "jinja2.parser.Parser.parse_expression"
  ],
  "jinja2.parser.Parser.parse_postfix": [
    "jinja2.parser.Parser.parse_test",
    "jinja2.parser.Parser.parse_unary"
  ],
  "jinja2.parser.Parser.parse_pow": [
    "jinja2.parser.Parser.parse_math2"
  ],
  "jinja2.parser.Parser.parse_primary": [
    "jinja2.parser.Parser.parse_assign_target",
    "jinja2.parser.Parser.parse_test",
    "jinja2.parser.Parser.parse_unary"
  ],
  "jinja2.parser.Parser.parse_signature": [
    "jinja2.parser.Parser.parse_call_block"
  ],
  "jinja2.parser.Parser.parse_statement": [
    "jinja2.parser.Parser.subparse"
  ],
  "jinja2.parser.Parser.parse_statements": [
    "jinja2.parser.Parser.parse_call_block",
    "jinja2.parser.Parser.parse_filter_block"
  ],
  "jinja2.parser.Parser.parse_subscribed": [
    "jinja2.parser.Parser.parse_subscript"
  ],
  "jinja2.parser.Parser.parse_subscript": [
    "jinja2.parser.Parser.parse_postfix"
  ],
  "jinja2.parser.Parser.parse_test": [
    "jinja2.parser.Parser.parse_filter_expr"
  ],
  "jinja2.parser.Parser.parse_tuple": [
    "jinja2.ext.ExprStmtExtension.parse",
    "jinja2.parser.Parser.parse_assign_target",
    "jinja2.parser.Parser.parse_primary",
    "jinja2.parser.Parser.subparse"
  ],
  "jinja2.parser.Parser.parse_unary": [
    "jinja2.parser.Parser.parse_pow",
    "jinja2.parser.Parser.parse_unary"
  ],
  "jinja2.parser.Parser.subparse": [
    "jinja2.parser.Parser.parse",
    "jinja2.parser.Parser.parse_statements"
  ],
  "jinja2.runtime.AsyncLoopContext._to_iterator": [
    "jinja2.runtime.AsyncLoopContext.length"
  ],
  "jinja2.runtime.AsyncLoopContext.length": [
    "Ovr{jinja2.runtime.AsyncLoopContext.length}"
  ],
  "jinja2.runtime.Context.__init__": [
    "jinja2.runtime.new_context"
  ],
  "jinja2.runtime.Context.get_all": [
    "jinja2.debug.get_template_locals"
  ],
  "jinja2.runtime.LoopContext.__call__": [
    "jinja2.runtime.LoopContext.__repr__"
  ],
  "jinja2.runtime.LoopContext.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "jinja2.runtime.LoopContext._to_iterator": [
    "jinja2.runtime.LoopContext.length"
  ],
  "jinja2.runtime.LoopContext.depth": [
    "jinja2.runtime.LoopContext.__call__"
  ],
  "jinja2.runtime.LoopContext.index": [
    "jinja2.runtime.AsyncLoopContext.length",
    "jinja2.runtime.LoopContext.__repr__",
    "jinja2.runtime.LoopContext.length"
  ],
  "jinja2.runtime.LoopContext.length": [
    "Ovr{jinja2.runtime.LoopContext.length}"
  ],
  "jinja2.runtime.LoopRenderFunc.__call__": [
    "jinja2.runtime.LoopContext.__call__"
  ],
  "jinja2.runtime.Undefined.__init__": [
    "jinja2.environment.Environment.getattr",
    "jinja2.environment.Environment.getitem",
    "jinja2.sandbox.SandboxedEnvironment.getattr",
    "jinja2.sandbox.SandboxedEnvironment.getitem",
    "jinja2.sandbox.SandboxedEnvironment.unsafe_undefined"
  ],
  "jinja2.runtime.Undefined.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "jinja2.sandbox.ImmutableSandboxedEnvironment.is_safe_attribute": [
    "Ovr{jinja2.sandbox.ImmutableSandboxedEnvironment.is_safe_attribute}"
  ],
  "jinja2.sandbox.SandboxedEnvironment.getattr": [
    "Ovr{jinja2.sandbox.SandboxedEnvironment.getattr}"
  ],
  "jinja2.sandbox.SandboxedEnvironment.getitem": [
    "Ovr{jinja2.sandbox.SandboxedEnvironment.getitem}"
  ],
  "jinja2.sandbox.SandboxedEnvironment.is_safe_attribute": [
    "Ovr{jinja2.sandbox.SandboxedEnvironment.is_safe_attribute}",
    "jinja2.sandbox.ImmutableSandboxedEnvironment.is_safe_attribute"
  ],
  "jinja2.sandbox.SandboxedEnvironment.unsafe_undefined": [
    "jinja2.sandbox.SandboxedEnvironment.getattr",
    "jinja2.sandbox.SandboxedEnvironment.getitem"
  ],
  "jinja2.utils.LRUCache.__init__": [
    "jinja2.environment.create_cache"
  ],
  "jinja2.utils.LRUCache.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "jinja2.utils.LRUCache._postinit": [
    "jinja2.utils.LRUCache.__init__"
  ],
  "jinja2.utils._PassArg.from_obj": [
    "jinja2.nodes._FilterTestCommon.as_const"
  ],
  "jinja2.visitor.NodeTransformer.generic_visit": [
    "Ovr{jinja2.visitor.NodeTransformer.generic_visit}",
    "jinja2.optimizer.Optimizer.generic_visit"
  ],
  "jinja2.visitor.NodeVisitor.generic_visit": [
    "Ovr{jinja2.visitor.NodeVisitor.generic_visit}"
  ],
  "jinja2.visitor.NodeVisitor.get_visitor": [
    "jinja2.visitor.NodeVisitor.visit"
  ],
  "jinja2.visitor.NodeVisitor.visit": [
    "jinja2.compiler.generate",
    "jinja2.visitor.NodeTransformer.generic_visit",
    "jinja2.visitor.NodeVisitor.generic_visit"
  ],
  "jinja2.visitor.VisitCallable.__call__": [
    "jinja2.visitor.NodeVisitor.visit"
  ],
  "jsonschema._utils.URIDict.__iter__": [
    "Ovr{jsonschema._utils.URIDict.__iter__}"
  ],
  "jsonschema._utils.URIDict.__setitem__": [
    "Ovr{jsonschema._utils.URIDict.__setitem__}"
  ],
  "ldap3.utils.ciDict.CaseInsensitiveDict.__iter__": [
    "Ovr{ldap3.utils.ciDict.CaseInsensitiveDict.__iter__}"
  ],
  "ldap3.utils.ciDict.CaseInsensitiveDict.__setitem__": [
    "Ovr{ldap3.utils.ciDict.CaseInsensitiveDict.__setitem__}"
  ],
  "ldap3.utils.ciDict.CaseInsensitiveDict.items": [
    "Ovr{ldap3.utils.ciDict.CaseInsensitiveDict.items}"
  ],
  "ldap3.utils.ciDict.CaseInsensitiveDict.values": [
    "Ovr{ldap3.utils.ciDict.CaseInsensitiveDict.values}"
  ],
  "ldap3.utils.ciDict.CaseInsensitiveWithAliasDict.__setitem__": [
    "Ovr{ldap3.utils.ciDict.CaseInsensitiveWithAliasDict.__setitem__}"
  ],
  "libcst._flatten_sentinel.FlattenSentinel.__getitem__": [
    "Ovr{libcst._flatten_sentinel.FlattenSentinel.__getitem__}"
  ],
  "libcst._parser.parso.python.tokenize.PythonToken.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "list.__add__": [
    "benchmarks.bench_hist_gradient_boosting_adult.$toplevel",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_plot_omp_lars.$toplevel",
    "benchmarks.bench_plot_randomized_svd.$toplevel",
    "build_tools.circle.list_versions.$toplevel",
    "build_tools.circle.list_versions.human_readable_data_quantity",
    "build_tools.generate_authors_table.key",
    "build_tools.update_environments_and_lock_files.$toplevel",
    "click.parser.OptionParser._process_args_for_args",
    "click.shell_completion._resolve_context",
    "doc.conf.notebook_modification_function",
    "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseBaseException.__dir__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__dir__",
    "examples.cluster.plot_kmeans_assumptions.$toplevel",
    "examples.cluster.plot_optics.$toplevel",
    "examples.cross_decomposition.plot_compare_cross_decomposition.$toplevel",
    "examples.ensemble.plot_gradient_boosting_categorical.$toplevel",
    "examples.ensemble.plot_gradient_boosting_oob.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.linear_model.plot_sgd_weighted_samples.$toplevel",
    "examples.model_selection.plot_cv_indices.plot_cv_indices",
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel",
    "examples.multioutput.plot_classifier_chain_yeast.$toplevel",
    "examples.neural_networks.plot_rbm_logistic_classification.nudge_dataset",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel",
    "examples.svm.plot_svm_kernels.$toplevel",
    "examples.svm.plot_svm_margin.$toplevel",
    "examples.svm.plot_weighted_samples.$toplevel",
    "jinja2.lexer.Lexer.__init__",
    "pip._vendor.pyparsing._MultipleMatch._setResultsName",
    "sklearn.compose._column_transformer.ColumnTransformer._record_output_indices",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.ensemble._base._partition_estimators",
    "sklearn.feature_extraction.image._extract_patches",
    "sklearn.gaussian_process.kernels.Kernel.__eq__",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit",
    "sklearn.preprocessing._encoders.OneHotEncoder.transform",
    "sklearn.utils._metadata_requests.$toplevel",
    "sklearn.utils._testing.check_docstring_parameters"
  ],
  "list.__getitem__": [
    "Ovr{list.__getitem__}",
    "click.core.BaseCommand.main",
    "click.utils._detect_program_name",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._parseCache",
    "doc.tutorial.machine_learning_map.pyparsing._trim_arity.extract_stack",
    "doc.tutorial.machine_learning_map.pyparsing._trim_arity.extract_tb",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "doc.tutorial.text_analytics.skeletons.exercise_01_language_train_model.$toplevel",
    "doc.tutorial.text_analytics.skeletons.exercise_02_sentiment.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_01_language_train_model.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_02_sentiment.$toplevel",
    "maint_tools.check_pxd_in_installation.$toplevel",
    "pip._vendor.distlib.compat.ConvertingList.__getitem__",
    "pip._vendor.html5lib.treebuilders.base.ActiveFormattingElements.append",
    "pip._vendor.pyparsing._trim_arity.extract_stack",
    "setup.setup_package"
  ],
  "list.__iadd__": [
    "Ovr{list.__iadd__}",
    "sklearn.experimental.enable_halving_search_cv.$toplevel",
    "sklearn.experimental.enable_iterative_imputer.$toplevel"
  ],
  "list.__init__": [
    "asv_benchmarks.benchmarks.common.Estimator.setup_cache",
    "asv_benchmarks.benchmarks.common.get_estimator_path",
    "asv_benchmarks.benchmarks.common.get_from_config",
    "benchmarks.bench_hist_gradient_boosting_categorical_only.$toplevel",
    "benchmarks.bench_multilabel_metrics.$toplevel",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_plot_randomized_svd.plot_time_vs_s",
    "benchmarks.bench_plot_randomized_svd.scatter_time_vs_s",
    "benchmarks.bench_rcv1_logreg_convergence.$toplevel",
    "build_tools.github.check_wheels.$toplevel",
    "click.core.BaseCommand.main",
    "click.core.Command.get_help_option_names",
    "click.core.batch",
    "click.formatting.HelpFormatter.write_dl",
    "click.parser._unpack_args",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__delitem__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__dir__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__setitem__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.items",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.keys",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.values",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.addParseAction",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.runTests",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setParseAction",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_outlier_detection_wine.$toplevel",
    "examples.applications.plot_prediction_latency.bulk_benchmark_estimator",
    "examples.applications.plot_tomography_l1_reconstruction.build_projection_operator",
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.bicluster.plot_bicluster_newsgroups.NumberNormalizingVectorizer.build_tokenizer",
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.decomposition.plot_varimax_fa.$toplevel",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_oob.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.exercises.plot_cv_digits.$toplevel",
    "examples.model_selection.plot_cv_indices.plot_cv_indices",
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.model_selection.plot_train_error_vs_test_error.$toplevel",
    "examples.svm.plot_svm_anova.$toplevel",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "jinja2.runtime.LoopContext.length",
    "maint_tools.check_pxd_in_installation.$toplevel",
    "marshmallow.orderedset.OrderedSet.__repr__",
    "packaging.version._cmpkey",
    "pip._vendor.distlib.compat.OrderedDict.keys",
    "pip._vendor.packaging.version._cmpkey",
    "pip._vendor.pyparsing.ParserElement.__init__",
    "pip._vendor.pyparsing.ParserElement.setParseAction",
    "pip._vendor.requests.cookies.RequestsCookieJar.items",
    "pip._vendor.requests.cookies.RequestsCookieJar.values",
    "pip._vendor.requests.cookies.create_cookie",
    "pip._vendor.resolvelib.structs._FactoryIterableView.__repr__",
    "pip._vendor.urllib3._collections.HTTPHeaderDict.items",
    "prompt_toolkit.layout.utils.explode_text_fragments",
    "sklearn.__check_build.raise_build_error",
    "sklearn.base._clone_parametrized",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.compose._column_transformer.ColumnTransformer._fit_transform",
    "sklearn.compose._column_transformer.ColumnTransformer._hstack",
    "sklearn.compose._column_transformer.ColumnTransformer._update_fitted_transformers",
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform",
    "sklearn.compose._column_transformer.ColumnTransformer.transform",
    "sklearn.compose._column_transformer._get_transformer_list",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.covariance._graph_lasso.graphical_lasso_path",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._arff_parser._split_sparse_columns",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._lfw.fetch_lfw_pairs",
    "sklearn.datasets._samples_generator.make_multilabel_classification.sample_example",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.decomposition._dict_learning._sparse_encode",
    "sklearn.dummy.DummyClassifier.fit",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.externals._arff._DataListMixin.decode_rows",
    "sklearn.externals._packaging.version._cmpkey",
    "sklearn.feature_extraction.image._extract_patches",
    "sklearn.feature_extraction.text.CountVectorizer._limit_features",
    "sklearn.feature_extraction.text.CountVectorizer.inverse_transform",
    "sklearn.feature_extraction.text._VectorizerMixin._char_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin._check_stop_words_consistency",
    "sklearn.feature_extraction.text._VectorizerMixin._word_ngrams",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.gaussian_process.kernels.Kernel.__eq__",
    "sklearn.linear_model._bayes.ARDRegression.fit",
    "sklearn.linear_model._bayes.BayesianRidge.fit",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._logistic._log_reg_scoring_path",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._theil_sen.TheilSenRegressor.fit",
    "sklearn.metrics._classification._check_set_wise_labels",
    "sklearn.metrics.pairwise.pairwise_distances_argmin",
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._split._CVIterableWrapper.__init__",
    "sklearn.model_selection._split._pprint",
    "sklearn.model_selection._split.train_test_split",
    "sklearn.model_selection._validation.cross_val_predict",
    "sklearn.model_selection._validation.cross_validate",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.multiclass.OneVsOneClassifier.fit",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit",
    "sklearn.neural_network._rbm.BernoulliRBM.fit",
    "sklearn.pipeline.FeatureUnion._parallel_func",
    "sklearn.pipeline.Pipeline._fit",
    "sklearn.pipeline.Pipeline.inverse_transform",
    "sklearn.pipeline._name_estimators",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.tree._export._BaseTreeExporter.get_color",
    "sklearn.utils._array_indexing",
    "sklearn.utils._chunk_generator",
    "sklearn.utils._encode._check_unknown",
    "sklearn.utils._get_column_indices",
    "sklearn.utils._list_indexing",
    "sklearn.utils._metadata_requests.$toplevel",
    "sklearn.utils._metadata_requests.MethodMapping._serialize",
    "sklearn.utils._metadata_requests._MetadataRequester._build_request_for_signature",
    "sklearn.utils._mocking.CheckingClassifier.fit",
    "sklearn.utils._testing._convert_container",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.class_weight.compute_sample_weight",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.estimator_checks._apply_on_subsets",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_representation_invariance",
    "sklearn.utils.extmath.weighted_mode",
    "sklearn.utils.metaestimators._BaseComposition._replace_estimator",
    "sklearn.utils.metaestimators._BaseComposition._set_params",
    "sklearn.utils.metaestimators._BaseComposition._validate_names",
    "sklearn.utils.tests.test_estimator_checks.test_non_deterministic_estimator_skip_tests",
    "sklearn.utils.tests.test_pprint.test_n_max_elements_to_show",
    "sklearn.utils.tosequence",
    "sklearn.utils.validation._check_monotonic_cst",
    "sklearn.utils.validation._get_feature_names",
    "sklearn.utils.validation.check_array",
    "traitlets.traitlets.HasTraits.hold_trait_notifications",
    "traitlets.utils.getargspec.getargspec"
  ],
  "list.__iter__": [
    "Ovr{list.__iter__}",
    "asv_benchmarks.benchmarks.common.Estimator.setup_cache",
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_hist_gradient_boosting.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel",
    "benchmarks.bench_isolation_forest.$toplevel",
    "benchmarks.bench_lof.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_multilabel_metrics.$toplevel",
    "benchmarks.bench_multilabel_metrics.benchmark",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_plot_fastkmeans.$toplevel",
    "benchmarks.bench_plot_hierarchical.$toplevel",
    "benchmarks.bench_plot_incremental_pca.fixed_batch_size_comparison",
    "benchmarks.bench_plot_incremental_pca.variable_batch_size_comparison",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_plot_randomized_svd.$toplevel",
    "benchmarks.bench_plot_randomized_svd.bench_a",
    "benchmarks.bench_plot_randomized_svd.bench_b",
    "benchmarks.bench_plot_randomized_svd.plot_power_iter_vs_s",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_saga.$toplevel",
    "benchmarks.bench_saga.fit_single",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "build_tools.circle.list_versions.$toplevel",
    "build_tools.circle.list_versions.human_readable_data_quantity",
    "build_tools.generate_authors_table.get",
    "build_tools.generate_authors_table.get_contributors",
    "build_tools.github.check_wheels.$toplevel",
    "build_tools.update_environments_and_lock_files.main",
    "click._compat.open_stream",
    "click.core.Command.collect_usage_pieces",
    "click.core.Command.format_options",
    "click.core.Command.get_help_option_names",
    "click.core.Command.make_parser",
    "click.core.Command.parse_args",
    "click.core.Command.shell_complete",
    "click.core.CommandCollection.get_command",
    "click.core.CommandCollection.list_commands",
    "click.core.MultiCommand.format_commands",
    "click.core.MultiCommand.invoke",
    "click.core.Option.get_default",
    "click.core.Option.get_help_record",
    "click.core.Parameter.shell_complete",
    "click.core._complete_visible_commands",
    "click.formatting.HelpFormatter.write_dl",
    "click.formatting.join_options",
    "click.formatting.measure_table",
    "click.formatting.wrap_text",
    "click.parser.OptionParser._process_args_for_args",
    "click.shell_completion.ShellComplete.complete",
    "click.shell_completion._resolve_incomplete",
    "doc.conftest.pytest_runtest_setup",
    "doc.sphinxext.add_toctree_functions.add_toctree_functions.get_nav_object",
    "doc.sphinxext.allow_nan_estimators.AllowNanEstimators.run",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Or.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__delitem__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__iadd__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.dump",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.transformString",
    "doc.tutorial.machine_learning_map.pyparsing._xml_escape",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel",
    "examples.applications.plot_model_complexity_influence.$toplevel",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_out_of_core_classification.ReutersParser.parse",
    "examples.applications.plot_prediction_latency.benchmark",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.applications.plot_topics_extraction_with_nmf_lda.plot_top_words",
    "examples.applications.wikipedia_principal_eigenvector.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.cluster.plot_cluster_iris.$toplevel",
    "examples.cluster.plot_kmeans_digits.bench_k_means",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.$toplevel",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "examples.decomposition.plot_incremental_pca.$toplevel",
    "examples.decomposition.plot_pca_iris.$toplevel",
    "examples.decomposition.plot_pca_vs_fa_model_selection.$toplevel",
    "examples.decomposition.plot_sparse_coding.$toplevel",
    "examples.ensemble.plot_ensemble_oob.$toplevel",
    "examples.ensemble.plot_feature_transformation.$toplevel",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.ensemble.plot_gradient_boosting_categorical.plot_results",
    "examples.ensemble.plot_gradient_boosting_early_stopping.$toplevel",
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "examples.ensemble.plot_voting_probas.$toplevel",
    "examples.gaussian_process.plot_gpr_on_structured_data.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_polynomial_interpolation.$toplevel",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.linear_model.plot_robust_fit.$toplevel",
    "examples.linear_model.plot_sgd_comparison.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_20newsgroups.$toplevel",
    "examples.linear_model.plot_theilsen.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.score_estimator",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.mixture.plot_concentration_prior.$toplevel",
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.model_selection.plot_confusion_matrix.$toplevel",
    "examples.model_selection.plot_cv_indices.$toplevel",
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel",
    "examples.model_selection.plot_successive_halving_heatmap.make_heatmap",
    "examples.multioutput.plot_classifier_chain_yeast.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.neighbors.plot_classification.$toplevel",
    "examples.neighbors.plot_nearest_centroid.$toplevel",
    "examples.neural_networks.plot_mlp_alpha.$toplevel",
    "examples.neural_networks.plot_rbm_logistic_classification.nudge_dataset",
    "examples.preprocessing.plot_all_scaling.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_discretization_strategies.$toplevel",
    "examples.preprocessing.plot_map_data_to_normal.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.svm.plot_rbf_parameters.$toplevel",
    "examples.svm.plot_svm_tie_breaking.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "examples.text.plot_hashing_vs_dict_vectorizer.tokenize",
    "examples.tree.plot_cost_complexity_pruning.$toplevel",
    "importlib_metadata.Distribution._discover_resolvers",
    "jinja2.environment.Environment.iter_extensions",
    "jinja2.lexer.Lexer.__init__",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.lexer.compile_rules",
    "jinja2.nodes.Compare.as_const",
    "jinja2.nodes.Concat.as_const",
    "jinja2.nodes.Dict.as_const",
    "jinja2.nodes.List.as_const",
    "jinja2.nodes.Node.iter_child_nodes",
    "jinja2.nodes.Tuple.as_const",
    "jinja2.nodes.Tuple.can_assign",
    "jinja2.nodes.args_as_const",
    "jinja2.visitor.NodeTransformer.generic_visit",
    "maint_tools.check_pxd_in_installation.$toplevel",
    "maint_tools.sort_whats_new.$toplevel",
    "maint_tools.update_tracking_issue.$toplevel",
    "markupsafe.Markup.rsplit",
    "markupsafe.Markup.split",
    "markupsafe.Markup.splitlines",
    "pip._vendor.html5lib.treebuilders.base.ActiveFormattingElements.append",
    "pip._vendor.pyparsing.ParserElement.transformString",
    "pip._vendor.pyparsing._MultipleMatch._setResultsName",
    "pip._vendor.requests.cookies.remove_cookie_by_name",
    "pip._vendor.tenacity._utils.visible_attrs",
    "prompt_toolkit.contrib.regular_languages.compiler.Variables.__repr__",
    "setup.CleanCommand.run",
    "setup.setup_package",
    "sklearn._build_utils.openmp_helpers.check_openmp_support",
    "sklearn._min_dependencies.$toplevel",
    "sklearn.base.BaseEstimator._get_param_names",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.cluster._mean_shift.MeanShift.fit",
    "sklearn.cluster._optics._update_filter_sdas",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.compose._column_transformer.ColumnTransformer._hstack",
    "sklearn.compose._column_transformer.ColumnTransformer._record_output_indices",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._arff_parser._pandas_arff_parser",
    "sklearn.datasets._base.load_files",
    "sklearn.datasets._base.load_sample_images",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._lfw._fetch_lfw_people",
    "sklearn.datasets._openml._download_data_to_bunch",
    "sklearn.datasets._openml._get_num_samples",
    "sklearn.datasets._openml._verify_target_data_type",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._species_distributions._load_coverage",
    "sklearn.datasets._svmlight_format_io.load_svmlight_files",
    "sklearn.decomposition._dict_learning._sparse_encode",
    "sklearn.ensemble._base._set_random_states",
    "sklearn.ensemble._forest.ForestClassifier.predict_proba",
    "sklearn.ensemble._gb.BaseGradientBoosting.feature_importances_",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_interaction_cst",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._print_iteration_stats",
    "sklearn.ensemble._stacking.StackingClassifier.fit",
    "sklearn.ensemble._stacking._BaseStacking._concatenate_predictions",
    "sklearn.ensemble._voting.VotingClassifier.get_feature_names_out",
    "sklearn.externals._arff.ArffEncoder._encode_attribute",
    "sklearn.externals._arff.LODGeneratorData.encode_data",
    "sklearn.externals._arff._parse_values",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.restrict",
    "sklearn.feature_extraction.text.CountVectorizer._limit_features",
    "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out",
    "sklearn.feature_extraction.text._VectorizerMixin._check_stop_words_consistency",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.gaussian_process.kernels.Kernel.hyperparameters",
    "sklearn.inspection._plot.decision_boundary._check_boundary_response_method",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.isotonic.IsotonicRegression._build_y",
    "sklearn.linear_model._base._check_precomputed_gram_matrix",
    "sklearn.linear_model._coordinate_descent.ElasticNet.fit",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._least_angle.LarsCV.$class_toplevel",
    "sklearn.linear_model._least_angle.LassoLarsIC.$class_toplevel",
    "sklearn.linear_model._logistic.LogisticRegressionCV.$class_toplevel",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model.tests.test_huber.test_huber_gradient",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot",
    "sklearn.metrics._scorer.$toplevel",
    "sklearn.metrics._scorer._MultimetricScorer._use_cache",
    "sklearn.metrics._scorer._ThresholdScorer._score",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.model_selection._search.ParameterSampler.__iter__",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.model_selection._split._build_repr",
    "sklearn.model_selection._split._pprint",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._insert_error_scores",
    "sklearn.model_selection._validation._score",
    "sklearn.model_selection._validation.cross_val_predict",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_kneighbors_regressor",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_tsne",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit",
    "sklearn.neural_network._rbm.BernoulliRBM.fit",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_adam_optimizer",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_base_optimizer",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_nesterovs_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_no_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_trigger_stopping",
    "sklearn.pipeline._name_estimators",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit_transform",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform",
    "sklearn.preprocessing._polynomial.SplineTransformer.transform",
    "sklearn.svm._base.BaseSVC.$class_toplevel",
    "sklearn.svm._classes.NuSVR.$class_toplevel",
    "sklearn.svm._classes.OneClassSVM.$class_toplevel",
    "sklearn.svm._classes.SVR.$class_toplevel",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_precomputed",
    "sklearn.tree._export._BaseTreeExporter.get_color",
    "sklearn.tree._export._DOTTreeExporter.tail",
    "sklearn.tree._export._MPLTreeExporter.export",
    "sklearn.utils._estimator_html_repr._get_visual_block",
    "sklearn.utils._get_column_indices",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests.MetadataRequest.__init__",
    "sklearn.utils._metadata_requests.MetadataRequest._serialize",
    "sklearn.utils._metadata_requests._MetadataRequester.__init_subclass__",
    "sklearn.utils._metadata_requests._MetadataRequester._build_request_for_signature",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils._param_validation.MissingValues.__str__",
    "sklearn.utils._param_validation.MissingValues.is_satisfied_by",
    "sklearn.utils._param_validation._Booleans.__str__",
    "sklearn.utils._param_validation._Booleans.is_satisfied_by",
    "sklearn.utils._param_validation._CVObjects.__str__",
    "sklearn.utils._param_validation._CVObjects.is_satisfied_by",
    "sklearn.utils._param_validation._RandomStates.__str__",
    "sklearn.utils._param_validation._RandomStates.is_satisfied_by",
    "sklearn.utils._param_validation._VerboseHelper.__str__",
    "sklearn.utils._param_validation._VerboseHelper.is_satisfied_by",
    "sklearn.utils._param_validation.validate_parameter_constraints",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._pprint_estimator",
    "sklearn.utils._pprint._safe_repr",
    "sklearn.utils._show_versions._get_deps_info",
    "sklearn.utils._testing.assert_allclose",
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.discovery.all_functions",
    "sklearn.utils.estimator_checks._apply_on_subsets",
    "sklearn.utils.estimator_checks._generate_sparse_matrix",
    "sklearn.utils.estimator_checks._output_from_fit_transform",
    "sklearn.utils.estimator_checks._yield_checks",
    "sklearn.utils.estimator_checks.check_class_weight_classifiers",
    "sklearn.utils.estimator_checks.check_classifier_data_not_an_array",
    "sklearn.utils.estimator_checks.check_classifiers_classes",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_dict_unchanged",
    "sklearn.utils.estimator_checks.check_dont_overwrite_parameters",
    "sklearn.utils.estimator_checks.check_estimators_dtypes",
    "sklearn.utils.estimator_checks.check_estimators_nan_inf",
    "sklearn.utils.estimator_checks.check_estimators_pickle",
    "sklearn.utils.estimator_checks.check_fit2d_predict1d",
    "sklearn.utils.estimator_checks.check_fit_idempotent",
    "sklearn.utils.estimator_checks.check_fit_score_takes_y",
    "sklearn.utils.estimator_checks.check_methods_sample_order_invariance",
    "sklearn.utils.estimator_checks.check_methods_subset_invariance",
    "sklearn.utils.estimator_checks.check_n_features_in_after_fitting",
    "sklearn.utils.estimator_checks.check_no_attributes_set_in_init",
    "sklearn.utils.estimator_checks.check_outliers_train",
    "sklearn.utils.estimator_checks.check_param_validation",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.estimator_checks.check_pipeline_consistency",
    "sklearn.utils.estimator_checks.check_regressor_data_not_an_array",
    "sklearn.utils.estimator_checks.check_regressors_no_decision_function",
    "sklearn.utils.estimator_checks.check_sample_weights_invariance",
    "sklearn.utils.estimator_checks.check_set_params",
    "sklearn.utils.estimator_checks.check_supervised_y_no_nan",
    "sklearn.utils.extmath.cartesian",
    "sklearn.utils.graph.single_source_shortest_path_length",
    "sklearn.utils.metaestimators._BaseComposition._set_params",
    "sklearn.utils.resample",
    "sklearn.utils.sparsefuncs.inplace_swap_row_csc",
    "sklearn.utils.sparsefuncs.inplace_swap_row_csr",
    "sklearn.utils.tests.test_estimator_checks.run_tests_without_pytest",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_clones",
    "sklearn.utils.tests.test_estimator_checks.test_check_outlier_contamination",
    "sklearn.utils.tests.test_estimator_checks.test_non_deterministic_estimator_skip_tests",
    "sklearn.utils.tests.test_murmurhash.test_mmhash3_int_array",
    "sklearn.utils.validation._check_large_sparse",
    "sklearn.utils.validation._is_fitted",
    "sklearn.utils.validation.check_array",
    "sklearn.utils.validation.check_consistent_length",
    "traitlets.traitlets.HasTraits._notify_observers",
    "traitlets.traitlets.HasTraits.hold_trait_notifications",
    "werkzeug.utils.ImportStringError.__init__"
  ],
  "list.__mul__": [
    "benchmarks.bench_hist_gradient_boosting_adult.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_categorical_only.$toplevel",
    "benchmarks.bench_plot_incremental_pca.variable_batch_size_comparison",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.resetCache",
    "doc.tutorial.machine_learning_map.pyparsing.countedArray.countFieldParseAction",
    "examples.classification.plot_digits_classification.$toplevel",
    "examples.cluster.plot_kmeans_assumptions.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.make_data",
    "examples.cross_decomposition.plot_compare_cross_decomposition.$toplevel",
    "examples.ensemble.plot_adaboost_hastie_10_2.$toplevel",
    "examples.impute.plot_missing_values.$toplevel",
    "examples.linear_model.plot_sgd_weighted_samples.$toplevel",
    "examples.model_selection.plot_cv_indices.$toplevel",
    "examples.model_selection.plot_cv_indices.plot_cv_indices",
    "examples.model_selection.plot_cv_indices.visualize_groups",
    "examples.model_selection.plot_multi_metric_evaluation.$toplevel",
    "examples.multioutput.plot_classifier_chain_yeast.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel",
    "examples.svm.plot_svm_kernels.$toplevel",
    "examples.svm.plot_svm_margin.$toplevel",
    "examples.svm.plot_weighted_samples.$toplevel",
    "pip._vendor.pyparsing.ParserElement.resetCache",
    "sklearn.cluster._affinity_propagation.AffinityPropagation.predict",
    "sklearn.cluster._affinity_propagation._affinity_propagation",
    "sklearn.datasets._lfw._fetch_lfw_people",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.fit",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.__init__",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.externals._arff.COOData.decode_rows",
    "sklearn.feature_extraction.image._extract_patches",
    "sklearn.inspection._partial_dependence.partial_dependence",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._ridge._solve_lbfgs",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.multiclass.OneVsOneClassifier.decision_function",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.fit",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit",
    "sklearn.preprocessing._data.QuantileTransformer._sparse_fit",
    "sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._classes.BaseDecisionTree._prune_tree",
    "sklearn.utils.estimator_checks.check_sample_weights_list",
    "sklearn.utils.estimator_checks.check_sample_weights_not_an_array",
    "sklearn.utils.estimator_checks.check_sample_weights_pandas_series",
    "sklearn.utils.tests.test_estimator_checks.EstimatorInconsistentForPandas.predict"
  ],
  "list.__setitem__": [
    "Ovr{list.__setitem__}",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._parseCache",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.resetCache",
    "pip._vendor.distlib.compat.ConvertingList.__getitem__",
    "pip._vendor.pyparsing.ParserElement.resetCache",
    "prompt_toolkit.layout.utils._ExplodedList.__setitem__"
  ],
  "list.append": [
    "Ovr{list.append}",
    "pip._vendor.html5lib.treebuilders.base.ActiveFormattingElements.append"
  ],
  "list.copy": [
    "Ovr{list.copy}"
  ],
  "list.count": [
    "examples.cluster.plot_dbscan.$toplevel"
  ],
  "list.extend": [
    "Ovr{list.extend}",
    "prompt_toolkit.layout.utils._ExplodedList.extend"
  ],
  "list.index": [
    "Ovr{list.index}"
  ],
  "list.insert": [
    "Ovr{list.insert}",
    "doc.conf.$toplevel"
  ],
  "list.pop": [
    "Ovr{list.pop}",
    "pip._vendor.distlib.compat.ConvertingList.pop"
  ],
  "list.remove": [
    "Ovr{list.remove}",
    "pip._vendor.html5lib.treebuilders.base.ActiveFormattingElements.append"
  ],
  "list.sort": [
    "Ovr{list.sort}"
  ],
  "logging.Logger.addHandler": [
    "build_tools.update_environments_and_lock_files.$toplevel"
  ],
  "logging.Logger.setLevel": [
    "build_tools.update_environments_and_lock_files.$toplevel"
  ],
  "logging.StreamHandler.__init__": [
    "build_tools.update_environments_and_lock_files.$toplevel"
  ],
  "map.__init__": [
    "asv_benchmarks.benchmarks.common.get_estimator_path",
    "click.core.Command.parse_args",
    "click.termui._build_prompt",
    "click.types.Choice.convert",
    "click.types.DateTime.convert",
    "click.types.convert_type",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.addParseAction",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.runTests",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setParseAction",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.transformString",
    "examples.applications.plot_prediction_latency.bulk_benchmark_estimator",
    "examples.ensemble.plot_gradient_boosting_oob.$toplevel",
    "examples.exercises.plot_cv_digits.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "importlib_metadata.EntryPoint.matches",
    "markupsafe.Markup.join",
    "pip._vendor.distlib.compat.ChainMap.__repr__",
    "pip._vendor.pyparsing.ParserElement.setParseAction",
    "pip._vendor.pyparsing.ParserElement.transformString",
    "sklearn.datasets._samples_generator.make_sparse_coded_signal",
    "sklearn.feature_extraction.text.CountVectorizer.fit_transform",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.gaussian_process.kernels.Kernel.__repr__",
    "sklearn.gaussian_process.kernels.Matern.__repr__",
    "sklearn.gaussian_process.kernels.RBF.__repr__",
    "sklearn.metrics.cluster._bicluster._check_rows_and_columns",
    "sklearn.utils.estimator_checks._apply_on_subsets",
    "sklearn.utils.estimator_checks.check_classifiers_predictions"
  ],
  "map.__iter__": [
    "Ovr{map.__iter__}"
  ],
  "map.__next__": [
    "Ovr{map.__next__}"
  ],
  "markupsafe.EscapeFormatter.__init__": [
    "markupsafe.Markup.format"
  ],
  "markupsafe.Markup.__add__": [
    "Ovr{markupsafe.Markup.__add__}"
  ],
  "markupsafe.Markup.__mod__": [
    "Ovr{markupsafe.Markup.__mod__}"
  ],
  "markupsafe.Markup.__mul__": [
    "Ovr{markupsafe.Markup.__mul__}"
  ],
  "markupsafe.Markup.__new__": [
    "jinja2.nodes.MarkSafe.as_const",
    "jinja2.nodes.MarkSafeIfAutoescape.as_const",
    "jinja2.nodes.TemplateData.as_const",
    "markupsafe.Markup.__add__",
    "markupsafe.Markup.__mod__",
    "markupsafe.Markup.__mul__",
    "markupsafe.Markup.escape",
    "markupsafe.Markup.format",
    "markupsafe.Markup.join",
    "markupsafe.Markup.partition",
    "markupsafe.Markup.rpartition",
    "markupsafe.Markup.rsplit",
    "markupsafe.Markup.split",
    "markupsafe.Markup.splitlines"
  ],
  "markupsafe.Markup.__repr__": [
    "benchmarks.bench_hist_gradient_boosting_higgsboson.load_data",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "build_tools.circle.list_versions.$toplevel",
    "build_tools.generate_authors_table.get_contributors",
    "build_tools.github.vendor.main",
    "build_tools.update_environments_and_lock_files.check_conda_lock_version",
    "build_tools.update_environments_and_lock_files.get_package_with_constraint",
    "click._textwrap.TextWrapper.indent_only",
    "click._winconsole.ConsoleStream.__repr__",
    "click.core.Argument.get_error_hint",
    "click.core.BaseCommand._main_shell_completion",
    "click.core.Context.__init__",
    "click.core.Context.command_path",
    "click.core.Option._parse_decls",
    "click.core.Option.add_to_parser",
    "click.core.Option.get_help_record",
    "click.core.Option.get_help_record._write_opts",
    "click.core.Option.resolve_envvar_value",
    "click.core._check_multicommand",
    "click.exceptions.MissingParameter.format_message",
    "click.exceptions.NoSuchOption.format_message",
    "click.exceptions.UsageError.show",
    "click.exceptions._join_param_hints",
    "click.formatting.HelpFormatter.write_dl",
    "click.formatting.HelpFormatter.write_heading",
    "click.formatting.HelpFormatter.write_usage",
    "click.parser.Option.__init__",
    "click.parser.Option.process",
    "click.parser.OptionParser._match_short_opt",
    "click.parser.normalize_opt",
    "click.shell_completion.BashComplete.format_completion",
    "click.shell_completion.FishComplete.format_completion",
    "click.shell_completion.ShellComplete.func_name",
    "click.shell_completion.ZshComplete.format_completion",
    "click.termui._build_prompt",
    "click.termui.style",
    "click.types.File.convert",
    "click.utils.LazyFile.__repr__",
    "click.utils._detect_program_name",
    "doc.conf.$toplevel",
    "doc.conf.generate_min_dependency_substitutions",
    "doc.conf.generate_min_dependency_table",
    "doc.sphinxext.add_toctree_functions.docutils_node_to_jinja",
    "doc.sphinxext.allow_nan_estimators.AllowNanEstimators.make_paragraph_for_estimator_type",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.cluster.plot_bisect_kmeans.$toplevel",
    "examples.cluster.plot_hdbscan.plot",
    "examples.decomposition.plot_varimax_fa.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.miscellaneous.plot_metadata_routing.check_metadata",
    "examples.model_selection.plot_learning_curve.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "flask.cli.FlaskGroup.get_command",
    "flask.cli.FlaskGroup.list_commands",
    "flask.config.Config.__repr__",
    "flask.ctx._AppCtxGlobals.__repr__",
    "jinja2.debug.fake_traceback",
    "jinja2.environment.Environment.getitem",
    "jinja2.environment.Environment.preprocess",
    "jinja2.ext.InternationalizationExtension._make_node",
    "jinja2.idtracking.RootVisitor.generic_visit",
    "jinja2.lexer.Lexer.__init__",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.nodes.Node.__init__",
    "jinja2.parser.Parser.parse_primary",
    "jinja2.parser.Parser.parse_tuple",
    "jinja2.runtime.LoopContext.__repr__",
    "jinja2.sandbox.SandboxedEnvironment.getitem",
    "jinja2.sandbox.SandboxedEnvironment.unsafe_undefined",
    "jinja2.utils.LRUCache.__repr__",
    "jinja2.visitor.NodeVisitor.get_visitor",
    "maint_tools.update_tracking_issue.close_issue_if_opened",
    "maint_tools.update_tracking_issue.create_or_update_issue",
    "maint_tools.update_tracking_issue.get_issue",
    "markupsafe.Markup.__repr__",
    "marshmallow.orderedset.OrderedSet.__repr__",
    "packaging.specifiers.SpecifierSet.__repr__",
    "packaging.version.Version.__init__",
    "packaging.version.Version.__str__",
    "pip._internal.cli.parser.ConfigOptionParser.error",
    "prompt_toolkit.contrib.regular_languages.compiler.Variables.__repr__",
    "sklearn.base.BaseEstimator._check_feature_names",
    "sklearn.base.BaseEstimator._check_n_features",
    "sklearn.base.BaseEstimator._validate_data",
    "sklearn.base.BaseEstimator.set_params",
    "sklearn.calibration.CalibrationDisplay.plot",
    "sklearn.cluster._kmeans.KMeans._check_params_vs_input",
    "sklearn.cluster._kmeans._BaseKMeans._check_params_vs_input",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.compose._target.TransformedTargetRegressor.fit",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._openml._load_arff_response",
    "sklearn.datasets._openml._retry_on_network_error.decorator.wrapper",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.ensemble._stacking._BaseStacking.get_feature_names_out",
    "sklearn.ensemble._stacking._BaseStacking.n_features_in_",
    "sklearn.ensemble._voting.VotingClassifier.get_feature_names_out",
    "sklearn.ensemble._voting.VotingRegressor.get_feature_names_out",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._validate_estimator",
    "sklearn.externals._packaging.version.LegacyVersion.__init__",
    "sklearn.externals._packaging.version.Version.__init__",
    "sklearn.externals._packaging.version.Version.__str__",
    "sklearn.feature_extraction.text.TfidfVectorizer.idf_",
    "sklearn.feature_extraction.text._make_int_array",
    "sklearn.feature_selection._base._get_feature_importances",
    "sklearn.impute._base.MissingIndicator.get_feature_names_out",
    "sklearn.inspection._pd_utils._get_feature_index",
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.from_estimator",
    "sklearn.inspection._plot.decision_boundary._check_boundary_response_method",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.isotonic.IsotonicRegression.get_feature_names_out",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out",
    "sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.inner_solve",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.line_search",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.score",
    "sklearn.linear_model._least_angle.LassoLarsIC._estimate_noise_variance",
    "sklearn.linear_model._quantile.QuantileRegressor.fit",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.from_estimator",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.from_predictions",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_estimator",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_predictions",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.plot",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.model_selection.__getattr__",
    "sklearn.model_selection._plot.LearningCurveDisplay.from_estimator",
    "sklearn.model_selection._plot.ValidationCurveDisplay.from_estimator",
    "sklearn.model_selection._plot._BaseCurveDisplay._plot_curve",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._check_input_parameters",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._score",
    "sklearn.model_selection._validation._warn_or_raise_about_fit_failures",
    "sklearn.pipeline.Pipeline._sk_visual_block_._get_name",
    "sklearn.svm._base.BaseLibSVM._validate_for_predict",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.utils._array_api._check_array_api_dispatch",
    "sklearn.utils._array_api._isdtype_single",
    "sklearn.utils._encode._encode",
    "sklearn.utils._estimator_html_repr._get_visual_block",
    "sklearn.utils._estimator_html_repr._write_label_html",
    "sklearn.utils._estimator_html_repr.estimator_html_repr",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests.MethodMetadataRequest._route_params",
    "sklearn.utils._metadata_requests._MetadataRequester.__init_subclass__",
    "sklearn.utils._metadata_requests.process_routing",
    "sklearn.utils._mocking.CheckingClassifier.fit",
    "sklearn.utils._param_validation.HasMethods.__str__",
    "sklearn.utils._param_validation.Interval._check_params",
    "sklearn.utils._param_validation.MissingValues.__str__",
    "sklearn.utils._param_validation.Options.__str__",
    "sklearn.utils._param_validation.Options._mark_if_deprecated",
    "sklearn.utils._param_validation._Booleans.__str__",
    "sklearn.utils._param_validation._CVObjects.__str__",
    "sklearn.utils._param_validation._RandomStates.__str__",
    "sklearn.utils._param_validation._VerboseHelper.__str__",
    "sklearn.utils._param_validation.generate_invalid_param_val",
    "sklearn.utils._param_validation.validate_parameter_constraints",
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_and_get_response_values",
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_from_predictions_params",
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_plot_params",
    "sklearn.utils._response._get_response_values",
    "sklearn.utils._response._get_response_values_binary",
    "sklearn.utils._tags._safe_tags",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.estimator_checks._maybe_skip.wrapped",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_decision_function",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_fit_check_is_fitted",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator",
    "sklearn.utils.validation._assert_all_finite_element_wise",
    "sklearn.utils.validation._check_monotonic_cst",
    "sklearn.utils.validation._check_pos_label_consistency",
    "sklearn.utils.validation._check_response_method",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f",
    "sklearn.utils.validation._generate_get_feature_names_out",
    "sklearn.utils.validation._num_features",
    "sklearn.utils.validation.check_scalar",
    "testslide.strict_mock.NonAwaitableReturn.__str__",
    "testslide.strict_mock.NonCallableValue.__str__",
    "testslide.strict_mock.NonExistentAttribute.__str__",
    "testslide.strict_mock.UndefinedAttribute.__str__",
    "testslide.strict_mock.UnsupportedMagic.__str__",
    "traitlets.config.loader.DeferredConfigList.__repr__",
    "traitlets.config.loader.DeferredConfigString.__repr__",
    "traitlets.traitlets.HasTraits.set_trait",
    "werkzeug.utils.ImportStringError.__init__"
  ],
  "markupsafe.Markup.escape": [
    "markupsafe.Markup.__add__",
    "markupsafe.Markup.__mod__",
    "markupsafe.Markup.format",
    "markupsafe.Markup.join",
    "markupsafe.Markup.partition",
    "markupsafe.Markup.rpartition"
  ],
  "markupsafe.Markup.format": [
    "Ovr{markupsafe.Markup.format}"
  ],
  "markupsafe.Markup.join": [
    "Ovr{markupsafe.Markup.join}"
  ],
  "markupsafe.Markup.partition": [
    "Ovr{markupsafe.Markup.partition}"
  ],
  "markupsafe.Markup.rpartition": [
    "Ovr{markupsafe.Markup.rpartition}"
  ],
  "markupsafe.Markup.rsplit": [
    "Ovr{markupsafe.Markup.rsplit}"
  ],
  "markupsafe.Markup.split": [
    "Ovr{markupsafe.Markup.split}"
  ],
  "markupsafe.Markup.splitlines": [
    "Ovr{markupsafe.Markup.splitlines}"
  ],
  "markupsafe._MarkupEscapeHelper.__init__": [
    "markupsafe.Markup.__mod__"
  ],
  "marshmallow.orderedset.OrderedSet.__iter__": [
    "Ovr{marshmallow.orderedset.OrderedSet.__iter__}"
  ],
  "marshmallow.orderedset.OrderedSet.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "memoryview.__getitem__": [
    "Ovr{memoryview.__getitem__}"
  ],
  "memoryview.__iter__": [
    "Ovr{memoryview.__iter__}"
  ],
  "mmap.mmap.__iter__": [
    "Ovr{mmap.mmap.__iter__}"
  ],
  "mock.mock._Call.__eq__": [
    "click.parser.Argument.process"
  ],
  "mock.mock._Call.__ne__": [
    "click.parser.Argument.process"
  ],
  "multiprocessing.managers.BaseListProxy.__getitem__": [
    "Ovr{multiprocessing.managers.BaseListProxy.__getitem__}"
  ],
  "multiprocessing.managers.BaseListProxy.index": [
    "Ovr{multiprocessing.managers.BaseListProxy.index}"
  ],
  "multiprocessing.managers.DictProxy.__iter__": [
    "Ovr{multiprocessing.managers.DictProxy.__iter__}"
  ],
  "multiprocessing.managers.DictProxy.__setitem__": [
    "Ovr{multiprocessing.managers.DictProxy.__setitem__}"
  ],
  "multiprocessing.managers.DictProxy.get": [
    "Ovr{multiprocessing.managers.DictProxy.get}",
    "click._compat.auto_wrap_for_ansi",
    "jinja2.lexer.get_lexer"
  ],
  "multiprocessing.managers.DictProxy.items": [
    "Ovr{multiprocessing.managers.DictProxy.items}"
  ],
  "multiprocessing.managers.DictProxy.values": [
    "Ovr{multiprocessing.managers.DictProxy.values}"
  ],
  "multiprocessing.pool.IMapIterator.__iter__": [
    "Ovr{multiprocessing.pool.IMapIterator.__iter__}"
  ],
  "multiprocessing.pool.IMapIterator.__next__": [
    "Ovr{multiprocessing.pool.IMapIterator.__next__}"
  ],
  "mypy_extensions._TypedDict.items": [
    "Ovr{mypy_extensions._TypedDict.items}"
  ],
  "mypy_extensions._TypedDict.values": [
    "Ovr{mypy_extensions._TypedDict.values}"
  ],
  "numbers.Complex.__eq__": [
    "sklearn.preprocessing._polynomial.PolynomialFeatures.fit"
  ],
  "numbers.Complex.__mul__": [
    "sklearn.feature_extraction.image._compute_n_patches"
  ],
  "numbers.Complex.__sub__": [
    "sklearn.datasets._samples_generator.make_circles",
    "sklearn.datasets._samples_generator.make_moons"
  ],
  "numbers.Real.__floordiv__": [
    "sklearn.datasets._samples_generator.make_circles",
    "sklearn.datasets._samples_generator.make_moons"
  ],
  "numbers.Real.__le__": [
    "Ovr{numbers.Real.__le__}",
    "sklearn.cluster._bicluster.SpectralBiclustering._check_parameters",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._forest._get_n_samples_bootstrap",
    "sklearn.ensemble._iforest.IsolationForest.fit",
    "sklearn.inspection._permutation_importance.permutation_importance",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_predictions",
    "sklearn.model_selection._split._RepeatedSplits.__init__"
  ],
  "numbers.Real.__lt__": [
    "Ovr{numbers.Real.__lt__}",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector.fit",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._get_sample_count",
    "sklearn.model_selection._search.BaseSearchCV._select_best_index"
  ],
  "oauthlib.common.CaseInsensitiveDict.__getitem__": [
    "Ovr{oauthlib.common.CaseInsensitiveDict.__getitem__}"
  ],
  "oauthlib.common.CaseInsensitiveDict.__setitem__": [
    "Ovr{oauthlib.common.CaseInsensitiveDict.__setitem__}"
  ],
  "oauthlib.common.CaseInsensitiveDict.get": [
    "Ovr{oauthlib.common.CaseInsensitiveDict.get}"
  ],
  "oauthlib.common.CaseInsensitiveDict.update": [
    "benchmarks.bench_text_vectorizers.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "importlib_metadata.DistributionFinder.Context.__init__",
    "importlib_metadata.EntryPoint.__init__",
    "jinja2.nodes.args_as_const",
    "pip._vendor.requests.cookies.create_cookie",
    "sklearn.base.BaseEstimator.__setstate__",
    "sklearn.base.BaseEstimator._get_tags",
    "sklearn.base.BaseEstimator.get_params",
    "sklearn.calibration.CalibrationDisplay.plot",
    "sklearn.externals._arff.$toplevel",
    "sklearn.gaussian_process.kernels.Exponentiation.get_params",
    "sklearn.gaussian_process.kernels.KernelOperator.get_params",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.plot",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.plot",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.metrics.pairwise.pairwise_distances_chunked",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f"
  ],
  "object.__class__": [
    "click._compat._is_jupyter_kernel_output",
    "doc.conf.SubSectionTitleOrder.__repr__",
    "doc.tutorial.machine_learning_map.pyparsing.Forward.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.streamline",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._parseCache",
    "doc.tutorial.machine_learning_map.pyparsing._PositionToken.__init__",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.miscellaneous.plot_metadata_routing.MetaClassifier.get_metadata_routing",
    "examples.miscellaneous.plot_metadata_routing.MetaRegressor.get_metadata_routing",
    "examples.miscellaneous.plot_metadata_routing.RouterConsumerClassifier.get_metadata_routing",
    "examples.miscellaneous.plot_metadata_routing.SimplePipeline.get_metadata_routing",
    "examples.miscellaneous.plot_metadata_routing.WeightedMetaRegressor.get_metadata_routing",
    "examples.model_selection.plot_learning_curve.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "importlib_metadata.EntryPoints.__repr__",
    "jinja2.lexer.Lexer.tokeniter",
    "markupsafe.Markup.__add__",
    "markupsafe.Markup.__mod__",
    "markupsafe.Markup.__mul__",
    "markupsafe.Markup.__repr__",
    "markupsafe.Markup.format",
    "markupsafe.Markup.join",
    "markupsafe.Markup.partition",
    "markupsafe.Markup.rpartition",
    "markupsafe.Markup.rsplit",
    "markupsafe.Markup.split",
    "markupsafe.Markup.splitlines",
    "marshmallow.orderedset.OrderedSet.__repr__",
    "pip._vendor.distlib.compat.OrderedDict.__repr__",
    "pip._vendor.distlib.compat.OrderedDict.copy",
    "pip._vendor.distlib.metadata.LegacyMetadata.__repr__",
    "pip._vendor.pyparsing.ParseExpression.streamline",
    "pip._vendor.tenacity.BaseRetrying.__repr__",
    "prompt_toolkit.contrib.regular_languages.compiler.Variables.__repr__",
    "prompt_toolkit.win32_types.COORD.__repr__",
    "sklearn.base.BaseEstimator.__setstate__",
    "sklearn.base.BaseEstimator._check_feature_names",
    "sklearn.base.BaseEstimator._check_n_features",
    "sklearn.base.BaseEstimator._get_tags",
    "sklearn.base.BaseEstimator._validate_data",
    "sklearn.base.BaseEstimator._validate_params",
    "sklearn.base.BaseEstimator.set_params",
    "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing",
    "sklearn.cluster._kmeans._BaseKMeans._check_params_vs_input",
    "sklearn.compose._target.TransformedTargetRegressor.fit",
    "sklearn.compose._target.TransformedTargetRegressor.n_features_in_",
    "sklearn.ensemble._gb_losses.BinomialDeviance.__init__",
    "sklearn.ensemble._gb_losses.ExponentialLoss.__init__",
    "sklearn.ensemble._gb_losses.MultinomialDeviance.__init__",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._compute_partial_dependence_recursion",
    "sklearn.ensemble._stacking._BaseStacking.get_feature_names_out",
    "sklearn.ensemble._stacking._BaseStacking.n_features_in_",
    "sklearn.ensemble._voting.VotingClassifier.get_feature_names_out",
    "sklearn.ensemble._voting.VotingRegressor.get_feature_names_out",
    "sklearn.ensemble._voting._BaseVoting.n_features_in_",
    "sklearn.externals._packaging._structures.InfinityType.__eq__",
    "sklearn.externals._packaging._structures.InfinityType.__ne__",
    "sklearn.externals._packaging._structures.NegativeInfinityType.__eq__",
    "sklearn.externals._packaging._structures.NegativeInfinityType.__ne__",
    "sklearn.feature_extraction.text.TfidfVectorizer.idf_",
    "sklearn.feature_selection._from_model.SelectFromModel.n_features_in_",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process.kernels.DotProduct.__repr__",
    "sklearn.gaussian_process.kernels.ExpSineSquared.__repr__",
    "sklearn.gaussian_process.kernels.Kernel.__repr__",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.gaussian_process.kernels.Kernel.set_params",
    "sklearn.gaussian_process.kernels.Matern.__repr__",
    "sklearn.gaussian_process.kernels.PairwiseKernel.__repr__",
    "sklearn.gaussian_process.kernels.RBF.__repr__",
    "sklearn.gaussian_process.kernels.RationalQuadratic.__repr__",
    "sklearn.gaussian_process.kernels.WhiteKernel.__repr__",
    "sklearn.impute._base.MissingIndicator.get_feature_names_out",
    "sklearn.isotonic.IsotonicRegression.get_feature_names_out",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.inner_solve",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.line_search",
    "sklearn.linear_model._least_angle.Lars.fit",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._least_angle.LassoLarsIC._estimate_noise_variance",
    "sklearn.linear_model._least_angle.LassoLarsIC.fit",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuit.fit",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.fit",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.plot",
    "sklearn.metrics._scorer._BaseScorer.set_score_request",
    "sklearn.metrics._scorer._MultimetricScorer.get_metadata_routing",
    "sklearn.model_selection._plot._BaseCurveDisplay._plot_curve",
    "sklearn.model_selection._search.BaseSearchCV.n_features_in_",
    "sklearn.multioutput.ClassifierChain.get_metadata_routing",
    "sklearn.multioutput.RegressorChain.get_metadata_routing",
    "sklearn.multioutput._MultiOutputEstimator.get_metadata_routing",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._loss_grad_lbfgs",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit",
    "sklearn.pipeline.Pipeline.__getitem__",
    "sklearn.svm._base.BaseLibSVM._validate_for_predict",
    "sklearn.tree._classes.BaseDecisionTree._compute_missing_values_in_feature_mask",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_plot_params",
    "sklearn.utils.estimator_checks.check_set_params",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_decision_function",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_predict",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.tests.test_estimator_checks.test_check_dataframe_column_names_consistency",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_get_tags_default_keys",
    "sklearn.utils.tests.test_estimator_checks.test_check_outlier_contamination",
    "traitlets.config.loader.DeferredConfig._super_repr",
    "traitlets.config.loader.DeferredConfigList.__repr__",
    "traitlets.config.loader.DeferredConfigString.__repr__",
    "traitlets.traitlets.HasTraits.__init__",
    "traitlets.traitlets.HasTraits._notify_observers",
    "traitlets.traitlets.HasTraits.has_trait",
    "traitlets.traitlets.HasTraits.hold_trait_notifications",
    "traitlets.traitlets.HasTraits.set_trait"
  ],
  "object.__class__@setter": [
    "doc.tutorial.machine_learning_map.pyparsing.Literal.__init__"
  ],
  "object.__eq__": [
    "click.parser.Argument.process",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__eq__",
    "jinja2.lexer.Lexer.tokeniter",
    "parso.utils.PythonVersionInfo.__eq__",
    "pip._vendor.distlib.compat.OrderedDict.__eq__",
    "pip._vendor.pyparsing.ParserElement.setParseAction",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets.tests.test_rcv1.test_fetch_rcv1",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.externals._packaging.version._BaseVersion.__eq__",
    "sklearn.metrics._classification._check_targets",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._classification.precision_recall_fscore_support",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier._validate_input",
    "sklearn.tree._reingold_tilford.DrawTree.get_lmost_sibling",
    "sklearn.utils.estimator_checks.check_estimator_get_tags_default_keys",
    "sklearn.utils.estimator_checks.check_set_params",
    "sklearn.utils.multiclass.unique_labels"
  ],
  "object.__init__": [
    "asv_benchmarks.benchmarks.common.Estimator.setup_cache",
    "asv_benchmarks.benchmarks.common.Estimator.track_test_score",
    "asv_benchmarks.benchmarks.common.Estimator.track_train_score",
    "asv_benchmarks.benchmarks.common.clear_tmp",
    "asv_benchmarks.benchmarks.common.get_estimator_path",
    "asv_benchmarks.benchmarks.common.get_from_config",
    "asv_benchmarks.benchmarks.datasets.$toplevel",
    "asv_benchmarks.benchmarks.model_selection.CrossValidationBenchmark.track_crossval",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_feature_expansions.$toplevel",
    "benchmarks.bench_hist_gradient_boosting.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel",
    "benchmarks.bench_isolation_forest.print_outlier_ratio",
    "benchmarks.bench_isotonic.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_multilabel_metrics._tabulate",
    "benchmarks.bench_multilabel_metrics.benchmark",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_online_ocsvm.print_outlier_ratio",
    "benchmarks.bench_plot_fastkmeans.$toplevel",
    "benchmarks.bench_plot_hierarchical.$toplevel",
    "benchmarks.bench_plot_lasso_path.$toplevel",
    "benchmarks.bench_plot_randomized_svd.$toplevel",
    "benchmarks.bench_plot_randomized_svd.bench_b",
    "benchmarks.bench_plot_randomized_svd.get_data",
    "benchmarks.bench_plot_randomized_svd.plot_time_vs_s",
    "benchmarks.bench_plot_randomized_svd.scatter_time_vs_s",
    "benchmarks.bench_plot_svd.$toplevel",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_random_projections.type_auto_or_float",
    "benchmarks.bench_random_projections.type_auto_or_int",
    "benchmarks.bench_saga.exp",
    "benchmarks.bench_saga.fit_single",
    "benchmarks.bench_saga.plot",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "benchmarks.bench_sparsify.$toplevel",
    "benchmarks.bench_sparsify.sparsity_ratio",
    "benchmarks.bench_text_vectorizers.$toplevel",
    "benchmarks.plot_tsne_mnist.$toplevel",
    "build_tools.generate_authors_table.$toplevel",
    "build_tools.generate_authors_table.get_contributors",
    "build_tools.github.check_wheels.$toplevel",
    "build_tools.update_environments_and_lock_files.create_conda_lock_file",
    "build_tools.update_environments_and_lock_files.write_conda_environment",
    "build_tools.update_environments_and_lock_files.write_pip_lock_file",
    "build_tools.update_environments_and_lock_files.write_pip_requirements",
    "click._winconsole._is_console",
    "click.core.Context.__init__",
    "click.core.Option.__init__",
    "click.core.Option.value_from_envvar",
    "click.core.Parameter.type_cast_value",
    "click.core.Parameter.type_cast_value.convert",
    "click.core.batch",
    "click.core.iter_params_for_processing.sort_key",
    "click.formatting.measure_table",
    "click.parser.OptionParser._get_value_from_state",
    "click.parser._unpack_args",
    "click.shell_completion.BashComplete.get_completion_args",
    "click.shell_completion.ZshComplete.get_completion_args",
    "click.types.BoolParamType.convert",
    "click.types.Path.convert",
    "click.types.Tuple.convert",
    "click.types.convert_type",
    "doc.conf.$toplevel",
    "doc.conf.SKExampleTitleSortKey.__call__",
    "doc.conf.generate_min_dependency_substitutions",
    "doc.conf.generate_min_dependency_table",
    "doc.sphinxext.github_link._linkcode_resolve",
    "doc.tutorial.machine_learning_map.parse_path.$toplevel",
    "doc.tutorial.machine_learning_map.parse_path.CaselessPreservingLiteral.__init__",
    "doc.tutorial.machine_learning_map.parse_path.convertToFloat",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.haskeys",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._FifoCache.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._UnboundedCache.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.addCondition.pa",
    "doc.tutorial.machine_learning_map.pyparsing._MultipleMatch.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing._ustr",
    "doc.tutorial.machine_learning_map.pyparsing._xml_escape",
    "doc.tutorial.machine_learning_map.pyparsing.countedArray",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "doc.tutorial.text_analytics.data.movie_reviews.fetch_data.$toplevel",
    "doc.tutorial.text_analytics.skeletons.exercise_01_language_train_model.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_01_language_train_model.$toplevel",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.applications.plot_digits_denoising.plot_digits",
    "examples.applications.plot_model_complexity_influence.benchmark_influence",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_out_of_core_classification.get_minibatch",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents",
    "examples.applications.plot_prediction_latency.$toplevel",
    "examples.applications.plot_prediction_latency.bulk_benchmark_estimator",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.applications.svm_gui.Controller.fit",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.bicluster.plot_bicluster_newsgroups.most_common",
    "examples.calibration.plot_calibration.$toplevel",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.classification.plot_digits_classification.$toplevel",
    "examples.cluster.plot_adjusted_for_chance_measures.$toplevel",
    "examples.cluster.plot_affinity_propagation.$toplevel",
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel",
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_cluster_iris.$toplevel",
    "examples.cluster.plot_coin_segmentation.$toplevel",
    "examples.cluster.plot_coin_ward_segmentation.$toplevel",
    "examples.cluster.plot_color_quantization.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.cluster.plot_hdbscan.plot",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.cluster.plot_mean_shift.$toplevel",
    "examples.cluster.plot_mini_batch_kmeans.$toplevel",
    "examples.cluster.plot_optics.$toplevel",
    "examples.cluster.plot_ward_structured_vs_unstructured.$toplevel",
    "examples.compose.plot_transformed_target.$toplevel",
    "examples.cross_decomposition.plot_pcr_vs_pls.$toplevel",
    "examples.datasets.plot_random_multilabel_dataset.$toplevel",
    "examples.decomposition.plot_faces_decomposition.plot_gallery",
    "examples.decomposition.plot_ica_blind_source_separation.$toplevel",
    "examples.decomposition.plot_incremental_pca.$toplevel",
    "examples.decomposition.plot_pca_vs_lda.$toplevel",
    "examples.decomposition.plot_sparse_coding.$toplevel",
    "examples.decomposition.plot_varimax_fa.$toplevel",
    "examples.ensemble.plot_adaboost_multiclass.$toplevel",
    "examples.ensemble.plot_adaboost_twoclass.$toplevel",
    "examples.ensemble.plot_ensemble_oob.$toplevel",
    "examples.ensemble.plot_gradient_boosting_oob.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.ensemble.plot_voting_decision_regions.$toplevel",
    "examples.exercises.plot_digits_classification_exercise.$toplevel",
    "examples.exercises.plot_iris_exercise.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy.$toplevel",
    "examples.impute.plot_iterative_imputer_variants_comparison.$toplevel",
    "examples.impute.plot_missing_values.add_missing_values",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.linear_model.plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.$toplevel",
    "examples.linear_model.plot_lasso_coordinate_descent_path.$toplevel",
    "examples.linear_model.plot_lasso_dense_vs_sparse_data.$toplevel",
    "examples.linear_model.plot_logistic_l1_l2_sparsity.$toplevel",
    "examples.linear_model.plot_logistic_multinomial.$toplevel",
    "examples.linear_model.plot_logistic_path.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_sgd_early_stopping.$toplevel",
    "examples.linear_model.plot_sgd_iris.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.manifold.plot_compare_methods.$toplevel",
    "examples.manifold.plot_t_sne_perplexity.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_johnson_lindenstrauss_bound.$toplevel",
    "examples.miscellaneous.plot_metadata_routing.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.preprocess_dataset",
    "examples.mixture.plot_gmm.plot_results",
    "examples.mixture.plot_gmm_selection.$toplevel",
    "examples.mixture.plot_gmm_sin.plot_results",
    "examples.mixture.plot_gmm_sin.plot_samples",
    "examples.model_selection.plot_cv_indices.$toplevel",
    "examples.model_selection.plot_grid_search_digits.print_dataframe",
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "examples.model_selection.plot_learning_curve.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.model_selection.plot_multi_metric_evaluation.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.NMSlibTransformer.transform",
    "examples.neighbors.plot_kde_1d.$toplevel",
    "examples.neighbors.plot_nca_classification.$toplevel",
    "examples.neural_networks.plot_mlp_alpha.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.plot_on_dataset",
    "examples.neural_networks.plot_mnist_filters.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_map_data_to_normal.$toplevel",
    "examples.preprocessing.plot_scaling_importance.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.preprocessing.plot_target_encoder_cross_val.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "examples.svm.plot_iris_svc.$toplevel",
    "examples.svm.plot_svm_scale_c.$toplevel",
    "examples.svm.plot_svm_tie_breaking.$toplevel",
    "examples.tree.plot_iris_dtc.$toplevel",
    "importlib_metadata.EntryPoints.__repr__",
    "importlib_metadata.EntryPoints.select",
    "importlib_metadata.entry_points",
    "jinja2.debug.get_template_locals",
    "jinja2.ext.InternationalizationExtension.parse",
    "jinja2.lexer.Lexer.__init__",
    "jinja2.lexer.Lexer.wrap",
    "jinja2.nodes.MarkSafe.as_const",
    "jinja2.nodes.MarkSafeIfAutoescape.as_const",
    "jinja2.nodes.Node.__init__",
    "jinja2.nodes.TemplateData.as_const",
    "jinja2.nodes.Tuple.as_const",
    "jinja2.utils.LRUCache._postinit",
    "maint_tools.check_pxd_in_installation.$toplevel",
    "maint_tools.update_tracking_issue.$toplevel",
    "markupsafe.EscapeFormatter.__init__",
    "markupsafe.Markup.__add__",
    "markupsafe.Markup.__mod__",
    "markupsafe.Markup.__mul__",
    "markupsafe.Markup.escape",
    "markupsafe.Markup.format",
    "markupsafe.Markup.join",
    "markupsafe.Markup.partition",
    "markupsafe.Markup.rpartition",
    "markupsafe.Markup.rsplit",
    "markupsafe.Markup.split",
    "markupsafe.Markup.splitlines",
    "packaging.version.Version.__init__",
    "packaging.version._cmpkey",
    "packaging.version._parse_letter_version",
    "packaging.version._parse_local_version",
    "pip._vendor.packaging.version.Version.__init__",
    "pip._vendor.packaging.version._cmpkey",
    "pip._vendor.packaging.version._parse_letter_version",
    "pip._vendor.packaging.version._parse_local_version",
    "pip._vendor.pyparsing._ustr",
    "pip._vendor.requests.cookies.create_cookie",
    "pip._vendor.requests.cookies.morsel_to_cookie",
    "pip._vendor.tenacity.BaseRetrying.iter",
    "pip._vendor.tenacity.Future.__init__",
    "pip._vendor.tenacity.RetryAction.__init__",
    "setup.build_ext_subclass.finalize_options",
    "sklearn._build_utils.openmp_helpers.check_openmp_support",
    "sklearn._config.$toplevel",
    "sklearn._loss.link.Interval.includes",
    "sklearn._loss.loss.AbsoluteError.__init__",
    "sklearn._loss.loss.ExponentialLoss.__init__",
    "sklearn._loss.loss.HalfBinomialLoss.__init__",
    "sklearn._loss.loss.HalfGammaLoss.__init__",
    "sklearn._loss.loss.HalfMultinomialLoss.__init__",
    "sklearn._loss.loss.HalfPoissonLoss.__init__",
    "sklearn._loss.loss.HalfSquaredError.__init__",
    "sklearn._loss.loss.HalfTweedieLoss.__init__",
    "sklearn._loss.loss.HalfTweedieLossIdentity.__init__",
    "sklearn._loss.loss.HuberLoss.__init__",
    "sklearn._loss.loss.PinballLoss.__init__",
    "sklearn.base.BaseEstimator._get_param_names",
    "sklearn.base.BiclusterMixin.get_shape",
    "sklearn.base._clone_parametrized",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.calibration._CalibratedClassifier.predict_proba",
    "sklearn.calibration._fit_calibrator",
    "sklearn.calibration._sigmoid_calibration",
    "sklearn.cluster._agglomerative.FeatureAgglomeration.__init__",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.cluster._bicluster.SpectralCoclustering._fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans._BaseKMeans._check_mkl_vcomp",
    "sklearn.cluster._kmeans._kmeans_plusplus",
    "sklearn.cluster._kmeans._mini_batch_step",
    "sklearn.cluster._mean_shift.MeanShift.fit",
    "sklearn.cluster._mean_shift._mean_shift_single_seed",
    "sklearn.cluster._mean_shift.estimate_bandwidth",
    "sklearn.cluster._mean_shift.get_bin_seeds",
    "sklearn.cluster._optics.cluster_optics_xi",
    "sklearn.cluster._optics.compute_optics_graph",
    "sklearn.compose._column_transformer.ColumnTransformer._fit_transform",
    "sklearn.compose._column_transformer.ColumnTransformer._hstack",
    "sklearn.compose._column_transformer.ColumnTransformer._iter",
    "sklearn.compose._column_transformer.ColumnTransformer._sk_visual_block_",
    "sklearn.compose._column_transformer.ColumnTransformer._transformers@setter",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_output",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_transformers",
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform",
    "sklearn.compose._column_transformer._get_transformer_list",
    "sklearn.conftest.pytest_configure",
    "sklearn.covariance._elliptic_envelope.EllipticEnvelope.__init__",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._graph_lasso.graphical_lasso",
    "sklearn.covariance._robust_covariance.fast_mcd",
    "sklearn.covariance._robust_covariance.select_candidates",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf_shrinkage",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._arff_parser._sparse_data_to_array",
    "sklearn.datasets._arff_parser._split_sparse_columns",
    "sklearn.datasets._base.load_csv_data",
    "sklearn.datasets._base.load_files",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._lfw._load_imgs",
    "sklearn.datasets._openml._download_data_to_bunch",
    "sklearn.datasets._openml._get_num_samples",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._samples_generator.make_biclusters",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_checkerboard",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.datasets._species_distributions._load_coverage",
    "sklearn.datasets._svmlight_format_io.load_svmlight_file",
    "sklearn.datasets._svmlight_format_io.load_svmlight_files",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.datasets.tests.test_rcv1.test_fetch_rcv1",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning._sparse_encode",
    "sklearn.decomposition._dict_learning._sparse_encode_precomputed",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._fastica.FastICA.__init__",
    "sklearn.decomposition._fastica._ica_par",
    "sklearn.decomposition._lda.LatentDirichletAllocation._approx_bound",
    "sklearn.decomposition._lda.LatentDirichletAllocation._e_step",
    "sklearn.decomposition._lda.LatentDirichletAllocation._em_step",
    "sklearn.decomposition._lda.LatentDirichletAllocation._perplexity_precomp_distr",
    "sklearn.decomposition._lda.LatentDirichletAllocation.fit",
    "sklearn.decomposition._lda.LatentDirichletAllocation.partial_fit",
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit",
    "sklearn.ensemble._bagging.BaggingClassifier.__init__",
    "sklearn.ensemble._bagging.BaggingClassifier._set_oob_score",
    "sklearn.ensemble._bagging.BaggingClassifier.decision_function",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_proba",
    "sklearn.ensemble._bagging.BaggingRegressor.__init__",
    "sklearn.ensemble._bagging.BaggingRegressor._set_oob_score",
    "sklearn.ensemble._bagging.BaggingRegressor.predict",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._bagging._parallel_decision_function",
    "sklearn.ensemble._bagging._parallel_predict_log_proba",
    "sklearn.ensemble._bagging._parallel_predict_proba",
    "sklearn.ensemble._bagging._parallel_predict_regression",
    "sklearn.ensemble._base.BaseEnsemble.__init__",
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble._validate_estimators",
    "sklearn.ensemble._forest.BaseForest.__init__",
    "sklearn.ensemble._forest.BaseForest.apply",
    "sklearn.ensemble._forest.BaseForest.decision_path",
    "sklearn.ensemble._forest.BaseForest.feature_importances_",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._forest.ForestClassifier.__init__",
    "sklearn.ensemble._forest.ForestClassifier.predict_proba",
    "sklearn.ensemble._forest.ForestRegressor.__init__",
    "sklearn.ensemble._forest.ForestRegressor.predict",
    "sklearn.ensemble._forest.RandomTreesEmbedding.__init__",
    "sklearn.ensemble._gb.BaseGradientBoosting._check_params",
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stages",
    "sklearn.ensemble._gb.GradientBoostingClassifier.__init__",
    "sklearn.ensemble._gb.GradientBoostingRegressor.__init__",
    "sklearn.ensemble._gb.VerboseReporter.init",
    "sklearn.ensemble._gb.VerboseReporter.update",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.__init__",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_interaction_cst",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._print_iteration_stats",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier.__init__",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier._encode_y",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.__init__",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeNode.__init__",
    "sklearn.ensemble._hist_gradient_boosting.predictor.TreePredictor.get_max_depth",
    "sklearn.ensemble._hist_gradient_boosting.predictor.TreePredictor.get_n_leaf_nodes",
    "sklearn.ensemble._iforest.IsolationForest.__init__",
    "sklearn.ensemble._iforest.IsolationForest._compute_score_samples",
    "sklearn.ensemble._iforest.IsolationForest.fit",
    "sklearn.ensemble._stacking.StackingClassifier.__init__",
    "sklearn.ensemble._stacking.StackingClassifier._validate_estimators",
    "sklearn.ensemble._stacking.StackingClassifier.fit",
    "sklearn.ensemble._stacking.StackingRegressor.__init__",
    "sklearn.ensemble._stacking._BaseStacking.__init__",
    "sklearn.ensemble._stacking._BaseStacking._sk_visual_block_with_final_estimator",
    "sklearn.ensemble._stacking._BaseStacking._transform",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.ensemble._stacking._BaseStacking.get_feature_names_out",
    "sklearn.ensemble._voting.VotingClassifier.__init__",
    "sklearn.ensemble._voting.VotingClassifier.fit",
    "sklearn.ensemble._voting.VotingRegressor.__init__",
    "sklearn.ensemble._voting._BaseVoting._sk_visual_block_",
    "sklearn.ensemble._voting._BaseVoting._weights_not_none",
    "sklearn.ensemble._voting._BaseVoting.fit",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.__init__",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.decision_function",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_decision_function",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor.__init__",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.__init__",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.feature_importances_",
    "sklearn.externals._arff.ArffDecoder._decode",
    "sklearn.externals._arff.COOData.decode_rows",
    "sklearn.externals._arff.COOData.encode_data",
    "sklearn.externals._arff.DenseGeneratorData._decode_values",
    "sklearn.externals._arff._escape_sub_callback",
    "sklearn.externals._arff._get_data_object_for_decoding",
    "sklearn.externals._arff._get_data_object_for_encoding",
    "sklearn.externals._arff._parse_values",
    "sklearn.externals._arff.dump",
    "sklearn.externals._arff.dumps",
    "sklearn.externals._packaging._structures.$toplevel",
    "sklearn.externals._packaging.version.Version.__init__",
    "sklearn.externals._packaging.version._cmpkey",
    "sklearn.externals._packaging.version._legacy_cmpkey",
    "sklearn.externals._packaging.version._parse_letter_version",
    "sklearn.externals._packaging.version._parse_local_version",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.inverse_transform",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.restrict",
    "sklearn.feature_extraction._stop_words.$toplevel",
    "sklearn.feature_extraction.image._compute_n_patches",
    "sklearn.feature_extraction.image._extract_patches",
    "sklearn.feature_extraction.image.reconstruct_from_patches_2d",
    "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out",
    "sklearn.feature_extraction.text.TfidfTransformer.fit",
    "sklearn.feature_extraction.text._check_stop_list",
    "sklearn.feature_selection._base._get_feature_importances",
    "sklearn.feature_selection._from_model._calculate_threshold",
    "sklearn.feature_selection._mutual_info._estimate_mi",
    "sklearn.feature_selection._rfe.RFE._fit",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector.fit",
    "sklearn.feature_selection._univariate_selection.SelectFdr._get_support_mask",
    "sklearn.feature_selection._univariate_selection.SelectPercentile._get_support_mask",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.impute._base.SimpleImputer._dense_fit",
    "sklearn.inspection._permutation_importance.permutation_importance",
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.linear_model._base.LinearRegression.fit",
    "sklearn.linear_model._coordinate_descent.LassoCV.__init__",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._coordinate_descent.MultiTaskLassoCV.__init__",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._linear_loss.LinearModelLoss.gradient",
    "sklearn.linear_model._linear_loss.LinearModelLoss.gradient_hessian",
    "sklearn.linear_model._linear_loss.LinearModelLoss.gradient_hessian_product",
    "sklearn.linear_model._linear_loss.LinearModelLoss.loss_gradient",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuit.fit",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.fit",
    "sklearn.linear_model._omp.orthogonal_mp",
    "sklearn.linear_model._omp.orthogonal_mp_gram",
    "sklearn.linear_model._ransac._dynamic_max_trials",
    "sklearn.linear_model._ridge.Ridge.__init__",
    "sklearn.linear_model._ridge.RidgeClassifier.__init__",
    "sklearn.linear_model._ridge.RidgeClassifierCV.__init__",
    "sklearn.linear_model._ridge._RidgeGCV.fit",
    "sklearn.linear_model._ridge._XT_CenterStackOp.__init__",
    "sklearn.linear_model._ridge._X_CenterStackOp.__init__",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.linear_model._ridge._solve_cholesky",
    "sklearn.linear_model._ridge._solve_cholesky_kernel",
    "sklearn.linear_model._sag.get_auto_step_size",
    "sklearn.linear_model._sag.sag_solver",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.__init__",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit_multiclass",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.__init__",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._fit_regressor",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._fit_one_class",
    "sklearn.linear_model._stochastic_gradient.fit_binary",
    "sklearn.linear_model._theil_sen.TheilSenRegressor._check_subparams",
    "sklearn.linear_model._theil_sen.TheilSenRegressor.fit",
    "sklearn.linear_model._theil_sen._lstsq",
    "sklearn.linear_model._theil_sen._modified_weiszfeld_step",
    "sklearn.linear_model.tests.test_huber.make_regression_with_outliers",
    "sklearn.manifold._mds.smacof",
    "sklearn.manifold._spectral_embedding.SpectralEmbedding._get_affinity_matrix",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.metrics._base._average_multiclass_ovo_score",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._classification.hinge_loss",
    "sklearn.metrics._classification.matthews_corrcoef",
    "sklearn.metrics._classification.multilabel_confusion_matrix",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.plot",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_predictions",
    "sklearn.metrics._ranking._dcg_sample_scores",
    "sklearn.metrics._ranking.label_ranking_average_precision_score",
    "sklearn.metrics._ranking.label_ranking_loss",
    "sklearn.metrics._regression.d2_pinball_score",
    "sklearn.metrics._regression.d2_tweedie_score",
    "sklearn.metrics._regression.r2_score",
    "sklearn.metrics.cluster._supervised.adjusted_rand_score",
    "sklearn.metrics.cluster._unsupervised.calinski_harabasz_score",
    "sklearn.metrics.cluster._unsupervised.davies_bouldin_score",
    "sklearn.metrics.cluster._unsupervised.silhouette_samples",
    "sklearn.metrics.pairwise.$toplevel",
    "sklearn.metrics.pairwise._check_chunk_size",
    "sklearn.metrics.pairwise._euclidean_distances_upcast",
    "sklearn.metrics.pairwise._pairwise_callable",
    "sklearn.metrics.pairwise._parallel_pairwise",
    "sklearn.metrics.pairwise.pairwise_distances_argmin_min",
    "sklearn.mixture._base.BaseMixture.sample",
    "sklearn.mixture._gaussian_mixture.GaussianMixture._n_parameters",
    "sklearn.mixture._gaussian_mixture._estimate_log_gaussian_prob",
    "sklearn.model_selection._search.BaseSearchCV.fit",
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._search.ParameterGrid.__getitem__",
    "sklearn.model_selection._search.ParameterGrid.__iter__",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.model_selection._search_successive_halving._SubsampleMetaSplitter.split",
    "sklearn.model_selection._split.GroupKFold.__init__",
    "sklearn.model_selection._split.GroupShuffleSplit.__init__",
    "sklearn.model_selection._split.LeavePGroupsOut._iter_test_masks",
    "sklearn.model_selection._split.LeavePGroupsOut.get_n_splits",
    "sklearn.model_selection._split.LeavePOut._iter_test_indices",
    "sklearn.model_selection._split.LeavePOut.get_n_splits",
    "sklearn.model_selection._split.StratifiedGroupKFold.__init__",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.model_selection._split._BaseKFold.__init__",
    "sklearn.model_selection._split._validate_shuffle_split",
    "sklearn.model_selection._validation._incremental_fit_estimator",
    "sklearn.model_selection._validation.cross_val_predict",
    "sklearn.model_selection._validation.cross_validate",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.model_selection._validation.permutation_test_score",
    "sklearn.model_selection._validation.validation_curve",
    "sklearn.multiclass.OneVsOneClassifier.decision_function",
    "sklearn.multiclass.OneVsOneClassifier.fit",
    "sklearn.multiclass.OneVsOneClassifier.partial_fit",
    "sklearn.multiclass.OneVsRestClassifier.fit",
    "sklearn.multiclass.OneVsRestClassifier.partial_fit",
    "sklearn.multiclass.OutputCodeClassifier.fit",
    "sklearn.multiclass._fit_binary",
    "sklearn.multioutput.MultiOutputClassifier.__init__",
    "sklearn.multioutput.MultiOutputRegressor.__init__",
    "sklearn.multioutput._MultiOutputEstimator.fit",
    "sklearn.multioutput._MultiOutputEstimator.partial_fit",
    "sklearn.multioutput._MultiOutputEstimator.predict",
    "sklearn.naive_bayes.GaussianNB._update_mean_variance",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors",
    "sklearn.neighbors._base._radius_neighbors_from_graph",
    "sklearn.neighbors._base.sort_graph_by_row_values",
    "sklearn.neighbors._classification.KNeighborsClassifier.__init__",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.__init__",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.fit",
    "sklearn.neighbors._graph.KNeighborsTransformer.__init__",
    "sklearn.neighbors._graph.RadiusNeighborsTransformer.__init__",
    "sklearn.neighbors._graph._check_params",
    "sklearn.neighbors._lof.LocalOutlierFactor.__init__",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.fit",
    "sklearn.neighbors._regression.KNeighborsRegressor.__init__",
    "sklearn.neighbors._regression.RadiusNeighborsRegressor.__init__",
    "sklearn.neighbors._unsupervised.NearestNeighbors.__init__",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_kneighbors_regressor",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_tsne",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier.__init__",
    "sklearn.neural_network._multilayer_perceptron.MLPRegressor.__init__",
    "sklearn.neural_network._rbm.BernoulliRBM._fit",
    "sklearn.neural_network._rbm.BernoulliRBM.fit",
    "sklearn.neural_network._stochastic_optimizers.AdamOptimizer._get_updates",
    "sklearn.neural_network._stochastic_optimizers.BaseOptimizer.__init__",
    "sklearn.neural_network._stochastic_optimizers.BaseOptimizer.update_params",
    "sklearn.neural_network._stochastic_optimizers.SGDOptimizer._get_updates",
    "sklearn.neural_network._stochastic_optimizers.SGDOptimizer.iteration_ends",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_adam_optimizer",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_nesterovs_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_no_momentum",
    "sklearn.pipeline.FeatureUnion._parallel_func",
    "sklearn.pipeline.FeatureUnion._sk_visual_block_",
    "sklearn.pipeline.FeatureUnion._validate_transformers",
    "sklearn.pipeline.FeatureUnion.fit_transform",
    "sklearn.pipeline.FeatureUnion.transform",
    "sklearn.pipeline.Pipeline._sk_visual_block_",
    "sklearn.pipeline.Pipeline._validate_steps",
    "sklearn.pipeline._name_estimators",
    "sklearn.preprocessing._data.quantile_transform",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._encoders._BaseEncoder.infrequent_categories_",
    "sklearn.preprocessing._label.MultiLabelBinarizer._build_cache",
    "sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform",
    "sklearn.preprocessing._polynomial.PolynomialFeatures._combinations",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.get_feature_names_out",
    "sklearn.preprocessing._target_encoder.TargetEncoder._fit_encodings_all",
    "sklearn.setup_module",
    "sklearn.svm._base.BaseLibSVM._sparse_fit",
    "sklearn.svm._base.BaseSVC.__init__",
    "sklearn.svm._base._fit_liblinear",
    "sklearn.svm._classes.NuSVR.__init__",
    "sklearn.svm._classes.OneClassSVM.__init__",
    "sklearn.svm._classes.SVR.__init__",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._classes.DecisionTreeClassifier.__init__",
    "sklearn.tree._classes.DecisionTreeRegressor.__init__",
    "sklearn.tree._export.$toplevel",
    "sklearn.tree._export._BaseTreeExporter.get_color",
    "sklearn.tree._export._BaseTreeExporter.node_to_str",
    "sklearn.tree._export._color_brew",
    "sklearn.utils._approximate_mode",
    "sklearn.utils._array_api.$toplevel",
    "sklearn.utils._determine_key_type",
    "sklearn.utils._estimator_html_repr._write_estimator_html",
    "sklearn.utils._param_validation.Interval.__str__",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._format_params_or_dict_items",
    "sklearn.utils._testing._convert_container",
    "sklearn.utils._testing.check_skip_network",
    "sklearn.utils.class_weight.compute_class_weight",
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.discovery.all_functions",
    "sklearn.utils.estimator_checks._check_transformer",
    "sklearn.utils.estimator_checks._is_pairwise_metric",
    "sklearn.utils.estimator_checks._yield_checks",
    "sklearn.utils.estimator_checks.check_class_weight_balanced_linear_classifier",
    "sklearn.utils.estimator_checks.check_outliers_fit_predict",
    "sklearn.utils.estimator_checks.check_transformer_preserve_dtypes",
    "sklearn.utils.extmath.density",
    "sklearn.utils.gen_batches",
    "sklearn.utils.get_chunk_n_rows",
    "sklearn.utils.metaestimators._BaseComposition._set_params",
    "sklearn.utils.random._random_choice_csc",
    "sklearn.utils.sparsefuncs.csc_median_axis_0",
    "sklearn.utils.tests.test_estimator_checks.BadBalancedWeightsClassifier.fit",
    "sklearn.utils.tests.test_estimator_checks.HasMutableParameters.__init__",
    "sklearn.utils.tests.test_estimator_checks.test_check_array_api_input",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifier_data_not_an_array",
    "sklearn.utils.tests.test_estimator_checks.test_check_dataframe_column_names_consistency",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_get_tags_default_keys",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_transformer_no_mixin",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimators_unfitted",
    "sklearn.utils.tests.test_estimator_checks.test_check_fit_score_takes_y_works_on_deprecated_fit",
    "sklearn.utils.tests.test_estimator_checks.test_check_no_attributes_set_in_init",
    "sklearn.utils.tests.test_estimator_checks.test_check_regressor_data_not_an_array",
    "sklearn.utils.tests.test_estimator_checks.test_check_requires_y_none",
    "sklearn.utils.tests.test_estimator_checks.test_non_deterministic_estimator_skip_tests",
    "sklearn.utils.tests.test_fast_dict.test_int_float_dict",
    "sklearn.utils.tests.test_murmurhash.test_mmhash3_int_array",
    "sklearn.utils.tests.test_pprint.test_bruteforce_ellipsis",
    "sklearn.utils.tests.test_pprint.test_changed_only",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f",
    "sklearn.utils.validation.check_consistent_length",
    "traitlets.traitlets.HasTraits.__init__",
    "traitlets.utils.getargspec.getargspec"
  ],
  "object.__init_subclass__": [
    "sklearn.utils._metadata_requests._MetadataRequester.__init_subclass__",
    "sklearn.utils._set_output._SetOutputMixin.__init_subclass__"
  ],
  "object.__ne__": [
    "click.parser.Argument.process",
    "jinja2.lexer.Lexer.tokeniter",
    "pip._vendor.pyparsing.ParserElement.setParseAction",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.externals._packaging.version._BaseVersion.__ne__",
    "sklearn.gaussian_process.kernels.CompoundKernel.__eq__",
    "sklearn.gaussian_process.kernels.Exponentiation.__eq__",
    "sklearn.gaussian_process.kernels.Kernel.__eq__",
    "sklearn.gaussian_process.kernels.KernelOperator.__eq__",
    "sklearn.metrics._classification._check_targets",
    "sklearn.metrics._classification.precision_recall_fscore_support",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier._validate_input",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.fit",
    "sklearn.tree._reingold_tilford.DrawTree.get_lmost_sibling",
    "sklearn.utils.multiclass.unique_labels"
  ],
  "object.__new__": [
    "asv_benchmarks.benchmarks.cluster.KMeansBenchmark.make_estimator",
    "asv_benchmarks.benchmarks.cluster.KMeansBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.cluster.MiniBatchKMeansBenchmark.make_estimator",
    "asv_benchmarks.benchmarks.cluster.MiniBatchKMeansBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.common.Estimator.setup_cache",
    "asv_benchmarks.benchmarks.common.get_estimator_path",
    "asv_benchmarks.benchmarks.common.get_from_config",
    "asv_benchmarks.benchmarks.datasets._20newsgroups_highdim_dataset",
    "asv_benchmarks.benchmarks.datasets._20newsgroups_lowdim_dataset",
    "asv_benchmarks.benchmarks.datasets._digits_dataset",
    "asv_benchmarks.benchmarks.datasets._mnist_dataset",
    "asv_benchmarks.benchmarks.datasets._synth_classification_dataset",
    "asv_benchmarks.benchmarks.datasets._synth_regression_dataset",
    "asv_benchmarks.benchmarks.decomposition.DictionaryLearningBenchmark.make_estimator",
    "asv_benchmarks.benchmarks.decomposition.DictionaryLearningBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.decomposition.MiniBatchDictionaryLearningBenchmark.make_estimator",
    "asv_benchmarks.benchmarks.decomposition.MiniBatchDictionaryLearningBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.decomposition.PCABenchmark.make_estimator",
    "asv_benchmarks.benchmarks.decomposition.PCABenchmark.setup_cache",
    "asv_benchmarks.benchmarks.ensemble.GradientBoostingClassifierBenchmark.make_estimator",
    "asv_benchmarks.benchmarks.ensemble.GradientBoostingClassifierBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.ensemble.HistGradientBoostingClassifierBenchmark.make_estimator",
    "asv_benchmarks.benchmarks.ensemble.HistGradientBoostingClassifierBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.ensemble.RandomForestClassifierBenchmark.make_estimator",
    "asv_benchmarks.benchmarks.ensemble.RandomForestClassifierBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.linear_model.ElasticNetBenchmark.make_estimator",
    "asv_benchmarks.benchmarks.linear_model.ElasticNetBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.linear_model.LassoBenchmark.make_estimator",
    "asv_benchmarks.benchmarks.linear_model.LassoBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.linear_model.LinearRegressionBenchmark.make_estimator",
    "asv_benchmarks.benchmarks.linear_model.LinearRegressionBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.linear_model.LogisticRegressionBenchmark.make_estimator",
    "asv_benchmarks.benchmarks.linear_model.LogisticRegressionBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.linear_model.RidgeBenchmark.make_estimator",
    "asv_benchmarks.benchmarks.linear_model.RidgeBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.linear_model.SGDRegressorBenchmark.make_estimator",
    "asv_benchmarks.benchmarks.linear_model.SGDRegressorBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.manifold.TSNEBenchmark.make_estimator",
    "asv_benchmarks.benchmarks.manifold.TSNEBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.model_selection.CrossValidationBenchmark.setup",
    "asv_benchmarks.benchmarks.model_selection.GridSearchBenchmark.make_estimator",
    "asv_benchmarks.benchmarks.model_selection.GridSearchBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.neighbors.KNeighborsClassifierBenchmark.make_estimator",
    "asv_benchmarks.benchmarks.neighbors.KNeighborsClassifierBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.svm.SVCBenchmark.make_estimator",
    "asv_benchmarks.benchmarks.svm.SVCBenchmark.setup_cache",
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_covertype.load_data",
    "benchmarks.bench_feature_expansions.$toplevel",
    "benchmarks.bench_glm.$toplevel",
    "benchmarks.bench_glmnet.$toplevel",
    "benchmarks.bench_hist_gradient_boosting.$toplevel",
    "benchmarks.bench_hist_gradient_boosting.one_run",
    "benchmarks.bench_hist_gradient_boosting_adult.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_adult.predict",
    "benchmarks.bench_hist_gradient_boosting_categorical_only.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.load_data",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.predict",
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_threading.one_run",
    "benchmarks.bench_isolation_forest.$toplevel",
    "benchmarks.bench_isotonic.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "benchmarks.bench_lof.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_mnist.load_data",
    "benchmarks.bench_multilabel_metrics.$toplevel",
    "benchmarks.bench_multilabel_metrics._plot",
    "benchmarks.bench_multilabel_metrics._tabulate",
    "benchmarks.bench_multilabel_metrics.benchmark",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_plot_fastkmeans.compute_bench",
    "benchmarks.bench_plot_fastkmeans.compute_bench_2",
    "benchmarks.bench_plot_hierarchical.$toplevel",
    "benchmarks.bench_plot_hierarchical.compute_bench",
    "benchmarks.bench_plot_incremental_pca.$toplevel",
    "benchmarks.bench_plot_incremental_pca.fixed_batch_size_comparison",
    "benchmarks.bench_plot_incremental_pca.variable_batch_size_comparison",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_plot_neighbors.get_data",
    "benchmarks.bench_plot_nmf._PGNMF.__init__",
    "benchmarks.bench_plot_nmf._PGNMF._fit_transform",
    "benchmarks.bench_plot_nmf._fit_projected_gradient",
    "benchmarks.bench_plot_nmf._nls_subproblem",
    "benchmarks.bench_plot_nmf.load_20news",
    "benchmarks.bench_plot_nmf.plot_results",
    "benchmarks.bench_plot_nmf.run_bench",
    "benchmarks.bench_plot_omp_lars.$toplevel",
    "benchmarks.bench_plot_omp_lars.compute_bench",
    "benchmarks.bench_plot_parallel_pairwise.plot",
    "benchmarks.bench_plot_polynomial_kernel_approximation.$toplevel",
    "benchmarks.bench_plot_randomized_svd.bench_c",
    "benchmarks.bench_plot_randomized_svd.get_data",
    "benchmarks.bench_plot_randomized_svd.plot_time_vs_s",
    "benchmarks.bench_plot_randomized_svd.scalable_frobenius_norm_discrepancy",
    "benchmarks.bench_plot_randomized_svd.scatter_time_vs_s",
    "benchmarks.bench_plot_ward.$toplevel",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_rcv1_logreg_convergence.$toplevel",
    "benchmarks.bench_saga.exp",
    "benchmarks.bench_saga.fit_single",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "benchmarks.bench_sgd_regression.$toplevel",
    "benchmarks.bench_sparsify.$toplevel",
    "benchmarks.bench_sparsify.benchmark_dense_predict",
    "benchmarks.bench_sparsify.benchmark_sparse_predict",
    "benchmarks.bench_text_vectorizers.$toplevel",
    "benchmarks.bench_tree.$toplevel",
    "benchmarks.bench_tree.bench_scikit_tree_classifier",
    "benchmarks.bench_tree.bench_scikit_tree_regressor",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "benchmarks.bench_tsne_mnist.nn_accuracy",
    "benchmarks.plot_tsne_mnist.$toplevel",
    "build_tools.azure.get_commit_message.parsed_args",
    "build_tools.circle.list_versions.$toplevel",
    "build_tools.generate_authors_table.get_contributors",
    "build_tools.generate_authors_table.key",
    "build_tools.get_comment.$toplevel",
    "build_tools.get_comment.find_lint_bot_comments",
    "build_tools.get_comment.get_message",
    "build_tools.get_comment.get_step_message",
    "build_tools.github.check_wheels.$toplevel",
    "build_tools.github.vendor.main",
    "build_tools.update_environments_and_lock_files.$toplevel",
    "build_tools.update_environments_and_lock_files.check_conda_lock_version",
    "build_tools.update_environments_and_lock_files.check_conda_version",
    "build_tools.update_environments_and_lock_files.execute_command",
    "click._compat._NonClosingTextIOWrapper.__init__",
    "click._compat._make_text_stream",
    "click._compat.auto_wrap_for_ansi",
    "click._compat.get_binary_stdin",
    "click._compat.get_binary_stdout",
    "click._compat.open_stream",
    "click._textwrap.TextWrapper.indent_only",
    "click._winconsole._is_console",
    "click.core.Argument._parse_decls",
    "click.core.BaseCommand.invoke",
    "click.core.BaseCommand.main",
    "click.core.BaseCommand.make_context",
    "click.core.BaseCommand.parse_args",
    "click.core.BaseCommand.shell_complete",
    "click.core.Command.get_help_option",
    "click.core.Command.get_help_option_names",
    "click.core.Command.make_parser",
    "click.core.Command.parse_args",
    "click.core.Command.shell_complete",
    "click.core.CommandCollection.list_commands",
    "click.core.Context.__init__",
    "click.core.Context.invoke",
    "click.core.Context.make_formatter",
    "click.core.Group.add_command",
    "click.core.MultiCommand.collect_usage_pieces",
    "click.core.MultiCommand.format_options",
    "click.core.MultiCommand.invoke",
    "click.core.MultiCommand.parse_args",
    "click.core.MultiCommand.resolve_command",
    "click.core.MultiCommand.shell_complete",
    "click.core.Option.__init__",
    "click.core.Option._parse_decls",
    "click.core.Option.consume_value",
    "click.core.Option.get_default",
    "click.core.Option.resolve_envvar_value",
    "click.core.Parameter.__init__",
    "click.core.Parameter._parse_decls",
    "click.core.Parameter.add_to_parser",
    "click.core.Parameter.process_value",
    "click.core.Parameter.shell_complete",
    "click.core.Parameter.type_cast_value.check_iter",
    "click.core.Parameter.type_cast_value.convert",
    "click.core._check_multicommand",
    "click.core.batch",
    "click.exceptions.BadOptionUsage.__init__",
    "click.exceptions.BadParameter.__init__",
    "click.exceptions.ClickException.__init__",
    "click.exceptions.MissingParameter.__init__",
    "click.exceptions.NoSuchOption.__init__",
    "click.exceptions.UsageError.__init__",
    "click.formatting.HelpFormatter.write_dl",
    "click.formatting.measure_table",
    "click.formatting.wrap_text",
    "click.formatting.wrap_text._flush_par",
    "click.globals.get_current_context",
    "click.parser.Argument.process",
    "click.parser.Option.__init__",
    "click.parser.Option.process",
    "click.parser.OptionParser._get_value_from_state",
    "click.parser.OptionParser._match_long_opt",
    "click.parser.OptionParser._match_short_opt",
    "click.parser.OptionParser._process_args_for_args",
    "click.parser.OptionParser._process_args_for_options",
    "click.parser.OptionParser._process_opts",
    "click.parser.OptionParser.add_argument",
    "click.parser.OptionParser.add_option",
    "click.parser.OptionParser.parse_args",
    "click.parser._unpack_args",
    "click.parser.split_arg_string",
    "click.parser.split_opt",
    "click.shell_completion.BashComplete._check_version",
    "click.shell_completion.BashComplete.get_completion_args",
    "click.shell_completion.BashComplete.source",
    "click.shell_completion.FishComplete.get_completion_args",
    "click.shell_completion.ZshComplete.get_completion_args",
    "click.shell_completion._is_incomplete_option",
    "click.shell_completion.shell_complete",
    "click.termui._build_prompt",
    "click.termui.confirm",
    "click.termui.prompt.prompt_func",
    "click.termui.style",
    "click.types.Choice.convert",
    "click.types.DateTime.convert",
    "click.types.File.convert",
    "click.types.FloatRange._clamp",
    "click.types.UUIDParameterType.convert",
    "click.types._NumberRangeBase.convert",
    "click.types.convert_type",
    "click.utils.make_default_short_help",
    "doc.conf.$toplevel",
    "doc.conf.SKExampleTitleSortKey.__call__",
    "doc.conf.generate_min_dependency_substitutions",
    "doc.conf.generate_min_dependency_table",
    "doc.conf.make_carousel_thumbs",
    "doc.conftest.pytest_runtest_setup",
    "doc.conftest.setup_compose",
    "doc.conftest.setup_grid_search",
    "doc.conftest.setup_impute",
    "doc.conftest.setup_labeled_faces",
    "doc.conftest.setup_loading_other_datasets",
    "doc.conftest.setup_preprocessing",
    "doc.conftest.setup_rcv1",
    "doc.conftest.setup_twenty_newsgroups",
    "doc.conftest.setup_unsupervised_learning",
    "doc.conftest.setup_working_with_text_data",
    "doc.conftest.skip_if_cupy_not_installed",
    "doc.conftest.skip_if_matplotlib_not_installed",
    "doc.sphinxext.allow_nan_estimators.AllowNanEstimators.make_paragraph_for_estimator_type",
    "doc.sphinxext.sphinx_issues.$toplevel",
    "doc.sphinxext.sphinx_issues.IssueRole.__call__",
    "doc.sphinxext.sphinx_issues.IssueRole.make_node",
    "doc.sphinxext.sphinx_issues.format_commit_text",
    "doc.tutorial.machine_learning_map.parse_path.CaselessPreservingLiteral.__init__",
    "doc.tutorial.machine_learning_map.parse_path.CaselessPreservingLiteral.parseImpl",
    "doc.tutorial.machine_learning_map.parse_path.Command",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.And._ErrorStop.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.And.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.And.checkRecursion",
    "doc.tutorial.machine_learning_map.pyparsing.And.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.CaselessKeyword.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.CaselessKeyword.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.CaselessLiteral.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.CaselessLiteral.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Combine.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Combine.ignore",
    "doc.tutorial.machine_learning_map.pyparsing.Combine.postParse",
    "doc.tutorial.machine_learning_map.pyparsing.Dict.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Dict.postParse",
    "doc.tutorial.machine_learning_map.pyparsing.Each.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Each.checkRecursion",
    "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Empty.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.FollowedBy.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Forward.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Forward.copy",
    "doc.tutorial.machine_learning_map.pyparsing.Forward.validate",
    "doc.tutorial.machine_learning_map.pyparsing.GoToColumn.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.GoToColumn.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Group.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Keyword.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Keyword.copy",
    "doc.tutorial.machine_learning_map.pyparsing.Keyword.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.LineEnd.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.LineEnd.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.LineStart.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.LineStart.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Literal.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Literal.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.checkRecursion",
    "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.NoMatch.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.NoMatch.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.NotAny.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.NotAny.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.OnlyOnce.__call__",
    "doc.tutorial.machine_learning_map.pyparsing.Optional.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Or.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Or.checkRecursion",
    "doc.tutorial.machine_learning_map.pyparsing.Or.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseBaseException.__getattr__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseBaseException._from_exception",
    "doc.tutorial.machine_learning_map.pyparsing.ParseBaseException.markInputline",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.checkRecursion",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.ignore",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.streamline",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.validate",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.copy",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.ignore",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.setResultsName",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.streamline",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.validate",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__delitem__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__dir__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__iadd__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__new__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__reversed__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__setitem__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asXML",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.clear",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.dump",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.insert",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.items",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.keys",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.pop",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.values",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._FifoCache.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._UnboundedCache.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__add__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__and__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__eq__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__invert__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__.makeOptionalList",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__or__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__sub__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__xor__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._parseCache",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._parseNoCache",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.addParseAction",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.copy",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.enablePackrat",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.ignore",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseString",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.resetCache",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.runTests",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setParseAction",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setResultsName",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.split",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.suppress",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.transformString",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.tryParse",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.SkipTo.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.SkipTo.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.StringEnd.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.StringEnd.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.StringStart.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.StringStart.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Token.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.TokenConverter.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.White.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.White.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__str__.charsAsStr",
    "doc.tutorial.machine_learning_map.pyparsing.Word.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.WordEnd.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.WordEnd.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.WordStart.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.WordStart.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ZeroOrMore.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ZeroOrMore.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing._MultipleMatch.__init__",
    "doc.tutorial.machine_learning_map.pyparsing._PositionToken.__init__",
    "doc.tutorial.machine_learning_map.pyparsing._makeTags",
    "doc.tutorial.machine_learning_map.pyparsing._trim_arity.wrapper",
    "doc.tutorial.machine_learning_map.pyparsing._ustr",
    "doc.tutorial.machine_learning_map.pyparsing.countedArray",
    "doc.tutorial.machine_learning_map.pyparsing.countedArray.countFieldParseAction",
    "doc.tutorial.machine_learning_map.pyparsing.delimitedList",
    "doc.tutorial.machine_learning_map.pyparsing.dictOf",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock.checkPeerIndent",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock.checkSubIndent",
    "doc.tutorial.machine_learning_map.pyparsing.indentedBlock.checkUnindent",
    "doc.tutorial.machine_learning_map.pyparsing.infixNotation",
    "doc.tutorial.machine_learning_map.pyparsing.line",
    "doc.tutorial.machine_learning_map.pyparsing.locatedExpr",
    "doc.tutorial.machine_learning_map.pyparsing.matchOnlyAtCol.verifyCol",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousExpr",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousExpr.copyTokenToRepeater.mustMatchTheseTokens",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousLiteral",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousLiteral.copyTokenToRepeater",
    "doc.tutorial.machine_learning_map.pyparsing.nestedExpr",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "doc.tutorial.machine_learning_map.pyparsing.originalTextFor",
    "doc.tutorial.machine_learning_map.pyparsing.originalTextFor.extractText",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.convertToDate.cvt_fn",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.convertToDatetime.cvt_fn",
    "doc.tutorial.machine_learning_map.pyparsing.removeQuotes",
    "doc.tutorial.machine_learning_map.pyparsing.traceParseAction.z",
    "doc.tutorial.machine_learning_map.pyparsing.ungroup",
    "doc.tutorial.machine_learning_map.pyparsing.withAttribute",
    "doc.tutorial.machine_learning_map.pyparsing.withAttribute.pa",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_01_language_train_model.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_02_sentiment.$toplevel",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.applications.plot_cyclical_feature_engineering.cos_transformer",
    "examples.applications.plot_cyclical_feature_engineering.periodic_spline_transformer",
    "examples.applications.plot_cyclical_feature_engineering.sin_transformer",
    "examples.applications.plot_digits_denoising.$toplevel",
    "examples.applications.plot_face_recognition.$toplevel",
    "examples.applications.plot_face_recognition.plot_gallery",
    "examples.applications.plot_model_complexity_influence.benchmark_influence",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_out_of_core_classification.get_minibatch",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents",
    "examples.applications.plot_outlier_detection_wine.$toplevel",
    "examples.applications.plot_prediction_latency.$toplevel",
    "examples.applications.plot_prediction_latency.atomic_benchmark_estimator",
    "examples.applications.plot_prediction_latency.bulk_benchmark_estimator",
    "examples.applications.plot_prediction_latency.generate_dataset",
    "examples.applications.plot_prediction_latency.plot_benchmark_throughput",
    "examples.applications.plot_prediction_latency.plot_n_features_influence",
    "examples.applications.plot_species_distribution_modeling.create_species_bunch",
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.applications.plot_tomography_l1_reconstruction.$toplevel",
    "examples.applications.plot_tomography_l1_reconstruction._generate_center_coordinates",
    "examples.applications.plot_tomography_l1_reconstruction.build_projection_operator",
    "examples.applications.plot_tomography_l1_reconstruction.generate_synthetic_data",
    "examples.applications.plot_topics_extraction_with_nmf_lda.$toplevel",
    "examples.applications.plot_topics_extraction_with_nmf_lda.plot_top_words",
    "examples.applications.svm_gui.ControllBar.__init__",
    "examples.applications.svm_gui.Controller.__init__",
    "examples.applications.svm_gui.Controller.fit",
    "examples.applications.svm_gui.Model.dump_svmlight_file",
    "examples.applications.svm_gui.View.__init__",
    "examples.applications.svm_gui.View.plot_decision_surface",
    "examples.applications.svm_gui.View.plot_support_vectors",
    "examples.applications.svm_gui.View.update",
    "examples.applications.svm_gui.get_parser",
    "examples.applications.svm_gui.main",
    "examples.applications.wikipedia_principal_eigenvector.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.centrality_scores",
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.bicluster.plot_bicluster_newsgroups.NumberNormalizingVectorizer.build_tokenizer",
    "examples.bicluster.plot_bicluster_newsgroups.bicluster_ncut",
    "examples.bicluster.plot_spectral_biclustering.$toplevel",
    "examples.bicluster.plot_spectral_coclustering.$toplevel",
    "examples.calibration.plot_calibration.$toplevel",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.calibration.plot_calibration_curve.NaivelyCalibratedLinearSVC.fit",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.calibration.plot_compare_calibration.$toplevel",
    "examples.calibration.plot_compare_calibration.NaivelyCalibratedLinearSVC.fit",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.classification.plot_digits_classification.$toplevel",
    "examples.classification.plot_lda.$toplevel",
    "examples.classification.plot_lda_qda.$toplevel",
    "examples.classification.plot_lda_qda.plot_data",
    "examples.cluster.plot_adjusted_for_chance_measures.fixed_classes_uniform_labelings_scores",
    "examples.cluster.plot_adjusted_for_chance_measures.uniform_labelings_scores",
    "examples.cluster.plot_affinity_propagation.$toplevel",
    "examples.cluster.plot_agglomerative_clustering.$toplevel",
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel",
    "examples.cluster.plot_agglomerative_dendrogram.$toplevel",
    "examples.cluster.plot_agglomerative_dendrogram.plot_dendrogram",
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel",
    "examples.cluster.plot_bisect_kmeans.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_cluster_iris.$toplevel",
    "examples.cluster.plot_coin_segmentation.$toplevel",
    "examples.cluster.plot_coin_ward_segmentation.$toplevel",
    "examples.cluster.plot_color_quantization.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.cluster.plot_dict_face_patches.$toplevel",
    "examples.cluster.plot_digits_agglomeration.$toplevel",
    "examples.cluster.plot_digits_linkage.$toplevel",
    "examples.cluster.plot_face_compress.$toplevel",
    "examples.cluster.plot_feature_agglomeration_vs_univariate_selection.$toplevel",
    "examples.cluster.plot_hdbscan.$toplevel",
    "examples.cluster.plot_hdbscan.plot",
    "examples.cluster.plot_inductive_clustering.$toplevel",
    "examples.cluster.plot_inductive_clustering.plot_scatter",
    "examples.cluster.plot_kmeans_assumptions.$toplevel",
    "examples.cluster.plot_kmeans_digits.$toplevel",
    "examples.cluster.plot_kmeans_digits.bench_k_means",
    "examples.cluster.plot_kmeans_plusplus.$toplevel",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.make_data",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.cluster.plot_mean_shift.$toplevel",
    "examples.cluster.plot_mini_batch_kmeans.$toplevel",
    "examples.cluster.plot_optics.$toplevel",
    "examples.cluster.plot_ward_structured_vs_unstructured.$toplevel",
    "examples.compose.plot_column_transformer.$toplevel",
    "examples.compose.plot_column_transformer.subject_body_extractor",
    "examples.compose.plot_column_transformer_mixed_types.$toplevel",
    "examples.compose.plot_compare_reduction.$toplevel",
    "examples.compose.plot_digits_pipe.$toplevel",
    "examples.compose.plot_feature_union.$toplevel",
    "examples.compose.plot_transformed_target.$toplevel",
    "examples.covariance.plot_covariance_estimation.$toplevel",
    "examples.covariance.plot_lw_vs_oas.$toplevel",
    "examples.covariance.plot_mahalanobis_distances.$toplevel",
    "examples.covariance.plot_robust_vs_empirical_covariance.$toplevel",
    "examples.covariance.plot_sparse_cov.$toplevel",
    "examples.cross_decomposition.plot_compare_cross_decomposition.$toplevel",
    "examples.cross_decomposition.plot_pcr_vs_pls.$toplevel",
    "examples.datasets.plot_iris_dataset.$toplevel",
    "examples.datasets.plot_random_dataset.$toplevel",
    "examples.datasets.plot_random_multilabel_dataset.plot_2d",
    "examples.decomposition.plot_faces_decomposition.$toplevel",
    "examples.decomposition.plot_ica_blind_source_separation.$toplevel",
    "examples.decomposition.plot_ica_vs_pca.$toplevel",
    "examples.decomposition.plot_ica_vs_pca.plot_samples",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "examples.decomposition.plot_incremental_pca.$toplevel",
    "examples.decomposition.plot_kernel_pca.$toplevel",
    "examples.decomposition.plot_pca_3d.plot_figs",
    "examples.decomposition.plot_pca_iris.$toplevel",
    "examples.decomposition.plot_pca_vs_fa_model_selection.$toplevel",
    "examples.decomposition.plot_pca_vs_fa_model_selection.compute_scores",
    "examples.decomposition.plot_pca_vs_fa_model_selection.lw_score",
    "examples.decomposition.plot_pca_vs_fa_model_selection.shrunk_cov_score",
    "examples.decomposition.plot_pca_vs_lda.$toplevel",
    "examples.decomposition.plot_sparse_coding.$toplevel",
    "examples.decomposition.plot_sparse_coding.ricker_matrix",
    "examples.decomposition.plot_varimax_fa.$toplevel",
    "examples.ensemble.plot_adaboost_hastie_10_2.$toplevel",
    "examples.ensemble.plot_adaboost_multiclass.$toplevel",
    "examples.ensemble.plot_adaboost_regression.$toplevel",
    "examples.ensemble.plot_adaboost_twoclass.$toplevel",
    "examples.ensemble.plot_bias_variance.$toplevel",
    "examples.ensemble.plot_bias_variance.generate",
    "examples.ensemble.plot_ensemble_oob.$toplevel",
    "examples.ensemble.plot_feature_transformation.$toplevel",
    "examples.ensemble.plot_feature_transformation.gbdt_apply",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.ensemble.plot_forest_importances.$toplevel",
    "examples.ensemble.plot_forest_importances_faces.$toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.ensemble.plot_gradient_boosting_categorical.$toplevel",
    "examples.ensemble.plot_gradient_boosting_early_stopping.$toplevel",
    "examples.ensemble.plot_gradient_boosting_early_stopping.autolabel",
    "examples.ensemble.plot_gradient_boosting_oob.$toplevel",
    "examples.ensemble.plot_gradient_boosting_oob.cv_estimate",
    "examples.ensemble.plot_gradient_boosting_oob.heldout_score",
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regression.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "examples.ensemble.plot_isolation_forest.$toplevel",
    "examples.ensemble.plot_monotonic_constraints.$toplevel",
    "examples.ensemble.plot_random_forest_embedding.$toplevel",
    "examples.ensemble.plot_random_forest_regression_multioutput.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.ensemble.plot_stack_predictors.load_ames_housing",
    "examples.ensemble.plot_voting_decision_regions.$toplevel",
    "examples.ensemble.plot_voting_probas.$toplevel",
    "examples.ensemble.plot_voting_regressor.$toplevel",
    "examples.exercises.plot_cv_diabetes.$toplevel",
    "examples.exercises.plot_cv_digits.$toplevel",
    "examples.exercises.plot_digits_classification_exercise.$toplevel",
    "examples.exercises.plot_iris_exercise.$toplevel",
    "examples.feature_selection.plot_f_test_vs_mi.$toplevel",
    "examples.feature_selection.plot_feature_selection.$toplevel",
    "examples.feature_selection.plot_feature_selection_pipeline.$toplevel",
    "examples.feature_selection.plot_rfe_digits.$toplevel",
    "examples.feature_selection.plot_rfe_with_cross_validation.$toplevel",
    "examples.feature_selection.plot_select_from_model_diabetes.$toplevel",
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.gaussian_process.plot_gpc.$toplevel",
    "examples.gaussian_process.plot_gpc_iris.$toplevel",
    "examples.gaussian_process.plot_gpc_isoprobability.$toplevel",
    "examples.gaussian_process.plot_gpc_isoprobability.g",
    "examples.gaussian_process.plot_gpc_xor.$toplevel",
    "examples.gaussian_process.plot_gpr_co2.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy_targets.$toplevel",
    "examples.gaussian_process.plot_gpr_on_structured_data.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.plot_gpr_samples",
    "examples.impute.plot_iterative_imputer_variants_comparison.$toplevel",
    "examples.impute.plot_missing_values.$toplevel",
    "examples.impute.plot_missing_values.add_missing_values",
    "examples.impute.plot_missing_values.get_impute_iterative",
    "examples.impute.plot_missing_values.get_impute_knn_score",
    "examples.impute.plot_missing_values.get_impute_mean",
    "examples.impute.plot_missing_values.get_impute_zero_score",
    "examples.inspection.plot_causal_interpretation.$toplevel",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.linear_model.plot_ard.$toplevel",
    "examples.linear_model.plot_bayesian_ridge_curvefit.$toplevel",
    "examples.linear_model.plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.$toplevel",
    "examples.linear_model.plot_huber_vs_ridge.$toplevel",
    "examples.linear_model.plot_iris_logistic.$toplevel",
    "examples.linear_model.plot_lasso_and_elasticnet.$toplevel",
    "examples.linear_model.plot_lasso_coordinate_descent_path.$toplevel",
    "examples.linear_model.plot_lasso_dense_vs_sparse_data.$toplevel",
    "examples.linear_model.plot_lasso_lars_ic.$toplevel",
    "examples.linear_model.plot_lasso_model_selection.$toplevel",
    "examples.linear_model.plot_logistic.$toplevel",
    "examples.linear_model.plot_logistic_l1_l2_sparsity.$toplevel",
    "examples.linear_model.plot_logistic_multinomial.$toplevel",
    "examples.linear_model.plot_logistic_path.$toplevel",
    "examples.linear_model.plot_multi_task_lasso_support.$toplevel",
    "examples.linear_model.plot_nnls.$toplevel",
    "examples.linear_model.plot_ols.$toplevel",
    "examples.linear_model.plot_ols_3d.$toplevel",
    "examples.linear_model.plot_ols_3d.plot_figs",
    "examples.linear_model.plot_ols_ridge_variance.$toplevel",
    "examples.linear_model.plot_omp.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss._mean_frequency_by_risk_group",
    "examples.linear_model.plot_polynomial_interpolation.$toplevel",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.linear_model.plot_ransac.$toplevel",
    "examples.linear_model.plot_ridge_coeffs.$toplevel",
    "examples.linear_model.plot_ridge_path.$toplevel",
    "examples.linear_model.plot_robust_fit.$toplevel",
    "examples.linear_model.plot_sgd_comparison.$toplevel",
    "examples.linear_model.plot_sgd_early_stopping.$toplevel",
    "examples.linear_model.plot_sgd_early_stopping.load_mnist",
    "examples.linear_model.plot_sgd_iris.$toplevel",
    "examples.linear_model.plot_sgd_separating_hyperplane.$toplevel",
    "examples.linear_model.plot_sgd_weighted_samples.$toplevel",
    "examples.linear_model.plot_sgdocsvm_vs_ocsvm.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_20newsgroups.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_mnist.$toplevel",
    "examples.linear_model.plot_theilsen.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.load_mtpl2",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.plot_obs_pred",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.score_estimator",
    "examples.manifold.plot_compare_methods.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.manifold.plot_lle_digits.plot_embedding",
    "examples.manifold.plot_manifold_sphere.$toplevel",
    "examples.manifold.plot_mds.$toplevel",
    "examples.manifold.plot_swissroll.$toplevel",
    "examples.manifold.plot_t_sne_perplexity.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_display_object_visualization.$toplevel",
    "examples.miscellaneous.plot_estimator_representation.$toplevel",
    "examples.miscellaneous.plot_isotonic_regression.$toplevel",
    "examples.miscellaneous.plot_johnson_lindenstrauss_bound.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.miscellaneous.plot_kernel_ridge_regression.$toplevel",
    "examples.miscellaneous.plot_metadata_routing.$toplevel",
    "examples.miscellaneous.plot_metadata_routing.MetaClassifier.get_metadata_routing",
    "examples.miscellaneous.plot_metadata_routing.MetaRegressor.get_metadata_routing",
    "examples.miscellaneous.plot_metadata_routing.RouterConsumerClassifier.fit",
    "examples.miscellaneous.plot_metadata_routing.RouterConsumerClassifier.get_metadata_routing",
    "examples.miscellaneous.plot_metadata_routing.SimplePipeline.get_metadata_routing",
    "examples.miscellaneous.plot_metadata_routing.WeightedMetaRegressor.get_metadata_routing",
    "examples.miscellaneous.plot_multilabel.plot_subfigure",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.compute_prediction",
    "examples.miscellaneous.plot_outlier_detection_bench.preprocess_dataset",
    "examples.miscellaneous.plot_partial_dependence_visualization_api.$toplevel",
    "examples.miscellaneous.plot_pipeline_display.$toplevel",
    "examples.miscellaneous.plot_roc_curve_visualization_api.$toplevel",
    "examples.miscellaneous.plot_set_output.$toplevel",
    "examples.mixture.plot_concentration_prior.$toplevel",
    "examples.mixture.plot_concentration_prior.plot_ellipses",
    "examples.mixture.plot_concentration_prior.plot_results",
    "examples.mixture.plot_gmm.$toplevel",
    "examples.mixture.plot_gmm.plot_results",
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.mixture.plot_gmm_covariances.make_ellipses",
    "examples.mixture.plot_gmm_init.$toplevel",
    "examples.mixture.plot_gmm_init.get_initial_means",
    "examples.mixture.plot_gmm_pdf.$toplevel",
    "examples.mixture.plot_gmm_selection.$toplevel",
    "examples.mixture.plot_gmm_sin.$toplevel",
    "examples.mixture.plot_gmm_sin.plot_results",
    "examples.mixture.plot_gmm_sin.plot_samples",
    "examples.model_selection.plot_confusion_matrix.$toplevel",
    "examples.model_selection.plot_cv_indices.$toplevel",
    "examples.model_selection.plot_cv_indices.plot_cv_indices",
    "examples.model_selection.plot_cv_indices.visualize_groups",
    "examples.model_selection.plot_cv_predict.$toplevel",
    "examples.model_selection.plot_det.$toplevel",
    "examples.model_selection.plot_grid_search_digits.$toplevel",
    "examples.model_selection.plot_grid_search_refit_callable.$toplevel",
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel",
    "examples.model_selection.plot_learning_curve.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.scoring_on_bootstrap",
    "examples.model_selection.plot_multi_metric_evaluation.$toplevel",
    "examples.model_selection.plot_nested_cross_validation_iris.$toplevel",
    "examples.model_selection.plot_permutation_tests_for_classification.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.model_selection.plot_randomized_search.$toplevel",
    "examples.model_selection.plot_randomized_search.report",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.model_selection.plot_roc_crossval.$toplevel",
    "examples.model_selection.plot_successive_halving_heatmap.$toplevel",
    "examples.model_selection.plot_successive_halving_heatmap.make_heatmap",
    "examples.model_selection.plot_successive_halving_iterations.$toplevel",
    "examples.model_selection.plot_train_error_vs_test_error.$toplevel",
    "examples.model_selection.plot_underfitting_overfitting.$toplevel",
    "examples.model_selection.plot_validation_curve.$toplevel",
    "examples.multioutput.plot_classifier_chain_yeast.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.load_mnist",
    "examples.neighbors.plot_caching_nearest_neighbors.$toplevel",
    "examples.neighbors.plot_classification.$toplevel",
    "examples.neighbors.plot_digits_kde_sampling.$toplevel",
    "examples.neighbors.plot_kde_1d.$toplevel",
    "examples.neighbors.plot_lof_novelty_detection.$toplevel",
    "examples.neighbors.plot_lof_outlier_detection.$toplevel",
    "examples.neighbors.plot_nca_classification.$toplevel",
    "examples.neighbors.plot_nca_dim_reduction.$toplevel",
    "examples.neighbors.plot_nca_illustration.$toplevel",
    "examples.neighbors.plot_nca_illustration.relate_point",
    "examples.neighbors.plot_nearest_centroid.$toplevel",
    "examples.neighbors.plot_regression.$toplevel",
    "examples.neighbors.plot_species_kde.$toplevel",
    "examples.neural_networks.plot_mlp_alpha.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.plot_on_dataset",
    "examples.neural_networks.plot_mnist_filters.$toplevel",
    "examples.neural_networks.plot_rbm_logistic_classification.$toplevel",
    "examples.neural_networks.plot_rbm_logistic_classification.nudge_dataset",
    "examples.preprocessing.plot_all_scaling.$toplevel",
    "examples.preprocessing.plot_all_scaling.make_plot",
    "examples.preprocessing.plot_all_scaling.plot_distribution",
    "examples.preprocessing.plot_discretization.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_discretization_strategies.$toplevel",
    "examples.preprocessing.plot_map_data_to_normal.$toplevel",
    "examples.preprocessing.plot_scaling_importance.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.preprocessing.plot_target_encoder_cross_val.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_0_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_2_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel",
    "examples.semi_supervised.plot_label_propagation_structure.$toplevel",
    "examples.semi_supervised.plot_self_training_varying_threshold.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_versus_svm_iris.$toplevel",
    "examples.svm.plot_custom_kernel.$toplevel",
    "examples.svm.plot_iris_svc.$toplevel",
    "examples.svm.plot_linearsvc_support_vectors.$toplevel",
    "examples.svm.plot_oneclass.$toplevel",
    "examples.svm.plot_rbf_parameters.$toplevel",
    "examples.svm.plot_separating_hyperplane.$toplevel",
    "examples.svm.plot_separating_hyperplane_unbalanced.$toplevel",
    "examples.svm.plot_svm_anova.$toplevel",
    "examples.svm.plot_svm_kernels.$toplevel",
    "examples.svm.plot_svm_margin.$toplevel",
    "examples.svm.plot_svm_nonlinear.$toplevel",
    "examples.svm.plot_svm_regression.$toplevel",
    "examples.svm.plot_svm_scale_c.$toplevel",
    "examples.svm.plot_svm_tie_breaking.$toplevel",
    "examples.svm.plot_weighted_samples.$toplevel",
    "examples.svm.plot_weighted_samples.plot_decision_function",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.load_dataset",
    "examples.text.plot_document_classification_20newsgroups.plot_feature_effects",
    "examples.text.plot_document_clustering.$toplevel",
    "examples.text.plot_document_clustering.fit_and_evaluate",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "examples.tree.plot_cost_complexity_pruning.$toplevel",
    "examples.tree.plot_iris_dtc.$toplevel",
    "examples.tree.plot_tree_regression.$toplevel",
    "examples.tree.plot_tree_regression_multioutput.$toplevel",
    "examples.tree.plot_unveil_tree_structure.$toplevel",
    "flask.cli.CertParamType.convert",
    "flask.cli.FlaskGroup.get_command",
    "flask.cli.FlaskGroup.list_commands",
    "flask.cli.FlaskGroup.make_context",
    "flask.cli.FlaskGroup.parse_args",
    "flask.cli.SeparatedPathType.convert",
    "flask.sessions.SecureCookieSession.__getitem__",
    "flask.sessions.SecureCookieSession.get",
    "flask.sessions.SecureCookieSession.setdefault",
    "graphql.pyutils.default_ordered_dict.DefaultOrderedDict.__init__",
    "graphql.pyutils.default_ordered_dict.DefaultOrderedDict.__repr__",
    "importlib_metadata.Distribution._discover_resolvers",
    "importlib_metadata.Distribution.discover",
    "importlib_metadata.EntryPoint.matches",
    "importlib_metadata.EntryPoints.__getitem__",
    "importlib_metadata._text.FoldedCase.lower",
    "importlib_metadata.compat.py39.ep_matches",
    "jinja2.compiler.CodeGenerator.__init__",
    "jinja2.compiler.generate",
    "jinja2.debug.fake_traceback",
    "jinja2.debug.rewrite_traceback_stack",
    "jinja2.environment.Environment._parse",
    "jinja2.environment.Environment._tokenize",
    "jinja2.environment.Environment.getattr",
    "jinja2.environment.Environment.getitem",
    "jinja2.environment.Environment.make_globals",
    "jinja2.environment.Template._from_namespace",
    "jinja2.environment.Template.render_async",
    "jinja2.environment.create_cache",
    "jinja2.environment.load_extensions",
    "jinja2.exceptions.TemplateError.__init__",
    "jinja2.exceptions.TemplateSyntaxError.__init__",
    "jinja2.ext.DebugExtension.parse",
    "jinja2.ext.ExprStmtExtension.parse",
    "jinja2.ext.Extension.attr",
    "jinja2.ext.Extension.call_method",
    "jinja2.ext.Extension.parse",
    "jinja2.ext.InternationalizationExtension._make_node",
    "jinja2.ext.InternationalizationExtension._parse_block",
    "jinja2.ext.InternationalizationExtension.parse",
    "jinja2.ext.LoopControlExtension.parse",
    "jinja2.idtracking.RootVisitor.generic_visit",
    "jinja2.lexer.Failure.__call__",
    "jinja2.lexer.Lexer.__init__",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.lexer.Lexer.tokenize",
    "jinja2.lexer.Lexer.wrap",
    "jinja2.lexer.OptionalLStrip.__new__",
    "jinja2.lexer.TokenStream.__init__",
    "jinja2.lexer.compile_rules",
    "jinja2.lexer.get_lexer",
    "jinja2.nativetypes.NativeTemplate.render_async",
    "jinja2.nodes.BinExpr.as_const",
    "jinja2.nodes.Compare.as_const",
    "jinja2.nodes.CondExpr.as_const",
    "jinja2.nodes.Const.from_untrusted",
    "jinja2.nodes.Expr.as_const",
    "jinja2.nodes.Filter.as_const",
    "jinja2.nodes.Getattr.as_const",
    "jinja2.nodes.Getitem.as_const",
    "jinja2.nodes.MarkSafeIfAutoescape.as_const",
    "jinja2.nodes.Node.__init__",
    "jinja2.nodes.Node.set_ctx",
    "jinja2.nodes.Node.set_environment",
    "jinja2.nodes.Node.set_lineno",
    "jinja2.nodes.Slice.as_const",
    "jinja2.nodes.TemplateData.as_const",
    "jinja2.nodes.UnaryExpr.as_const",
    "jinja2.nodes._FilterTestCommon.as_const",
    "jinja2.nodes.args_as_const",
    "jinja2.nodes.get_eval_context",
    "jinja2.optimizer.Optimizer.generic_visit",
    "jinja2.parser.Parser.parse",
    "jinja2.parser.Parser.parse_and",
    "jinja2.parser.Parser.parse_assign_target",
    "jinja2.parser.Parser.parse_call",
    "jinja2.parser.Parser.parse_call_args",
    "jinja2.parser.Parser.parse_call_block",
    "jinja2.parser.Parser.parse_compare",
    "jinja2.parser.Parser.parse_concat",
    "jinja2.parser.Parser.parse_condexpr",
    "jinja2.parser.Parser.parse_dict",
    "jinja2.parser.Parser.parse_filter",
    "jinja2.parser.Parser.parse_filter_block",
    "jinja2.parser.Parser.parse_list",
    "jinja2.parser.Parser.parse_not",
    "jinja2.parser.Parser.parse_or",
    "jinja2.parser.Parser.parse_pow",
    "jinja2.parser.Parser.parse_primary",
    "jinja2.parser.Parser.parse_subscribed",
    "jinja2.parser.Parser.parse_subscript",
    "jinja2.parser.Parser.parse_test",
    "jinja2.parser.Parser.parse_tuple",
    "jinja2.parser.Parser.parse_unary",
    "jinja2.parser.Parser.subparse",
    "jinja2.parser.Parser.subparse.flush_data",
    "jinja2.runtime.Context.__init__",
    "jinja2.runtime.LoopContext.__call__",
    "jinja2.runtime.LoopContext.length",
    "jinja2.runtime.new_context",
    "jinja2.sandbox.ImmutableSandboxedEnvironment.is_safe_attribute",
    "jinja2.sandbox.SandboxedEnvironment.getattr",
    "jinja2.sandbox.SandboxedEnvironment.getitem",
    "jinja2.sandbox.SandboxedEnvironment.unsafe_undefined",
    "jinja2.utils.LRUCache.__init__",
    "jinja2.utils.LRUCache._postinit",
    "jinja2.visitor.NodeTransformer.generic_visit",
    "maint_tools.check_pxd_in_installation.$toplevel",
    "maint_tools.sort_whats_new.$toplevel",
    "maint_tools.update_tracking_issue.$toplevel",
    "maint_tools.update_tracking_issue.create_or_update_issue",
    "markupsafe.EscapeFormatter.__init__",
    "markupsafe.Markup.__add__",
    "markupsafe.Markup.__mod__",
    "markupsafe.Markup.__mul__",
    "markupsafe.Markup.__new__",
    "markupsafe.Markup.__repr__",
    "markupsafe.Markup.format",
    "markupsafe.Markup.join",
    "markupsafe.Markup.partition",
    "markupsafe.Markup.rpartition",
    "markupsafe.Markup.rsplit",
    "markupsafe.Markup.split",
    "markupsafe.Markup.splitlines",
    "marshmallow.orderedset.OrderedSet.__repr__",
    "packaging.version.Version.__init__",
    "packaging.version._cmpkey",
    "parso.utils.PythonVersionInfo.__eq__",
    "parso.utils.PythonVersionInfo.__gt__",
    "pip._vendor.distlib.compat.ChainMap.__iter__",
    "pip._vendor.distlib.compat.ChainMap.__missing__",
    "pip._vendor.distlib.compat.ChainMap.__repr__",
    "pip._vendor.distlib.compat.OrderedDict.__init__",
    "pip._vendor.distlib.compat.OrderedDict.keys",
    "pip._vendor.distlib.compat.OrderedDict.pop",
    "pip._vendor.distlib.compat.OrderedDict.update",
    "pip._vendor.html5lib.treebuilders.base.ActiveFormattingElements.append",
    "pip._vendor.packaging.version.Version.__init__",
    "pip._vendor.packaging.version._cmpkey",
    "pip._vendor.pkg_resources.Distribution.version",
    "pip._vendor.pkg_resources.safe_version",
    "pip._vendor.pyparsing.And.streamline",
    "pip._vendor.pyparsing.Each.streamline",
    "pip._vendor.pyparsing.Forward.__init__",
    "pip._vendor.pyparsing.Forward._setResultsName",
    "pip._vendor.pyparsing.Forward.copy",
    "pip._vendor.pyparsing.Keyword.copy",
    "pip._vendor.pyparsing.Literal.__init__",
    "pip._vendor.pyparsing.MatchFirst._setResultsName",
    "pip._vendor.pyparsing.MatchFirst.streamline",
    "pip._vendor.pyparsing.Or._setResultsName",
    "pip._vendor.pyparsing.Or.streamline",
    "pip._vendor.pyparsing.ParseElementEnhance.__init__",
    "pip._vendor.pyparsing.ParseElementEnhance.streamline",
    "pip._vendor.pyparsing.ParseExpression._setResultsName",
    "pip._vendor.pyparsing.ParseExpression.copy",
    "pip._vendor.pyparsing.ParseExpression.streamline",
    "pip._vendor.pyparsing.ParserElement.__init__",
    "pip._vendor.pyparsing.ParserElement._setResultsName",
    "pip._vendor.pyparsing.ParserElement.copy",
    "pip._vendor.pyparsing.ParserElement.resetCache",
    "pip._vendor.pyparsing.ParserElement.setParseAction",
    "pip._vendor.pyparsing.ParserElement.transformString",
    "pip._vendor.pyparsing.Regex.__init__",
    "pip._vendor.pyparsing.Token.__init__",
    "pip._vendor.pyparsing._MultipleMatch._setResultsName",
    "pip._vendor.pyparsing._trim_arity",
    "pip._vendor.pyparsing._trim_arity.extract_stack",
    "pip._vendor.pyparsing._ustr",
    "pip._vendor.requests.cookies.RequestsCookieJar._find_no_duplicates",
    "pip._vendor.requests.cookies.RequestsCookieJar.items",
    "pip._vendor.requests.cookies.RequestsCookieJar.set_cookie",
    "pip._vendor.requests.cookies.RequestsCookieJar.values",
    "pip._vendor.requests.cookies.create_cookie",
    "pip._vendor.requests.cookies.morsel_to_cookie",
    "pip._vendor.resolvelib.structs.IteratorMapping.__iter__",
    "pip._vendor.resolvelib.structs._FactoryIterableView.__repr__",
    "pip._vendor.tenacity.BaseRetrying.iter",
    "pip._vendor.tenacity.Future.__init__",
    "pip._vendor.tenacity.RetryCallState.set_exception",
    "pip._vendor.tenacity.RetryCallState.set_result",
    "pip._vendor.tenacity.Retrying.__call__",
    "pip._vendor.tenacity._asyncio.AsyncRetrying.__call__",
    "pip._vendor.tenacity.tornadoweb.TornadoRetrying.__call__",
    "pip._vendor.urllib3._collections.HTTPHeaderDict.items",
    "pip._vendor.urllib3._collections.HTTPHeaderDict.iteritems",
    "pip._vendor.urllib3._collections.HTTPHeaderDict.itermerged",
    "pip._vendor.urllib3._collections.RecentlyUsedContainer.__iter__",
    "prompt_toolkit.formatted_text.base.FormattedText.__repr__",
    "prompt_toolkit.layout.utils._ExplodedList.__setitem__",
    "prompt_toolkit.layout.utils._ExplodedList.extend",
    "prompt_toolkit.layout.utils.explode_text_fragments",
    "setup.check_package_status",
    "setup.configure_extension_modules",
    "setup.setup_package",
    "sklearn.__check_build.raise_build_error",
    "sklearn._build_utils._check_cython_version",
    "sklearn._build_utils.cythonize_extensions",
    "sklearn._build_utils.openmp_helpers.check_openmp_support",
    "sklearn._build_utils.pre_build_helpers.compile_test_program",
    "sklearn._config.$toplevel",
    "sklearn._loss.link.BaseLink.$class_toplevel",
    "sklearn._loss.link.HalfLogitLink.$class_toplevel",
    "sklearn._loss.link.Interval.__post_init__",
    "sklearn._loss.link.LogLink.$class_toplevel",
    "sklearn._loss.link.LogitLink.$class_toplevel",
    "sklearn._loss.link.MultinomialLogit.$class_toplevel",
    "sklearn._loss.link.MultinomialLogit.link",
    "sklearn._loss.link.MultinomialLogit.symmetrize_raw_prediction",
    "sklearn._loss.loss.AbsoluteError.__init__",
    "sklearn._loss.loss.BaseLoss.__init__",
    "sklearn._loss.loss.BaseLoss.init_gradient_and_hessian",
    "sklearn._loss.loss.ExponentialLoss.__init__",
    "sklearn._loss.loss.ExponentialLoss.predict_proba",
    "sklearn._loss.loss.HalfBinomialLoss.__init__",
    "sklearn._loss.loss.HalfBinomialLoss.predict_proba",
    "sklearn._loss.loss.HalfGammaLoss.__init__",
    "sklearn._loss.loss.HalfMultinomialLoss.__init__",
    "sklearn._loss.loss.HalfMultinomialLoss.fit_intercept_only",
    "sklearn._loss.loss.HalfPoissonLoss.__init__",
    "sklearn._loss.loss.HalfSquaredError.__init__",
    "sklearn._loss.loss.HalfTweedieLoss.__init__",
    "sklearn._loss.loss.HalfTweedieLoss.constant_to_optimal_zero",
    "sklearn._loss.loss.HalfTweedieLossIdentity.__init__",
    "sklearn._loss.loss.HuberLoss.__init__",
    "sklearn._loss.loss.PinballLoss.__init__",
    "sklearn._min_dependencies.$toplevel",
    "sklearn.base.BaseEstimator.__getstate__",
    "sklearn.base.BaseEstimator.__repr__",
    "sklearn.base.BaseEstimator.__setstate__",
    "sklearn.base.BaseEstimator._check_feature_names",
    "sklearn.base.BaseEstimator._check_feature_names.add_names",
    "sklearn.base.BaseEstimator._check_n_features",
    "sklearn.base.BaseEstimator._get_param_names",
    "sklearn.base.BaseEstimator._get_tags",
    "sklearn.base.BaseEstimator._repr_html_",
    "sklearn.base.BaseEstimator._validate_data",
    "sklearn.base.BaseEstimator.set_params",
    "sklearn.base.BiclusterMixin.get_submatrix",
    "sklearn.base._clone_parametrized",
    "sklearn.calibration.CalibratedClassifierCV.$class_toplevel",
    "sklearn.calibration.CalibratedClassifierCV._get_estimator",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing",
    "sklearn.calibration.CalibrationDisplay.from_predictions",
    "sklearn.calibration._CalibratedClassifier.predict_proba",
    "sklearn.calibration._compute_predictions",
    "sklearn.calibration._fit_calibrator",
    "sklearn.calibration.calibration_curve",
    "sklearn.cluster._affinity_propagation.AffinityPropagation.$class_toplevel",
    "sklearn.cluster._affinity_propagation.AffinityPropagation.fit",
    "sklearn.cluster._affinity_propagation.AffinityPropagation.fit_predict",
    "sklearn.cluster._affinity_propagation.AffinityPropagation.predict",
    "sklearn.cluster._affinity_propagation._affinity_propagation",
    "sklearn.cluster._affinity_propagation.affinity_propagation",
    "sklearn.cluster._agglomerative.AgglomerativeClustering.$class_toplevel",
    "sklearn.cluster._agglomerative.AgglomerativeClustering._fit",
    "sklearn.cluster._agglomerative.AgglomerativeClustering.fit_predict",
    "sklearn.cluster._agglomerative.FeatureAgglomeration.$class_toplevel",
    "sklearn.cluster._agglomerative.FeatureAgglomeration.__init__",
    "sklearn.cluster._agglomerative.FeatureAgglomeration.fit",
    "sklearn.cluster._agglomerative._fix_connectivity",
    "sklearn.cluster._agglomerative._hc_cut",
    "sklearn.cluster._agglomerative._single_linkage_tree",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.cluster._bicluster.BaseSpectral.$class_toplevel",
    "sklearn.cluster._bicluster.BaseSpectral._k_means",
    "sklearn.cluster._bicluster.BaseSpectral._svd",
    "sklearn.cluster._bicluster.SpectralBiclustering.$class_toplevel",
    "sklearn.cluster._bicluster.SpectralBiclustering.__init__",
    "sklearn.cluster._bicluster.SpectralBiclustering._check_parameters",
    "sklearn.cluster._bicluster.SpectralBiclustering._fit",
    "sklearn.cluster._bicluster.SpectralBiclustering._fit_best_piecewise",
    "sklearn.cluster._bicluster.SpectralCoclustering.$class_toplevel",
    "sklearn.cluster._bicluster.SpectralCoclustering.__init__",
    "sklearn.cluster._bicluster.SpectralCoclustering._check_parameters",
    "sklearn.cluster._bicluster.SpectralCoclustering._fit",
    "sklearn.cluster._bicluster._bistochastic_normalize",
    "sklearn.cluster._bicluster._log_normalize",
    "sklearn.cluster._bicluster._scale_normalize",
    "sklearn.cluster._birch.Birch.$class_toplevel",
    "sklearn.cluster._birch.Birch._check_fit",
    "sklearn.cluster._birch.Birch._fit",
    "sklearn.cluster._birch.Birch._global_clustering",
    "sklearn.cluster._birch._CFNode.append_subcluster",
    "sklearn.cluster._birch._iterate_sparse_X",
    "sklearn.cluster._birch._split_node",
    "sklearn.cluster._bisect_k_means.BisectingKMeans.$class_toplevel",
    "sklearn.cluster._bisect_k_means.BisectingKMeans.__init__",
    "sklearn.cluster._bisect_k_means.BisectingKMeans._bisect",
    "sklearn.cluster._bisect_k_means.BisectingKMeans._inertia_per_cluster",
    "sklearn.cluster._bisect_k_means.BisectingKMeans.fit",
    "sklearn.cluster._bisect_k_means._BisectingTree.split",
    "sklearn.cluster._dbscan.DBSCAN.$class_toplevel",
    "sklearn.cluster._dbscan.DBSCAN.fit",
    "sklearn.cluster._dbscan.dbscan",
    "sklearn.cluster._feature_agglomeration.AgglomerationTransform.inverse_transform",
    "sklearn.cluster._feature_agglomeration.AgglomerationTransform.transform",
    "sklearn.cluster._hdbscan.hdbscan.$toplevel",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.$class_toplevel",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN._weighted_cluster_center",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.fit",
    "sklearn.cluster._hdbscan.hdbscan._brute_mst",
    "sklearn.cluster._hdbscan.hdbscan._get_finite_row_indices",
    "sklearn.cluster._hdbscan.hdbscan._hdbscan_brute",
    "sklearn.cluster._hdbscan.hdbscan._hdbscan_prims",
    "sklearn.cluster._hdbscan.hdbscan.remap_single_linkage_tree",
    "sklearn.cluster._kmeans.KMeans.$class_toplevel",
    "sklearn.cluster._kmeans.KMeans.__init__",
    "sklearn.cluster._kmeans.KMeans._check_params_vs_input",
    "sklearn.cluster._kmeans.KMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.$class_toplevel",
    "sklearn.cluster._kmeans.MiniBatchKMeans.__init__",
    "sklearn.cluster._kmeans.MiniBatchKMeans._check_params_vs_input",
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans._BaseKMeans.$class_toplevel",
    "sklearn.cluster._kmeans._BaseKMeans._check_params_vs_input",
    "sklearn.cluster._kmeans._BaseKMeans._validate_center_shape",
    "sklearn.cluster._kmeans._kmeans_plusplus",
    "sklearn.cluster._kmeans._kmeans_single_elkan",
    "sklearn.cluster._kmeans._kmeans_single_lloyd",
    "sklearn.cluster._kmeans._mini_batch_step",
    "sklearn.cluster._kmeans.k_means",
    "sklearn.cluster._kmeans.kmeans_plusplus",
    "sklearn.cluster._mean_shift.MeanShift.$class_toplevel",
    "sklearn.cluster._mean_shift.MeanShift.fit",
    "sklearn.cluster._mean_shift.estimate_bandwidth",
    "sklearn.cluster._mean_shift.mean_shift",
    "sklearn.cluster._optics.OPTICS.$class_toplevel",
    "sklearn.cluster._optics.OPTICS.fit",
    "sklearn.cluster._optics._compute_core_distances_",
    "sklearn.cluster._optics._correct_predecessor",
    "sklearn.cluster._optics._extract_xi_labels",
    "sklearn.cluster._optics._set_reach_dist",
    "sklearn.cluster._optics._validate_size",
    "sklearn.cluster._optics._xi_cluster",
    "sklearn.cluster._optics.compute_optics_graph",
    "sklearn.cluster._spectral.SpectralClustering.$class_toplevel",
    "sklearn.cluster._spectral.SpectralClustering.fit",
    "sklearn.cluster._spectral.SpectralClustering.fit_predict",
    "sklearn.cluster._spectral.cluster_qr",
    "sklearn.cluster._spectral.discretize",
    "sklearn.cluster._spectral.spectral_clustering",
    "sklearn.cluster.tests.common.generate_clustered_data",
    "sklearn.compose._column_transformer.ColumnTransformer.$class_toplevel",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.compose._column_transformer.ColumnTransformer._fit_transform",
    "sklearn.compose._column_transformer.ColumnTransformer._get_feature_name_out_for_transformer",
    "sklearn.compose._column_transformer.ColumnTransformer._hstack",
    "sklearn.compose._column_transformer.ColumnTransformer._iter",
    "sklearn.compose._column_transformer.ColumnTransformer._record_output_indices",
    "sklearn.compose._column_transformer.ColumnTransformer._sk_visual_block_",
    "sklearn.compose._column_transformer.ColumnTransformer._update_fitted_transformers",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_output",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_remainder",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_transformers",
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform",
    "sklearn.compose._column_transformer.ColumnTransformer.set_output",
    "sklearn.compose._column_transformer.ColumnTransformer.transform",
    "sklearn.compose._column_transformer._get_transformer_list",
    "sklearn.compose._column_transformer.make_column_selector.__call__",
    "sklearn.compose._column_transformer.make_column_transformer",
    "sklearn.compose._target.TransformedTargetRegressor._fit_transformer",
    "sklearn.compose._target.TransformedTargetRegressor._more_tags",
    "sklearn.compose._target.TransformedTargetRegressor.fit",
    "sklearn.compose._target.TransformedTargetRegressor.n_features_in_",
    "sklearn.conftest.$toplevel",
    "sklearn.conftest.hide_available_pandas.mocked_import",
    "sklearn.conftest.pytest_collection_modifyitems",
    "sklearn.conftest.raccoon_face_or_skip",
    "sklearn.covariance._elliptic_envelope.EllipticEnvelope.$class_toplevel",
    "sklearn.covariance._elliptic_envelope.EllipticEnvelope.__init__",
    "sklearn.covariance._elliptic_envelope.EllipticEnvelope.fit",
    "sklearn.covariance._empirical_covariance.EmpiricalCovariance.error_norm",
    "sklearn.covariance._empirical_covariance.EmpiricalCovariance.mahalanobis",
    "sklearn.covariance._graph_lasso.BaseGraphicalLasso.$class_toplevel",
    "sklearn.covariance._graph_lasso.BaseGraphicalLasso.__init__",
    "sklearn.covariance._graph_lasso.GraphicalLasso.$class_toplevel",
    "sklearn.covariance._graph_lasso.GraphicalLasso.__init__",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.$class_toplevel",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.__init__",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.covariance._graph_lasso.alpha_max",
    "sklearn.covariance._graph_lasso.graphical_lasso",
    "sklearn.covariance._graph_lasso.graphical_lasso_path",
    "sklearn.covariance._robust_covariance.MinCovDet.$class_toplevel",
    "sklearn.covariance._robust_covariance.MinCovDet.correct_covariance",
    "sklearn.covariance._robust_covariance._c_step",
    "sklearn.covariance._robust_covariance.fast_mcd",
    "sklearn.covariance._robust_covariance.select_candidates",
    "sklearn.covariance._shrunk_covariance.LedoitWolf.$class_toplevel",
    "sklearn.covariance._shrunk_covariance.LedoitWolf.__init__",
    "sklearn.covariance._shrunk_covariance.ShrunkCovariance.$class_toplevel",
    "sklearn.covariance._shrunk_covariance.ShrunkCovariance.__init__",
    "sklearn.covariance._shrunk_covariance._ledoit_wolf",
    "sklearn.covariance._shrunk_covariance._oas",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf_shrinkage",
    "sklearn.covariance._shrunk_covariance.oas",
    "sklearn.covariance._shrunk_covariance.shrunk_covariance",
    "sklearn.cross_decomposition._pls.CCA.__init__",
    "sklearn.cross_decomposition._pls.PLSCanonical.__init__",
    "sklearn.cross_decomposition._pls.PLSRegression.__init__",
    "sklearn.cross_decomposition._pls.PLSRegression.fit",
    "sklearn.cross_decomposition._pls.PLSSVD.$class_toplevel",
    "sklearn.cross_decomposition._pls.PLSSVD.fit",
    "sklearn.cross_decomposition._pls._PLS.$class_toplevel",
    "sklearn.cross_decomposition._pls._PLS.fit",
    "sklearn.cross_decomposition._pls._get_first_singular_vectors_power_method",
    "sklearn.cross_decomposition._pls._get_first_singular_vectors_svd",
    "sklearn.cross_decomposition._pls._pinv2_old",
    "sklearn.datasets.__getattr__",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._arff_parser._pandas_arff_parser",
    "sklearn.datasets._arff_parser._sparse_data_to_array",
    "sklearn.datasets._arff_parser._split_sparse_columns",
    "sklearn.datasets._arff_parser.load_arff_from_gzip_file",
    "sklearn.datasets._base._convert_data_dataframe",
    "sklearn.datasets._base._fetch_remote",
    "sklearn.datasets._base._pkl_filepath",
    "sklearn.datasets._base.load_csv_data",
    "sklearn.datasets._base.load_digits",
    "sklearn.datasets._base.load_files",
    "sklearn.datasets._base.load_sample_image",
    "sklearn.datasets._base.load_sample_images",
    "sklearn.datasets._california_housing.fetch_california_housing",
    "sklearn.datasets._covtype.$toplevel",
    "sklearn.datasets._covtype.fetch_covtype",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._kddcup99.fetch_kddcup99",
    "sklearn.datasets._lfw._check_fetch_lfw",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._lfw._fetch_lfw_people",
    "sklearn.datasets._lfw._load_imgs",
    "sklearn.datasets._lfw.fetch_lfw_pairs",
    "sklearn.datasets._lfw.fetch_lfw_people",
    "sklearn.datasets._olivetti_faces.fetch_olivetti_faces",
    "sklearn.datasets._openml._download_data_to_bunch",
    "sklearn.datasets._openml._get_json_content_from_openml_api",
    "sklearn.datasets._openml._get_json_content_from_openml_api._load_json",
    "sklearn.datasets._openml._load_arff_response",
    "sklearn.datasets._openml._load_arff_response._open_url_and_load_gzip_file",
    "sklearn.datasets._openml._open_openml_url",
    "sklearn.datasets._openml._verify_target_data_type",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._samples_generator._generate_hypercube",
    "sklearn.datasets._samples_generator._shuffle",
    "sklearn.datasets._samples_generator.make_biclusters",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_checkerboard",
    "sklearn.datasets._samples_generator.make_circles",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.datasets._samples_generator.make_friedman1",
    "sklearn.datasets._samples_generator.make_friedman2",
    "sklearn.datasets._samples_generator.make_friedman3",
    "sklearn.datasets._samples_generator.make_gaussian_quantiles",
    "sklearn.datasets._samples_generator.make_moons",
    "sklearn.datasets._samples_generator.make_multilabel_classification",
    "sklearn.datasets._samples_generator.make_multilabel_classification.sample_example",
    "sklearn.datasets._samples_generator.make_regression",
    "sklearn.datasets._samples_generator.make_s_curve",
    "sklearn.datasets._samples_generator.make_sparse_coded_signal",
    "sklearn.datasets._samples_generator.make_sparse_uncorrelated",
    "sklearn.datasets._samples_generator.make_swiss_roll",
    "sklearn.datasets._species_distributions._load_coverage",
    "sklearn.datasets._species_distributions.fetch_species_distributions",
    "sklearn.datasets._svmlight_format_io._dump_svmlight",
    "sklearn.datasets._svmlight_format_io._gen_open",
    "sklearn.datasets._svmlight_format_io._load_svmlight_file",
    "sklearn.datasets._svmlight_format_io._open_and_load",
    "sklearn.datasets._svmlight_format_io.dump_svmlight_file",
    "sklearn.datasets._svmlight_format_io.load_svmlight_files",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized",
    "sklearn.datasets._twenty_newsgroups.strip_newsgroup_footer",
    "sklearn.datasets.tests.test_rcv1.test_fetch_rcv1",
    "sklearn.decomposition._base._BasePCA.get_covariance",
    "sklearn.decomposition._base._BasePCA.get_precision",
    "sklearn.decomposition._base._BasePCA.inverse_transform",
    "sklearn.decomposition._dict_learning.DictionaryLearning.$class_toplevel",
    "sklearn.decomposition._dict_learning.DictionaryLearning.__init__",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.$class_toplevel",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.__init__",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._initialize_dict",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning.SparseCoder.__init__",
    "sklearn.decomposition._dict_learning.SparseCoder.transform",
    "sklearn.decomposition._dict_learning._BaseSparseCoding._transform",
    "sklearn.decomposition._dict_learning._check_positive_coding",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning._sparse_encode",
    "sklearn.decomposition._dict_learning._sparse_encode_precomputed",
    "sklearn.decomposition._dict_learning._update_dict",
    "sklearn.decomposition._dict_learning.dict_learning",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._dict_learning.sparse_encode",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.$class_toplevel",
    "sklearn.decomposition._factor_analysis.FactorAnalysis._rotate",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.get_covariance",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.get_precision",
    "sklearn.decomposition._factor_analysis._ortho_rotation",
    "sklearn.decomposition._fastica.FastICA.$class_toplevel",
    "sklearn.decomposition._fastica.FastICA.__init__",
    "sklearn.decomposition._fastica.FastICA._fit_transform",
    "sklearn.decomposition._fastica._gs_decorrelation",
    "sklearn.decomposition._fastica._ica_def",
    "sklearn.decomposition._fastica._ica_par",
    "sklearn.decomposition._fastica._logcosh",
    "sklearn.decomposition._fastica.fastica",
    "sklearn.decomposition._incremental_pca.IncrementalPCA.$class_toplevel",
    "sklearn.decomposition._incremental_pca.IncrementalPCA.partial_fit",
    "sklearn.decomposition._incremental_pca.IncrementalPCA.transform",
    "sklearn.decomposition._kernel_pca.KernelPCA.$class_toplevel",
    "sklearn.decomposition._kernel_pca.KernelPCA._fit_inverse_transform",
    "sklearn.decomposition._kernel_pca.KernelPCA._fit_transform",
    "sklearn.decomposition._kernel_pca.KernelPCA.fit",
    "sklearn.decomposition._kernel_pca.KernelPCA.inverse_transform",
    "sklearn.decomposition._kernel_pca.KernelPCA.transform",
    "sklearn.decomposition._lda.LatentDirichletAllocation.$class_toplevel",
    "sklearn.decomposition._lda.LatentDirichletAllocation._approx_bound",
    "sklearn.decomposition._lda.LatentDirichletAllocation._e_step",
    "sklearn.decomposition._lda.LatentDirichletAllocation._perplexity_precomp_distr",
    "sklearn.decomposition._lda.LatentDirichletAllocation.fit",
    "sklearn.decomposition._lda.LatentDirichletAllocation.partial_fit",
    "sklearn.decomposition._lda.LatentDirichletAllocation.transform",
    "sklearn.decomposition._lda._update_doc_distribution",
    "sklearn.decomposition._nmf.MiniBatchNMF.$class_toplevel",
    "sklearn.decomposition._nmf.MiniBatchNMF.__init__",
    "sklearn.decomposition._nmf.MiniBatchNMF._check_params",
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform",
    "sklearn.decomposition._nmf.MiniBatchNMF._minibatch_step",
    "sklearn.decomposition._nmf.MiniBatchNMF._solve_W",
    "sklearn.decomposition._nmf.NMF.$class_toplevel",
    "sklearn.decomposition._nmf.NMF.__init__",
    "sklearn.decomposition._nmf.NMF._check_params",
    "sklearn.decomposition._nmf.NMF._fit_transform",
    "sklearn.decomposition._nmf._BaseNMF.$class_toplevel",
    "sklearn.decomposition._nmf._BaseNMF._check_w_h",
    "sklearn.decomposition._nmf._BaseNMF.inverse_transform",
    "sklearn.decomposition._nmf._beta_divergence",
    "sklearn.decomposition._nmf._check_init",
    "sklearn.decomposition._nmf._fit_coordinate_descent",
    "sklearn.decomposition._nmf._fit_multiplicative_update",
    "sklearn.decomposition._nmf._initialize_nmf",
    "sklearn.decomposition._nmf._multiplicative_update_h",
    "sklearn.decomposition._nmf._multiplicative_update_w",
    "sklearn.decomposition._nmf._special_sparse_dot",
    "sklearn.decomposition._nmf._update_coordinate_descent",
    "sklearn.decomposition._nmf.non_negative_factorization",
    "sklearn.decomposition._pca.PCA.$class_toplevel",
    "sklearn.decomposition._pca.PCA._fit",
    "sklearn.decomposition._pca.PCA._fit_full",
    "sklearn.decomposition._pca.PCA._fit_truncated",
    "sklearn.decomposition._pca.PCA.fit_transform",
    "sklearn.decomposition._pca._assess_dimension",
    "sklearn.decomposition._pca._infer_dimension",
    "sklearn.decomposition._sparse_pca.MiniBatchSparsePCA.$class_toplevel",
    "sklearn.decomposition._sparse_pca.MiniBatchSparsePCA.__init__",
    "sklearn.decomposition._sparse_pca.MiniBatchSparsePCA._fit",
    "sklearn.decomposition._sparse_pca.SparsePCA.__init__",
    "sklearn.decomposition._sparse_pca.SparsePCA._fit",
    "sklearn.decomposition._sparse_pca._BaseSparsePCA.$class_toplevel",
    "sklearn.decomposition._truncated_svd.TruncatedSVD.$class_toplevel",
    "sklearn.decomposition._truncated_svd.TruncatedSVD.fit_transform",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.$class_toplevel",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_eigen",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_svd",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.$class_toplevel",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis._decision_function",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba",
    "sklearn.discriminant_analysis._class_cov",
    "sklearn.discriminant_analysis._class_means",
    "sklearn.discriminant_analysis._cov",
    "sklearn.dummy.DummyClassifier.$class_toplevel",
    "sklearn.dummy.DummyClassifier.fit",
    "sklearn.dummy.DummyClassifier.predict",
    "sklearn.dummy.DummyClassifier.predict_proba",
    "sklearn.dummy.DummyClassifier.score",
    "sklearn.dummy.DummyRegressor.$class_toplevel",
    "sklearn.dummy.DummyRegressor.fit",
    "sklearn.dummy.DummyRegressor.score",
    "sklearn.ensemble._bagging.BaggingClassifier.__init__",
    "sklearn.ensemble._bagging.BaggingClassifier._more_tags",
    "sklearn.ensemble._bagging.BaggingClassifier._set_oob_score",
    "sklearn.ensemble._bagging.BaggingClassifier._validate_estimator",
    "sklearn.ensemble._bagging.BaggingClassifier.decision_function",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_proba",
    "sklearn.ensemble._bagging.BaggingRegressor.__init__",
    "sklearn.ensemble._bagging.BaggingRegressor._more_tags",
    "sklearn.ensemble._bagging.BaggingRegressor._set_oob_score",
    "sklearn.ensemble._bagging.BaggingRegressor._validate_estimator",
    "sklearn.ensemble._bagging.BaggingRegressor.predict",
    "sklearn.ensemble._bagging.BaseBagging.$class_toplevel",
    "sklearn.ensemble._bagging.BaseBagging.__init__",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._bagging._parallel_build_estimators",
    "sklearn.ensemble._bagging._parallel_decision_function",
    "sklearn.ensemble._bagging._parallel_predict_log_proba",
    "sklearn.ensemble._bagging._parallel_predict_proba",
    "sklearn.ensemble._bagging._parallel_predict_regression",
    "sklearn.ensemble._base.BaseEnsemble._validate_estimator",
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble._validate_estimators",
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble.get_params",
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble.set_params",
    "sklearn.ensemble._base._fit_single_estimator",
    "sklearn.ensemble._base._partition_estimators",
    "sklearn.ensemble._forest.BaseForest.$class_toplevel",
    "sklearn.ensemble._forest.BaseForest.__init__",
    "sklearn.ensemble._forest.BaseForest._compute_oob_predictions",
    "sklearn.ensemble._forest.BaseForest._validate_X_predict",
    "sklearn.ensemble._forest.BaseForest.apply",
    "sklearn.ensemble._forest.BaseForest.decision_path",
    "sklearn.ensemble._forest.BaseForest.feature_importances_",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._forest.ExtraTreesClassifier.$class_toplevel",
    "sklearn.ensemble._forest.ExtraTreesClassifier.__init__",
    "sklearn.ensemble._forest.ExtraTreesRegressor.__init__",
    "sklearn.ensemble._forest.ForestClassifier.__init__",
    "sklearn.ensemble._forest.ForestClassifier._set_oob_score_and_attributes",
    "sklearn.ensemble._forest.ForestClassifier._validate_y_class_weight",
    "sklearn.ensemble._forest.ForestClassifier.predict",
    "sklearn.ensemble._forest.ForestClassifier.predict_log_proba",
    "sklearn.ensemble._forest.ForestClassifier.predict_proba",
    "sklearn.ensemble._forest.ForestRegressor.__init__",
    "sklearn.ensemble._forest.ForestRegressor._get_oob_predictions",
    "sklearn.ensemble._forest.ForestRegressor._set_oob_score_and_attributes",
    "sklearn.ensemble._forest.ForestRegressor.predict",
    "sklearn.ensemble._forest.RandomForestClassifier.$class_toplevel",
    "sklearn.ensemble._forest.RandomForestClassifier.__init__",
    "sklearn.ensemble._forest.RandomForestRegressor.__init__",
    "sklearn.ensemble._forest.RandomTreesEmbedding.$class_toplevel",
    "sklearn.ensemble._forest.RandomTreesEmbedding.__init__",
    "sklearn.ensemble._forest.RandomTreesEmbedding._set_oob_score_and_attributes",
    "sklearn.ensemble._forest.RandomTreesEmbedding.fit_transform",
    "sklearn.ensemble._forest.RandomTreesEmbedding.get_feature_names_out",
    "sklearn.ensemble._forest._accumulate_prediction",
    "sklearn.ensemble._forest._get_n_samples_bootstrap",
    "sklearn.ensemble._forest._parallel_build_trees",
    "sklearn.ensemble._gb.BaseGradientBoosting.$class_toplevel",
    "sklearn.ensemble._gb.BaseGradientBoosting._compute_partial_dependence_recursion",
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stage",
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stages",
    "sklearn.ensemble._gb.BaseGradientBoosting._make_estimator",
    "sklearn.ensemble._gb.BaseGradientBoosting._resize_state",
    "sklearn.ensemble._gb.BaseGradientBoosting._staged_raw_predict",
    "sklearn.ensemble._gb.BaseGradientBoosting.apply",
    "sklearn.ensemble._gb.BaseGradientBoosting.fit",
    "sklearn.ensemble._gb.GradientBoostingClassifier.$class_toplevel",
    "sklearn.ensemble._gb.GradientBoostingClassifier.__init__",
    "sklearn.ensemble._gb.GradientBoostingClassifier._validate_y",
    "sklearn.ensemble._gb.GradientBoostingClassifier.predict_proba",
    "sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict_proba",
    "sklearn.ensemble._gb.GradientBoostingRegressor.$class_toplevel",
    "sklearn.ensemble._gb.GradientBoostingRegressor.__init__",
    "sklearn.ensemble._gb.GradientBoostingRegressor.apply",
    "sklearn.ensemble._gb_losses.BinomialDeviance.__init__",
    "sklearn.ensemble._gb_losses.BinomialDeviance._raw_prediction_to_proba",
    "sklearn.ensemble._gb_losses.BinomialDeviance.get_init_raw_predictions",
    "sklearn.ensemble._gb_losses.BinomialDeviance.init_estimator",
    "sklearn.ensemble._gb_losses.ClassificationLossFunction.check_init_estimator",
    "sklearn.ensemble._gb_losses.ExponentialLoss.__init__",
    "sklearn.ensemble._gb_losses.ExponentialLoss._raw_prediction_to_proba",
    "sklearn.ensemble._gb_losses.ExponentialLoss.get_init_raw_predictions",
    "sklearn.ensemble._gb_losses.ExponentialLoss.init_estimator",
    "sklearn.ensemble._gb_losses.HuberLossFunction.__init__",
    "sklearn.ensemble._gb_losses.HuberLossFunction.init_estimator",
    "sklearn.ensemble._gb_losses.LeastAbsoluteError.init_estimator",
    "sklearn.ensemble._gb_losses.LeastSquaresError.init_estimator",
    "sklearn.ensemble._gb_losses.LeastSquaresError.update_terminal_regions",
    "sklearn.ensemble._gb_losses.LossFunction.update_terminal_regions",
    "sklearn.ensemble._gb_losses.MultinomialDeviance.__call__",
    "sklearn.ensemble._gb_losses.MultinomialDeviance.__init__",
    "sklearn.ensemble._gb_losses.MultinomialDeviance._raw_prediction_to_proba",
    "sklearn.ensemble._gb_losses.MultinomialDeviance.init_estimator",
    "sklearn.ensemble._gb_losses.MultinomialDeviance.negative_gradient",
    "sklearn.ensemble._gb_losses.QuantileLossFunction.__init__",
    "sklearn.ensemble._gb_losses.QuantileLossFunction.init_estimator",
    "sklearn.ensemble._gb_losses.RegressionLossFunction.__init__",
    "sklearn.ensemble._gb_losses.RegressionLossFunction.check_init_estimator",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.fit",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.make_known_categories_bitsets",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.transform",
    "sklearn.ensemble._hist_gradient_boosting.binning._find_binning_thresholds",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.$class_toplevel",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_interaction_cst",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._compute_partial_dependence_recursion",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._predict_iterations",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._raw_predict",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._should_stop",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._staged_raw_predict",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._validate_parameters",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier.$class_toplevel",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier.__init__",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier._encode_y",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier._get_loss",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.$class_toplevel",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.__init__",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor._encode_y",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.__init__",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._compute_interactions",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._intilialize_root",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._validate_parameters",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.make_predictor",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.split_next",
    "sklearn.ensemble._iforest.IsolationForest.$class_toplevel",
    "sklearn.ensemble._iforest.IsolationForest.__init__",
    "sklearn.ensemble._iforest.IsolationForest._compute_score_samples",
    "sklearn.ensemble._iforest.IsolationForest._set_oob_score",
    "sklearn.ensemble._iforest.IsolationForest.fit",
    "sklearn.ensemble._stacking.StackingClassifier.$class_toplevel",
    "sklearn.ensemble._stacking.StackingClassifier.__init__",
    "sklearn.ensemble._stacking.StackingClassifier._sk_visual_block_",
    "sklearn.ensemble._stacking.StackingClassifier._validate_estimators",
    "sklearn.ensemble._stacking.StackingClassifier._validate_final_estimator",
    "sklearn.ensemble._stacking.StackingClassifier.fit",
    "sklearn.ensemble._stacking.StackingClassifier.predict",
    "sklearn.ensemble._stacking.StackingClassifier.predict_proba",
    "sklearn.ensemble._stacking.StackingRegressor.__init__",
    "sklearn.ensemble._stacking.StackingRegressor._sk_visual_block_",
    "sklearn.ensemble._stacking.StackingRegressor._validate_final_estimator",
    "sklearn.ensemble._stacking.StackingRegressor.fit",
    "sklearn.ensemble._stacking.StackingRegressor.fit_transform",
    "sklearn.ensemble._stacking._BaseStacking.$class_toplevel",
    "sklearn.ensemble._stacking._BaseStacking.__init__",
    "sklearn.ensemble._stacking._BaseStacking._concatenate_predictions",
    "sklearn.ensemble._stacking._BaseStacking._method_name",
    "sklearn.ensemble._stacking._BaseStacking._sk_visual_block_with_final_estimator",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.ensemble._stacking._BaseStacking.get_feature_names_out",
    "sklearn.ensemble._stacking._BaseStacking.n_features_in_",
    "sklearn.ensemble._voting.VotingClassifier.$class_toplevel",
    "sklearn.ensemble._voting.VotingClassifier.__init__",
    "sklearn.ensemble._voting.VotingClassifier._check_voting",
    "sklearn.ensemble._voting.VotingClassifier.fit",
    "sklearn.ensemble._voting.VotingClassifier.get_feature_names_out",
    "sklearn.ensemble._voting.VotingRegressor.__init__",
    "sklearn.ensemble._voting.VotingRegressor.fit",
    "sklearn.ensemble._voting._BaseVoting._sk_visual_block_",
    "sklearn.ensemble._voting._BaseVoting.fit",
    "sklearn.ensemble._voting._BaseVoting.fit_transform",
    "sklearn.ensemble._voting._BaseVoting.n_features_in_",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.$class_toplevel",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.__init__",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost_discrete",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost_real",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._validate_estimator",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.decision_function",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_decision_function",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor.$class_toplevel",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor.__init__",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor._get_median_predict",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor._validate_estimator",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor.staged_predict",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.$class_toplevel",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.__init__",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.feature_importances_",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.fit",
    "sklearn.ensemble._weight_boosting._samme_proba",
    "sklearn.exceptions.UnsetMetadataPassedError.__init__",
    "sklearn.externals._arff.$toplevel",
    "sklearn.externals._arff.ArffDecoder._decode",
    "sklearn.externals._arff.ArffDecoder._decode_attribute",
    "sklearn.externals._arff.ArffDecoder._decode_relation",
    "sklearn.externals._arff.ArffEncoder.iter_encode",
    "sklearn.externals._arff.BadAttributeName.__init__",
    "sklearn.externals._arff.BadDataFormat.__init__",
    "sklearn.externals._arff.BadLayout.__init__",
    "sklearn.externals._arff.BadNominalFormatting.__init__",
    "sklearn.externals._arff.BadNominalValue.__init__",
    "sklearn.externals._arff.COOData.decode_rows",
    "sklearn.externals._arff.COOData.encode_data",
    "sklearn.externals._arff.DenseGeneratorData._decode_values",
    "sklearn.externals._arff.DenseGeneratorData.decode_rows",
    "sklearn.externals._arff.DenseGeneratorData.encode_data",
    "sklearn.externals._arff.EncodedNominalConversor.__call__",
    "sklearn.externals._arff.EncodedNominalConversor.__init__",
    "sklearn.externals._arff.LODGeneratorData.decode_rows",
    "sklearn.externals._arff.LODGeneratorData.encode_data",
    "sklearn.externals._arff.NominalConversor.__call__",
    "sklearn.externals._arff.NominalConversor.__init__",
    "sklearn.externals._arff._DataListMixin.decode_rows",
    "sklearn.externals._arff._escape_sub_callback",
    "sklearn.externals._arff._get_data_object_for_decoding",
    "sklearn.externals._arff._get_data_object_for_encoding",
    "sklearn.externals._arff._parse_values",
    "sklearn.externals._arff._unquote",
    "sklearn.externals._arff.dump",
    "sklearn.externals._arff.dumps",
    "sklearn.externals._arff.load",
    "sklearn.externals._arff.loads",
    "sklearn.externals._packaging._structures.$toplevel",
    "sklearn.externals._packaging.version.Version.__init__",
    "sklearn.externals._packaging.version._cmpkey",
    "sklearn.externals._packaging.version._parse_version_parts",
    "sklearn.externals._packaging.version.parse",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._add_iterable_element",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._transform",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.inverse_transform",
    "sklearn.feature_extraction._hash.FeatureHasher.$class_toplevel",
    "sklearn.feature_extraction._hash.FeatureHasher.transform",
    "sklearn.feature_extraction.image.PatchExtractor.$class_toplevel",
    "sklearn.feature_extraction.image.PatchExtractor.transform",
    "sklearn.feature_extraction.image._compute_n_patches",
    "sklearn.feature_extraction.image._extract_patches",
    "sklearn.feature_extraction.image._make_edges_3d",
    "sklearn.feature_extraction.image._mask_edges_weights",
    "sklearn.feature_extraction.image.extract_patches_2d",
    "sklearn.feature_extraction.image.reconstruct_from_patches_2d",
    "sklearn.feature_extraction.text.CountVectorizer.$class_toplevel",
    "sklearn.feature_extraction.text.CountVectorizer._count_vocab",
    "sklearn.feature_extraction.text.CountVectorizer._limit_features",
    "sklearn.feature_extraction.text.CountVectorizer._sort_features",
    "sklearn.feature_extraction.text.CountVectorizer.fit_transform",
    "sklearn.feature_extraction.text.CountVectorizer.inverse_transform",
    "sklearn.feature_extraction.text.CountVectorizer.transform",
    "sklearn.feature_extraction.text.HashingVectorizer.$class_toplevel",
    "sklearn.feature_extraction.text.HashingVectorizer._get_hasher",
    "sklearn.feature_extraction.text.HashingVectorizer.fit",
    "sklearn.feature_extraction.text.HashingVectorizer.transform",
    "sklearn.feature_extraction.text.TfidfTransformer.$class_toplevel",
    "sklearn.feature_extraction.text.TfidfVectorizer.$class_toplevel",
    "sklearn.feature_extraction.text.TfidfVectorizer.__init__",
    "sklearn.feature_extraction.text.TfidfVectorizer.fit",
    "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform",
    "sklearn.feature_extraction.text.TfidfVectorizer.idf_",
    "sklearn.feature_extraction.text.TfidfVectorizer.idf_@setter",
    "sklearn.feature_extraction.text.TfidfVectorizer.transform",
    "sklearn.feature_extraction.text._VectorizerMixin._char_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin._char_wb_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin._check_stop_words_consistency",
    "sklearn.feature_extraction.text._VectorizerMixin._check_vocabulary",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_ngram_range",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.feature_extraction.text._VectorizerMixin._word_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin.build_analyzer",
    "sklearn.feature_extraction.text._VectorizerMixin.build_preprocessor",
    "sklearn.feature_extraction.text._VectorizerMixin.build_tokenizer",
    "sklearn.feature_extraction.text._VectorizerMixin.decode",
    "sklearn.feature_extraction.text._check_stop_list",
    "sklearn.feature_extraction.text._make_int_array",
    "sklearn.feature_selection._base.SelectorMixin._transform",
    "sklearn.feature_selection._base.SelectorMixin.inverse_transform",
    "sklearn.feature_selection._base._get_feature_importances",
    "sklearn.feature_selection._from_model.SelectFromModel.$class_toplevel",
    "sklearn.feature_selection._from_model.SelectFromModel._get_support_mask",
    "sklearn.feature_selection._from_model.SelectFromModel.fit",
    "sklearn.feature_selection._from_model.SelectFromModel.n_features_in_",
    "sklearn.feature_selection._from_model.SelectFromModel.partial_fit",
    "sklearn.feature_selection._from_model._calculate_threshold",
    "sklearn.feature_selection._mutual_info._compute_mi_cc",
    "sklearn.feature_selection._mutual_info._compute_mi_cd",
    "sklearn.feature_selection._mutual_info._estimate_mi",
    "sklearn.feature_selection._mutual_info._iterate_columns",
    "sklearn.feature_selection._rfe.RFE.$class_toplevel",
    "sklearn.feature_selection._rfe.RFE._fit",
    "sklearn.feature_selection._rfe.RFECV.$class_toplevel",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.feature_selection._rfe._rfe_single_fit",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector.$class_toplevel",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector._get_best_new_feature_score",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector.fit",
    "sklearn.feature_selection._univariate_selection.GenericUnivariateSelect.$class_toplevel",
    "sklearn.feature_selection._univariate_selection.GenericUnivariateSelect.__init__",
    "sklearn.feature_selection._univariate_selection.SelectFdr.$class_toplevel",
    "sklearn.feature_selection._univariate_selection.SelectFdr.__init__",
    "sklearn.feature_selection._univariate_selection.SelectFpr.$class_toplevel",
    "sklearn.feature_selection._univariate_selection.SelectFpr.__init__",
    "sklearn.feature_selection._univariate_selection.SelectFwe.$class_toplevel",
    "sklearn.feature_selection._univariate_selection.SelectFwe.__init__",
    "sklearn.feature_selection._univariate_selection.SelectKBest.$class_toplevel",
    "sklearn.feature_selection._univariate_selection.SelectKBest.__init__",
    "sklearn.feature_selection._univariate_selection.SelectKBest._check_params",
    "sklearn.feature_selection._univariate_selection.SelectKBest._get_support_mask",
    "sklearn.feature_selection._univariate_selection.SelectPercentile.$class_toplevel",
    "sklearn.feature_selection._univariate_selection.SelectPercentile.__init__",
    "sklearn.feature_selection._univariate_selection.SelectPercentile._get_support_mask",
    "sklearn.feature_selection._univariate_selection.chi2",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.feature_selection._variance_threshold.VarianceThreshold.$class_toplevel",
    "sklearn.feature_selection._variance_threshold.VarianceThreshold.fit",
    "sklearn.gaussian_process._gpc.$toplevel",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.$class_toplevel",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.kernel_",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict_proba",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace._constrained_optimization",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace._posterior_mode",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.log_marginal_likelihood",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.predict_proba",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.$class_toplevel",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor._constrained_optimization",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.log_marginal_likelihood",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.sample_y",
    "sklearn.gaussian_process.kernels.CompoundKernel.__eq__",
    "sklearn.gaussian_process.kernels.CompoundKernel.theta@setter",
    "sklearn.gaussian_process.kernels.ConstantKernel.__call__",
    "sklearn.gaussian_process.kernels.DotProduct.__call__",
    "sklearn.gaussian_process.kernels.ExpSineSquared.__call__",
    "sklearn.gaussian_process.kernels.Exponentiation.__call__",
    "sklearn.gaussian_process.kernels.Hyperparameter.__new__",
    "sklearn.gaussian_process.kernels.Kernel.__add__",
    "sklearn.gaussian_process.kernels.Kernel.__eq__",
    "sklearn.gaussian_process.kernels.Kernel.__mul__",
    "sklearn.gaussian_process.kernels.Kernel.__pow__",
    "sklearn.gaussian_process.kernels.Kernel.__radd__",
    "sklearn.gaussian_process.kernels.Kernel.__repr__",
    "sklearn.gaussian_process.kernels.Kernel.__rmul__",
    "sklearn.gaussian_process.kernels.Kernel._check_bounds_params",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.gaussian_process.kernels.Kernel.set_params",
    "sklearn.gaussian_process.kernels.Kernel.theta@setter",
    "sklearn.gaussian_process.kernels.KernelOperator.theta@setter",
    "sklearn.gaussian_process.kernels.Matern.__call__",
    "sklearn.gaussian_process.kernels.Matern.__init__",
    "sklearn.gaussian_process.kernels.Matern.__repr__",
    "sklearn.gaussian_process.kernels.Product.__call__",
    "sklearn.gaussian_process.kernels.RBF.__call__",
    "sklearn.gaussian_process.kernels.RBF.__repr__",
    "sklearn.gaussian_process.kernels.RationalQuadratic.__call__",
    "sklearn.gaussian_process.kernels.WhiteKernel.__call__",
    "sklearn.gaussian_process.kernels._approx_fprime",
    "sklearn.gaussian_process.kernels._check_length_scale",
    "sklearn.impute.__getattr__",
    "sklearn.impute._base.MissingIndicator.$class_toplevel",
    "sklearn.impute._base.MissingIndicator._fit",
    "sklearn.impute._base.MissingIndicator._validate_input",
    "sklearn.impute._base.MissingIndicator.fit_transform",
    "sklearn.impute._base.MissingIndicator.transform",
    "sklearn.impute._base.SimpleImputer.$class_toplevel",
    "sklearn.impute._base.SimpleImputer.__init__",
    "sklearn.impute._base.SimpleImputer._dense_fit",
    "sklearn.impute._base.SimpleImputer._sparse_fit",
    "sklearn.impute._base.SimpleImputer._validate_input",
    "sklearn.impute._base.SimpleImputer.fit",
    "sklearn.impute._base.SimpleImputer.inverse_transform",
    "sklearn.impute._base.SimpleImputer.transform",
    "sklearn.impute._base._BaseImputer.$class_toplevel",
    "sklearn.impute._base._BaseImputer._concatenate_indicator",
    "sklearn.impute._base._BaseImputer._fit_indicator",
    "sklearn.impute._base._BaseImputer._transform_indicator",
    "sklearn.impute._base._check_inputs_dtype",
    "sklearn.impute._iterative.IterativeImputer.$class_toplevel",
    "sklearn.impute._iterative.IterativeImputer.__init__",
    "sklearn.impute._iterative.IterativeImputer._get_neighbor_feat_idx",
    "sklearn.impute._iterative.IterativeImputer._get_ordered_idx",
    "sklearn.impute._iterative.IterativeImputer._impute_one_feature",
    "sklearn.impute._iterative.IterativeImputer._initial_imputation",
    "sklearn.impute._iterative.IterativeImputer._validate_limit",
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.impute._iterative.IterativeImputer.transform",
    "sklearn.impute._knn.KNNImputer.$class_toplevel",
    "sklearn.impute._knn.KNNImputer.__init__",
    "sklearn.impute._knn.KNNImputer._calc_impute",
    "sklearn.impute._knn.KNNImputer.fit",
    "sklearn.impute._knn.KNNImputer.transform",
    "sklearn.impute._knn.KNNImputer.transform.process_chunk",
    "sklearn.inspection._partial_dependence._grid_from_X",
    "sklearn.inspection._partial_dependence._partial_dependence_brute",
    "sklearn.inspection._partial_dependence.partial_dependence",
    "sklearn.inspection._pd_utils._check_feature_names",
    "sklearn.inspection._pd_utils._get_feature_index",
    "sklearn.inspection._permutation_importance._calculate_permutation_scores",
    "sklearn.inspection._permutation_importance.permutation_importance",
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.from_estimator",
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.plot",
    "sklearn.inspection._plot.decision_boundary._check_boundary_response_method",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_ice_lines",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_two_way_partial_dependence",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.isotonic.IsotonicRegression.$class_toplevel",
    "sklearn.isotonic.IsotonicRegression.__getstate__",
    "sklearn.isotonic.IsotonicRegression.__setstate__",
    "sklearn.isotonic.IsotonicRegression._build_y",
    "sklearn.isotonic.IsotonicRegression._check_input_data_shape",
    "sklearn.isotonic.isotonic_regression",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.$class_toplevel",
    "sklearn.kernel_approximation.AdditiveChi2Sampler._transform_dense",
    "sklearn.kernel_approximation.AdditiveChi2Sampler._transform_sparse",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.fit",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.transform",
    "sklearn.kernel_approximation.Nystroem.$class_toplevel",
    "sklearn.kernel_approximation.Nystroem._get_kernel_params",
    "sklearn.kernel_approximation.Nystroem.fit",
    "sklearn.kernel_approximation.PolynomialCountSketch.$class_toplevel",
    "sklearn.kernel_approximation.PolynomialCountSketch.transform",
    "sklearn.kernel_approximation.RBFSampler.$class_toplevel",
    "sklearn.kernel_approximation.SkewedChi2Sampler.$class_toplevel",
    "sklearn.kernel_approximation.SkewedChi2Sampler.transform",
    "sklearn.kernel_ridge.KernelRidge.$class_toplevel",
    "sklearn.linear_model._base.LinearRegression.fit",
    "sklearn.linear_model._base._check_precomputed_gram_matrix",
    "sklearn.linear_model._base._deprecate_normalize",
    "sklearn.linear_model._base._rescale_data",
    "sklearn.linear_model._bayes.ARDRegression.$class_toplevel",
    "sklearn.linear_model._bayes.ARDRegression._update_sigma",
    "sklearn.linear_model._bayes.ARDRegression._update_sigma_woodbury",
    "sklearn.linear_model._bayes.ARDRegression.fit",
    "sklearn.linear_model._bayes.ARDRegression.fit.update_coeff",
    "sklearn.linear_model._bayes.ARDRegression.predict",
    "sklearn.linear_model._bayes.BayesianRidge.$class_toplevel",
    "sklearn.linear_model._bayes.BayesianRidge._log_marginal_likelihood",
    "sklearn.linear_model._bayes.BayesianRidge._update_coef_",
    "sklearn.linear_model._bayes.BayesianRidge.fit",
    "sklearn.linear_model._bayes._deprecate_n_iter",
    "sklearn.linear_model._coordinate_descent.ElasticNet.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.ElasticNet._decision_function",
    "sklearn.linear_model._coordinate_descent.ElasticNet.fit",
    "sklearn.linear_model._coordinate_descent.ElasticNetCV.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.ElasticNetCV._get_estimator",
    "sklearn.linear_model._coordinate_descent.Lasso.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.Lasso.__init__",
    "sklearn.linear_model._coordinate_descent.LassoCV.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.LassoCV.__init__",
    "sklearn.linear_model._coordinate_descent.LassoCV._get_estimator",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNetCV.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNetCV._get_estimator",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNetCV.fit",
    "sklearn.linear_model._coordinate_descent.MultiTaskLassoCV.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.MultiTaskLassoCV.__init__",
    "sklearn.linear_model._coordinate_descent.MultiTaskLassoCV._get_estimator",
    "sklearn.linear_model._coordinate_descent.MultiTaskLassoCV.fit",
    "sklearn.linear_model._coordinate_descent._alpha_grid",
    "sklearn.linear_model._coordinate_descent._path_residuals",
    "sklearn.linear_model._coordinate_descent._set_order",
    "sklearn.linear_model._coordinate_descent.enet_path",
    "sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.inner_solve",
    "sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.setup",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.__init__",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.line_search",
    "sklearn.linear_model._glm.glm.GammaRegressor.__init__",
    "sklearn.linear_model._glm.glm.GammaRegressor._get_loss",
    "sklearn.linear_model._glm.glm.PoissonRegressor.__init__",
    "sklearn.linear_model._glm.glm.PoissonRegressor._get_loss",
    "sklearn.linear_model._glm.glm.TweedieRegressor.$class_toplevel",
    "sklearn.linear_model._glm.glm.TweedieRegressor.__init__",
    "sklearn.linear_model._glm.glm.TweedieRegressor._get_loss",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.$class_toplevel",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor._get_loss",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.score",
    "sklearn.linear_model._huber.HuberRegressor.$class_toplevel",
    "sklearn.linear_model._huber.HuberRegressor.fit",
    "sklearn.linear_model._huber._huber_loss_and_gradient",
    "sklearn.linear_model._least_angle.Lars.$class_toplevel",
    "sklearn.linear_model._least_angle.Lars._fit",
    "sklearn.linear_model._least_angle.LarsCV.$class_toplevel",
    "sklearn.linear_model._least_angle.LarsCV.__init__",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._least_angle.LassoLars.$class_toplevel",
    "sklearn.linear_model._least_angle.LassoLarsIC.$class_toplevel",
    "sklearn.linear_model._least_angle.LassoLarsIC._estimate_noise_variance",
    "sklearn.linear_model._least_angle.LassoLarsIC.fit",
    "sklearn.linear_model._least_angle._lars_path_residues",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._least_angle.lars_path",
    "sklearn.linear_model._linear_loss.LinearModelLoss.gradient",
    "sklearn.linear_model._linear_loss.LinearModelLoss.gradient_hessian",
    "sklearn.linear_model._linear_loss.LinearModelLoss.gradient_hessian_product",
    "sklearn.linear_model._linear_loss.LinearModelLoss.gradient_hessian_product.hessp",
    "sklearn.linear_model._linear_loss.LinearModelLoss.loss_gradient",
    "sklearn.linear_model._linear_loss.LinearModelLoss.weight_intercept",
    "sklearn.linear_model._logistic.LogisticRegression.$class_toplevel",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegression.predict_proba",
    "sklearn.linear_model._logistic.LogisticRegressionCV.$class_toplevel",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._logistic._check_multi_class",
    "sklearn.linear_model._logistic._check_solver",
    "sklearn.linear_model._logistic._log_reg_scoring_path",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuit.$class_toplevel",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuit.fit",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.$class_toplevel",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.fit",
    "sklearn.linear_model._omp._cholesky_omp",
    "sklearn.linear_model._omp._gram_omp",
    "sklearn.linear_model._omp._omp_path_residues",
    "sklearn.linear_model._omp.orthogonal_mp",
    "sklearn.linear_model._omp.orthogonal_mp_gram",
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveClassifier.$class_toplevel",
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveClassifier.__init__",
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveClassifier.partial_fit",
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveRegressor.$class_toplevel",
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveRegressor.__init__",
    "sklearn.linear_model._perceptron.Perceptron.$class_toplevel",
    "sklearn.linear_model._perceptron.Perceptron.__init__",
    "sklearn.linear_model._quantile.QuantileRegressor.$class_toplevel",
    "sklearn.linear_model._quantile.QuantileRegressor.fit",
    "sklearn.linear_model._ransac.RANSACRegressor.$class_toplevel",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.linear_model._ridge.Ridge.__init__",
    "sklearn.linear_model._ridge.Ridge.fit",
    "sklearn.linear_model._ridge.RidgeCV.fit",
    "sklearn.linear_model._ridge.RidgeClassifier.$class_toplevel",
    "sklearn.linear_model._ridge.RidgeClassifier.__init__",
    "sklearn.linear_model._ridge.RidgeClassifier.fit",
    "sklearn.linear_model._ridge.RidgeClassifierCV.$class_toplevel",
    "sklearn.linear_model._ridge.RidgeClassifierCV.__init__",
    "sklearn.linear_model._ridge.RidgeClassifierCV.fit",
    "sklearn.linear_model._ridge._BaseRidge.$class_toplevel",
    "sklearn.linear_model._ridge._BaseRidge.fit",
    "sklearn.linear_model._ridge._BaseRidgeCV.$class_toplevel",
    "sklearn.linear_model._ridge._BaseRidgeCV.fit",
    "sklearn.linear_model._ridge._RidgeClassifierMixin._prepare_data",
    "sklearn.linear_model._ridge._RidgeClassifierMixin.predict",
    "sklearn.linear_model._ridge._RidgeGCV._compute_gram",
    "sklearn.linear_model._ridge._RidgeGCV._diag_dot",
    "sklearn.linear_model._ridge._RidgeGCV._eigen_decompose_covariance",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance_intercept",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance_no_intercept",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_gram",
    "sklearn.linear_model._ridge._RidgeGCV._solve_svd_design_matrix",
    "sklearn.linear_model._ridge._RidgeGCV._sparse_multidot_diag",
    "sklearn.linear_model._ridge._RidgeGCV._svd_decompose_design_matrix",
    "sklearn.linear_model._ridge._RidgeGCV.fit",
    "sklearn.linear_model._ridge._XT_CenterStackOp.__init__",
    "sklearn.linear_model._ridge._XT_CenterStackOp._matmat",
    "sklearn.linear_model._ridge._XT_CenterStackOp._matvec",
    "sklearn.linear_model._ridge._X_CenterStackOp.__init__",
    "sklearn.linear_model._ridge._X_CenterStackOp._matmat",
    "sklearn.linear_model._ridge._X_CenterStackOp._matvec",
    "sklearn.linear_model._ridge._X_CenterStackOp._transpose",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.linear_model._ridge._solve_cholesky",
    "sklearn.linear_model._ridge._solve_cholesky_kernel",
    "sklearn.linear_model._ridge._solve_lbfgs",
    "sklearn.linear_model._ridge._solve_lsqr",
    "sklearn.linear_model._ridge._solve_sparse_cg",
    "sklearn.linear_model._ridge._solve_svd",
    "sklearn.linear_model._sag.get_auto_step_size",
    "sklearn.linear_model._sag.sag_solver",
    "sklearn.linear_model._stochastic_gradient.BaseSGD.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.BaseSGD._allocate_parameter_mem",
    "sklearn.linear_model._stochastic_gradient.BaseSGD._get_loss_function",
    "sklearn.linear_model._stochastic_gradient.BaseSGD._make_validation_score_cb",
    "sklearn.linear_model._stochastic_gradient.BaseSGD._make_validation_split",
    "sklearn.linear_model._stochastic_gradient.BaseSGD._more_validate_params",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.__init__",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit_multiclass",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._partial_fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.partial_fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.__init__",
    "sklearn.linear_model._stochastic_gradient.SGDClassifier.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.SGDClassifier.__init__",
    "sklearn.linear_model._stochastic_gradient.SGDClassifier._check_proba",
    "sklearn.linear_model._stochastic_gradient.SGDClassifier.predict_proba",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM.__init__",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._partial_fit",
    "sklearn.linear_model._stochastic_gradient.SGDRegressor.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.SGDRegressor.__init__",
    "sklearn.linear_model._theil_sen.TheilSenRegressor.$class_toplevel",
    "sklearn.linear_model._theil_sen.TheilSenRegressor._check_subparams",
    "sklearn.linear_model._theil_sen.TheilSenRegressor.fit",
    "sklearn.linear_model._theil_sen._lstsq",
    "sklearn.linear_model._theil_sen._modified_weiszfeld_step",
    "sklearn.linear_model._theil_sen._spatial_median",
    "sklearn.linear_model.tests.test_huber.make_regression_with_outliers",
    "sklearn.linear_model.tests.test_huber.test_huber_and_sgd_same_results",
    "sklearn.linear_model.tests.test_huber.test_huber_better_r2_score",
    "sklearn.linear_model.tests.test_huber.test_huber_bool",
    "sklearn.linear_model.tests.test_huber.test_huber_equals_lr_for_high_epsilon",
    "sklearn.linear_model.tests.test_huber.test_huber_gradient",
    "sklearn.linear_model.tests.test_huber.test_huber_max_iter",
    "sklearn.linear_model.tests.test_huber.test_huber_sample_weights",
    "sklearn.linear_model.tests.test_huber.test_huber_scaling_invariant",
    "sklearn.linear_model.tests.test_huber.test_huber_sparse",
    "sklearn.linear_model.tests.test_huber.test_huber_warm_start",
    "sklearn.manifold._isomap.Isomap.$class_toplevel",
    "sklearn.manifold._isomap.Isomap._fit_transform",
    "sklearn.manifold._isomap.Isomap.reconstruction_error",
    "sklearn.manifold._isomap.Isomap.transform",
    "sklearn.manifold._locally_linear.LocallyLinearEmbedding.$class_toplevel",
    "sklearn.manifold._locally_linear.LocallyLinearEmbedding._fit_transform",
    "sklearn.manifold._locally_linear.LocallyLinearEmbedding.transform",
    "sklearn.manifold._locally_linear.barycenter_kneighbors_graph",
    "sklearn.manifold._locally_linear.barycenter_weights",
    "sklearn.manifold._locally_linear.locally_linear_embedding",
    "sklearn.manifold._locally_linear.null_space",
    "sklearn.manifold._mds.MDS.$class_toplevel",
    "sklearn.manifold._mds._smacof_single",
    "sklearn.manifold._mds.smacof",
    "sklearn.manifold._spectral_embedding.SpectralEmbedding.$class_toplevel",
    "sklearn.manifold._spectral_embedding.SpectralEmbedding._get_affinity_matrix",
    "sklearn.manifold._spectral_embedding._graph_connected_component",
    "sklearn.manifold._spectral_embedding._set_diag",
    "sklearn.manifold._spectral_embedding.spectral_embedding",
    "sklearn.manifold._t_sne.TSNE.$class_toplevel",
    "sklearn.manifold._t_sne.TSNE._check_params_vs_input",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.manifold._t_sne._gradient_descent",
    "sklearn.manifold._t_sne._kl_divergence",
    "sklearn.manifold._t_sne.trustworthiness",
    "sklearn.metrics._base._average_binary_score",
    "sklearn.metrics._base._average_multiclass_ovo_score",
    "sklearn.metrics._classification._check_set_wise_labels",
    "sklearn.metrics._classification._check_targets",
    "sklearn.metrics._classification.brier_score_loss",
    "sklearn.metrics._classification.class_likelihood_ratios",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._classification.cohen_kappa_score",
    "sklearn.metrics._classification.confusion_matrix",
    "sklearn.metrics._classification.hamming_loss",
    "sklearn.metrics._classification.hinge_loss",
    "sklearn.metrics._classification.jaccard_score",
    "sklearn.metrics._classification.log_loss",
    "sklearn.metrics._classification.matthews_corrcoef",
    "sklearn.metrics._classification.multilabel_confusion_matrix",
    "sklearn.metrics._classification.precision_recall_fscore_support",
    "sklearn.metrics._pairwise_distances_reduction._dispatcher.ArgKmin.compute",
    "sklearn.metrics._pairwise_distances_reduction._dispatcher.ArgKminClassMode.compute",
    "sklearn.metrics._pairwise_distances_reduction._dispatcher.BaseDistancesReductionDispatcher.valid_metrics",
    "sklearn.metrics._pairwise_distances_reduction._dispatcher.RadiusNeighbors.compute",
    "sklearn.metrics._pairwise_distances_reduction._dispatcher.sqeuclidean_row_norms",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.from_estimator",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.from_predictions",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.plot",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.from_predictions",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.from_predictions",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.plot",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_predictions",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.plot",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.from_predictions",
    "sklearn.metrics._ranking._binary_clf_curve",
    "sklearn.metrics._ranking._binary_roc_auc_score",
    "sklearn.metrics._ranking._check_dcg_target_type",
    "sklearn.metrics._ranking._dcg_sample_scores",
    "sklearn.metrics._ranking._multiclass_roc_auc_score",
    "sklearn.metrics._ranking._tie_averaged_dcg",
    "sklearn.metrics._ranking.auc",
    "sklearn.metrics._ranking.average_precision_score",
    "sklearn.metrics._ranking.average_precision_score._binary_uninterpolated_average_precision",
    "sklearn.metrics._ranking.coverage_error",
    "sklearn.metrics._ranking.det_curve",
    "sklearn.metrics._ranking.label_ranking_average_precision_score",
    "sklearn.metrics._ranking.label_ranking_loss",
    "sklearn.metrics._ranking.ndcg_score",
    "sklearn.metrics._ranking.precision_recall_curve",
    "sklearn.metrics._ranking.roc_auc_score",
    "sklearn.metrics._ranking.top_k_accuracy_score",
    "sklearn.metrics._regression._check_reg_targets",
    "sklearn.metrics._regression.d2_tweedie_score",
    "sklearn.metrics._regression.max_error",
    "sklearn.metrics._regression.mean_squared_log_error",
    "sklearn.metrics._regression.mean_tweedie_deviance",
    "sklearn.metrics._regression.r2_score",
    "sklearn.metrics._scorer._BaseScorer.__call__",
    "sklearn.metrics._scorer._BaseScorer._warn_overlap",
    "sklearn.metrics._scorer._BaseScorer.set_score_request",
    "sklearn.metrics._scorer._MultimetricScorer.get_metadata_routing",
    "sklearn.metrics._scorer._PassthroughScorer.get_metadata_routing",
    "sklearn.metrics._scorer._ThresholdScorer._score",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.metrics._scorer.check_scoring",
    "sklearn.metrics._scorer.get_scorer",
    "sklearn.metrics._scorer.make_scorer",
    "sklearn.metrics.cluster._bicluster._check_rows_and_columns",
    "sklearn.metrics.cluster._bicluster._pairwise_similarity",
    "sklearn.metrics.cluster._supervised._generalized_average",
    "sklearn.metrics.cluster._supervised.check_clusterings",
    "sklearn.metrics.cluster._supervised.contingency_matrix",
    "sklearn.metrics.cluster._unsupervised._silhouette_reduce",
    "sklearn.metrics.cluster._unsupervised.calinski_harabasz_score",
    "sklearn.metrics.cluster._unsupervised.check_number_of_labels",
    "sklearn.metrics.cluster._unsupervised.davies_bouldin_score",
    "sklearn.metrics.cluster._unsupervised.silhouette_samples",
    "sklearn.metrics.cluster._unsupervised.silhouette_score",
    "sklearn.metrics.cluster.tests.test_bicluster.test_consensus_score",
    "sklearn.metrics.pairwise._check_chunk_size",
    "sklearn.metrics.pairwise._dist_wrapper",
    "sklearn.metrics.pairwise._euclidean_distances",
    "sklearn.metrics.pairwise._euclidean_distances_upcast",
    "sklearn.metrics.pairwise._pairwise_callable",
    "sklearn.metrics.pairwise._parallel_pairwise",
    "sklearn.metrics.pairwise._precompute_metric_params",
    "sklearn.metrics.pairwise.additive_chi2_kernel",
    "sklearn.metrics.pairwise.check_paired_arrays",
    "sklearn.metrics.pairwise.check_pairwise_arrays",
    "sklearn.metrics.pairwise.euclidean_distances",
    "sklearn.metrics.pairwise.manhattan_distances",
    "sklearn.metrics.pairwise.paired_distances",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.metrics.pairwise.pairwise_distances_argmin",
    "sklearn.metrics.pairwise.pairwise_distances_chunked",
    "sklearn.mixture._base.BaseMixture.$class_toplevel",
    "sklearn.mixture._base.BaseMixture._estimate_log_prob_resp",
    "sklearn.mixture._base.BaseMixture._initialize_parameters",
    "sklearn.mixture._base.BaseMixture.fit_predict",
    "sklearn.mixture._base.BaseMixture.sample",
    "sklearn.mixture._base._check_shape",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture.$class_toplevel",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture.__init__",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._check_precision_parameters",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_log_prob",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_log_weights",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_means",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_weights",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_wishart_diag",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_wishart_full",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._set_parameters",
    "sklearn.mixture._bayesian_mixture._log_wishart_norm",
    "sklearn.mixture._gaussian_mixture.GaussianMixture.$class_toplevel",
    "sklearn.mixture._gaussian_mixture.GaussianMixture.__init__",
    "sklearn.mixture._gaussian_mixture.GaussianMixture._set_parameters",
    "sklearn.mixture._gaussian_mixture._check_precision_matrix",
    "sklearn.mixture._gaussian_mixture._check_precision_positivity",
    "sklearn.mixture._gaussian_mixture._check_weights",
    "sklearn.mixture._gaussian_mixture._compute_log_det_cholesky",
    "sklearn.mixture._gaussian_mixture._compute_precision_cholesky",
    "sklearn.mixture._gaussian_mixture._estimate_gaussian_covariances_diag",
    "sklearn.mixture._gaussian_mixture._estimate_gaussian_covariances_full",
    "sklearn.mixture._gaussian_mixture._estimate_gaussian_covariances_tied",
    "sklearn.mixture._gaussian_mixture._estimate_gaussian_parameters",
    "sklearn.mixture._gaussian_mixture._estimate_log_gaussian_prob",
    "sklearn.model_selection.__getattr__",
    "sklearn.model_selection._plot.LearningCurveDisplay.from_estimator",
    "sklearn.model_selection._plot.ValidationCurveDisplay.from_estimator",
    "sklearn.model_selection._plot._BaseCurveDisplay._plot_curve",
    "sklearn.model_selection._search.BaseSearchCV.$class_toplevel",
    "sklearn.model_selection._search.BaseSearchCV._check_refit_for_multimetric",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.model_selection._search.BaseSearchCV._format_results._store",
    "sklearn.model_selection._search.BaseSearchCV._run_search",
    "sklearn.model_selection._search.BaseSearchCV._select_best_index",
    "sklearn.model_selection._search.BaseSearchCV.fit",
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._search.BaseSearchCV.n_features_in_",
    "sklearn.model_selection._search.BaseSearchCV.score",
    "sklearn.model_selection._search.GridSearchCV.__init__",
    "sklearn.model_selection._search.GridSearchCV._run_search",
    "sklearn.model_selection._search.ParameterGrid.__getitem__",
    "sklearn.model_selection._search.ParameterGrid.__init__",
    "sklearn.model_selection._search.ParameterSampler.__init__",
    "sklearn.model_selection._search.ParameterSampler.__iter__",
    "sklearn.model_selection._search.ParameterSampler.__len__",
    "sklearn.model_selection._search.RandomizedSearchCV.$class_toplevel",
    "sklearn.model_selection._search.RandomizedSearchCV.__init__",
    "sklearn.model_selection._search.RandomizedSearchCV._run_search",
    "sklearn.model_selection._search._check_refit",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.$class_toplevel",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.__init__",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._check_input_parameters",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._more_tags",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.fit",
    "sklearn.model_selection._search_successive_halving.HalvingGridSearchCV.__init__",
    "sklearn.model_selection._search_successive_halving.HalvingGridSearchCV._generate_candidate_params",
    "sklearn.model_selection._search_successive_halving.HalvingRandomSearchCV.$class_toplevel",
    "sklearn.model_selection._search_successive_halving.HalvingRandomSearchCV.__init__",
    "sklearn.model_selection._search_successive_halving.HalvingRandomSearchCV._generate_candidate_params",
    "sklearn.model_selection._search_successive_halving._top_k",
    "sklearn.model_selection._split.GroupKFold.__init__",
    "sklearn.model_selection._split.GroupKFold._iter_test_indices",
    "sklearn.model_selection._split.GroupKFold.split",
    "sklearn.model_selection._split.GroupShuffleSplit.__init__",
    "sklearn.model_selection._split.GroupShuffleSplit._iter_indices",
    "sklearn.model_selection._split.GroupShuffleSplit.split",
    "sklearn.model_selection._split.KFold.__init__",
    "sklearn.model_selection._split.KFold._iter_test_indices",
    "sklearn.model_selection._split.LeaveOneGroupOut._iter_test_masks",
    "sklearn.model_selection._split.LeaveOneGroupOut.get_n_splits",
    "sklearn.model_selection._split.LeaveOneGroupOut.split",
    "sklearn.model_selection._split.LeaveOneOut._iter_test_indices",
    "sklearn.model_selection._split.LeaveOneOut.get_n_splits",
    "sklearn.model_selection._split.LeavePGroupsOut._iter_test_masks",
    "sklearn.model_selection._split.LeavePGroupsOut.get_n_splits",
    "sklearn.model_selection._split.LeavePGroupsOut.split",
    "sklearn.model_selection._split.LeavePOut._iter_test_indices",
    "sklearn.model_selection._split.LeavePOut.get_n_splits",
    "sklearn.model_selection._split.RepeatedKFold.__init__",
    "sklearn.model_selection._split.RepeatedStratifiedKFold.__init__",
    "sklearn.model_selection._split.ShuffleSplit.__init__",
    "sklearn.model_selection._split.ShuffleSplit._iter_indices",
    "sklearn.model_selection._split.StratifiedGroupKFold.__init__",
    "sklearn.model_selection._split.StratifiedGroupKFold._find_best_fold",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.model_selection._split.StratifiedKFold.__init__",
    "sklearn.model_selection._split.StratifiedKFold._iter_test_masks",
    "sklearn.model_selection._split.StratifiedKFold._make_test_folds",
    "sklearn.model_selection._split.StratifiedKFold.split",
    "sklearn.model_selection._split.StratifiedShuffleSplit.__init__",
    "sklearn.model_selection._split.StratifiedShuffleSplit._iter_indices",
    "sklearn.model_selection._split.StratifiedShuffleSplit.split",
    "sklearn.model_selection._split.TimeSeriesSplit.__init__",
    "sklearn.model_selection._split.TimeSeriesSplit.split",
    "sklearn.model_selection._split._BaseKFold.__init__",
    "sklearn.model_selection._split._BaseKFold.split",
    "sklearn.model_selection._split._CVIterableWrapper.__init__",
    "sklearn.model_selection._split._RepeatedSplits.__init__",
    "sklearn.model_selection._split._RepeatedSplits.split",
    "sklearn.model_selection._split._build_repr",
    "sklearn.model_selection._split._pprint",
    "sklearn.model_selection._split._validate_shuffle_split",
    "sklearn.model_selection._split.check_cv",
    "sklearn.model_selection._split.train_test_split",
    "sklearn.model_selection._validation._enforce_prediction_order",
    "sklearn.model_selection._validation._fit_and_predict",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._incremental_fit_estimator",
    "sklearn.model_selection._validation._insert_error_scores",
    "sklearn.model_selection._validation._score",
    "sklearn.model_selection._validation._translate_train_sizes",
    "sklearn.model_selection._validation._warn_or_raise_about_fit_failures",
    "sklearn.model_selection._validation.cross_val_predict",
    "sklearn.model_selection._validation.cross_validate",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.model_selection._validation.permutation_test_score",
    "sklearn.model_selection._validation.validation_curve",
    "sklearn.model_selection.tests.common.OneTimeSplitter.__init__",
    "sklearn.multiclass.OneVsOneClassifier.decision_function",
    "sklearn.multiclass.OneVsOneClassifier.fit",
    "sklearn.multiclass.OneVsOneClassifier.partial_fit",
    "sklearn.multiclass.OneVsRestClassifier.fit",
    "sklearn.multiclass.OneVsRestClassifier.partial_fit",
    "sklearn.multiclass.OneVsRestClassifier.predict",
    "sklearn.multiclass.OneVsRestClassifier.predict_proba",
    "sklearn.multiclass.OutputCodeClassifier.$class_toplevel",
    "sklearn.multiclass.OutputCodeClassifier.fit",
    "sklearn.multiclass._fit_binary",
    "sklearn.multiclass._predict_binary",
    "sklearn.multioutput.ClassifierChain.decision_function",
    "sklearn.multioutput.ClassifierChain.fit",
    "sklearn.multioutput.ClassifierChain.get_metadata_routing",
    "sklearn.multioutput.ClassifierChain.predict_proba",
    "sklearn.multioutput.MultiOutputClassifier.__init__",
    "sklearn.multioutput.MultiOutputClassifier.fit",
    "sklearn.multioutput.MultiOutputClassifier.score",
    "sklearn.multioutput.MultiOutputRegressor.__init__",
    "sklearn.multioutput.MultiOutputRegressor.partial_fit",
    "sklearn.multioutput.RegressorChain.fit",
    "sklearn.multioutput.RegressorChain.get_metadata_routing",
    "sklearn.multioutput._BaseChain.$class_toplevel",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.multioutput._BaseChain.predict",
    "sklearn.multioutput._MultiOutputEstimator.fit",
    "sklearn.multioutput._MultiOutputEstimator.get_metadata_routing",
    "sklearn.multioutput._MultiOutputEstimator.partial_fit",
    "sklearn.multioutput._MultiOutputEstimator.predict",
    "sklearn.naive_bayes.BernoulliNB.$class_toplevel",
    "sklearn.naive_bayes.BernoulliNB.__init__",
    "sklearn.naive_bayes.BernoulliNB._check_X",
    "sklearn.naive_bayes.BernoulliNB._check_X_y",
    "sklearn.naive_bayes.BernoulliNB._joint_log_likelihood",
    "sklearn.naive_bayes.CategoricalNB.$class_toplevel",
    "sklearn.naive_bayes.CategoricalNB.__init__",
    "sklearn.naive_bayes.CategoricalNB._count",
    "sklearn.naive_bayes.CategoricalNB._count._update_cat_count",
    "sklearn.naive_bayes.CategoricalNB._init_counters",
    "sklearn.naive_bayes.CategoricalNB._joint_log_likelihood",
    "sklearn.naive_bayes.CategoricalNB._update_feature_log_prob",
    "sklearn.naive_bayes.CategoricalNB._validate_n_categories",
    "sklearn.naive_bayes.CategoricalNB.fit",
    "sklearn.naive_bayes.CategoricalNB.partial_fit",
    "sklearn.naive_bayes.ComplementNB.__init__",
    "sklearn.naive_bayes.GaussianNB.$class_toplevel",
    "sklearn.naive_bayes.GaussianNB._joint_log_likelihood",
    "sklearn.naive_bayes.GaussianNB._partial_fit",
    "sklearn.naive_bayes.MultinomialNB.__init__",
    "sklearn.naive_bayes._BaseDiscreteNB.$class_toplevel",
    "sklearn.naive_bayes._BaseDiscreteNB._check_alpha",
    "sklearn.naive_bayes._BaseDiscreteNB._update_class_log_prior",
    "sklearn.naive_bayes._BaseDiscreteNB.fit",
    "sklearn.naive_bayes._BaseDiscreteNB.partial_fit",
    "sklearn.neighbors._base.$toplevel",
    "sklearn.neighbors._base.KNeighborsMixin._kneighbors_reduce_func",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph",
    "sklearn.neighbors._base.NeighborsBase.$class_toplevel",
    "sklearn.neighbors._base.NeighborsBase._check_algorithm_metric",
    "sklearn.neighbors._base.NeighborsBase._fit",
    "sklearn.neighbors._base.RadiusNeighborsMixin._radius_neighbors_reduce_func",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph",
    "sklearn.neighbors._base._check_precomputed",
    "sklearn.neighbors._base._get_weights",
    "sklearn.neighbors._base._is_sorted_by_data",
    "sklearn.neighbors._base._kneighbors_from_graph",
    "sklearn.neighbors._base._kneighbors_from_graph.extract",
    "sklearn.neighbors._base._radius_neighbors_from_graph",
    "sklearn.neighbors._base.sort_graph_by_row_values",
    "sklearn.neighbors._classification.KNeighborsClassifier.$class_toplevel",
    "sklearn.neighbors._classification.KNeighborsClassifier.__init__",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict_proba",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.$class_toplevel",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.__init__",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.fit",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba",
    "sklearn.neighbors._graph.KNeighborsTransformer.$class_toplevel",
    "sklearn.neighbors._graph.KNeighborsTransformer.__init__",
    "sklearn.neighbors._graph.RadiusNeighborsTransformer.$class_toplevel",
    "sklearn.neighbors._graph.RadiusNeighborsTransformer.__init__",
    "sklearn.neighbors._graph._check_params",
    "sklearn.neighbors._graph.kneighbors_graph",
    "sklearn.neighbors._graph.radius_neighbors_graph",
    "sklearn.neighbors._kde.KernelDensity.$class_toplevel",
    "sklearn.neighbors._kde.KernelDensity._choose_algorithm",
    "sklearn.neighbors._kde.KernelDensity.sample",
    "sklearn.neighbors._lof.LocalOutlierFactor.$class_toplevel",
    "sklearn.neighbors._lof.LocalOutlierFactor.__init__",
    "sklearn.neighbors._lof.LocalOutlierFactor._check_novelty_decision_function",
    "sklearn.neighbors._lof.LocalOutlierFactor._check_novelty_fit_predict",
    "sklearn.neighbors._lof.LocalOutlierFactor._check_novelty_predict",
    "sklearn.neighbors._lof.LocalOutlierFactor._check_novelty_score_samples",
    "sklearn.neighbors._lof.LocalOutlierFactor.fit",
    "sklearn.neighbors._lof.LocalOutlierFactor.score_samples",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.$class_toplevel",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._initialize",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.$class_toplevel",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.fit",
    "sklearn.neighbors._regression.KNeighborsRegressor.$class_toplevel",
    "sklearn.neighbors._regression.KNeighborsRegressor.__init__",
    "sklearn.neighbors._regression.KNeighborsRegressor.predict",
    "sklearn.neighbors._regression.RadiusNeighborsRegressor.$class_toplevel",
    "sklearn.neighbors._regression.RadiusNeighborsRegressor.__init__",
    "sklearn.neighbors._regression.RadiusNeighborsRegressor.predict",
    "sklearn.neighbors._unsupervised.NearestNeighbors.__init__",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_dbscan",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_isomap",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_kneighbors_regressor",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_lof_novelty_false",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_lof_novelty_true",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_spectral_clustering",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_spectral_embedding",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_tsne",
    "sklearn.neural_network._base.inplace_softmax",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron.$class_toplevel",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._backprop",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._check_solver",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_lbfgs",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._forward_pass",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._forward_pass_fast",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._initialize",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._unpack",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier.__init__",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier._validate_input",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier.partial_fit",
    "sklearn.neural_network._multilayer_perceptron.MLPRegressor.__init__",
    "sklearn.neural_network._rbm.BernoulliRBM.$class_toplevel",
    "sklearn.neural_network._rbm.BernoulliRBM.fit",
    "sklearn.neural_network._stochastic_optimizers.AdamOptimizer.__init__",
    "sklearn.neural_network._stochastic_optimizers.SGDOptimizer.__init__",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_adam_optimizer",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_base_optimizer",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_nesterovs_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_no_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_trigger_stopping",
    "sklearn.pipeline.FeatureUnion.__getitem__",
    "sklearn.pipeline.FeatureUnion._iter",
    "sklearn.pipeline.FeatureUnion._parallel_func",
    "sklearn.pipeline.FeatureUnion._sk_visual_block_",
    "sklearn.pipeline.FeatureUnion._update_transformer_list",
    "sklearn.pipeline.FeatureUnion._validate_transformer_weights",
    "sklearn.pipeline.FeatureUnion._validate_transformers",
    "sklearn.pipeline.FeatureUnion.get_feature_names_out",
    "sklearn.pipeline.FeatureUnion.set_output",
    "sklearn.pipeline.FeatureUnion.transform",
    "sklearn.pipeline.Pipeline.$class_toplevel",
    "sklearn.pipeline.Pipeline.__getitem__",
    "sklearn.pipeline.Pipeline._check_fit_params",
    "sklearn.pipeline.Pipeline._fit",
    "sklearn.pipeline.Pipeline._iter",
    "sklearn.pipeline.Pipeline._sk_visual_block_",
    "sklearn.pipeline.Pipeline._validate_steps",
    "sklearn.pipeline.Pipeline.get_feature_names_out",
    "sklearn.pipeline.Pipeline.inverse_transform",
    "sklearn.pipeline._name_estimators",
    "sklearn.pipeline.make_pipeline",
    "sklearn.pipeline.make_union",
    "sklearn.preprocessing._data.KernelCenterer.fit",
    "sklearn.preprocessing._data.KernelCenterer.transform",
    "sklearn.preprocessing._data.MinMaxScaler.partial_fit",
    "sklearn.preprocessing._data.Normalizer.$class_toplevel",
    "sklearn.preprocessing._data.PowerTransformer.$class_toplevel",
    "sklearn.preprocessing._data.PowerTransformer._box_cox_optimize",
    "sklearn.preprocessing._data.PowerTransformer._check_input",
    "sklearn.preprocessing._data.PowerTransformer._fit",
    "sklearn.preprocessing._data.PowerTransformer.inverse_transform",
    "sklearn.preprocessing._data.PowerTransformer.transform",
    "sklearn.preprocessing._data.QuantileTransformer.$class_toplevel",
    "sklearn.preprocessing._data.QuantileTransformer._check_inputs",
    "sklearn.preprocessing._data.QuantileTransformer._sparse_fit",
    "sklearn.preprocessing._data.QuantileTransformer._transform",
    "sklearn.preprocessing._data.QuantileTransformer._transform_col",
    "sklearn.preprocessing._data.QuantileTransformer.fit",
    "sklearn.preprocessing._data.RobustScaler.fit",
    "sklearn.preprocessing._data.StandardScaler.inverse_transform",
    "sklearn.preprocessing._data.StandardScaler.partial_fit",
    "sklearn.preprocessing._data.StandardScaler.transform",
    "sklearn.preprocessing._data.binarize",
    "sklearn.preprocessing._data.maxabs_scale",
    "sklearn.preprocessing._data.minmax_scale",
    "sklearn.preprocessing._data.normalize",
    "sklearn.preprocessing._data.power_transform",
    "sklearn.preprocessing._data.quantile_transform",
    "sklearn.preprocessing._data.robust_scale",
    "sklearn.preprocessing._data.scale",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.$class_toplevel",
    "sklearn.preprocessing._discretization.KBinsDiscretizer._validate_n_bins",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.inverse_transform",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.transform",
    "sklearn.preprocessing._encoders.OneHotEncoder.$class_toplevel",
    "sklearn.preprocessing._encoders.OneHotEncoder._check_get_feature_name_combiner",
    "sklearn.preprocessing._encoders.OneHotEncoder._compute_n_features_outs",
    "sklearn.preprocessing._encoders.OneHotEncoder._map_drop_idx_to_infrequent",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._encoders.OneHotEncoder.get_feature_names_out",
    "sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform",
    "sklearn.preprocessing._encoders.OneHotEncoder.transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.$class_toplevel",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.transform",
    "sklearn.preprocessing._encoders._BaseEncoder._check_X",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.preprocessing._encoders._BaseEncoder._fit_infrequent_category_mapping",
    "sklearn.preprocessing._encoders._BaseEncoder._identify_infrequent",
    "sklearn.preprocessing._encoders._BaseEncoder._map_infrequent_categories",
    "sklearn.preprocessing._encoders._BaseEncoder._transform",
    "sklearn.preprocessing._function_transformer.FunctionTransformer.$class_toplevel",
    "sklearn.preprocessing._function_transformer.FunctionTransformer._check_inverse_transform",
    "sklearn.preprocessing._function_transformer.FunctionTransformer.get_feature_names_out",
    "sklearn.preprocessing._function_transformer.FunctionTransformer.set_output",
    "sklearn.preprocessing._label.LabelBinarizer.fit",
    "sklearn.preprocessing._label.LabelBinarizer.transform",
    "sklearn.preprocessing._label.LabelEncoder.inverse_transform",
    "sklearn.preprocessing._label.MultiLabelBinarizer._build_cache",
    "sklearn.preprocessing._label.MultiLabelBinarizer._transform",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit_transform",
    "sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform",
    "sklearn.preprocessing._label._inverse_binarize_multiclass",
    "sklearn.preprocessing._label._inverse_binarize_thresholding",
    "sklearn.preprocessing._label.label_binarize",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.$class_toplevel",
    "sklearn.preprocessing._polynomial.PolynomialFeatures._combinations",
    "sklearn.preprocessing._polynomial.PolynomialFeatures._num_combinations",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.fit",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform",
    "sklearn.preprocessing._polynomial.SplineTransformer.$class_toplevel",
    "sklearn.preprocessing._polynomial.SplineTransformer._get_base_knot_positions",
    "sklearn.preprocessing._polynomial.SplineTransformer.fit",
    "sklearn.preprocessing._polynomial.SplineTransformer.get_feature_names_out",
    "sklearn.preprocessing._polynomial.SplineTransformer.transform",
    "sklearn.preprocessing._polynomial._create_expansion",
    "sklearn.preprocessing._target_encoder.TargetEncoder.$class_toplevel",
    "sklearn.preprocessing._target_encoder.TargetEncoder._fit_encodings_all",
    "sklearn.preprocessing._target_encoder.TargetEncoder._transform_X_ordinal",
    "sklearn.preprocessing._target_encoder.TargetEncoder.fit_transform",
    "sklearn.preprocessing._target_encoder.TargetEncoder.transform",
    "sklearn.random_projection.BaseRandomProjection.$class_toplevel",
    "sklearn.random_projection.BaseRandomProjection.fit",
    "sklearn.random_projection.GaussianRandomProjection.__init__",
    "sklearn.random_projection.SparseRandomProjection.$class_toplevel",
    "sklearn.random_projection.SparseRandomProjection.__init__",
    "sklearn.random_projection._check_density",
    "sklearn.random_projection._check_input_size",
    "sklearn.random_projection._sparse_random_matrix",
    "sklearn.random_projection.johnson_lindenstrauss_min_dim",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.$class_toplevel",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation._build_graph",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation._get_kernel",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.fit",
    "sklearn.semi_supervised._label_propagation.LabelPropagation.__init__",
    "sklearn.semi_supervised._label_propagation.LabelPropagation._build_graph",
    "sklearn.semi_supervised._label_propagation.LabelPropagation.fit",
    "sklearn.semi_supervised._label_propagation.LabelSpreading.$class_toplevel",
    "sklearn.semi_supervised._label_propagation.LabelSpreading.__init__",
    "sklearn.semi_supervised._label_propagation.LabelSpreading._build_graph",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.$class_toplevel",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.fit",
    "sklearn.svm._base.BaseLibSVM.$class_toplevel",
    "sklearn.svm._base.BaseLibSVM.__init__",
    "sklearn.svm._base.BaseLibSVM._dense_fit",
    "sklearn.svm._base.BaseLibSVM._dense_predict",
    "sklearn.svm._base.BaseLibSVM._validate_for_predict",
    "sklearn.svm._base.BaseLibSVM.coef_",
    "sklearn.svm._base.BaseLibSVM.fit",
    "sklearn.svm._base.BaseSVC.$class_toplevel",
    "sklearn.svm._base.BaseSVC.__init__",
    "sklearn.svm._base.BaseSVC._check_proba",
    "sklearn.svm._base.BaseSVC._validate_targets",
    "sklearn.svm._base.BaseSVC.predict",
    "sklearn.svm._base.BaseSVC.predict_proba",
    "sklearn.svm._base._fit_liblinear",
    "sklearn.svm._base._get_liblinear_solver_type",
    "sklearn.svm._base._one_vs_one_coef",
    "sklearn.svm._bounds.l1_min_c",
    "sklearn.svm._classes.LinearSVC.$class_toplevel",
    "sklearn.svm._classes.LinearSVR.$class_toplevel",
    "sklearn.svm._classes.NuSVC.$class_toplevel",
    "sklearn.svm._classes.NuSVC.__init__",
    "sklearn.svm._classes.NuSVR.__init__",
    "sklearn.svm._classes.OneClassSVM.__init__",
    "sklearn.svm._classes.OneClassSVM.fit",
    "sklearn.svm._classes.OneClassSVM.predict",
    "sklearn.svm._classes.SVC.__init__",
    "sklearn.svm._classes.SVR.__init__",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_csc",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_csr",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_multi_output",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_precomputed",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_precomputed_kernel_unchanged",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_sample_weights",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_singular_kernel",
    "sklearn.tree._classes.BaseDecisionTree.$class_toplevel",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._classes.BaseDecisionTree._validate_X_predict",
    "sklearn.tree._classes.BaseDecisionTree.predict",
    "sklearn.tree._classes.DecisionTreeClassifier.$class_toplevel",
    "sklearn.tree._classes.DecisionTreeClassifier.__init__",
    "sklearn.tree._classes.DecisionTreeClassifier.fit",
    "sklearn.tree._classes.DecisionTreeClassifier.predict_log_proba",
    "sklearn.tree._classes.DecisionTreeClassifier.predict_proba",
    "sklearn.tree._classes.DecisionTreeRegressor.$class_toplevel",
    "sklearn.tree._classes.DecisionTreeRegressor.__init__",
    "sklearn.tree._classes.DecisionTreeRegressor.fit",
    "sklearn.tree._classes.ExtraTreeClassifier.__init__",
    "sklearn.tree._classes.ExtraTreeRegressor.__init__",
    "sklearn.tree._export.$toplevel",
    "sklearn.tree._export._BaseTreeExporter.get_color",
    "sklearn.tree._export._BaseTreeExporter.get_fill_color",
    "sklearn.tree._export._BaseTreeExporter.node_to_str",
    "sklearn.tree._export._DOTTreeExporter.__init__",
    "sklearn.tree._export._DOTTreeExporter.export",
    "sklearn.tree._export._DOTTreeExporter.recurse",
    "sklearn.tree._export._MPLTreeExporter.__init__",
    "sklearn.tree._export._MPLTreeExporter._make_tree",
    "sklearn.tree._export.export_graphviz",
    "sklearn.tree._export.export_text",
    "sklearn.tree._export.export_text._add_leaf",
    "sklearn.tree._export.export_text.print_tree_recurse",
    "sklearn.tree._export.plot_tree",
    "sklearn.tree._reingold_tilford.DrawTree.$class_toplevel",
    "sklearn.tree._reingold_tilford.DrawTree.__init__",
    "sklearn.tree._reingold_tilford.buchheim",
    "sklearn.tree._reingold_tilford.execute_shifts",
    "sklearn.utils._approximate_mode",
    "sklearn.utils._array_api.$toplevel",
    "sklearn.utils._array_api._ArrayAPIWrapper.take",
    "sklearn.utils._array_api._NumPyAPIWrapper.reshape",
    "sklearn.utils._array_api._check_array_api_dispatch",
    "sklearn.utils._array_api._check_device_cpu",
    "sklearn.utils._array_api._isdtype_single",
    "sklearn.utils._array_api.get_namespace",
    "sklearn.utils._array_indexing",
    "sklearn.utils._available_if._AvailableIfDescriptor.__get__",
    "sklearn.utils._available_if.available_if",
    "sklearn.utils._bunch.Bunch.__getattr__",
    "sklearn.utils._bunch.Bunch.__getitem__",
    "sklearn.utils._bunch.Bunch.__init__",
    "sklearn.utils._chunk_generator",
    "sklearn.utils._determine_key_type",
    "sklearn.utils._encode._NaNCounter.__init__",
    "sklearn.utils._encode._NaNCounter.__missing__",
    "sklearn.utils._encode._check_unknown",
    "sklearn.utils._encode._encode",
    "sklearn.utils._encode._get_counts",
    "sklearn.utils._encode._map_to_integer",
    "sklearn.utils._encode._nandict.__init__",
    "sklearn.utils._encode._nandict.__missing__",
    "sklearn.utils._encode._unique_np",
    "sklearn.utils._encode._unique_python",
    "sklearn.utils._estimator_html_repr.$toplevel",
    "sklearn.utils._estimator_html_repr._get_visual_block",
    "sklearn.utils._estimator_html_repr._write_estimator_html",
    "sklearn.utils._estimator_html_repr.estimator_html_repr",
    "sklearn.utils._get_column_indices",
    "sklearn.utils._is_pandas_na",
    "sklearn.utils._joblib.$toplevel",
    "sklearn.utils._list_indexing",
    "sklearn.utils._mask._get_dense_mask",
    "sklearn.utils._metadata_requests.$toplevel",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests.MetadataRequest.__init__",
    "sklearn.utils._metadata_requests.MetadataRouter._get_param_names",
    "sklearn.utils._metadata_requests.MetadataRouter._route_params",
    "sklearn.utils._metadata_requests.MetadataRouter.add_self_request",
    "sklearn.utils._metadata_requests.MetadataRouter.validate_metadata",
    "sklearn.utils._metadata_requests.MethodMapping._serialize",
    "sklearn.utils._metadata_requests.MethodMapping.add",
    "sklearn.utils._metadata_requests.MethodMapping.from_str",
    "sklearn.utils._metadata_requests.MethodMetadataRequest._get_param_names",
    "sklearn.utils._metadata_requests.MethodMetadataRequest._route_params",
    "sklearn.utils._metadata_requests.MethodMetadataRequest.add_request",
    "sklearn.utils._metadata_requests.RequestMethod.__get__",
    "sklearn.utils._metadata_requests.RequestMethod.__get__.func",
    "sklearn.utils._metadata_requests._MetadataRequester.__init_subclass__",
    "sklearn.utils._metadata_requests._MetadataRequester._build_request_for_signature",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils._metadata_requests.get_routing_for_object",
    "sklearn.utils._metadata_requests.process_routing",
    "sklearn.utils._mocking.$toplevel",
    "sklearn.utils._mocking.ArraySlicingWrapper.__getitem__",
    "sklearn.utils._mocking.CheckingClassifier.decision_function",
    "sklearn.utils._mocking.CheckingClassifier.fit",
    "sklearn.utils._mocking.CheckingClassifier.predict_proba",
    "sklearn.utils._mocking.MockDataFrame.__eq__",
    "sklearn.utils._mocking.MockDataFrame.__init__",
    "sklearn.utils._mocking.MockDataFrame.take",
    "sklearn.utils._pandas_indexing",
    "sklearn.utils._param_validation.HasMethods.__init__",
    "sklearn.utils._param_validation.HasMethods.__str__",
    "sklearn.utils._param_validation.Interval.__init__",
    "sklearn.utils._param_validation.Interval._check_params",
    "sklearn.utils._param_validation.MissingValues.__init__",
    "sklearn.utils._param_validation.MissingValues.__str__",
    "sklearn.utils._param_validation.Options.__init__",
    "sklearn.utils._param_validation.StrOptions.__init__",
    "sklearn.utils._param_validation._Booleans.__init__",
    "sklearn.utils._param_validation._Booleans.__str__",
    "sklearn.utils._param_validation._CVObjects.__init__",
    "sklearn.utils._param_validation._CVObjects.__str__",
    "sklearn.utils._param_validation._InstancesOf.__init__",
    "sklearn.utils._param_validation._RandomStates.__init__",
    "sklearn.utils._param_validation._RandomStates.__str__",
    "sklearn.utils._param_validation._VerboseHelper.__init__",
    "sklearn.utils._param_validation._VerboseHelper.__str__",
    "sklearn.utils._param_validation.generate_valid_param",
    "sklearn.utils._param_validation.make_constraint",
    "sklearn.utils._param_validation.validate_parameter_constraints",
    "sklearn.utils._param_validation.validate_params.decorator.wrapper",
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_from_predictions_params",
    "sklearn.utils._plotting._validate_score_name",
    "sklearn.utils._pprint.KeyValTuple.__repr__",
    "sklearn.utils._pprint._EstimatorPrettyPrinter.__init__",
    "sklearn.utils._response._get_response_values",
    "sklearn.utils._response._get_response_values_binary",
    "sklearn.utils._safe_assign",
    "sklearn.utils._safe_indexing",
    "sklearn.utils._set_output._SetOutputMixin.__init_subclass__",
    "sklearn.utils._set_output._auto_wrap_is_configured",
    "sklearn.utils._set_output._get_output_config",
    "sklearn.utils._set_output._safe_set_output",
    "sklearn.utils._set_output._wrap_in_pandas_container",
    "sklearn.utils._set_output._wrap_method_output.wrapped",
    "sklearn.utils._show_versions.show_versions",
    "sklearn.utils._tags._safe_tags",
    "sklearn.utils._testing.$toplevel",
    "sklearn.utils._testing.MinimalClassifier.predict_proba",
    "sklearn.utils._testing._IgnoreWarnings.__call__.wrapper",
    "sklearn.utils._testing._IgnoreWarnings.__enter__",
    "sklearn.utils._testing._IgnoreWarnings.__exit__",
    "sklearn.utils._testing._Raises.__exit__",
    "sklearn.utils._testing._convert_container",
    "sklearn.utils._testing._create_aligned_memmap_backed_arrays",
    "sklearn.utils._testing._create_memmap_backed_array",
    "sklearn.utils._testing._get_func_name",
    "sklearn.utils._testing.assert_allclose_dense_sparse",
    "sklearn.utils._testing.assert_no_warnings",
    "sklearn.utils._testing.assert_raise_message",
    "sklearn.utils._testing.assert_run_python_script",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils._testing.check_skip_network",
    "sklearn.utils._testing.ignore_warnings",
    "sklearn.utils._testing.raises",
    "sklearn.utils._to_object_array",
    "sklearn.utils.axis0_safe_slice",
    "sklearn.utils.check_matplotlib_support",
    "sklearn.utils.check_pandas_support",
    "sklearn.utils.class_weight.compute_class_weight",
    "sklearn.utils.class_weight.compute_sample_weight",
    "sklearn.utils.deprecation.deprecated._decorate_class.wrapped",
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.discovery.all_functions",
    "sklearn.utils.estimator_checks._NotAnArray.__array_function__",
    "sklearn.utils.estimator_checks._apply_on_subsets",
    "sklearn.utils.estimator_checks._check_generated_dataframe",
    "sklearn.utils.estimator_checks._check_transformer",
    "sklearn.utils.estimator_checks._construct_instance",
    "sklearn.utils.estimator_checks._enforce_estimator_tags_X",
    "sklearn.utils.estimator_checks._maybe_skip.wrapped",
    "sklearn.utils.estimator_checks._regression_dataset",
    "sklearn.utils.estimator_checks.check_array_api_input",
    "sklearn.utils.estimator_checks.check_classifier_multioutput",
    "sklearn.utils.estimator_checks.check_classifiers_classes",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_decision_function",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_representation_invariance",
    "sklearn.utils.estimator_checks.check_classifiers_predictions",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.estimator_checks.check_clustering",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_decision_proba_consistency",
    "sklearn.utils.estimator_checks.check_dict_unchanged",
    "sklearn.utils.estimator_checks.check_dont_overwrite_parameters",
    "sklearn.utils.estimator_checks.check_dtype_object",
    "sklearn.utils.estimator_checks.check_estimator",
    "sklearn.utils.estimator_checks.check_estimator_get_tags_default_keys",
    "sklearn.utils.estimator_checks.check_estimators_data_not_an_array",
    "sklearn.utils.estimator_checks.check_estimators_dtypes",
    "sklearn.utils.estimator_checks.check_estimators_nan_inf",
    "sklearn.utils.estimator_checks.check_estimators_partial_fit_n_features",
    "sklearn.utils.estimator_checks.check_fit2d_1feature",
    "sklearn.utils.estimator_checks.check_fit2d_1sample",
    "sklearn.utils.estimator_checks.check_fit2d_predict1d",
    "sklearn.utils.estimator_checks.check_fit_check_is_fitted",
    "sklearn.utils.estimator_checks.check_fit_idempotent",
    "sklearn.utils.estimator_checks.check_fit_score_takes_y",
    "sklearn.utils.estimator_checks.check_global_ouptut_transform_pandas",
    "sklearn.utils.estimator_checks.check_methods_sample_order_invariance",
    "sklearn.utils.estimator_checks.check_methods_subset_invariance",
    "sklearn.utils.estimator_checks.check_n_features_in_after_fitting",
    "sklearn.utils.estimator_checks.check_no_attributes_set_in_init",
    "sklearn.utils.estimator_checks.check_outlier_contamination",
    "sklearn.utils.estimator_checks.check_outlier_corruption",
    "sklearn.utils.estimator_checks.check_param_validation",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.estimator_checks.check_pipeline_consistency",
    "sklearn.utils.estimator_checks.check_regressors_int",
    "sklearn.utils.estimator_checks.check_regressors_no_decision_function",
    "sklearn.utils.estimator_checks.check_regressors_train",
    "sklearn.utils.estimator_checks.check_sample_weights_invariance",
    "sklearn.utils.estimator_checks.check_sample_weights_not_an_array",
    "sklearn.utils.estimator_checks.check_sample_weights_pandas_series",
    "sklearn.utils.estimator_checks.check_set_output_transform_pandas",
    "sklearn.utils.estimator_checks.check_set_params",
    "sklearn.utils.estimator_checks.check_supervised_y_2d",
    "sklearn.utils.estimator_checks.check_transformer_data_not_an_array",
    "sklearn.utils.estimator_checks.check_transformer_general",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out_pandas",
    "sklearn.utils.estimator_checks.check_transformer_preserve_dtypes",
    "sklearn.utils.estimator_checks.parametrize_with_checks",
    "sklearn.utils.extmath._deterministic_vector_sign_flip",
    "sklearn.utils.extmath._incremental_mean_and_var",
    "sklearn.utils.extmath._randomized_eigsh",
    "sklearn.utils.extmath.cartesian",
    "sklearn.utils.extmath.make_nonnegative",
    "sklearn.utils.extmath.randomized_range_finder",
    "sklearn.utils.extmath.randomized_svd",
    "sklearn.utils.extmath.safe_sparse_dot",
    "sklearn.utils.extmath.svd_flip",
    "sklearn.utils.extmath.weighted_mode",
    "sklearn.utils.gen_batches",
    "sklearn.utils.gen_even_slices",
    "sklearn.utils.graph._fix_connected_components",
    "sklearn.utils.graph.single_source_shortest_path_length",
    "sklearn.utils.indices_to_mask",
    "sklearn.utils.metaestimators._BaseComposition._get_params",
    "sklearn.utils.metaestimators._BaseComposition._replace_estimator",
    "sklearn.utils.metaestimators._BaseComposition._set_params",
    "sklearn.utils.metaestimators._BaseComposition._validate_names",
    "sklearn.utils.metaestimators._safe_split",
    "sklearn.utils.multiclass._check_partial_fit_first_call",
    "sklearn.utils.multiclass._ovr_decision_function",
    "sklearn.utils.multiclass._unique_multiclass",
    "sklearn.utils.multiclass.check_classification_targets",
    "sklearn.utils.multiclass.class_distribution",
    "sklearn.utils.multiclass.is_multilabel",
    "sklearn.utils.multiclass.type_of_target",
    "sklearn.utils.multiclass.unique_labels",
    "sklearn.utils.optimize._line_search_wolfe12",
    "sklearn.utils.parallel.Parallel.__call__",
    "sklearn.utils.parallel.delayed.delayed_function",
    "sklearn.utils.random._random_choice_csc",
    "sklearn.utils.resample",
    "sklearn.utils.sparsefuncs._min_or_max_axis",
    "sklearn.utils.sparsefuncs._raise_error_wrong_axis",
    "sklearn.utils.sparsefuncs._raise_typeerror",
    "sklearn.utils.sparsefuncs._sparse_min_or_max",
    "sklearn.utils.sparsefuncs.count_nonzero",
    "sklearn.utils.sparsefuncs.csc_median_axis_0",
    "sklearn.utils.sparsefuncs.incr_mean_variance_axis",
    "sklearn.utils.sparsefuncs.inplace_swap_row_csc",
    "sklearn.utils.sparsefuncs.inplace_swap_row_csr",
    "sklearn.utils.stats._weighted_percentile",
    "sklearn.utils.tests.test_estimator_checks.BadBalancedWeightsClassifier.fit",
    "sklearn.utils.tests.test_estimator_checks.EstimatorMissingDefaultTags._get_tags",
    "sklearn.utils.tests.test_estimator_checks.HasMutableParameters.__init__",
    "sklearn.utils.tests.test_estimator_checks.LargeSparseNotSupportedClassifier.fit",
    "sklearn.utils.tests.test_estimator_checks.ModifiesAnotherValue.set_params",
    "sklearn.utils.tests.test_estimator_checks.ModifiesValueInsteadOfRaisingError.set_params",
    "sklearn.utils.tests.test_estimator_checks.NoSampleWeightPandasSeriesType.fit",
    "sklearn.utils.tests.test_estimator_checks.NoSparseClassifier.fit",
    "sklearn.utils.tests.test_estimator_checks.NotInvariantSampleOrder.predict",
    "sklearn.utils.tests.test_estimator_checks.OneClassSampleErrorClassifier.fit",
    "sklearn.utils.tests.test_estimator_checks.PoorScoreLogisticRegression.decision_function",
    "sklearn.utils.tests.test_estimator_checks.RaisesErrorInSetParams.set_params",
    "sklearn.utils.tests.test_estimator_checks.RequiresPositiveXRegressor.fit",
    "sklearn.utils.tests.test_estimator_checks.RequiresPositiveYRegressor.fit",
    "sklearn.utils.tests.test_estimator_checks.SparseTransformer.transform",
    "sklearn.utils.tests.test_estimator_checks.UntaggedBinaryClassifier.fit",
    "sklearn.utils.tests.test_estimator_checks.UntaggedBinaryClassifier.partial_fit",
    "sklearn.utils.tests.test_estimator_checks.run_tests_without_pytest",
    "sklearn.utils.tests.test_estimator_checks.test_all_estimators_all_public",
    "sklearn.utils.tests.test_estimator_checks.test_check_array_api_input",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifier_data_not_an_array",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_decision_function",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_predict",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.tests.test_estimator_checks.test_check_dataframe_column_names_consistency",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_clones",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_get_tags_default_keys",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_pairwise",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_transformer_no_mixin",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimators_unfitted",
    "sklearn.utils.tests.test_estimator_checks.test_check_fit_check_is_fitted",
    "sklearn.utils.tests.test_estimator_checks.test_check_fit_score_takes_y_works_on_deprecated_fit",
    "sklearn.utils.tests.test_estimator_checks.test_check_no_attributes_set_in_init",
    "sklearn.utils.tests.test_estimator_checks.test_check_outlier_contamination",
    "sklearn.utils.tests.test_estimator_checks.test_check_regressor_data_not_an_array",
    "sklearn.utils.tests.test_estimator_checks.test_check_requires_y_none",
    "sklearn.utils.tests.test_estimator_checks.test_decision_proba_tie_ranking",
    "sklearn.utils.tests.test_estimator_checks.test_non_deterministic_estimator_skip_tests",
    "sklearn.utils.tests.test_estimator_checks.test_not_an_array_array_function",
    "sklearn.utils.tests.test_estimator_checks.test_xfail_ignored_in_check_estimator",
    "sklearn.utils.tests.test_fast_dict.test_int_float_dict",
    "sklearn.utils.tests.test_murmurhash.test_no_collision_on_byte_range",
    "sklearn.utils.tests.test_murmurhash.test_uniform_distribution",
    "sklearn.utils.tests.test_pprint.test_basic",
    "sklearn.utils.tests.test_pprint.test_bruteforce_ellipsis",
    "sklearn.utils.tests.test_pprint.test_builtin_prettyprinter",
    "sklearn.utils.tests.test_pprint.test_changed_only",
    "sklearn.utils.tests.test_pprint.test_complexity_print_changed_only",
    "sklearn.utils.tests.test_pprint.test_deeply_nested",
    "sklearn.utils.tests.test_pprint.test_gridsearch",
    "sklearn.utils.tests.test_pprint.test_gridsearch_pipeline",
    "sklearn.utils.tests.test_pprint.test_kwargs_in_init",
    "sklearn.utils.tests.test_pprint.test_n_max_elements_to_show",
    "sklearn.utils.tests.test_pprint.test_pipeline",
    "sklearn.utils.tests.test_shortest_path.floyd_warshall_slow",
    "sklearn.utils.tests.test_shortest_path.generate_graph",
    "sklearn.utils.tests.test_shortest_path.test_shortest_path",
    "sklearn.utils.tosequence",
    "sklearn.utils.validation._allclose_dense_sparse",
    "sklearn.utils.validation._assert_all_finite",
    "sklearn.utils.validation._assert_all_finite_element_wise",
    "sklearn.utils.validation._check_feature_names_in",
    "sklearn.utils.validation._check_large_sparse",
    "sklearn.utils.validation._check_monotonic_cst",
    "sklearn.utils.validation._check_pos_label_consistency",
    "sklearn.utils.validation._check_psd_eigenvalues",
    "sklearn.utils.validation._check_response_method",
    "sklearn.utils.validation._check_sample_weight",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f",
    "sklearn.utils.validation._ensure_no_complex_data",
    "sklearn.utils.validation._ensure_sparse_format",
    "sklearn.utils.validation._generate_get_feature_names_out",
    "sklearn.utils.validation._get_feature_names",
    "sklearn.utils.validation._num_features",
    "sklearn.utils.validation._num_samples",
    "sklearn.utils.validation.check_X_y",
    "sklearn.utils.validation.check_array",
    "sklearn.utils.validation.check_consistent_length",
    "sklearn.utils.validation.check_is_fitted",
    "sklearn.utils.validation.check_memory",
    "sklearn.utils.validation.check_non_negative",
    "sklearn.utils.validation.check_random_state",
    "sklearn.utils.validation.check_scalar",
    "sklearn.utils.validation.check_symmetric",
    "sklearn.utils.validation.column_or_1d",
    "traitlets.config.loader.Config.__setitem__",
    "traitlets.config.loader.DeferredConfig._super_repr",
    "traitlets.config.loader._DefaultOptionDict.__getitem__",
    "traitlets.traitlets.HasDescriptors.__new__",
    "traitlets.traitlets.HasTraits.__init__",
    "traitlets.traitlets.HasTraits.hold_trait_notifications",
    "traitlets.traitlets.HasTraits.set_trait",
    "traitlets.traitlets._CallbackWrapper.__init__",
    "traitlets.traitlets._callback_wrapper",
    "traitlets.utils.getargspec.getargspec",
    "werkzeug.utils.ImportStringError.__init__",
    "werkzeug.utils.import_string"
  ],
  "object.__repr__": [
    "asv_benchmarks.benchmarks.datasets.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_adult.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_adult.fit",
    "benchmarks.bench_hist_gradient_boosting_adult.predict",
    "benchmarks.bench_hist_gradient_boosting_categorical_only.fit",
    "benchmarks.bench_hist_gradient_boosting_categorical_only.predict",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.fit",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.load_data",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.predict",
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "build_tools.circle.list_versions.$toplevel",
    "build_tools.generate_authors_table.get_contributors",
    "build_tools.github.check_wheels.$toplevel",
    "build_tools.github.vendor.main",
    "build_tools.update_environments_and_lock_files.check_conda_lock_version",
    "build_tools.update_environments_and_lock_files.get_package_with_constraint",
    "click._compat._AtomicFile.__repr__",
    "click._textwrap.TextWrapper.indent_only",
    "click._winconsole.ConsoleStream.__repr__",
    "click.core.Argument._parse_decls",
    "click.core.Argument.get_error_hint",
    "click.core.BaseCommand._main_shell_completion",
    "click.core.Context.__init__",
    "click.core.Context.command_path",
    "click.core.Option._parse_decls",
    "click.core.Option.add_to_parser",
    "click.core.Option.get_help_record",
    "click.core.Option.get_help_record._write_opts",
    "click.core.Option.resolve_envvar_value",
    "click.core.Parameter.__init__",
    "click.core._check_multicommand",
    "click.exceptions.MissingParameter.format_message",
    "click.exceptions.NoSuchOption.format_message",
    "click.exceptions.UsageError.show",
    "click.exceptions._join_param_hints",
    "click.formatting.HelpFormatter.write_dl",
    "click.formatting.HelpFormatter.write_heading",
    "click.formatting.HelpFormatter.write_usage",
    "click.parser.Option.__init__",
    "click.parser.Option.process",
    "click.parser.OptionParser._match_short_opt",
    "click.parser.normalize_opt",
    "click.shell_completion.BashComplete.format_completion",
    "click.shell_completion.FishComplete.format_completion",
    "click.shell_completion.ShellComplete.func_name",
    "click.shell_completion.ZshComplete.format_completion",
    "click.termui._build_prompt",
    "click.termui._interpret_color",
    "click.termui.style",
    "click.testing.EchoingStdin.__repr__",
    "click.types.File.convert",
    "click.types._NumberRangeBase._describe_range",
    "click.utils.KeepOpenFile.__repr__",
    "click.utils.LazyFile.__repr__",
    "click.utils._detect_program_name",
    "doc.conf.$toplevel",
    "doc.conf.generate_min_dependency_substitutions",
    "doc.conf.generate_min_dependency_table",
    "doc.sphinxext.add_toctree_functions.docutils_node_to_jinja",
    "doc.sphinxext.allow_nan_estimators.AllowNanEstimators.make_paragraph_for_estimator_type",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.applications.plot_topics_extraction_with_nmf_lda.plot_top_words",
    "examples.cluster.plot_adjusted_for_chance_measures.$toplevel",
    "examples.cluster.plot_bisect_kmeans.$toplevel",
    "examples.cluster.plot_coin_ward_segmentation.$toplevel",
    "examples.cluster.plot_color_quantization.$toplevel",
    "examples.cluster.plot_hdbscan.plot",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.cluster.plot_ward_structured_vs_unstructured.$toplevel",
    "examples.cross_decomposition.plot_pcr_vs_pls.$toplevel",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "examples.decomposition.plot_varimax_fa.$toplevel",
    "examples.ensemble.plot_forest_importances.$toplevel",
    "examples.ensemble.plot_forest_importances_faces.$toplevel",
    "examples.ensemble.plot_gradient_boosting_categorical.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.feature_selection.plot_select_from_model_diabetes.$toplevel",
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.plot_gpr_samples",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.linear_model.plot_lasso_and_elasticnet.$toplevel",
    "examples.linear_model.plot_lasso_dense_vs_sparse_data.$toplevel",
    "examples.linear_model.plot_lasso_model_selection.$toplevel",
    "examples.linear_model.plot_polynomial_interpolation.$toplevel",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.miscellaneous.plot_johnson_lindenstrauss_bound.$toplevel",
    "examples.miscellaneous.plot_metadata_routing.check_metadata",
    "examples.model_selection.plot_grid_search_digits.refit_strategy",
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel",
    "examples.model_selection.plot_learning_curve.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.model_selection.plot_roc_crossval.$toplevel",
    "examples.model_selection.plot_successive_halving_iterations.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.neighbors.plot_nca_illustration.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_scaling_importance.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel",
    "examples.svm.plot_linearsvc_support_vectors.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.benchmark",
    "examples.text.plot_document_classification_20newsgroups.load_dataset",
    "examples.text.plot_document_clustering.$toplevel",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "flask.cli.FlaskGroup.get_command",
    "flask.cli.FlaskGroup.list_commands",
    "flask.config.Config.__repr__",
    "flask.ctx._AppCtxGlobals.__repr__",
    "graphql.pyutils.default_ordered_dict.DefaultOrderedDict.__repr__",
    "jinja2.debug.fake_traceback",
    "jinja2.environment.Environment.getitem",
    "jinja2.environment.Environment.preprocess",
    "jinja2.ext.InternationalizationExtension._make_node",
    "jinja2.filters._GroupTuple.__repr__",
    "jinja2.idtracking.RootVisitor.generic_visit",
    "jinja2.lexer.Lexer.__init__",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.nodes.Node.__init__",
    "jinja2.parser.Parser.parse_primary",
    "jinja2.parser.Parser.parse_tuple",
    "jinja2.runtime.LoopContext.__repr__",
    "jinja2.sandbox.SandboxedEnvironment.getitem",
    "jinja2.sandbox.SandboxedEnvironment.unsafe_undefined",
    "jinja2.utils.LRUCache.__repr__",
    "jinja2.visitor.NodeVisitor.get_visitor",
    "maint_tools.check_pxd_in_installation.$toplevel",
    "maint_tools.update_tracking_issue.close_issue_if_opened",
    "maint_tools.update_tracking_issue.create_or_update_issue",
    "maint_tools.update_tracking_issue.get_issue",
    "markupsafe.Markup.__repr__",
    "marshmallow.orderedset.OrderedSet.__repr__",
    "packaging.specifiers.SpecifierSet.__repr__",
    "packaging.version.Version.__init__",
    "packaging.version.Version.__str__",
    "pip._internal.cli.parser.ConfigOptionParser.error",
    "pip._vendor.packaging.version.Version.__str__",
    "pip._vendor.requests.structures.CaseInsensitiveDict.__repr__",
    "prompt_toolkit.contrib.regular_languages.compiler.Variables.__repr__",
    "prompt_toolkit.formatted_text.base.FormattedText.__repr__",
    "sklearn._loss.link.Interval.__post_init__",
    "sklearn.base.BaseEstimator._check_feature_names",
    "sklearn.base.BaseEstimator._check_n_features",
    "sklearn.base.BaseEstimator._validate_data",
    "sklearn.base.BaseEstimator.set_params",
    "sklearn.calibration.CalibrationDisplay.plot",
    "sklearn.cluster._kmeans.KMeans._check_params_vs_input",
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans._BaseKMeans._check_params_vs_input",
    "sklearn.cluster._kmeans._kmeans_single_elkan",
    "sklearn.cluster._kmeans._kmeans_single_lloyd",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.compose._column_transformer.ColumnTransformer.transform",
    "sklearn.compose._target.TransformedTargetRegressor.fit",
    "sklearn.conftest.$toplevel",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.cross_decomposition._pls._PLS.fit",
    "sklearn.datasets._covtype.$toplevel",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._openml._download_data_to_bunch",
    "sklearn.datasets._openml._load_arff_response",
    "sklearn.datasets._openml._retry_on_network_error.decorator.wrapper",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning._update_dict",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._forest.RandomTreesEmbedding.get_feature_names_out",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.fit",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_interaction_cst",
    "sklearn.ensemble._stacking._BaseStacking.get_feature_names_out",
    "sklearn.ensemble._stacking._BaseStacking.n_features_in_",
    "sklearn.ensemble._voting.VotingClassifier.get_feature_names_out",
    "sklearn.ensemble._voting.VotingRegressor.get_feature_names_out",
    "sklearn.ensemble._voting._BaseVoting.fit",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._validate_estimator",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.fit",
    "sklearn.externals._packaging.version.LegacyVersion.__init__",
    "sklearn.externals._packaging.version.Version.__init__",
    "sklearn.externals._packaging.version.Version.__str__",
    "sklearn.externals._packaging.version.Version.base_version",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit",
    "sklearn.feature_extraction.text.TfidfVectorizer.idf_",
    "sklearn.feature_extraction.text._make_int_array",
    "sklearn.feature_selection._base._get_feature_importances",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.impute.__getattr__",
    "sklearn.impute._base.MissingIndicator.get_feature_names_out",
    "sklearn.inspection._partial_dependence._grid_from_X",
    "sklearn.inspection._pd_utils._check_feature_names",
    "sklearn.inspection._pd_utils._get_feature_index",
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.from_estimator",
    "sklearn.inspection._plot.decision_boundary._check_boundary_response_method",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.isotonic.IsotonicRegression.get_feature_names_out",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out",
    "sklearn.linear_model._bayes.BayesianRidge.fit",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.inner_solve",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.check_convergence",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.line_search",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.solve",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.score",
    "sklearn.linear_model._least_angle.LassoLarsIC._estimate_noise_variance",
    "sklearn.linear_model._quantile.QuantileRegressor.fit",
    "sklearn.linear_model._ridge._BaseRidgeCV.fit",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.metrics._classification._check_set_wise_labels",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.from_estimator",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.from_predictions",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_estimator",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_predictions",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.plot",
    "sklearn.metrics._ranking.top_k_accuracy_score",
    "sklearn.metrics._scorer._BaseScorer._warn_overlap",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.model_selection.__getattr__",
    "sklearn.model_selection._plot.LearningCurveDisplay.from_estimator",
    "sklearn.model_selection._plot.ValidationCurveDisplay.from_estimator",
    "sklearn.model_selection._plot._BaseCurveDisplay._plot_curve",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._check_input_parameters",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.model_selection._split.TimeSeriesSplit.split",
    "sklearn.model_selection._split._pprint",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._score",
    "sklearn.model_selection._validation._warn_or_raise_about_fit_failures",
    "sklearn.naive_bayes._BaseDiscreteNB._check_alpha",
    "sklearn.pipeline.Pipeline._sk_visual_block_._get_name",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.preprocessing._encoders._BaseEncoder._transform",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.fit",
    "sklearn.preprocessing._polynomial.SplineTransformer.get_feature_names_out",
    "sklearn.preprocessing._target_encoder.TargetEncoder._fit_encodings_all",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.fit",
    "sklearn.svm._base.BaseLibSVM._validate_for_predict",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.tree._export._BaseTreeExporter.node_to_str",
    "sklearn.tree._export.export_text",
    "sklearn.utils._array_api._check_array_api_dispatch",
    "sklearn.utils._array_api._isdtype_single",
    "sklearn.utils._encode._encode",
    "sklearn.utils._encode._unique_python",
    "sklearn.utils._estimator_html_repr._IDCounter.get_id",
    "sklearn.utils._estimator_html_repr._get_visual_block",
    "sklearn.utils._estimator_html_repr._write_label_html",
    "sklearn.utils._estimator_html_repr.estimator_html_repr",
    "sklearn.utils._get_column_indices",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests.MetadataRouter.validate_metadata",
    "sklearn.utils._metadata_requests.MethodMetadataRequest._route_params",
    "sklearn.utils._metadata_requests.RequestMethod.__get__.func",
    "sklearn.utils._metadata_requests._MetadataRequester.__init_subclass__",
    "sklearn.utils._metadata_requests.process_routing",
    "sklearn.utils._mocking.CheckingClassifier.fit",
    "sklearn.utils._param_validation.HasMethods.__str__",
    "sklearn.utils._param_validation.Interval._check_params",
    "sklearn.utils._param_validation.MissingValues.__str__",
    "sklearn.utils._param_validation.Options.__str__",
    "sklearn.utils._param_validation.Options._mark_if_deprecated",
    "sklearn.utils._param_validation._Booleans.__str__",
    "sklearn.utils._param_validation._CVObjects.__str__",
    "sklearn.utils._param_validation._RandomStates.__str__",
    "sklearn.utils._param_validation._VerboseHelper.__str__",
    "sklearn.utils._param_validation.generate_invalid_param_val",
    "sklearn.utils._param_validation.validate_parameter_constraints",
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_and_get_response_values",
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_from_predictions_params",
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_plot_params",
    "sklearn.utils._pprint.KeyValTuple.__repr__",
    "sklearn.utils._response._get_response_values",
    "sklearn.utils._response._get_response_values_binary",
    "sklearn.utils._tags._safe_tags",
    "sklearn.utils._testing._convert_container",
    "sklearn.utils._testing._create_aligned_memmap_backed_arrays",
    "sklearn.utils.class_weight.compute_class_weight",
    "sklearn.utils.class_weight.compute_sample_weight",
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.discovery.all_functions",
    "sklearn.utils.estimator_checks._maybe_skip.wrapped",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_decision_function",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_fit_check_is_fitted",
    "sklearn.utils.estimator_checks.check_global_ouptut_transform_pandas",
    "sklearn.utils.estimator_checks.check_param_validation",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.estimator_checks.check_set_output_transform_pandas",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out_pandas",
    "sklearn.utils.estimator_checks.check_transformer_preserve_dtypes",
    "sklearn.utils.multiclass.unique_labels",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator",
    "sklearn.utils.validation._assert_all_finite_element_wise",
    "sklearn.utils.validation._check_feature_names_in",
    "sklearn.utils.validation._check_monotonic_cst",
    "sklearn.utils.validation._check_pos_label_consistency",
    "sklearn.utils.validation._check_response_method",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f",
    "sklearn.utils.validation._generate_get_feature_names_out",
    "sklearn.utils.validation._get_feature_names",
    "sklearn.utils.validation._num_features",
    "sklearn.utils.validation.check_scalar",
    "testslide.strict_mock.NonAwaitableReturn.__str__",
    "testslide.strict_mock.NonCallableValue.__str__",
    "testslide.strict_mock.NonExistentAttribute.__str__",
    "testslide.strict_mock.UndefinedAttribute.__str__",
    "testslide.strict_mock.UnsupportedMagic.__str__",
    "traitlets.config.loader.DeferredConfig._super_repr",
    "traitlets.config.loader.DeferredConfigList.__repr__",
    "traitlets.config.loader.DeferredConfigString.__repr__",
    "traitlets.traitlets.HasTraits.set_trait",
    "werkzeug.utils.ImportStringError.__init__"
  ],
  "object.__str__": [
    "click.core.Option.get_help_record",
    "click.core.Parameter.__init__",
    "click.termui.style",
    "click.types._NumberRangeBase._describe_range",
    "examples.cluster.plot_hdbscan.plot",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "jinja2.lexer.Lexer.__init__",
    "jinja2.nodes.Node.__init__",
    "packaging.version.Version.__str__",
    "packaging.version.Version.local",
    "pip._vendor.packaging.version.Version.__str__",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.externals._arff.ArffEncoder.iter_encode",
    "sklearn.externals._packaging.version.Version.__str__",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.utils._estimator_html_repr._write_estimator_html",
    "sklearn.utils._estimator_html_repr._write_label_html",
    "sklearn.utils._param_validation.Interval.__str__",
    "sklearn.utils.validation.check_scalar"
  ],
  "openpyxl.styles.named_styles.NamedStyleList.__getitem__": [
    "Ovr{openpyxl.styles.named_styles.NamedStyleList.__getitem__}"
  ],
  "openpyxl.styles.named_styles.NamedStyleList.append": [
    "Ovr{openpyxl.styles.named_styles.NamedStyleList.append}"
  ],
  "openpyxl.utils.indexed_list.IndexedList.append": [
    "Ovr{openpyxl.utils.indexed_list.IndexedList.append}"
  ],
  "openpyxl.utils.indexed_list.IndexedList.index": [
    "Ovr{openpyxl.utils.indexed_list.IndexedList.index}"
  ],
  "openpyxl.worksheet.table.TableList.get": [
    "Ovr{openpyxl.worksheet.table.TableList.get}"
  ],
  "openpyxl.worksheet.table.TableList.items": [
    "Ovr{openpyxl.worksheet.table.TableList.items}"
  ],
  "optparse.OptionContainer.add_option": [
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "examples.applications.svm_gui.get_parser"
  ],
  "optparse.OptionParser.__init__": [
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "examples.applications.svm_gui.get_parser"
  ],
  "optparse.OptionParser.error": [
    "Ovr{optparse.OptionParser.error}"
  ],
  "optparse.OptionParser.exit": [
    "pip._internal.cli.parser.ConfigOptionParser.error"
  ],
  "optparse.OptionParser.parse_args": [
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_sample_without_replacement.$toplevel"
  ],
  "optparse.OptionParser.print_usage": [
    "pip._internal.cli.parser.ConfigOptionParser.error"
  ],
  "os._Environ.__getitem__": [
    "build_tools.azure.get_commit_message.get_commit_message",
    "build_tools.get_comment.$toplevel",
    "click.shell_completion.BashComplete.get_completion_args",
    "click.shell_completion.FishComplete.get_completion_args",
    "click.shell_completion.ZshComplete.get_completion_args"
  ],
  "os._Environ.__iter__": [
    "Ovr{os._Environ.__iter__}"
  ],
  "os._Environ.__setitem__": [
    "Ovr{os._Environ.__setitem__}",
    "flask.cli.FlaskGroup.make_context"
  ],
  "os._Environ.copy": [
    "sklearn.utils._testing.assert_run_python_script"
  ],
  "os._Environ.setdefault": [
    "sklearn.$toplevel"
  ],
  "os._ScandirIterator.__next__": [
    "Ovr{os._ScandirIterator.__next__}"
  ],
  "os._wrap_close.close": [
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel"
  ],
  "os.stat_result.st_mode": [
    "click._compat.open_stream",
    "click.types.Path.convert"
  ],
  "os.stat_result.st_mtime": [
    "sklearn._build_utils.gen_from_templates"
  ],
  "os.terminal_size.columns": [
    "click.formatting.HelpFormatter.__init__"
  ],
  "packaging.specifiers.SpecifierSet.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "packaging.specifiers.SpecifierSet.__str__": [
    "packaging.specifiers.SpecifierSet.__repr__"
  ],
  "packaging.specifiers.SpecifierSet.prereleases": [
    "packaging.specifiers.SpecifierSet.__repr__"
  ],
  "packaging.version.Version.__init__": [
    "build_tools.update_environments_and_lock_files.check_conda_version"
  ],
  "packaging.version.Version.__str__": [
    "build_tools.update_environments_and_lock_files.check_conda_version"
  ],
  "packaging.version.Version.dev": [
    "packaging.version.Version.__str__"
  ],
  "packaging.version.Version.epoch": [
    "packaging.version.Version.__str__"
  ],
  "packaging.version.Version.local": [
    "packaging.version.Version.__str__"
  ],
  "packaging.version.Version.post": [
    "packaging.version.Version.__str__"
  ],
  "packaging.version.Version.pre": [
    "packaging.version.Version.__str__"
  ],
  "packaging.version.Version.release": [
    "packaging.version.Version.__str__"
  ],
  "packaging.version._BaseVersion.__ge__": [
    "build_tools.update_environments_and_lock_files.check_conda_version"
  ],
  "packaging.version._BaseVersion.__gt__": [
    "build_tools.update_environments_and_lock_files.check_conda_version"
  ],
  "packaging.version._BaseVersion.__le__": [
    "build_tools.update_environments_and_lock_files.check_conda_version"
  ],
  "packaging.version._BaseVersion.__lt__": [
    "build_tools.update_environments_and_lock_files.check_conda_version"
  ],
  "packaging.version._Version.__init__": [
    "packaging.version.Version.__init__"
  ],
  "packaging.version._Version.__new__": [
    "packaging.version.Version.__init__"
  ],
  "paramiko.hostkeys.HostKeys.__iter__": [
    "Ovr{paramiko.hostkeys.HostKeys.__iter__}"
  ],
  "paramiko.hostkeys.HostKeys.__setitem__": [
    "Ovr{paramiko.hostkeys.HostKeys.__setitem__}"
  ],
  "paramiko.hostkeys.HostKeys.values": [
    "Ovr{paramiko.hostkeys.HostKeys.values}"
  ],
  "paramiko.hostkeys._SubDict.__iter__": [
    "Ovr{paramiko.hostkeys._SubDict.__iter__}"
  ],
  "paramiko.hostkeys._SubDict.__setitem__": [
    "Ovr{paramiko.hostkeys._SubDict.__setitem__}"
  ],
  "parsimonious.nodes.Node.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "parso.python.tokenize.PythonToken.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "parso.python.tree.UsedNamesMapping.__iter__": [
    "Ovr{parso.python.tree.UsedNamesMapping.__iter__}"
  ],
  "parso.utils.PythonVersionInfo.__eq__": [
    "click.parser.Argument.process",
    "parso.utils.PythonVersionInfo.__ne__"
  ],
  "parso.utils.PythonVersionInfo.__gt__": [
    "Ovr{parso.utils.PythonVersionInfo.__gt__}"
  ],
  "parso.utils.PythonVersionInfo.__ne__": [
    "click.parser.Argument.process"
  ],
  "passlib.pwd.WordsetDict.__iter__": [
    "Ovr{passlib.pwd.WordsetDict.__iter__}"
  ],
  "passlib.pwd.WordsetDict.__setitem__": [
    "Ovr{passlib.pwd.WordsetDict.__setitem__}"
  ],
  "passlib.utils.compat._ordered_dict.OrderedDict.__eq__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__eq__"
  ],
  "passlib.utils.compat._ordered_dict.OrderedDict.__iter__": [
    "Ovr{passlib.utils.compat._ordered_dict.OrderedDict.__iter__}"
  ],
  "passlib.utils.compat._ordered_dict.OrderedDict.__setitem__": [
    "Ovr{passlib.utils.compat._ordered_dict.OrderedDict.__setitem__}"
  ],
  "passlib.utils.compat._ordered_dict.OrderedDict.copy": [
    "Ovr{passlib.utils.compat._ordered_dict.OrderedDict.copy}"
  ],
  "passlib.utils.compat._ordered_dict.OrderedDict.items": [
    "Ovr{passlib.utils.compat._ordered_dict.OrderedDict.items}"
  ],
  "passlib.utils.compat._ordered_dict.OrderedDict.keys": [
    "Ovr{passlib.utils.compat._ordered_dict.OrderedDict.keys}"
  ],
  "passlib.utils.compat._ordered_dict.OrderedDict.pop": [
    "Ovr{passlib.utils.compat._ordered_dict.OrderedDict.pop}"
  ],
  "passlib.utils.compat._ordered_dict.OrderedDict.setdefault": [
    "click.globals.push_context",
    "click.parser.Option.process",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.linear_model._quantile.QuantileRegressor.fit"
  ],
  "passlib.utils.compat._ordered_dict.OrderedDict.update": [
    "benchmarks.bench_text_vectorizers.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "importlib_metadata.DistributionFinder.Context.__init__",
    "importlib_metadata.EntryPoint.__init__",
    "jinja2.nodes.args_as_const",
    "pip._vendor.requests.cookies.create_cookie",
    "sklearn.base.BaseEstimator.__setstate__",
    "sklearn.base.BaseEstimator._get_tags",
    "sklearn.base.BaseEstimator.get_params",
    "sklearn.calibration.CalibrationDisplay.plot",
    "sklearn.externals._arff.$toplevel",
    "sklearn.gaussian_process.kernels.Exponentiation.get_params",
    "sklearn.gaussian_process.kernels.KernelOperator.get_params",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.plot",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.plot",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.metrics.pairwise.pairwise_distances_chunked",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f"
  ],
  "passlib.utils.compat._ordered_dict.OrderedDict.values": [
    "Ovr{passlib.utils.compat._ordered_dict.OrderedDict.values}"
  ],
  "pathlib.Path.__new__": [
    "asv_benchmarks.benchmarks.common.clear_tmp",
    "asv_benchmarks.benchmarks.common.get_estimator_path",
    "asv_benchmarks.benchmarks.common.get_from_config",
    "asv_benchmarks.benchmarks.datasets.$toplevel",
    "build_tools.generate_authors_table.$toplevel",
    "build_tools.github.check_wheels.$toplevel",
    "build_tools.update_environments_and_lock_files.create_conda_lock_file",
    "build_tools.update_environments_and_lock_files.write_conda_environment",
    "build_tools.update_environments_and_lock_files.write_pip_lock_file",
    "build_tools.update_environments_and_lock_files.write_pip_requirements",
    "click.types.Path.convert",
    "doc.conf.$toplevel",
    "doc.conf.generate_min_dependency_substitutions",
    "doc.conf.generate_min_dependency_table",
    "doc.tutorial.text_analytics.data.movie_reviews.fetch_data.$toplevel",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents",
    "maint_tools.check_pxd_in_installation.$toplevel",
    "maint_tools.update_tracking_issue.$toplevel",
    "sklearn.datasets._base.load_files",
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.discovery.all_functions"
  ],
  "pathlib.Path.cwd": [
    "build_tools.github.check_wheels.$toplevel"
  ],
  "pathlib.Path.exists": [
    "doc.tutorial.text_analytics.data.movie_reviews.fetch_data.$toplevel",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents",
    "maint_tools.update_tracking_issue.$toplevel"
  ],
  "pathlib.Path.glob": [
    "build_tools.github.check_wheels.$toplevel",
    "doc.conf.$toplevel",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents",
    "maint_tools.check_pxd_in_installation.$toplevel"
  ],
  "pathlib.Path.iterdir": [
    "asv_benchmarks.benchmarks.common.clear_tmp"
  ],
  "pathlib.Path.mkdir": [
    "asv_benchmarks.benchmarks.common.get_from_config",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents"
  ],
  "pathlib.Path.open": [
    "build_tools.github.check_wheels.$toplevel",
    "doc.conf.generate_min_dependency_substitutions",
    "doc.conf.generate_min_dependency_table"
  ],
  "pathlib.Path.read_bytes": [
    "doc.tutorial.text_analytics.data.movie_reviews.fetch_data.$toplevel",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents",
    "sklearn.datasets._base.load_files"
  ],
  "pathlib.Path.resolve": [
    "asv_benchmarks.benchmarks.common.clear_tmp",
    "asv_benchmarks.benchmarks.common.get_estimator_path",
    "asv_benchmarks.benchmarks.common.get_from_config",
    "asv_benchmarks.benchmarks.datasets.$toplevel",
    "click.types.Path.convert"
  ],
  "pathlib.Path.unlink": [
    "asv_benchmarks.benchmarks.common.clear_tmp",
    "doc.tutorial.text_analytics.data.movie_reviews.fetch_data.$toplevel"
  ],
  "pathlib.Path.write_text": [
    "build_tools.update_environments_and_lock_files.write_conda_environment",
    "build_tools.update_environments_and_lock_files.write_pip_requirements"
  ],
  "pathlib.PurePath.__truediv__": [
    "asv_benchmarks.benchmarks.common.clear_tmp",
    "asv_benchmarks.benchmarks.common.get_estimator_path",
    "asv_benchmarks.benchmarks.common.get_from_config",
    "asv_benchmarks.benchmarks.datasets.$toplevel",
    "build_tools.generate_authors_table.$toplevel",
    "build_tools.github.check_wheels.$toplevel",
    "build_tools.update_environments_and_lock_files.create_conda_lock_file",
    "build_tools.update_environments_and_lock_files.write_conda_environment",
    "build_tools.update_environments_and_lock_files.write_pip_lock_file",
    "build_tools.update_environments_and_lock_files.write_pip_requirements",
    "doc.conf.$toplevel",
    "doc.conf.generate_min_dependency_substitutions",
    "doc.conf.generate_min_dependency_table",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents",
    "maint_tools.check_pxd_in_installation.$toplevel"
  ],
  "pathlib.PurePath.name": [
    "build_tools.github.check_wheels.$toplevel"
  ],
  "pathlib.PurePath.parent": [
    "asv_benchmarks.benchmarks.common.clear_tmp",
    "asv_benchmarks.benchmarks.common.get_estimator_path",
    "asv_benchmarks.benchmarks.common.get_from_config",
    "asv_benchmarks.benchmarks.datasets.$toplevel",
    "build_tools.generate_authors_table.$toplevel",
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.discovery.all_functions"
  ],
  "pathlib.PurePath.relative_to": [
    "maint_tools.check_pxd_in_installation.$toplevel"
  ],
  "pdb._rstr.__repr__": [
    "benchmarks.bench_hist_gradient_boosting_higgsboson.load_data",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "build_tools.circle.list_versions.$toplevel",
    "build_tools.generate_authors_table.get_contributors",
    "build_tools.github.vendor.main",
    "build_tools.update_environments_and_lock_files.check_conda_lock_version",
    "build_tools.update_environments_and_lock_files.get_package_with_constraint",
    "click._textwrap.TextWrapper.indent_only",
    "click._winconsole.ConsoleStream.__repr__",
    "click.core.Argument.get_error_hint",
    "click.core.BaseCommand._main_shell_completion",
    "click.core.Context.__init__",
    "click.core.Context.command_path",
    "click.core.Option._parse_decls",
    "click.core.Option.add_to_parser",
    "click.core.Option.get_help_record",
    "click.core.Option.get_help_record._write_opts",
    "click.core.Option.resolve_envvar_value",
    "click.core._check_multicommand",
    "click.exceptions.MissingParameter.format_message",
    "click.exceptions.NoSuchOption.format_message",
    "click.exceptions.UsageError.show",
    "click.exceptions._join_param_hints",
    "click.formatting.HelpFormatter.write_dl",
    "click.formatting.HelpFormatter.write_heading",
    "click.formatting.HelpFormatter.write_usage",
    "click.parser.Option.__init__",
    "click.parser.Option.process",
    "click.parser.OptionParser._match_short_opt",
    "click.parser.normalize_opt",
    "click.shell_completion.BashComplete.format_completion",
    "click.shell_completion.FishComplete.format_completion",
    "click.shell_completion.ShellComplete.func_name",
    "click.shell_completion.ZshComplete.format_completion",
    "click.termui._build_prompt",
    "click.termui.style",
    "click.types.File.convert",
    "click.utils.LazyFile.__repr__",
    "click.utils._detect_program_name",
    "doc.conf.$toplevel",
    "doc.conf.generate_min_dependency_substitutions",
    "doc.conf.generate_min_dependency_table",
    "doc.sphinxext.add_toctree_functions.docutils_node_to_jinja",
    "doc.sphinxext.allow_nan_estimators.AllowNanEstimators.make_paragraph_for_estimator_type",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.cluster.plot_bisect_kmeans.$toplevel",
    "examples.cluster.plot_hdbscan.plot",
    "examples.decomposition.plot_varimax_fa.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.miscellaneous.plot_metadata_routing.check_metadata",
    "examples.model_selection.plot_learning_curve.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "flask.cli.FlaskGroup.get_command",
    "flask.cli.FlaskGroup.list_commands",
    "flask.config.Config.__repr__",
    "flask.ctx._AppCtxGlobals.__repr__",
    "jinja2.debug.fake_traceback",
    "jinja2.environment.Environment.getitem",
    "jinja2.environment.Environment.preprocess",
    "jinja2.ext.InternationalizationExtension._make_node",
    "jinja2.idtracking.RootVisitor.generic_visit",
    "jinja2.lexer.Lexer.__init__",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.nodes.Node.__init__",
    "jinja2.parser.Parser.parse_primary",
    "jinja2.parser.Parser.parse_tuple",
    "jinja2.runtime.LoopContext.__repr__",
    "jinja2.sandbox.SandboxedEnvironment.getitem",
    "jinja2.sandbox.SandboxedEnvironment.unsafe_undefined",
    "jinja2.utils.LRUCache.__repr__",
    "jinja2.visitor.NodeVisitor.get_visitor",
    "maint_tools.update_tracking_issue.close_issue_if_opened",
    "maint_tools.update_tracking_issue.create_or_update_issue",
    "maint_tools.update_tracking_issue.get_issue",
    "markupsafe.Markup.__repr__",
    "marshmallow.orderedset.OrderedSet.__repr__",
    "packaging.specifiers.SpecifierSet.__repr__",
    "packaging.version.Version.__init__",
    "packaging.version.Version.__str__",
    "pip._internal.cli.parser.ConfigOptionParser.error",
    "prompt_toolkit.contrib.regular_languages.compiler.Variables.__repr__",
    "sklearn.base.BaseEstimator._check_feature_names",
    "sklearn.base.BaseEstimator._check_n_features",
    "sklearn.base.BaseEstimator._validate_data",
    "sklearn.base.BaseEstimator.set_params",
    "sklearn.calibration.CalibrationDisplay.plot",
    "sklearn.cluster._kmeans.KMeans._check_params_vs_input",
    "sklearn.cluster._kmeans._BaseKMeans._check_params_vs_input",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.compose._target.TransformedTargetRegressor.fit",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._openml._load_arff_response",
    "sklearn.datasets._openml._retry_on_network_error.decorator.wrapper",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.ensemble._stacking._BaseStacking.get_feature_names_out",
    "sklearn.ensemble._stacking._BaseStacking.n_features_in_",
    "sklearn.ensemble._voting.VotingClassifier.get_feature_names_out",
    "sklearn.ensemble._voting.VotingRegressor.get_feature_names_out",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._validate_estimator",
    "sklearn.externals._packaging.version.LegacyVersion.__init__",
    "sklearn.externals._packaging.version.Version.__init__",
    "sklearn.externals._packaging.version.Version.__str__",
    "sklearn.feature_extraction.text.TfidfVectorizer.idf_",
    "sklearn.feature_extraction.text._make_int_array",
    "sklearn.feature_selection._base._get_feature_importances",
    "sklearn.impute._base.MissingIndicator.get_feature_names_out",
    "sklearn.inspection._pd_utils._get_feature_index",
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.from_estimator",
    "sklearn.inspection._plot.decision_boundary._check_boundary_response_method",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.isotonic.IsotonicRegression.get_feature_names_out",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out",
    "sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.inner_solve",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.line_search",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.score",
    "sklearn.linear_model._least_angle.LassoLarsIC._estimate_noise_variance",
    "sklearn.linear_model._quantile.QuantileRegressor.fit",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.from_estimator",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.from_predictions",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_estimator",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_predictions",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.plot",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.model_selection.__getattr__",
    "sklearn.model_selection._plot.LearningCurveDisplay.from_estimator",
    "sklearn.model_selection._plot.ValidationCurveDisplay.from_estimator",
    "sklearn.model_selection._plot._BaseCurveDisplay._plot_curve",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._check_input_parameters",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._score",
    "sklearn.model_selection._validation._warn_or_raise_about_fit_failures",
    "sklearn.pipeline.Pipeline._sk_visual_block_._get_name",
    "sklearn.svm._base.BaseLibSVM._validate_for_predict",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.utils._array_api._check_array_api_dispatch",
    "sklearn.utils._array_api._isdtype_single",
    "sklearn.utils._encode._encode",
    "sklearn.utils._estimator_html_repr._get_visual_block",
    "sklearn.utils._estimator_html_repr._write_label_html",
    "sklearn.utils._estimator_html_repr.estimator_html_repr",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests.MethodMetadataRequest._route_params",
    "sklearn.utils._metadata_requests._MetadataRequester.__init_subclass__",
    "sklearn.utils._metadata_requests.process_routing",
    "sklearn.utils._mocking.CheckingClassifier.fit",
    "sklearn.utils._param_validation.HasMethods.__str__",
    "sklearn.utils._param_validation.Interval._check_params",
    "sklearn.utils._param_validation.MissingValues.__str__",
    "sklearn.utils._param_validation.Options.__str__",
    "sklearn.utils._param_validation.Options._mark_if_deprecated",
    "sklearn.utils._param_validation._Booleans.__str__",
    "sklearn.utils._param_validation._CVObjects.__str__",
    "sklearn.utils._param_validation._RandomStates.__str__",
    "sklearn.utils._param_validation._VerboseHelper.__str__",
    "sklearn.utils._param_validation.generate_invalid_param_val",
    "sklearn.utils._param_validation.validate_parameter_constraints",
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_and_get_response_values",
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_from_predictions_params",
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_plot_params",
    "sklearn.utils._response._get_response_values",
    "sklearn.utils._response._get_response_values_binary",
    "sklearn.utils._tags._safe_tags",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.estimator_checks._maybe_skip.wrapped",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_decision_function",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_fit_check_is_fitted",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator",
    "sklearn.utils.validation._assert_all_finite_element_wise",
    "sklearn.utils.validation._check_monotonic_cst",
    "sklearn.utils.validation._check_pos_label_consistency",
    "sklearn.utils.validation._check_response_method",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f",
    "sklearn.utils.validation._generate_get_feature_names_out",
    "sklearn.utils.validation._num_features",
    "sklearn.utils.validation.check_scalar",
    "testslide.strict_mock.NonAwaitableReturn.__str__",
    "testslide.strict_mock.NonCallableValue.__str__",
    "testslide.strict_mock.NonExistentAttribute.__str__",
    "testslide.strict_mock.UndefinedAttribute.__str__",
    "testslide.strict_mock.UnsupportedMagic.__str__",
    "traitlets.config.loader.DeferredConfigList.__repr__",
    "traitlets.config.loader.DeferredConfigString.__repr__",
    "traitlets.traitlets.HasTraits.set_trait",
    "werkzeug.utils.ImportStringError.__init__"
  ],
  "pip._internal.cli.parser.ConfigOptionParser.error": [
    "Ovr{pip._internal.cli.parser.ConfigOptionParser.error}"
  ],
  "pip._vendor.distlib.compat.ChainMap.__getitem__": [
    "pip._vendor.distlib.compat.ChainMap.get"
  ],
  "pip._vendor.distlib.compat.ChainMap.__iter__": [
    "Ovr{pip._vendor.distlib.compat.ChainMap.__iter__}"
  ],
  "pip._vendor.distlib.compat.ChainMap.__missing__": [
    "pip._vendor.distlib.compat.ChainMap.__getitem__"
  ],
  "pip._vendor.distlib.compat.ChainMap.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit"
  ],
  "pip._vendor.distlib.compat.ChainMap.__setitem__": [
    "Ovr{pip._vendor.distlib.compat.ChainMap.__setitem__}"
  ],
  "pip._vendor.distlib.compat.ChainMap.get": [
    "Ovr{pip._vendor.distlib.compat.ChainMap.get}",
    "click._compat.auto_wrap_for_ansi",
    "jinja2.lexer.get_lexer"
  ],
  "pip._vendor.distlib.compat.ConvertingDict.__getitem__": [
    "Ovr{pip._vendor.distlib.compat.ConvertingDict.__getitem__}"
  ],
  "pip._vendor.distlib.compat.ConvertingDict.get": [
    "Ovr{pip._vendor.distlib.compat.ConvertingDict.get}"
  ],
  "pip._vendor.distlib.compat.ConvertingList.__getitem__": [
    "Ovr{pip._vendor.distlib.compat.ConvertingList.__getitem__}"
  ],
  "pip._vendor.distlib.compat.ConvertingList.pop": [
    "Ovr{pip._vendor.distlib.compat.ConvertingList.pop}"
  ],
  "pip._vendor.distlib.compat.ConvertingTuple.__getitem__": [
    "Ovr{pip._vendor.distlib.compat.ConvertingTuple.__getitem__}"
  ],
  "pip._vendor.distlib.compat.OrderedDict.__eq__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__eq__"
  ],
  "pip._vendor.distlib.compat.OrderedDict.__init__": [
    "pip._vendor.distlib.compat.OrderedDict.copy"
  ],
  "pip._vendor.distlib.compat.OrderedDict.__iter__": [
    "Ovr{pip._vendor.distlib.compat.OrderedDict.__iter__}",
    "pip._vendor.distlib.compat.OrderedDict.items",
    "pip._vendor.distlib.compat.OrderedDict.update",
    "pip._vendor.distlib.compat.OrderedDict.values"
  ],
  "pip._vendor.distlib.compat.OrderedDict.__repr__": [
    "jinja2.utils.LRUCache.__repr__",
    "pip._vendor.requests.structures.CaseInsensitiveDict.__repr__",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit",
    "sklearn.metrics._scorer._check_multimetric_scoring"
  ],
  "pip._vendor.distlib.compat.OrderedDict.__setitem__": [
    "Ovr{pip._vendor.distlib.compat.OrderedDict.__setitem__}",
    "pip._vendor.distlib.compat.OrderedDict.setdefault",
    "pip._vendor.distlib.compat.OrderedDict.update"
  ],
  "pip._vendor.distlib.compat.OrderedDict.copy": [
    "Ovr{pip._vendor.distlib.compat.OrderedDict.copy}"
  ],
  "pip._vendor.distlib.compat.OrderedDict.items": [
    "Ovr{pip._vendor.distlib.compat.OrderedDict.items}",
    "pip._vendor.distlib.compat.OrderedDict.__eq__",
    "pip._vendor.distlib.compat.OrderedDict.__repr__"
  ],
  "pip._vendor.distlib.compat.OrderedDict.keys": [
    "Ovr{pip._vendor.distlib.compat.OrderedDict.keys}"
  ],
  "pip._vendor.distlib.compat.OrderedDict.pop": [
    "Ovr{pip._vendor.distlib.compat.OrderedDict.pop}"
  ],
  "pip._vendor.distlib.compat.OrderedDict.setdefault": [
    "click.globals.push_context",
    "click.parser.Option.process",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.linear_model._quantile.QuantileRegressor.fit"
  ],
  "pip._vendor.distlib.compat.OrderedDict.update": [
    "benchmarks.bench_text_vectorizers.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "importlib_metadata.DistributionFinder.Context.__init__",
    "importlib_metadata.EntryPoint.__init__",
    "jinja2.nodes.args_as_const",
    "pip._vendor.requests.cookies.create_cookie",
    "sklearn.base.BaseEstimator.__setstate__",
    "sklearn.base.BaseEstimator._get_tags",
    "sklearn.base.BaseEstimator.get_params",
    "sklearn.calibration.CalibrationDisplay.plot",
    "sklearn.externals._arff.$toplevel",
    "sklearn.gaussian_process.kernels.Exponentiation.get_params",
    "sklearn.gaussian_process.kernels.KernelOperator.get_params",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.plot",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.plot",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.metrics.pairwise.pairwise_distances_chunked",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f"
  ],
  "pip._vendor.distlib.compat.OrderedDict.values": [
    "Ovr{pip._vendor.distlib.compat.OrderedDict.values}"
  ],
  "pip._vendor.distlib.metadata.LegacyMetadata.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "pip._vendor.html5lib._inputstream.EncodingBytes.__iter__": [
    "Ovr{pip._vendor.html5lib._inputstream.EncodingBytes.__iter__}"
  ],
  "pip._vendor.html5lib._trie.py.Trie.__iter__": [
    "Ovr{pip._vendor.html5lib._trie.py.Trie.__iter__}"
  ],
  "pip._vendor.html5lib._utils.BoundMethodDispatcher.__getitem__": [
    "pip._vendor.html5lib._utils.BoundMethodDispatcher.get"
  ],
  "pip._vendor.html5lib._utils.BoundMethodDispatcher.__iter__": [
    "Ovr{pip._vendor.html5lib._utils.BoundMethodDispatcher.__iter__}"
  ],
  "pip._vendor.html5lib._utils.BoundMethodDispatcher.get": [
    "Ovr{pip._vendor.html5lib._utils.BoundMethodDispatcher.get}"
  ],
  "pip._vendor.html5lib._utils.MethodDispatcher.__getitem__": [
    "Ovr{pip._vendor.html5lib._utils.MethodDispatcher.__getitem__}"
  ],
  "pip._vendor.html5lib.treebuilders.base.ActiveFormattingElements.append": [
    "Ovr{pip._vendor.html5lib.treebuilders.base.ActiveFormattingElements.append}"
  ],
  "pip._vendor.html5lib.treebuilders.base.ActiveFormattingElements.nodesEqual": [
    "pip._vendor.html5lib.treebuilders.base.ActiveFormattingElements.append"
  ],
  "pip._vendor.html5lib.treebuilders.dom.getDomBuilder.AttrList.__iter__": [
    "Ovr{pip._vendor.html5lib.treebuilders.dom.getDomBuilder.AttrList.__iter__}"
  ],
  "pip._vendor.html5lib.treebuilders.dom.getDomBuilder.AttrList.__setitem__": [
    "Ovr{pip._vendor.html5lib.treebuilders.dom.getDomBuilder.AttrList.__setitem__}"
  ],
  "pip._vendor.html5lib.treebuilders.dom.getDomBuilder.AttrList.items": [
    "Ovr{pip._vendor.html5lib.treebuilders.dom.getDomBuilder.AttrList.items}"
  ],
  "pip._vendor.html5lib.treebuilders.dom.getDomBuilder.AttrList.values": [
    "Ovr{pip._vendor.html5lib.treebuilders.dom.getDomBuilder.AttrList.values}"
  ],
  "pip._vendor.html5lib.treebuilders.etree_lxml.TreeBuilder.__init__.Attributes.__iter__": [
    "Ovr{pip._vendor.html5lib.treebuilders.etree_lxml.TreeBuilder.__init__.Attributes.__iter__}"
  ],
  "pip._vendor.html5lib.treebuilders.etree_lxml.TreeBuilder.__init__.Attributes.__setitem__": [
    "Ovr{pip._vendor.html5lib.treebuilders.etree_lxml.TreeBuilder.__init__.Attributes.__setitem__}"
  ],
  "pip._vendor.packaging.specifiers.SpecifierSet.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "pip._vendor.packaging.specifiers.SpecifierSet.__str__": [
    "pip._vendor.packaging.specifiers.SpecifierSet.__repr__"
  ],
  "pip._vendor.packaging.specifiers.SpecifierSet.prereleases": [
    "pip._vendor.packaging.specifiers.SpecifierSet.__repr__"
  ],
  "pip._vendor.packaging.version.Version.__init__": [
    "pip._vendor.pkg_resources.safe_version"
  ],
  "pip._vendor.packaging.version.Version.__str__": [
    "pip._vendor.pkg_resources.safe_version"
  ],
  "pip._vendor.packaging.version.Version.dev": [
    "pip._vendor.packaging.version.Version.__str__"
  ],
  "pip._vendor.packaging.version.Version.epoch": [
    "pip._vendor.packaging.version.Version.__str__"
  ],
  "pip._vendor.packaging.version.Version.local": [
    "pip._vendor.packaging.version.Version.__str__"
  ],
  "pip._vendor.packaging.version.Version.post": [
    "pip._vendor.packaging.version.Version.__str__"
  ],
  "pip._vendor.packaging.version.Version.pre": [
    "pip._vendor.packaging.version.Version.__str__"
  ],
  "pip._vendor.packaging.version.Version.release": [
    "pip._vendor.packaging.version.Version.__str__"
  ],
  "pip._vendor.packaging.version._Version.__init__": [
    "pip._vendor.packaging.version.Version.__init__"
  ],
  "pip._vendor.packaging.version._Version.__new__": [
    "pip._vendor.packaging.version.Version.__init__"
  ],
  "pip._vendor.pkg_resources.Distribution.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "pip._vendor.pkg_resources.Distribution.__str__": [
    "pip._vendor.pkg_resources.Distribution.__repr__"
  ],
  "pip._vendor.pkg_resources.Distribution._get_metadata": [
    "pip._vendor.pkg_resources.Distribution._get_version"
  ],
  "pip._vendor.pkg_resources.Distribution._get_metadata_path_for_display": [
    "pip._vendor.pkg_resources.Distribution.version"
  ],
  "pip._vendor.pkg_resources.Distribution._get_version": [
    "pip._vendor.pkg_resources.Distribution.version"
  ],
  "pip._vendor.pkg_resources.Distribution.version": [
    "pip._vendor.pkg_resources.Distribution.__str__"
  ],
  "pip._vendor.pyparsing.And.streamline": [
    "Ovr{pip._vendor.pyparsing.And.streamline}"
  ],
  "pip._vendor.pyparsing.Each.streamline": [
    "Ovr{pip._vendor.pyparsing.Each.streamline}"
  ],
  "pip._vendor.pyparsing.Forward.__ilshift__": [
    "pip._vendor.pyparsing.Forward.copy"
  ],
  "pip._vendor.pyparsing.Forward.__init__": [
    "pip._vendor.pyparsing.Forward.copy"
  ],
  "pip._vendor.pyparsing.Forward.__lshift__": [
    "pip._vendor.pyparsing.Forward.__ilshift__"
  ],
  "pip._vendor.pyparsing.Forward._setResultsName": [
    "Ovr{pip._vendor.pyparsing.Forward._setResultsName}"
  ],
  "pip._vendor.pyparsing.Forward.copy": [
    "Ovr{pip._vendor.pyparsing.Forward.copy}"
  ],
  "pip._vendor.pyparsing.Forward.streamline": [
    "Ovr{pip._vendor.pyparsing.Forward.streamline}"
  ],
  "pip._vendor.pyparsing.GoToColumn.preParse": [
    "Ovr{pip._vendor.pyparsing.GoToColumn.preParse}"
  ],
  "pip._vendor.pyparsing.Keyword.copy": [
    "Ovr{pip._vendor.pyparsing.Keyword.copy}"
  ],
  "pip._vendor.pyparsing.Literal.__init__": [
    "pip._vendor.pyparsing.ParseElementEnhance.__init__"
  ],
  "pip._vendor.pyparsing.MatchFirst._setResultsName": [
    "Ovr{pip._vendor.pyparsing.MatchFirst._setResultsName}"
  ],
  "pip._vendor.pyparsing.MatchFirst.streamline": [
    "Ovr{pip._vendor.pyparsing.MatchFirst.streamline}"
  ],
  "pip._vendor.pyparsing.Or._setResultsName": [
    "Ovr{pip._vendor.pyparsing.Or._setResultsName}"
  ],
  "pip._vendor.pyparsing.Or.streamline": [
    "Ovr{pip._vendor.pyparsing.Or.streamline}"
  ],
  "pip._vendor.pyparsing.ParseBaseException.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "pip._vendor.pyparsing.ParseElementEnhance.__init__": [
    "pip._vendor.pyparsing.Forward.__init__"
  ],
  "pip._vendor.pyparsing.ParseElementEnhance.streamline": [
    "Ovr{pip._vendor.pyparsing.ParseElementEnhance.streamline}"
  ],
  "pip._vendor.pyparsing.ParseExpression._setResultsName": [
    "Ovr{pip._vendor.pyparsing.ParseExpression._setResultsName}",
    "pip._vendor.pyparsing.MatchFirst._setResultsName",
    "pip._vendor.pyparsing.Or._setResultsName"
  ],
  "pip._vendor.pyparsing.ParseExpression.copy": [
    "Ovr{pip._vendor.pyparsing.ParseExpression.copy}"
  ],
  "pip._vendor.pyparsing.ParseExpression.streamline": [
    "Ovr{pip._vendor.pyparsing.ParseExpression.streamline}",
    "pip._vendor.pyparsing.And.streamline",
    "pip._vendor.pyparsing.Each.streamline",
    "pip._vendor.pyparsing.MatchFirst.streamline",
    "pip._vendor.pyparsing.Or.streamline"
  ],
  "pip._vendor.pyparsing.ParseResults.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "pip._vendor.pyparsing.ParseResults.asList": [
    "pip._vendor.pyparsing.ParserElement.transformString"
  ],
  "pip._vendor.pyparsing.ParserElement.__call__": [
    "pip._vendor.pyparsing.And.streamline",
    "pip._vendor.pyparsing.Each.streamline",
    "pip._vendor.pyparsing.Forward.__init__",
    "pip._vendor.pyparsing.Forward._setResultsName",
    "pip._vendor.pyparsing.Forward.copy",
    "pip._vendor.pyparsing.Keyword.copy",
    "pip._vendor.pyparsing.Literal.__init__",
    "pip._vendor.pyparsing.MatchFirst._setResultsName",
    "pip._vendor.pyparsing.MatchFirst.streamline",
    "pip._vendor.pyparsing.Or._setResultsName",
    "pip._vendor.pyparsing.Or.streamline",
    "pip._vendor.pyparsing.ParseElementEnhance.__init__",
    "pip._vendor.pyparsing.ParseElementEnhance.streamline",
    "pip._vendor.pyparsing.ParseExpression._setResultsName",
    "pip._vendor.pyparsing.ParseExpression.copy",
    "pip._vendor.pyparsing.ParseExpression.streamline",
    "pip._vendor.pyparsing.ParserElement.__repr__",
    "pip._vendor.pyparsing.ParserElement.copy",
    "pip._vendor.pyparsing.Regex.__init__",
    "pip._vendor.pyparsing.Token.__init__",
    "pip._vendor.pyparsing._MultipleMatch._setResultsName"
  ],
  "pip._vendor.pyparsing.ParserElement.__init__": [
    "pip._vendor.pyparsing.ParseElementEnhance.__init__",
    "pip._vendor.pyparsing.Token.__init__"
  ],
  "pip._vendor.pyparsing.ParserElement.__repr__": [
    "Ovr{pip._vendor.pyparsing.ParserElement.__repr__}"
  ],
  "pip._vendor.pyparsing.ParserElement._setResultsName": [
    "Ovr{pip._vendor.pyparsing.ParserElement._setResultsName}",
    "pip._vendor.pyparsing.Forward._setResultsName",
    "pip._vendor.pyparsing.ParseExpression._setResultsName",
    "pip._vendor.pyparsing._MultipleMatch._setResultsName"
  ],
  "pip._vendor.pyparsing.ParserElement._skipIgnorables": [
    "pip._vendor.pyparsing.GoToColumn.preParse",
    "pip._vendor.pyparsing.ParserElement.preParse"
  ],
  "pip._vendor.pyparsing.ParserElement._trim_traceback": [
    "pip._vendor.pyparsing.ParserElement.scanString",
    "pip._vendor.pyparsing.ParserElement.transformString"
  ],
  "pip._vendor.pyparsing.ParserElement.copy": [
    "Ovr{pip._vendor.pyparsing.ParserElement.copy}",
    "pip._vendor.pyparsing.Forward.copy",
    "pip._vendor.pyparsing.Keyword.copy",
    "pip._vendor.pyparsing.ParseExpression.copy"
  ],
  "pip._vendor.pyparsing.ParserElement.preParse": [
    "Ovr{pip._vendor.pyparsing.ParserElement.preParse}"
  ],
  "pip._vendor.pyparsing.ParserElement.resetCache": [
    "pip._vendor.pyparsing.ParserElement.scanString"
  ],
  "pip._vendor.pyparsing.ParserElement.scanString": [
    "pip._vendor.pyparsing.ParserElement.transformString"
  ],
  "pip._vendor.pyparsing.ParserElement.setParseAction": [
    "pip._vendor.pyparsing._ustr"
  ],
  "pip._vendor.pyparsing.ParserElement.setWhitespaceChars": [
    "pip._vendor.pyparsing.Forward.__lshift__",
    "pip._vendor.pyparsing.ParseElementEnhance.__init__"
  ],
  "pip._vendor.pyparsing.ParserElement.streamline": [
    "Ovr{pip._vendor.pyparsing.ParserElement.streamline}",
    "pip._vendor.pyparsing.ParseElementEnhance.streamline",
    "pip._vendor.pyparsing.ParseExpression.streamline"
  ],
  "pip._vendor.pyparsing.ParserElement.transformString": [
    "pip._vendor.pyparsing._ustr"
  ],
  "pip._vendor.pyparsing.Regex.__init__": [
    "pip._vendor.pyparsing._ustr"
  ],
  "pip._vendor.pyparsing.Token.__init__": [
    "pip._vendor.pyparsing.Literal.__init__",
    "pip._vendor.pyparsing.Regex.__init__"
  ],
  "pip._vendor.pyparsing._MultipleMatch._setResultsName": [
    "Ovr{pip._vendor.pyparsing._MultipleMatch._setResultsName}"
  ],
  "pip._vendor.pyparsing._PendingSkip.__repr__": [
    "Ovr{pip._vendor.pyparsing._PendingSkip.__repr__}"
  ],
  "pip._vendor.requests.cookies.RequestsCookieJar.__setitem__": [
    "Ovr{pip._vendor.requests.cookies.RequestsCookieJar.__setitem__}"
  ],
  "pip._vendor.requests.cookies.RequestsCookieJar._find_no_duplicates": [
    "pip._vendor.requests.cookies.RequestsCookieJar.get"
  ],
  "pip._vendor.requests.cookies.RequestsCookieJar.get": [
    "Ovr{pip._vendor.requests.cookies.RequestsCookieJar.get}",
    "click._compat.auto_wrap_for_ansi",
    "jinja2.lexer.get_lexer"
  ],
  "pip._vendor.requests.cookies.RequestsCookieJar.items": [
    "Ovr{pip._vendor.requests.cookies.RequestsCookieJar.items}"
  ],
  "pip._vendor.requests.cookies.RequestsCookieJar.iteritems": [
    "pip._vendor.requests.cookies.RequestsCookieJar.items"
  ],
  "pip._vendor.requests.cookies.RequestsCookieJar.itervalues": [
    "pip._vendor.requests.cookies.RequestsCookieJar.values"
  ],
  "pip._vendor.requests.cookies.RequestsCookieJar.set": [
    "pip._vendor.requests.cookies.RequestsCookieJar.__setitem__"
  ],
  "pip._vendor.requests.cookies.RequestsCookieJar.set_cookie": [
    "pip._vendor.requests.cookies.RequestsCookieJar.set"
  ],
  "pip._vendor.requests.cookies.RequestsCookieJar.values": [
    "Ovr{pip._vendor.requests.cookies.RequestsCookieJar.values}"
  ],
  "pip._vendor.requests.models.Response.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "pip._vendor.requests.structures.CaseInsensitiveDict.__iter__": [
    "Ovr{pip._vendor.requests.structures.CaseInsensitiveDict.__iter__}"
  ],
  "pip._vendor.requests.structures.CaseInsensitiveDict.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit"
  ],
  "pip._vendor.requests.structures.CaseInsensitiveDict.__setitem__": [
    "Ovr{pip._vendor.requests.structures.CaseInsensitiveDict.__setitem__}"
  ],
  "pip._vendor.requests.structures.LookupDict.__getitem__": [
    "Ovr{pip._vendor.requests.structures.LookupDict.__getitem__}"
  ],
  "pip._vendor.requests.structures.LookupDict.__repr__": [
    "jinja2.utils.LRUCache.__repr__",
    "pip._vendor.requests.structures.CaseInsensitiveDict.__repr__",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit",
    "sklearn.metrics._scorer._check_multimetric_scoring"
  ],
  "pip._vendor.requests.structures.LookupDict.get": [
    "Ovr{pip._vendor.requests.structures.LookupDict.get}"
  ],
  "pip._vendor.resolvelib.structs.IteratorMapping.__iter__": [
    "Ovr{pip._vendor.resolvelib.structs.IteratorMapping.__iter__}"
  ],
  "pip._vendor.resolvelib.structs._FactoryIterableView.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "pip._vendor.resolvelib.structs._SequenceIterableView.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "pip._vendor.tenacity.BaseRetrying.__call__": [
    "Ovr{pip._vendor.tenacity.BaseRetrying.__call__}"
  ],
  "pip._vendor.tenacity.BaseRetrying.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "pip._vendor.tenacity.BaseRetrying.begin": [
    "pip._vendor.tenacity.Retrying.__call__",
    "pip._vendor.tenacity._asyncio.AsyncRetrying.__call__",
    "pip._vendor.tenacity.tornadoweb.TornadoRetrying.__call__"
  ],
  "pip._vendor.tenacity.BaseRetrying.iter": [
    "pip._vendor.tenacity.Retrying.__call__",
    "pip._vendor.tenacity._asyncio.AsyncRetrying.__call__",
    "pip._vendor.tenacity.tornadoweb.TornadoRetrying.__call__"
  ],
  "pip._vendor.tenacity.BaseRetrying.statistics": [
    "pip._vendor.tenacity.BaseRetrying.begin",
    "pip._vendor.tenacity.BaseRetrying.iter"
  ],
  "pip._vendor.tenacity.Future.__init__": [
    "pip._vendor.tenacity.RetryCallState.set_exception",
    "pip._vendor.tenacity.RetryCallState.set_result"
  ],
  "pip._vendor.tenacity.RetryAction.__init__": [
    "pip._vendor.tenacity.BaseRetrying.iter"
  ],
  "pip._vendor.tenacity.RetryCallState.__init__": [
    "pip._vendor.tenacity.Retrying.__call__",
    "pip._vendor.tenacity._asyncio.AsyncRetrying.__call__",
    "pip._vendor.tenacity.tornadoweb.TornadoRetrying.__call__"
  ],
  "pip._vendor.tenacity.RetryCallState.prepare_for_next_attempt": [
    "pip._vendor.tenacity.Retrying.__call__",
    "pip._vendor.tenacity._asyncio.AsyncRetrying.__call__",
    "pip._vendor.tenacity.tornadoweb.TornadoRetrying.__call__"
  ],
  "pip._vendor.tenacity.RetryCallState.set_exception": [
    "pip._vendor.tenacity.Retrying.__call__",
    "pip._vendor.tenacity._asyncio.AsyncRetrying.__call__",
    "pip._vendor.tenacity.tornadoweb.TornadoRetrying.__call__"
  ],
  "pip._vendor.tenacity.RetryCallState.set_result": [
    "pip._vendor.tenacity.Retrying.__call__",
    "pip._vendor.tenacity._asyncio.AsyncRetrying.__call__",
    "pip._vendor.tenacity.tornadoweb.TornadoRetrying.__call__"
  ],
  "pip._vendor.tenacity.Retrying.__call__": [
    "Ovr{pip._vendor.tenacity.Retrying.__call__}",
    "pip._vendor.tenacity.Retrying.__call__"
  ],
  "pip._vendor.tenacity._asyncio.AsyncRetrying.__call__": [
    "Ovr{pip._vendor.tenacity._asyncio.AsyncRetrying.__call__}",
    "pip._vendor.tenacity._asyncio.AsyncRetrying.__call__"
  ],
  "pip._vendor.tenacity.tornadoweb.TornadoRetrying.__call__": [
    "Ovr{pip._vendor.tenacity.tornadoweb.TornadoRetrying.__call__}"
  ],
  "pip._vendor.urllib3._collections.HTTPHeaderDict.__iter__": [
    "Ovr{pip._vendor.urllib3._collections.HTTPHeaderDict.__iter__}",
    "pip._vendor.urllib3._collections.HTTPHeaderDict.iteritems",
    "pip._vendor.urllib3._collections.HTTPHeaderDict.itermerged"
  ],
  "pip._vendor.urllib3._collections.HTTPHeaderDict.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit"
  ],
  "pip._vendor.urllib3._collections.HTTPHeaderDict.__setitem__": [
    "Ovr{pip._vendor.urllib3._collections.HTTPHeaderDict.__setitem__}"
  ],
  "pip._vendor.urllib3._collections.HTTPHeaderDict.items": [
    "Ovr{pip._vendor.urllib3._collections.HTTPHeaderDict.items}"
  ],
  "pip._vendor.urllib3._collections.HTTPHeaderDict.iteritems": [
    "pip._vendor.urllib3._collections.HTTPHeaderDict.items"
  ],
  "pip._vendor.urllib3._collections.HTTPHeaderDict.itermerged": [
    "pip._vendor.urllib3._collections.HTTPHeaderDict.__repr__"
  ],
  "pip._vendor.urllib3._collections.RLock.__enter__": [
    "pip._vendor.urllib3._collections.RecentlyUsedContainer.__setitem__"
  ],
  "pip._vendor.urllib3._collections.RecentlyUsedContainer.__iter__": [
    "Ovr{pip._vendor.urllib3._collections.RecentlyUsedContainer.__iter__}"
  ],
  "pip._vendor.urllib3._collections.RecentlyUsedContainer.__setitem__": [
    "Ovr{pip._vendor.urllib3._collections.RecentlyUsedContainer.__setitem__}"
  ],
  "pip._vendor.urllib3.util.retry.Retry.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "polib._BaseFile.__eq__": [
    "click.parser.Argument.process",
    "pip._vendor.pyparsing.ParserElement.setParseAction",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.multioutput._BaseChain.fit"
  ],
  "polib._BaseFile.append": [
    "Ovr{polib._BaseFile.append}"
  ],
  "polib._BaseFile.insert": [
    "Ovr{polib._BaseFile.insert}"
  ],
  "pprint.PrettyPrinter.__init__": [
    "sklearn.utils._pprint._EstimatorPrettyPrinter.__init__",
    "sklearn.utils.tests.test_pprint.test_builtin_prettyprinter"
  ],
  "pprint.PrettyPrinter.pformat": [
    "sklearn.base.BaseEstimator.__repr__",
    "sklearn.utils.tests.test_pprint.test_gridsearch_pipeline",
    "sklearn.utils.tests.test_pprint.test_n_max_elements_to_show"
  ],
  "pprint.PrettyPrinter.pprint": [
    "sklearn.utils.tests.test_pprint.test_builtin_prettyprinter"
  ],
  "prompt_toolkit.contrib.regular_languages.compiler.Variables.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "prompt_toolkit.formatted_text.base.FormattedText.__repr__": [
    "marshmallow.orderedset.OrderedSet.__repr__",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.preprocessing._encoders._BaseEncoder._transform",
    "sklearn.utils._encode._unique_python",
    "sklearn.utils._get_column_indices",
    "sklearn.utils._mocking.CheckingClassifier.fit",
    "sklearn.utils.class_weight.compute_class_weight",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.validation._check_monotonic_cst",
    "sklearn.utils.validation._get_feature_names"
  ],
  "prompt_toolkit.layout.utils._ExplodedList.__setitem__": [
    "Ovr{prompt_toolkit.layout.utils._ExplodedList.__setitem__}"
  ],
  "prompt_toolkit.layout.utils._ExplodedList.append": [
    "Ovr{prompt_toolkit.layout.utils._ExplodedList.append}"
  ],
  "prompt_toolkit.layout.utils._ExplodedList.extend": [
    "Ovr{prompt_toolkit.layout.utils._ExplodedList.extend}",
    "prompt_toolkit.layout.utils._ExplodedList.append"
  ],
  "prompt_toolkit.layout.utils._ExplodedList.insert": [
    "Ovr{prompt_toolkit.layout.utils._ExplodedList.insert}"
  ],
  "prompt_toolkit.win32_types.CONSOLE_SCREEN_BUFFER_INFO.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "prompt_toolkit.win32_types.COORD.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "property.__init__": [
    "sklearn.tree._reingold_tilford.DrawTree.$class_toplevel"
  ],
  "psycopg2.extras.DictRow.__getitem__": [
    "Ovr{psycopg2.extras.DictRow.__getitem__}"
  ],
  "psycopg2.extras.DictRow.__setitem__": [
    "Ovr{psycopg2.extras.DictRow.__setitem__}"
  ],
  "psycopg2.extras.DictRow.copy": [
    "Ovr{psycopg2.extras.DictRow.copy}"
  ],
  "psycopg2.extras.RealDictRow.__setitem__": [
    "Ovr{psycopg2.extras.RealDictRow.__setitem__}"
  ],
  "pygments.util.UnclosingTextIOWrapper.close": [
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel"
  ],
  "pytz.lazy.LazyDict.__iter__": [
    "Ovr{pytz.lazy.LazyDict.__iter__}"
  ],
  "random.Random.__init__": [
    "sklearn.tests.random_seed.pytest_configure"
  ],
  "random.Random.choice": [
    "sklearn.tests.random_seed.pytest_configure"
  ],
  "range.__getitem__": [
    "Ovr{range.__getitem__}",
    "benchmarks.bench_plot_polynomial_kernel_approximation.$toplevel"
  ],
  "range.__init__": [
    "asv_benchmarks.benchmarks.common.get_from_config",
    "benchmarks.bench_feature_expansions.$toplevel",
    "benchmarks.bench_glm.$toplevel",
    "benchmarks.bench_glmnet.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_categorical_only.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel",
    "benchmarks.bench_isotonic.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "benchmarks.bench_plot_fastkmeans.compute_bench_2",
    "benchmarks.bench_plot_hierarchical.$toplevel",
    "benchmarks.bench_plot_nmf._fit_projected_gradient",
    "benchmarks.bench_plot_nmf._nls_subproblem",
    "benchmarks.bench_plot_parallel_pairwise.plot",
    "benchmarks.bench_plot_polynomial_kernel_approximation.$toplevel",
    "benchmarks.bench_plot_randomized_svd.get_data",
    "benchmarks.bench_plot_ward.$toplevel",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_rcv1_logreg_convergence.$toplevel",
    "benchmarks.bench_saga.fit_single",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "benchmarks.bench_sgd_regression.$toplevel",
    "benchmarks.bench_sparsify.benchmark_dense_predict",
    "benchmarks.bench_sparsify.benchmark_sparse_predict",
    "benchmarks.bench_tree.$toplevel",
    "click.parser._unpack_args",
    "doc.tutorial.text_analytics.solutions.exercise_02_sentiment.$toplevel",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.applications.plot_face_recognition.$toplevel",
    "examples.applications.plot_face_recognition.plot_gallery",
    "examples.applications.plot_model_complexity_influence.benchmark_influence",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_prediction_latency.atomic_benchmark_estimator",
    "examples.applications.plot_prediction_latency.bulk_benchmark_estimator",
    "examples.applications.plot_prediction_latency.plot_benchmark_throughput",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.applications.svm_gui.View.update",
    "examples.applications.wikipedia_principal_eigenvector.centrality_scores",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.classification.plot_digits_classification.$toplevel",
    "examples.classification.plot_lda.$toplevel",
    "examples.cluster.plot_adjusted_for_chance_measures.fixed_classes_uniform_labelings_scores",
    "examples.cluster.plot_adjusted_for_chance_measures.uniform_labelings_scores",
    "examples.cluster.plot_affinity_propagation.$toplevel",
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel",
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel",
    "examples.cluster.plot_coin_segmentation.$toplevel",
    "examples.cluster.plot_coin_ward_segmentation.$toplevel",
    "examples.cluster.plot_dict_face_patches.$toplevel",
    "examples.cluster.plot_digits_agglomeration.$toplevel",
    "examples.cluster.plot_hdbscan.plot",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.make_data",
    "examples.cluster.plot_mean_shift.$toplevel",
    "examples.cluster.plot_mini_batch_kmeans.$toplevel",
    "examples.cluster.plot_optics.$toplevel",
    "examples.covariance.plot_lw_vs_oas.$toplevel",
    "examples.covariance.plot_robust_vs_empirical_covariance.$toplevel",
    "examples.ensemble.plot_adaboost_multiclass.$toplevel",
    "examples.ensemble.plot_adaboost_twoclass.$toplevel",
    "examples.ensemble.plot_bias_variance.$toplevel",
    "examples.ensemble.plot_bias_variance.generate",
    "examples.ensemble.plot_ensemble_oob.$toplevel",
    "examples.ensemble.plot_forest_importances.$toplevel",
    "examples.feature_selection.plot_f_test_vs_mi.$toplevel",
    "examples.feature_selection.plot_rfe_with_cross_validation.$toplevel",
    "examples.gaussian_process.plot_gpc.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.linear_model.plot_lasso_and_elasticnet.$toplevel",
    "examples.linear_model.plot_lasso_model_selection.$toplevel",
    "examples.linear_model.plot_logistic.$toplevel",
    "examples.linear_model.plot_multi_task_lasso_support.$toplevel",
    "examples.linear_model.plot_ols_ridge_variance.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_polynomial_interpolation.$toplevel",
    "examples.linear_model.plot_sgd_comparison.$toplevel",
    "examples.linear_model.plot_sgd_early_stopping.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_mnist.$toplevel",
    "examples.manifold.plot_lle_digits.plot_embedding",
    "examples.manifold.plot_mds.$toplevel",
    "examples.miscellaneous.plot_isotonic_regression.$toplevel",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "examples.mixture.plot_concentration_prior.$toplevel",
    "examples.mixture.plot_concentration_prior.plot_ellipses",
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.mixture.plot_gmm_selection.$toplevel",
    "examples.mixture.plot_gmm_sin.$toplevel",
    "examples.mixture.plot_gmm_sin.plot_samples",
    "examples.model_selection.plot_cv_indices.plot_cv_indices",
    "examples.model_selection.plot_cv_indices.visualize_groups",
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.scoring_on_bootstrap",
    "examples.model_selection.plot_multi_metric_evaluation.$toplevel",
    "examples.model_selection.plot_nested_cross_validation_iris.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.model_selection.plot_randomized_search.report",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.model_selection.plot_successive_halving_heatmap.make_heatmap",
    "examples.model_selection.plot_successive_halving_iterations.$toplevel",
    "examples.model_selection.plot_underfitting_overfitting.$toplevel",
    "examples.multioutput.plot_classifier_chain_yeast.$toplevel",
    "examples.neighbors.plot_digits_kde_sampling.$toplevel",
    "examples.neighbors.plot_nca_illustration.$toplevel",
    "examples.neighbors.plot_species_kde.$toplevel",
    "examples.neural_networks.plot_rbm_logistic_classification.nudge_dataset",
    "examples.preprocessing.plot_scaling_importance.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_2_0.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "examples.text.plot_document_clustering.$toplevel",
    "examples.text.plot_document_clustering.fit_and_evaluate",
    "examples.tree.plot_iris_dtc.$toplevel",
    "examples.tree.plot_unveil_tree_structure.$toplevel",
    "sklearn._loss.loss.HalfMultinomialLoss.fit_intercept_only",
    "sklearn.cluster._affinity_propagation._affinity_propagation",
    "sklearn.cluster._agglomerative._hc_cut",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.cluster._bicluster.SpectralBiclustering._fit",
    "sklearn.cluster._bicluster.SpectralCoclustering._fit",
    "sklearn.cluster._bicluster._bistochastic_normalize",
    "sklearn.cluster._birch._iterate_sparse_X",
    "sklearn.cluster._bisect_k_means.BisectingKMeans._bisect",
    "sklearn.cluster._bisect_k_means.BisectingKMeans._inertia_per_cluster",
    "sklearn.cluster._bisect_k_means.BisectingKMeans.fit",
    "sklearn.cluster._feature_agglomeration.AgglomerationTransform.transform",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN._weighted_cluster_center",
    "sklearn.cluster._kmeans.KMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans._kmeans_plusplus",
    "sklearn.cluster._kmeans._kmeans_single_elkan",
    "sklearn.cluster._kmeans._kmeans_single_lloyd",
    "sklearn.cluster._mean_shift.MeanShift.fit",
    "sklearn.cluster._optics._correct_predecessor",
    "sklearn.cluster._optics.compute_optics_graph",
    "sklearn.cluster._spectral.discretize",
    "sklearn.cluster.tests.common.generate_clustered_data",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_remainder",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.covariance._robust_covariance.fast_mcd",
    "sklearn.covariance._robust_covariance.select_candidates",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf_shrinkage",
    "sklearn.cross_decomposition._pls._PLS.fit",
    "sklearn.cross_decomposition._pls._get_first_singular_vectors_power_method",
    "sklearn.datasets._base.load_digits",
    "sklearn.datasets._covtype.$toplevel",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._olivetti_faces.fetch_olivetti_faces",
    "sklearn.datasets._samples_generator.make_biclusters",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_checkerboard",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.datasets._samples_generator.make_multilabel_classification",
    "sklearn.datasets._samples_generator.make_sparse_coded_signal",
    "sklearn.datasets._samples_generator.make_swiss_roll",
    "sklearn.datasets._species_distributions._load_coverage",
    "sklearn.datasets._twenty_newsgroups.strip_newsgroup_footer",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning._update_dict",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit",
    "sklearn.decomposition._factor_analysis._ortho_rotation",
    "sklearn.decomposition._fastica._ica_def",
    "sklearn.decomposition._fastica._ica_par",
    "sklearn.decomposition._lda.LatentDirichletAllocation._approx_bound",
    "sklearn.decomposition._lda.LatentDirichletAllocation.fit",
    "sklearn.decomposition._lda._update_doc_distribution",
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform",
    "sklearn.decomposition._nmf.MiniBatchNMF._solve_W",
    "sklearn.decomposition._nmf._beta_divergence",
    "sklearn.decomposition._nmf._fit_coordinate_descent",
    "sklearn.decomposition._nmf._fit_multiplicative_update",
    "sklearn.decomposition._nmf._initialize_nmf",
    "sklearn.decomposition._nmf._multiplicative_update_h",
    "sklearn.decomposition._nmf._multiplicative_update_w",
    "sklearn.decomposition._nmf._special_sparse_dot",
    "sklearn.decomposition._pca._assess_dimension",
    "sklearn.decomposition._pca._infer_dimension",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis._decision_function",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit",
    "sklearn.discriminant_analysis._class_means",
    "sklearn.dummy.DummyClassifier.fit",
    "sklearn.dummy.DummyClassifier.predict",
    "sklearn.dummy.DummyClassifier.predict_proba",
    "sklearn.dummy.DummyRegressor.fit",
    "sklearn.ensemble._bagging.BaggingClassifier._set_oob_score",
    "sklearn.ensemble._bagging.BaggingClassifier.decision_function",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_proba",
    "sklearn.ensemble._bagging.BaggingRegressor.predict",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._bagging._parallel_build_estimators",
    "sklearn.ensemble._bagging._parallel_predict_log_proba",
    "sklearn.ensemble._bagging._parallel_predict_proba",
    "sklearn.ensemble._forest.BaseForest._compute_oob_predictions",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._forest.ForestClassifier._validate_y_class_weight",
    "sklearn.ensemble._forest.ForestClassifier.predict",
    "sklearn.ensemble._forest.ForestClassifier.predict_log_proba",
    "sklearn.ensemble._forest.RandomTreesEmbedding.get_feature_names_out",
    "sklearn.ensemble._forest._accumulate_prediction",
    "sklearn.ensemble._gb.BaseGradientBoosting._compute_partial_dependence_recursion",
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stage",
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stages",
    "sklearn.ensemble._gb.BaseGradientBoosting._staged_raw_predict",
    "sklearn.ensemble._gb.BaseGradientBoosting.apply",
    "sklearn.ensemble._gb_losses.MultinomialDeviance.__call__",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.fit",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_interaction_cst",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._staged_raw_predict",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._intilialize_root",
    "sklearn.ensemble._stacking._BaseStacking.get_feature_names_out",
    "sklearn.ensemble._voting.VotingClassifier.get_feature_names_out",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.fit",
    "sklearn.externals._arff.$toplevel",
    "sklearn.externals._arff.COOData.encode_data",
    "sklearn.externals._arff.DenseGeneratorData.decode_rows",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.inverse_transform",
    "sklearn.feature_extraction.image.reconstruct_from_patches_2d",
    "sklearn.feature_extraction.text.CountVectorizer.inverse_transform",
    "sklearn.feature_extraction.text._VectorizerMixin._char_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin._char_wb_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.feature_extraction.text._VectorizerMixin._word_ngrams",
    "sklearn.feature_selection._mutual_info._iterate_columns",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector.fit",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace._posterior_mode",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.log_marginal_likelihood",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.sample_y",
    "sklearn.gaussian_process.kernels.CompoundKernel.__eq__",
    "sklearn.gaussian_process.kernels.Kernel._check_bounds_params",
    "sklearn.gaussian_process.kernels._approx_fprime",
    "sklearn.impute._base.SimpleImputer._sparse_fit",
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.impute._knn.KNNImputer.transform.process_chunk",
    "sklearn.inspection._pd_utils._check_feature_names",
    "sklearn.inspection._permutation_importance._calculate_permutation_scores",
    "sklearn.inspection._permutation_importance.permutation_importance",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_two_way_partial_dependence",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.kernel_approximation.AdditiveChi2Sampler._transform_dense",
    "sklearn.kernel_approximation.AdditiveChi2Sampler._transform_sparse",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out",
    "sklearn.kernel_approximation.PolynomialCountSketch.transform",
    "sklearn.linear_model._base.LinearRegression.fit",
    "sklearn.linear_model._bayes.ARDRegression.fit",
    "sklearn.linear_model._bayes.BayesianRidge.fit",
    "sklearn.linear_model._coordinate_descent.ElasticNet.fit",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.line_search",
    "sklearn.linear_model._least_angle.Lars._fit",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._omp.orthogonal_mp",
    "sklearn.linear_model._omp.orthogonal_mp_gram",
    "sklearn.linear_model._ridge._RidgeGCV._sparse_multidot_diag",
    "sklearn.linear_model._ridge._RidgeGCV.fit",
    "sklearn.linear_model._ridge._solve_lbfgs",
    "sklearn.linear_model._ridge._solve_lsqr",
    "sklearn.linear_model._ridge._solve_sparse_cg",
    "sklearn.linear_model._theil_sen.TheilSenRegressor.fit",
    "sklearn.linear_model._theil_sen._spatial_median",
    "sklearn.linear_model.tests.test_huber.test_huber_gradient",
    "sklearn.manifold._isomap.Isomap.transform",
    "sklearn.manifold._locally_linear.LocallyLinearEmbedding.transform",
    "sklearn.manifold._locally_linear.locally_linear_embedding",
    "sklearn.manifold._mds._smacof_single",
    "sklearn.manifold._mds.smacof",
    "sklearn.manifold._spectral_embedding._graph_connected_component",
    "sklearn.manifold._t_sne._gradient_descent",
    "sklearn.manifold._t_sne._kl_divergence",
    "sklearn.metrics._base._average_binary_score",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.plot",
    "sklearn.metrics.cluster._bicluster._pairwise_similarity",
    "sklearn.metrics.cluster._unsupervised._silhouette_reduce",
    "sklearn.metrics.cluster._unsupervised.calinski_harabasz_score",
    "sklearn.metrics.cluster._unsupervised.davies_bouldin_score",
    "sklearn.metrics.pairwise._pairwise_callable",
    "sklearn.metrics.pairwise.paired_distances",
    "sklearn.mixture._base.BaseMixture.fit_predict",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_wishart_full",
    "sklearn.mixture._gaussian_mixture._estimate_gaussian_covariances_full",
    "sklearn.model_selection._search.BaseSearchCV._format_results._store",
    "sklearn.model_selection._search.ParameterSampler.__iter__",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.model_selection._split.GroupKFold._iter_test_indices",
    "sklearn.model_selection._split.LeaveOneOut._iter_test_indices",
    "sklearn.model_selection._split.LeavePGroupsOut._iter_test_masks",
    "sklearn.model_selection._split.LeavePOut._iter_test_indices",
    "sklearn.model_selection._split.ShuffleSplit._iter_indices",
    "sklearn.model_selection._split.StratifiedGroupKFold._find_best_fold",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.model_selection._split.StratifiedKFold._iter_test_masks",
    "sklearn.model_selection._split.StratifiedKFold._make_test_folds",
    "sklearn.model_selection._split.StratifiedShuffleSplit._iter_indices",
    "sklearn.model_selection._split.TimeSeriesSplit.split",
    "sklearn.model_selection._split._RepeatedSplits.split",
    "sklearn.model_selection._validation._fit_and_predict",
    "sklearn.model_selection._validation.cross_val_predict",
    "sklearn.model_selection._validation.permutation_test_score",
    "sklearn.multiclass.OneVsOneClassifier.fit",
    "sklearn.multiclass.OneVsOneClassifier.partial_fit",
    "sklearn.multiclass.OneVsRestClassifier.partial_fit",
    "sklearn.multiclass.OutputCodeClassifier.fit",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.multioutput._MultiOutputEstimator.fit",
    "sklearn.multioutput._MultiOutputEstimator.partial_fit",
    "sklearn.naive_bayes.CategoricalNB._count",
    "sklearn.naive_bayes.CategoricalNB._count._update_cat_count",
    "sklearn.naive_bayes.CategoricalNB._init_counters",
    "sklearn.naive_bayes.CategoricalNB._joint_log_likelihood",
    "sklearn.naive_bayes.CategoricalNB._update_feature_log_prob",
    "sklearn.naive_bayes.GaussianNB._joint_log_likelihood",
    "sklearn.neighbors._base.NeighborsBase._fit",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.fit",
    "sklearn.neighbors._regression.KNeighborsRegressor.predict",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._backprop",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_lbfgs",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._forward_pass",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._forward_pass_fast",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._initialize",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._unpack",
    "sklearn.neural_network._rbm.BernoulliRBM.fit",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_base_optimizer",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_no_momentum",
    "sklearn.pipeline._name_estimators",
    "sklearn.preprocessing._data.QuantileTransformer._sparse_fit",
    "sklearn.preprocessing._data.QuantileTransformer._transform",
    "sklearn.preprocessing._data.RobustScaler.fit",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.inverse_transform",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.transform",
    "sklearn.preprocessing._encoders.OneHotEncoder.get_feature_names_out",
    "sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform",
    "sklearn.preprocessing._encoders._BaseEncoder._check_X",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.preprocessing._encoders._BaseEncoder._map_infrequent_categories",
    "sklearn.preprocessing._encoders._BaseEncoder._transform",
    "sklearn.preprocessing._label.MultiLabelBinarizer._build_cache",
    "sklearn.preprocessing._polynomial.PolynomialFeatures._combinations",
    "sklearn.preprocessing._polynomial.PolynomialFeatures._num_combinations",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform",
    "sklearn.preprocessing._polynomial.SplineTransformer.fit",
    "sklearn.preprocessing._polynomial.SplineTransformer.get_feature_names_out",
    "sklearn.preprocessing._polynomial.SplineTransformer.transform",
    "sklearn.random_projection._sparse_random_matrix",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.fit",
    "sklearn.svm._base._one_vs_one_coef",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._classes.BaseDecisionTree.predict",
    "sklearn.tree._classes.DecisionTreeClassifier.predict_log_proba",
    "sklearn.tree._classes.DecisionTreeClassifier.predict_proba",
    "sklearn.utils._get_column_indices",
    "sklearn.utils._testing._convert_container",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.class_weight.compute_sample_weight",
    "sklearn.utils.estimator_checks.check_classifier_multioutput",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_global_ouptut_transform_pandas",
    "sklearn.utils.estimator_checks.check_set_output_transform_pandas",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out_pandas",
    "sklearn.utils.extmath._deterministic_vector_sign_flip",
    "sklearn.utils.extmath.randomized_range_finder",
    "sklearn.utils.extmath.svd_flip",
    "sklearn.utils.gen_batches",
    "sklearn.utils.gen_even_slices",
    "sklearn.utils.graph._fix_connected_components",
    "sklearn.utils.multiclass._ovr_decision_function",
    "sklearn.utils.multiclass.class_distribution",
    "sklearn.utils.random._random_choice_csc",
    "sklearn.utils.resample",
    "sklearn.utils.stats._weighted_percentile",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.tests.test_fast_dict.test_int_float_dict",
    "sklearn.utils.tests.test_murmurhash.test_no_collision_on_byte_range",
    "sklearn.utils.tests.test_murmurhash.test_uniform_distribution",
    "sklearn.utils.tests.test_pprint.test_n_max_elements_to_show",
    "sklearn.utils.tests.test_shortest_path.floyd_warshall_slow",
    "sklearn.utils.tests.test_shortest_path.test_shortest_path",
    "sklearn.utils.validation._check_feature_names_in",
    "sklearn.utils.validation._generate_get_feature_names_out"
  ],
  "range.__iter__": [
    "Ovr{range.__iter__}",
    "benchmarks.bench_feature_expansions.$toplevel",
    "benchmarks.bench_glm.$toplevel",
    "benchmarks.bench_glmnet.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel",
    "benchmarks.bench_isotonic.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "benchmarks.bench_plot_fastkmeans.compute_bench_2",
    "benchmarks.bench_plot_hierarchical.$toplevel",
    "benchmarks.bench_plot_nmf._fit_projected_gradient",
    "benchmarks.bench_plot_nmf._nls_subproblem",
    "benchmarks.bench_plot_parallel_pairwise.plot",
    "benchmarks.bench_plot_polynomial_kernel_approximation.$toplevel",
    "benchmarks.bench_plot_randomized_svd.get_data",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_saga.fit_single",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "benchmarks.bench_sgd_regression.$toplevel",
    "benchmarks.bench_sparsify.benchmark_dense_predict",
    "benchmarks.bench_sparsify.benchmark_sparse_predict",
    "benchmarks.bench_tree.$toplevel",
    "click.parser._unpack_args",
    "doc.tutorial.text_analytics.solutions.exercise_02_sentiment.$toplevel",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.applications.plot_face_recognition.$toplevel",
    "examples.applications.plot_face_recognition.plot_gallery",
    "examples.applications.plot_model_complexity_influence.benchmark_influence",
    "examples.applications.plot_prediction_latency.atomic_benchmark_estimator",
    "examples.applications.plot_prediction_latency.bulk_benchmark_estimator",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.applications.svm_gui.View.update",
    "examples.applications.wikipedia_principal_eigenvector.centrality_scores",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.classification.plot_digits_classification.$toplevel",
    "examples.classification.plot_lda.$toplevel",
    "examples.cluster.plot_adjusted_for_chance_measures.fixed_classes_uniform_labelings_scores",
    "examples.cluster.plot_adjusted_for_chance_measures.uniform_labelings_scores",
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel",
    "examples.cluster.plot_coin_segmentation.$toplevel",
    "examples.cluster.plot_coin_ward_segmentation.$toplevel",
    "examples.cluster.plot_dict_face_patches.$toplevel",
    "examples.cluster.plot_digits_agglomeration.$toplevel",
    "examples.cluster.plot_hdbscan.plot",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.make_data",
    "examples.cluster.plot_mini_batch_kmeans.$toplevel",
    "examples.covariance.plot_lw_vs_oas.$toplevel",
    "examples.covariance.plot_robust_vs_empirical_covariance.$toplevel",
    "examples.ensemble.plot_bias_variance.$toplevel",
    "examples.ensemble.plot_bias_variance.generate",
    "examples.ensemble.plot_ensemble_oob.$toplevel",
    "examples.ensemble.plot_forest_importances.$toplevel",
    "examples.feature_selection.plot_f_test_vs_mi.$toplevel",
    "examples.gaussian_process.plot_gpc.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.linear_model.plot_lasso_and_elasticnet.$toplevel",
    "examples.linear_model.plot_lasso_model_selection.$toplevel",
    "examples.linear_model.plot_multi_task_lasso_support.$toplevel",
    "examples.linear_model.plot_ols_ridge_variance.$toplevel",
    "examples.linear_model.plot_polynomial_interpolation.$toplevel",
    "examples.linear_model.plot_sgd_comparison.$toplevel",
    "examples.linear_model.plot_sgd_early_stopping.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_mnist.$toplevel",
    "examples.manifold.plot_lle_digits.plot_embedding",
    "examples.manifold.plot_mds.$toplevel",
    "examples.miscellaneous.plot_isotonic_regression.$toplevel",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "examples.mixture.plot_concentration_prior.$toplevel",
    "examples.mixture.plot_concentration_prior.plot_ellipses",
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.mixture.plot_gmm_sin.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.scoring_on_bootstrap",
    "examples.model_selection.plot_nested_cross_validation_iris.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.model_selection.plot_randomized_search.report",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.model_selection.plot_successive_halving_heatmap.make_heatmap",
    "examples.model_selection.plot_successive_halving_iterations.$toplevel",
    "examples.model_selection.plot_underfitting_overfitting.$toplevel",
    "examples.multioutput.plot_classifier_chain_yeast.$toplevel",
    "examples.neighbors.plot_digits_kde_sampling.$toplevel",
    "examples.neighbors.plot_nca_illustration.$toplevel",
    "examples.neighbors.plot_species_kde.$toplevel",
    "examples.neural_networks.plot_rbm_logistic_classification.nudge_dataset",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_2_0.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "examples.text.plot_document_clustering.$toplevel",
    "examples.text.plot_document_clustering.fit_and_evaluate",
    "examples.tree.plot_unveil_tree_structure.$toplevel",
    "sklearn._loss.loss.HalfMultinomialLoss.fit_intercept_only",
    "sklearn.cluster._affinity_propagation._affinity_propagation",
    "sklearn.cluster._agglomerative._hc_cut",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.cluster._bicluster.SpectralBiclustering._fit",
    "sklearn.cluster._bicluster.SpectralCoclustering._fit",
    "sklearn.cluster._bicluster._bistochastic_normalize",
    "sklearn.cluster._birch._iterate_sparse_X",
    "sklearn.cluster._bisect_k_means.BisectingKMeans._bisect",
    "sklearn.cluster._bisect_k_means.BisectingKMeans._inertia_per_cluster",
    "sklearn.cluster._bisect_k_means.BisectingKMeans.fit",
    "sklearn.cluster._feature_agglomeration.AgglomerationTransform.transform",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN._weighted_cluster_center",
    "sklearn.cluster._kmeans.KMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans._kmeans_plusplus",
    "sklearn.cluster._kmeans._kmeans_single_elkan",
    "sklearn.cluster._kmeans._kmeans_single_lloyd",
    "sklearn.cluster._mean_shift.MeanShift.fit",
    "sklearn.cluster._optics._correct_predecessor",
    "sklearn.cluster._optics.compute_optics_graph",
    "sklearn.cluster._spectral.discretize",
    "sklearn.cluster.tests.common.generate_clustered_data",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.covariance._robust_covariance.fast_mcd",
    "sklearn.covariance._robust_covariance.select_candidates",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf_shrinkage",
    "sklearn.cross_decomposition._pls._PLS.fit",
    "sklearn.cross_decomposition._pls._get_first_singular_vectors_power_method",
    "sklearn.datasets._base.load_digits",
    "sklearn.datasets._covtype.$toplevel",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._olivetti_faces.fetch_olivetti_faces",
    "sklearn.datasets._samples_generator.make_biclusters",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_checkerboard",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.datasets._samples_generator.make_multilabel_classification",
    "sklearn.datasets._samples_generator.make_sparse_coded_signal",
    "sklearn.datasets._samples_generator.make_swiss_roll",
    "sklearn.datasets._species_distributions._load_coverage",
    "sklearn.datasets._twenty_newsgroups.strip_newsgroup_footer",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning._update_dict",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit",
    "sklearn.decomposition._factor_analysis._ortho_rotation",
    "sklearn.decomposition._fastica._ica_def",
    "sklearn.decomposition._fastica._ica_par",
    "sklearn.decomposition._lda.LatentDirichletAllocation._approx_bound",
    "sklearn.decomposition._lda.LatentDirichletAllocation.fit",
    "sklearn.decomposition._lda._update_doc_distribution",
    "sklearn.decomposition._nmf.MiniBatchNMF._solve_W",
    "sklearn.decomposition._nmf._beta_divergence",
    "sklearn.decomposition._nmf._fit_coordinate_descent",
    "sklearn.decomposition._nmf._fit_multiplicative_update",
    "sklearn.decomposition._nmf._initialize_nmf",
    "sklearn.decomposition._nmf._multiplicative_update_h",
    "sklearn.decomposition._nmf._multiplicative_update_w",
    "sklearn.decomposition._nmf._special_sparse_dot",
    "sklearn.decomposition._pca._assess_dimension",
    "sklearn.decomposition._pca._infer_dimension",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis._decision_function",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit",
    "sklearn.discriminant_analysis._class_means",
    "sklearn.dummy.DummyClassifier.fit",
    "sklearn.dummy.DummyClassifier.predict",
    "sklearn.dummy.DummyClassifier.predict_proba",
    "sklearn.dummy.DummyRegressor.fit",
    "sklearn.ensemble._bagging.BaggingClassifier._set_oob_score",
    "sklearn.ensemble._bagging.BaggingClassifier.decision_function",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_proba",
    "sklearn.ensemble._bagging.BaggingRegressor.predict",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._bagging._parallel_build_estimators",
    "sklearn.ensemble._bagging._parallel_predict_proba",
    "sklearn.ensemble._forest.BaseForest._compute_oob_predictions",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._forest.ForestClassifier._validate_y_class_weight",
    "sklearn.ensemble._forest.ForestClassifier.predict",
    "sklearn.ensemble._forest.ForestClassifier.predict_log_proba",
    "sklearn.ensemble._forest.RandomTreesEmbedding.get_feature_names_out",
    "sklearn.ensemble._forest._accumulate_prediction",
    "sklearn.ensemble._gb.BaseGradientBoosting._compute_partial_dependence_recursion",
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stage",
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stages",
    "sklearn.ensemble._gb.BaseGradientBoosting._staged_raw_predict",
    "sklearn.ensemble._gb.BaseGradientBoosting.apply",
    "sklearn.ensemble._gb_losses.MultinomialDeviance.__call__",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.fit",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_interaction_cst",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._staged_raw_predict",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._stacking._BaseStacking.get_feature_names_out",
    "sklearn.ensemble._voting.VotingClassifier.get_feature_names_out",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.fit",
    "sklearn.externals._arff.$toplevel",
    "sklearn.externals._arff.COOData.encode_data",
    "sklearn.externals._arff.DenseGeneratorData.decode_rows",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.inverse_transform",
    "sklearn.feature_extraction.image.reconstruct_from_patches_2d",
    "sklearn.feature_extraction.text.CountVectorizer.inverse_transform",
    "sklearn.feature_extraction.text._VectorizerMixin._char_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin._char_wb_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.feature_extraction.text._VectorizerMixin._word_ngrams",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector.fit",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace._posterior_mode",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.log_marginal_likelihood",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.sample_y",
    "sklearn.gaussian_process.kernels.CompoundKernel.__eq__",
    "sklearn.gaussian_process.kernels.Kernel._check_bounds_params",
    "sklearn.gaussian_process.kernels._approx_fprime",
    "sklearn.impute._base.SimpleImputer._sparse_fit",
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.impute._knn.KNNImputer.transform.process_chunk",
    "sklearn.inspection._pd_utils._check_feature_names",
    "sklearn.inspection._permutation_importance._calculate_permutation_scores",
    "sklearn.inspection._permutation_importance.permutation_importance",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_two_way_partial_dependence",
    "sklearn.kernel_approximation.AdditiveChi2Sampler._transform_dense",
    "sklearn.kernel_approximation.AdditiveChi2Sampler._transform_sparse",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out",
    "sklearn.kernel_approximation.PolynomialCountSketch.transform",
    "sklearn.linear_model._base.LinearRegression.fit",
    "sklearn.linear_model._bayes.ARDRegression.fit",
    "sklearn.linear_model._bayes.BayesianRidge.fit",
    "sklearn.linear_model._coordinate_descent.ElasticNet.fit",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.line_search",
    "sklearn.linear_model._least_angle.Lars._fit",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._omp.orthogonal_mp",
    "sklearn.linear_model._omp.orthogonal_mp_gram",
    "sklearn.linear_model._ridge._RidgeGCV._sparse_multidot_diag",
    "sklearn.linear_model._ridge._RidgeGCV.fit",
    "sklearn.linear_model._ridge._solve_lbfgs",
    "sklearn.linear_model._ridge._solve_lsqr",
    "sklearn.linear_model._ridge._solve_sparse_cg",
    "sklearn.linear_model._theil_sen.TheilSenRegressor.fit",
    "sklearn.linear_model._theil_sen._spatial_median",
    "sklearn.linear_model.tests.test_huber.test_huber_gradient",
    "sklearn.manifold._isomap.Isomap.transform",
    "sklearn.manifold._locally_linear.LocallyLinearEmbedding.transform",
    "sklearn.manifold._locally_linear.locally_linear_embedding",
    "sklearn.manifold._mds._smacof_single",
    "sklearn.manifold._mds.smacof",
    "sklearn.manifold._spectral_embedding._graph_connected_component",
    "sklearn.manifold._t_sne._gradient_descent",
    "sklearn.manifold._t_sne._kl_divergence",
    "sklearn.metrics._base._average_binary_score",
    "sklearn.metrics.cluster._bicluster._pairwise_similarity",
    "sklearn.metrics.cluster._unsupervised._silhouette_reduce",
    "sklearn.metrics.cluster._unsupervised.calinski_harabasz_score",
    "sklearn.metrics.cluster._unsupervised.davies_bouldin_score",
    "sklearn.metrics.pairwise._pairwise_callable",
    "sklearn.metrics.pairwise.paired_distances",
    "sklearn.mixture._base.BaseMixture.fit_predict",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_wishart_full",
    "sklearn.mixture._gaussian_mixture._estimate_gaussian_covariances_full",
    "sklearn.model_selection._search.BaseSearchCV._format_results._store",
    "sklearn.model_selection._search.ParameterSampler.__iter__",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.model_selection._split.GroupKFold._iter_test_indices",
    "sklearn.model_selection._split.ShuffleSplit._iter_indices",
    "sklearn.model_selection._split.StratifiedGroupKFold._find_best_fold",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.model_selection._split.StratifiedKFold._iter_test_masks",
    "sklearn.model_selection._split.StratifiedKFold._make_test_folds",
    "sklearn.model_selection._split.StratifiedShuffleSplit._iter_indices",
    "sklearn.model_selection._split.TimeSeriesSplit.split",
    "sklearn.model_selection._split._RepeatedSplits.split",
    "sklearn.model_selection._validation._fit_and_predict",
    "sklearn.model_selection._validation.cross_val_predict",
    "sklearn.model_selection._validation.permutation_test_score",
    "sklearn.multiclass.OneVsOneClassifier.fit",
    "sklearn.multiclass.OneVsOneClassifier.partial_fit",
    "sklearn.multiclass.OneVsRestClassifier.partial_fit",
    "sklearn.multiclass.OutputCodeClassifier.fit",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.multioutput._MultiOutputEstimator.fit",
    "sklearn.multioutput._MultiOutputEstimator.partial_fit",
    "sklearn.naive_bayes.CategoricalNB._count",
    "sklearn.naive_bayes.CategoricalNB._count._update_cat_count",
    "sklearn.naive_bayes.CategoricalNB._init_counters",
    "sklearn.naive_bayes.CategoricalNB._joint_log_likelihood",
    "sklearn.naive_bayes.CategoricalNB._update_feature_log_prob",
    "sklearn.naive_bayes.GaussianNB._joint_log_likelihood",
    "sklearn.neighbors._base.NeighborsBase._fit",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.fit",
    "sklearn.neighbors._regression.KNeighborsRegressor.predict",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._backprop",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_lbfgs",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._forward_pass",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._forward_pass_fast",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._initialize",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._unpack",
    "sklearn.neural_network._rbm.BernoulliRBM.fit",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_base_optimizer",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_no_momentum",
    "sklearn.preprocessing._data.QuantileTransformer._sparse_fit",
    "sklearn.preprocessing._data.QuantileTransformer._transform",
    "sklearn.preprocessing._data.RobustScaler.fit",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.inverse_transform",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.transform",
    "sklearn.preprocessing._encoders.OneHotEncoder.get_feature_names_out",
    "sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform",
    "sklearn.preprocessing._encoders._BaseEncoder._check_X",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.preprocessing._encoders._BaseEncoder._map_infrequent_categories",
    "sklearn.preprocessing._encoders._BaseEncoder._transform",
    "sklearn.preprocessing._polynomial.PolynomialFeatures._combinations",
    "sklearn.preprocessing._polynomial.PolynomialFeatures._num_combinations",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform",
    "sklearn.preprocessing._polynomial.SplineTransformer.fit",
    "sklearn.preprocessing._polynomial.SplineTransformer.get_feature_names_out",
    "sklearn.preprocessing._polynomial.SplineTransformer.transform",
    "sklearn.random_projection._sparse_random_matrix",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.fit",
    "sklearn.svm._base._one_vs_one_coef",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._classes.BaseDecisionTree.predict",
    "sklearn.tree._classes.DecisionTreeClassifier.predict_log_proba",
    "sklearn.tree._classes.DecisionTreeClassifier.predict_proba",
    "sklearn.utils._testing._convert_container",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.class_weight.compute_sample_weight",
    "sklearn.utils.estimator_checks.check_classifier_multioutput",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_global_ouptut_transform_pandas",
    "sklearn.utils.estimator_checks.check_set_output_transform_pandas",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out_pandas",
    "sklearn.utils.extmath.randomized_range_finder",
    "sklearn.utils.gen_batches",
    "sklearn.utils.gen_even_slices",
    "sklearn.utils.graph._fix_connected_components",
    "sklearn.utils.multiclass._ovr_decision_function",
    "sklearn.utils.multiclass.class_distribution",
    "sklearn.utils.random._random_choice_csc",
    "sklearn.utils.resample",
    "sklearn.utils.stats._weighted_percentile",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.tests.test_fast_dict.test_int_float_dict",
    "sklearn.utils.tests.test_murmurhash.test_no_collision_on_byte_range",
    "sklearn.utils.tests.test_murmurhash.test_uniform_distribution",
    "sklearn.utils.tests.test_pprint.test_n_max_elements_to_show",
    "sklearn.utils.tests.test_shortest_path.floyd_warshall_slow",
    "sklearn.utils.tests.test_shortest_path.test_shortest_path",
    "sklearn.utils.validation._check_feature_names_in",
    "sklearn.utils.validation._generate_get_feature_names_out"
  ],
  "range.index": [
    "Ovr{range.index}"
  ],
  "re.Match.end": [
    "jinja2.lexer.Lexer.tokeniter",
    "sklearn.base.BaseEstimator.__repr__"
  ],
  "re.Match.group": [
    "build_tools.circle.list_versions.$toplevel",
    "jinja2.lexer.Lexer.tokeniter",
    "sklearn.datasets._arff_parser._pandas_arff_parser.strip_single_quotes"
  ],
  "re.Match.groupdict": [
    "jinja2.lexer.Lexer.tokeniter"
  ],
  "re.Match.groups": [
    "click.shell_completion.BashComplete._check_version",
    "jinja2.lexer.Lexer.tokeniter"
  ],
  "re.Pattern.groups": [
    "sklearn.feature_extraction.text._VectorizerMixin.build_tokenizer"
  ],
  "re.Pattern.match": [
    "jinja2.lexer.Lexer.tokeniter"
  ],
  "re.Pattern.search": [
    "build_tools.circle.list_versions.$toplevel"
  ],
  "re.Pattern.split": [
    "importlib_metadata._text.FoldedCase.split"
  ],
  "re.Pattern.sub": [
    "jinja2.ext.InternationalizationExtension._trim_whitespace",
    "sklearn.feature_extraction.text.strip_tags"
  ],
  "redis.client.CaseInsensitiveDict.get": [
    "Ovr{redis.client.CaseInsensitiveDict.get}"
  ],
  "redis.client.CaseInsensitiveDict.update": [
    "jinja2.nodes.args_as_const",
    "sklearn.base.BaseEstimator._get_tags",
    "sklearn.base.BaseEstimator.get_params",
    "sklearn.calibration.CalibrationDisplay.plot",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.plot",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests"
  ],
  "requests.cookies.RequestsCookieJar.__setitem__": [
    "Ovr{requests.cookies.RequestsCookieJar.__setitem__}"
  ],
  "requests.cookies.RequestsCookieJar.get": [
    "Ovr{requests.cookies.RequestsCookieJar.get}",
    "click._compat.auto_wrap_for_ansi",
    "jinja2.lexer.get_lexer"
  ],
  "requests.cookies.RequestsCookieJar.items": [
    "Ovr{requests.cookies.RequestsCookieJar.items}"
  ],
  "requests.cookies.RequestsCookieJar.values": [
    "Ovr{requests.cookies.RequestsCookieJar.values}"
  ],
  "requests.models.Response.json": [
    "build_tools.generate_authors_table.get",
    "build_tools.get_comment.find_lint_bot_comments"
  ],
  "requests.models.Response.raise_for_status": [
    "build_tools.generate_authors_table.get",
    "build_tools.get_comment.create_or_update_comment",
    "build_tools.get_comment.find_lint_bot_comments"
  ],
  "requests.structures.CaseInsensitiveDict.__iter__": [
    "Ovr{requests.structures.CaseInsensitiveDict.__iter__}"
  ],
  "requests.structures.CaseInsensitiveDict.__setitem__": [
    "Ovr{requests.structures.CaseInsensitiveDict.__setitem__}"
  ],
  "requests.structures.LookupDict.__getitem__": [
    "Ovr{requests.structures.LookupDict.__getitem__}"
  ],
  "requests.structures.LookupDict.get": [
    "Ovr{requests.structures.LookupDict.get}"
  ],
  "reversed.__init__": [
    "click.parser._unpack_args",
    "click.shell_completion._is_incomplete_option",
    "jinja2.debug.rewrite_traceback_stack",
    "packaging.version._cmpkey",
    "pip._vendor.packaging.version._cmpkey",
    "sklearn.base.BaseEstimator._get_tags",
    "sklearn.externals._packaging.version._cmpkey",
    "sklearn.pipeline.Pipeline.inverse_transform",
    "sklearn.pipeline._name_estimators",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests"
  ],
  "reversed.__iter__": [
    "Ovr{reversed.__iter__}",
    "jinja2.debug.rewrite_traceback_stack",
    "sklearn.base.BaseEstimator._get_tags",
    "sklearn.pipeline.Pipeline.inverse_transform",
    "sklearn.pipeline._name_estimators",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests"
  ],
  "reversed.__next__": [
    "Ovr{reversed.__next__}",
    "jinja2.debug.rewrite_traceback_stack",
    "sklearn.base.BaseEstimator._get_tags",
    "sklearn.pipeline.Pipeline.inverse_transform",
    "sklearn.pipeline._name_estimators",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests"
  ],
  "set.__and__": [
    "sklearn.conftest.pytest_collection_modifyitems",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__"
  ],
  "set.__init__": [
    "build_tools.circle.list_versions.$toplevel",
    "build_tools.generate_authors_table.get_contributors",
    "click.core.Command.get_help_option_names",
    "click.core.CommandCollection.list_commands",
    "click.core.Context.__init__",
    "click.parser.Option.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Keyword.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.WordEnd.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.WordStart.__init__",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.cluster.plot_hdbscan.plot",
    "flask.cli.FlaskGroup.list_commands",
    "jinja2.ext.InternationalizationExtension.parse",
    "jinja2.runtime.Context.__init__",
    "maint_tools.sort_whats_new.$toplevel",
    "pip._vendor.distlib.compat.ChainMap.__iter__",
    "pip._vendor.pyparsing.ParserElement.__init__",
    "pip._vendor.requests.cookies.create_cookie",
    "sklearn.base.BaseEstimator._check_feature_names",
    "sklearn.base._clone_parametrized",
    "sklearn.cluster._agglomerative.AgglomerativeClustering.$class_toplevel",
    "sklearn.cluster._agglomerative.FeatureAgglomeration.$class_toplevel",
    "sklearn.cluster._dbscan.DBSCAN.$class_toplevel",
    "sklearn.cluster._hdbscan.hdbscan.$toplevel",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN._weighted_cluster_center",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.fit",
    "sklearn.cluster._kmeans.KMeans.fit",
    "sklearn.cluster._optics.OPTICS.$class_toplevel",
    "sklearn.cluster._spectral.SpectralClustering.$class_toplevel",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_remainder",
    "sklearn.compose._column_transformer.ColumnTransformer.transform",
    "sklearn.conftest.pytest_collection_modifyitems",
    "sklearn.datasets._openml._verify_target_data_type",
    "sklearn.datasets._samples_generator.make_multilabel_classification.sample_example",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_interaction_cst",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._compute_interactions",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._intilialize_root",
    "sklearn.externals._arff.ArffEncoder.iter_encode",
    "sklearn.externals._arff.NominalConversor.__init__",
    "sklearn.feature_extraction.text.CountVectorizer._limit_features",
    "sklearn.feature_extraction.text._VectorizerMixin._check_stop_words_consistency",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector.$class_toplevel",
    "sklearn.feature_selection._univariate_selection.GenericUnivariateSelect.$class_toplevel",
    "sklearn.gaussian_process.kernels.Kernel.__eq__",
    "sklearn.impute._knn.KNNImputer.$class_toplevel",
    "sklearn.inspection._pd_utils._check_feature_names",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.kernel_approximation.Nystroem.$class_toplevel",
    "sklearn.kernel_ridge.KernelRidge.$class_toplevel",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._logistic.LogisticRegressionCV.$class_toplevel",
    "sklearn.linear_model._ridge._BaseRidgeCV.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.$class_toplevel",
    "sklearn.manifold._isomap.Isomap.$class_toplevel",
    "sklearn.manifold._t_sne.TSNE.$class_toplevel",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._pairwise_distances_reduction._dispatcher.BaseDistancesReductionDispatcher.valid_metrics",
    "sklearn.metrics._scorer._BaseScorer._warn_overlap",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.model_selection._search.BaseSearchCV.$class_toplevel",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.$class_toplevel",
    "sklearn.model_selection._validation._fit_and_predict",
    "sklearn.neighbors._base.$toplevel",
    "sklearn.neighbors._base.NeighborsBase.$class_toplevel",
    "sklearn.neighbors._kde.KernelDensity.$class_toplevel",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.$class_toplevel",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier._validate_input",
    "sklearn.pipeline.FeatureUnion._validate_transformer_weights",
    "sklearn.preprocessing._label.MultiLabelBinarizer._transform",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit",
    "sklearn.utils._array_api._isdtype_single",
    "sklearn.utils._determine_key_type",
    "sklearn.utils._encode._check_unknown",
    "sklearn.utils._encode._unique_python",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests.MetadataRouter._get_param_names",
    "sklearn.utils._metadata_requests.MetadataRouter._route_params",
    "sklearn.utils._metadata_requests.MetadataRouter.validate_metadata",
    "sklearn.utils._metadata_requests.MethodMetadataRequest._get_param_names",
    "sklearn.utils._metadata_requests.RequestMethod.__get__.func",
    "sklearn.utils._mocking.CheckingClassifier.fit",
    "sklearn.utils._param_validation.Options.__init__",
    "sklearn.utils._set_output._SetOutputMixin.__init_subclass__",
    "sklearn.utils._set_output._auto_wrap_is_configured",
    "sklearn.utils.class_weight.compute_class_weight",
    "sklearn.utils.class_weight.compute_sample_weight",
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.discovery.all_functions",
    "sklearn.utils.estimator_checks.check_estimator_get_tags_default_keys",
    "sklearn.utils.estimator_checks.check_no_attributes_set_in_init",
    "sklearn.utils.estimator_checks.check_param_validation",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.estimator_checks.check_set_params",
    "sklearn.utils.graph.single_source_shortest_path_length",
    "sklearn.utils.metaestimators._BaseComposition._validate_names",
    "sklearn.utils.multiclass._unique_multiclass",
    "sklearn.utils.multiclass.unique_labels",
    "sklearn.utils.tests.test_murmurhash.test_no_collision_on_byte_range",
    "sklearn.utils.validation._check_monotonic_cst",
    "sklearn.utils.validation._get_feature_names",
    "sklearn.utils.validation.check_array"
  ],
  "set.__ior__": [
    "Ovr{set.__ior__}"
  ],
  "set.__isub__": [
    "Ovr{set.__isub__}"
  ],
  "set.__iter__": [
    "Ovr{set.__iter__}"
  ],
  "set.__or__": [
    "sklearn.cluster._agglomerative.AgglomerativeClustering.$class_toplevel",
    "sklearn.cluster._agglomerative.FeatureAgglomeration.$class_toplevel",
    "sklearn.cluster._dbscan.DBSCAN.$class_toplevel",
    "sklearn.cluster._optics.OPTICS.$class_toplevel",
    "sklearn.cluster._spectral.SpectralClustering.$class_toplevel",
    "sklearn.kernel_approximation.Nystroem.$class_toplevel",
    "sklearn.kernel_ridge.KernelRidge.$class_toplevel",
    "sklearn.manifold._isomap.Isomap.$class_toplevel",
    "sklearn.manifold._t_sne.TSNE.$class_toplevel",
    "sklearn.metrics._pairwise_distances_reduction._dispatcher.BaseDistancesReductionDispatcher.valid_metrics",
    "sklearn.neighbors._kde.KernelDensity.$class_toplevel"
  ],
  "set.__sub__": [
    "build_tools.generate_authors_table.get_contributors",
    "pip._vendor.requests.cookies.create_cookie",
    "sklearn.base.BaseEstimator._check_feature_names",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN._weighted_cluster_center",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_remainder",
    "sklearn.compose._column_transformer.ColumnTransformer.transform",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_interaction_cst",
    "sklearn.metrics._pairwise_distances_reduction._dispatcher.BaseDistancesReductionDispatcher.valid_metrics",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.$class_toplevel",
    "sklearn.utils._metadata_requests.MetadataRouter.validate_metadata",
    "sklearn.utils._metadata_requests.RequestMethod.__get__.func",
    "sklearn.utils._mocking.CheckingClassifier.fit",
    "sklearn.utils.class_weight.compute_class_weight",
    "sklearn.utils.class_weight.compute_sample_weight",
    "sklearn.utils.estimator_checks.check_no_attributes_set_in_init",
    "sklearn.utils.estimator_checks.check_param_validation",
    "sklearn.utils.validation._check_monotonic_cst"
  ],
  "set.add": [
    "Ovr{set.add}"
  ],
  "set.difference_update": [
    "Ovr{set.difference_update}"
  ],
  "set.intersection": [
    "Ovr{set.intersection}"
  ],
  "set.union": [
    "Ovr{set.union}"
  ],
  "set.update": [
    "Ovr{set.update}"
  ],
  "setuptools._distutils.cmd.Command.run_command": [
    "setup.build_ext_subclass.run"
  ],
  "setuptools._distutils.command.build_ext.build_ext.build_extensions": [
    "setup.build_ext_subclass.build_extensions"
  ],
  "setuptools.command.build_ext.build_ext.finalize_options": [
    "setup.build_ext_subclass.finalize_options"
  ],
  "setuptools.command.build_ext.build_ext.run": [
    "setup.build_ext_subclass.run"
  ],
  "setuptools.extension.Extension.__init__": [
    "setup.configure_extension_modules"
  ],
  "shelve.Shelf.__iter__": [
    "Ovr{shelve.Shelf.__iter__}"
  ],
  "shelve.Shelf.__setitem__": [
    "Ovr{shelve.Shelf.__setitem__}"
  ],
  "shelve.Shelf.get": [
    "Ovr{shelve.Shelf.get}"
  ],
  "shlex.shlex.__init__": [
    "click.parser.split_arg_string"
  ],
  "shlex.shlex.__iter__": [
    "Ovr{shlex.shlex.__iter__}",
    "click.parser.split_arg_string"
  ],
  "shlex.shlex.__next__": [
    "click.parser.split_arg_string"
  ],
  "shutil._RmtreeType.__call__": [
    "examples.cluster.plot_feature_agglomeration_vs_univariate_selection.$toplevel",
    "examples.compose.plot_compare_reduction.$toplevel",
    "setup.CleanCommand.run",
    "sklearn.datasets._base.clear_data_home",
    "sklearn.datasets._twenty_newsgroups._download_20newsgroups",
    "sklearn.utils._testing._delete_folder"
  ],
  "sklearn._loss.link.Interval.__init__": [
    "sklearn._loss.link.BaseLink.$class_toplevel",
    "sklearn._loss.link.HalfLogitLink.$class_toplevel",
    "sklearn._loss.link.LogLink.$class_toplevel",
    "sklearn._loss.link.LogitLink.$class_toplevel",
    "sklearn._loss.link.MultinomialLogit.$class_toplevel",
    "sklearn._loss.loss.BaseLoss.__init__",
    "sklearn._loss.loss.ExponentialLoss.__init__",
    "sklearn._loss.loss.HalfBinomialLoss.__init__",
    "sklearn._loss.loss.HalfGammaLoss.__init__",
    "sklearn._loss.loss.HalfMultinomialLoss.__init__",
    "sklearn._loss.loss.HalfPoissonLoss.__init__",
    "sklearn._loss.loss.HalfTweedieLoss.__init__",
    "sklearn._loss.loss.HalfTweedieLossIdentity.__init__"
  ],
  "sklearn._loss.link.Interval.includes": [
    "sklearn._loss.loss.BaseLoss.in_y_true_range",
    "sklearn._loss.loss.HalfMultinomialLoss.in_y_true_range"
  ],
  "sklearn._loss.loss.BaseLoss.__call__": [
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.__init__",
    "sklearn.linear_model._logistic._logistic_regression_path"
  ],
  "sklearn._loss.loss.BaseLoss.__init__": [
    "sklearn._loss.loss.AbsoluteError.__init__",
    "sklearn._loss.loss.ExponentialLoss.__init__",
    "sklearn._loss.loss.HalfBinomialLoss.__init__",
    "sklearn._loss.loss.HalfGammaLoss.__init__",
    "sklearn._loss.loss.HalfMultinomialLoss.__init__",
    "sklearn._loss.loss.HalfPoissonLoss.__init__",
    "sklearn._loss.loss.HalfSquaredError.__init__",
    "sklearn._loss.loss.HalfTweedieLoss.__init__",
    "sklearn._loss.loss.HalfTweedieLossIdentity.__init__",
    "sklearn._loss.loss.HuberLoss.__init__",
    "sklearn._loss.loss.PinballLoss.__init__"
  ],
  "sklearn._loss.loss.BaseLoss.constant_to_optimal_zero": [
    "sklearn._loss.loss.HalfTweedieLoss.constant_to_optimal_zero"
  ],
  "sklearn._loss.loss.BaseLoss.loss": [
    "sklearn._loss.loss.BaseLoss.__call__"
  ],
  "sklearn._loss.loss.HalfBinomialLoss.__init__": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier._get_loss",
    "sklearn.linear_model._logistic._logistic_regression_path"
  ],
  "sklearn._loss.loss.HalfGammaLoss.__init__": [
    "sklearn._loss.loss.HalfTweedieLoss.constant_to_optimal_zero",
    "sklearn.linear_model._glm.glm.GammaRegressor._get_loss"
  ],
  "sklearn._loss.loss.HalfGammaLoss.constant_to_optimal_zero": [
    "sklearn._loss.loss.HalfTweedieLoss.constant_to_optimal_zero"
  ],
  "sklearn._loss.loss.HalfMultinomialLoss.__init__": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier._get_loss",
    "sklearn.linear_model._logistic._logistic_regression_path"
  ],
  "sklearn._loss.loss.HalfPoissonLoss.__init__": [
    "sklearn._loss.loss.HalfTweedieLoss.constant_to_optimal_zero",
    "sklearn.linear_model._glm.glm.PoissonRegressor._get_loss"
  ],
  "sklearn._loss.loss.HalfPoissonLoss.constant_to_optimal_zero": [
    "sklearn._loss.loss.HalfTweedieLoss.constant_to_optimal_zero"
  ],
  "sklearn._loss.loss.HalfSquaredError.__init__": [
    "sklearn._loss.loss.HalfTweedieLoss.constant_to_optimal_zero",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.__init__",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor._get_loss"
  ],
  "sklearn._loss.loss.HalfTweedieLoss.__init__": [
    "sklearn.linear_model._glm.glm.TweedieRegressor._get_loss"
  ],
  "sklearn._loss.loss.HalfTweedieLossIdentity.__init__": [
    "sklearn.linear_model._glm.glm.TweedieRegressor._get_loss"
  ],
  "sklearn.base.BaseEstimator.__repr__": [
    "examples.classification.plot_digits_classification.$toplevel",
    "sklearn.base.BaseEstimator._repr_mimebundle_",
    "sklearn.base.BaseEstimator.set_params",
    "sklearn.utils._pprint._EstimatorPrettyPrinter.$class_toplevel",
    "sklearn.utils.tests.test_pprint.test_basic",
    "sklearn.utils.tests.test_pprint.test_bruteforce_ellipsis",
    "sklearn.utils.tests.test_pprint.test_changed_only",
    "sklearn.utils.tests.test_pprint.test_deeply_nested",
    "sklearn.utils.tests.test_pprint.test_gridsearch",
    "sklearn.utils.tests.test_pprint.test_kwargs_in_init"
  ],
  "sklearn.base.BaseEstimator._check_feature_names": [
    "sklearn.base.BaseEstimator._validate_data",
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform",
    "sklearn.feature_selection._from_model.SelectFromModel.fit",
    "sklearn.feature_selection._from_model.SelectFromModel.partial_fit",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.preprocessing._encoders._BaseEncoder._transform",
    "sklearn.preprocessing._function_transformer.FunctionTransformer._check_input"
  ],
  "sklearn.base.BaseEstimator._check_n_features": [
    "sklearn.base.BaseEstimator._validate_data",
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform",
    "sklearn.compose._column_transformer.ColumnTransformer.transform",
    "sklearn.impute._base.MissingIndicator._fit",
    "sklearn.naive_bayes.CategoricalNB._joint_log_likelihood",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.preprocessing._encoders._BaseEncoder._transform",
    "sklearn.preprocessing._function_transformer.FunctionTransformer._check_input",
    "sklearn.tree._classes.BaseDecisionTree._validate_X_predict"
  ],
  "sklearn.base.BaseEstimator._get_param_names": [
    "sklearn.base.BaseEstimator.get_params",
    "sklearn.base.BaseEstimator.set_params"
  ],
  "sklearn.base.BaseEstimator._get_tags": [
    "Ovr{sklearn.base.BaseEstimator._get_tags}",
    "sklearn.feature_selection._rfe.RFE._fit",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector.fit",
    "sklearn.multiclass.OneVsOneClassifier.fit",
    "sklearn.neighbors._base.NeighborsBase._fit",
    "sklearn.tree._classes.BaseDecisionTree._support_missing_values",
    "sklearn.utils.tests.test_estimator_checks.EstimatorMissingDefaultTags._get_tags"
  ],
  "sklearn.base.BaseEstimator._validate_data": [
    "sklearn.cluster._affinity_propagation.AffinityPropagation.fit",
    "sklearn.cluster._affinity_propagation.AffinityPropagation.predict",
    "sklearn.cluster._agglomerative.AgglomerativeClustering.fit",
    "sklearn.cluster._agglomerative.FeatureAgglomeration.fit",
    "sklearn.cluster._bicluster.BaseSpectral.fit",
    "sklearn.cluster._birch.Birch._fit",
    "sklearn.cluster._birch.Birch.predict",
    "sklearn.cluster._birch.Birch.transform",
    "sklearn.cluster._bisect_k_means.BisectingKMeans.fit",
    "sklearn.cluster._dbscan.DBSCAN.fit",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.fit",
    "sklearn.cluster._kmeans.KMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.partial_fit",
    "sklearn.cluster._kmeans._BaseKMeans._check_test_data",
    "sklearn.cluster._mean_shift.MeanShift.fit",
    "sklearn.cluster._mean_shift.MeanShift.predict",
    "sklearn.cluster._optics.OPTICS.fit",
    "sklearn.cluster._spectral.SpectralClustering.fit",
    "sklearn.covariance._empirical_covariance.EmpiricalCovariance.fit",
    "sklearn.covariance._empirical_covariance.EmpiricalCovariance.mahalanobis",
    "sklearn.covariance._empirical_covariance.EmpiricalCovariance.score",
    "sklearn.covariance._graph_lasso.GraphicalLasso.fit",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._robust_covariance.MinCovDet.fit",
    "sklearn.covariance._shrunk_covariance.LedoitWolf.fit",
    "sklearn.covariance._shrunk_covariance.OAS.fit",
    "sklearn.covariance._shrunk_covariance.ShrunkCovariance.fit",
    "sklearn.cross_decomposition._pls.PLSSVD.fit",
    "sklearn.cross_decomposition._pls.PLSSVD.transform",
    "sklearn.cross_decomposition._pls._PLS.fit",
    "sklearn.cross_decomposition._pls._PLS.predict",
    "sklearn.cross_decomposition._pls._PLS.transform",
    "sklearn.decomposition._base._BasePCA.transform",
    "sklearn.decomposition._dict_learning.DictionaryLearning.fit_transform",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.partial_fit",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.score_samples",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.transform",
    "sklearn.decomposition._fastica.FastICA._fit_transform",
    "sklearn.decomposition._fastica.FastICA.transform",
    "sklearn.decomposition._incremental_pca.IncrementalPCA.fit",
    "sklearn.decomposition._incremental_pca.IncrementalPCA.partial_fit",
    "sklearn.decomposition._kernel_pca.KernelPCA.fit",
    "sklearn.decomposition._kernel_pca.KernelPCA.transform",
    "sklearn.decomposition._lda.LatentDirichletAllocation._check_non_neg_array",
    "sklearn.decomposition._nmf.MiniBatchNMF.fit_transform",
    "sklearn.decomposition._nmf.MiniBatchNMF.partial_fit",
    "sklearn.decomposition._nmf.MiniBatchNMF.transform",
    "sklearn.decomposition._nmf.NMF.fit_transform",
    "sklearn.decomposition._nmf.NMF.transform",
    "sklearn.decomposition._pca.PCA._fit",
    "sklearn.decomposition._pca.PCA.score_samples",
    "sklearn.decomposition._sparse_pca._BaseSparsePCA.fit",
    "sklearn.decomposition._sparse_pca._BaseSparsePCA.transform",
    "sklearn.decomposition._truncated_svd.TruncatedSVD.fit_transform",
    "sklearn.decomposition._truncated_svd.TruncatedSVD.transform",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis._decision_function",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit",
    "sklearn.ensemble._bagging.BaggingClassifier.decision_function",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_proba",
    "sklearn.ensemble._bagging.BaggingRegressor.predict",
    "sklearn.ensemble._bagging.BaseBagging.fit",
    "sklearn.ensemble._forest.BaseForest._validate_X_predict",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._gb.BaseGradientBoosting._staged_raw_predict",
    "sklearn.ensemble._gb.BaseGradientBoosting.fit",
    "sklearn.ensemble._gb.GradientBoostingClassifier.decision_function",
    "sklearn.ensemble._gb.GradientBoostingRegressor.predict",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._raw_predict",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._staged_raw_predict",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._iforest.IsolationForest.fit",
    "sklearn.ensemble._iforest.IsolationForest.score_samples",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting._check_X",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.fit",
    "sklearn.feature_extraction.image.PatchExtractor.transform",
    "sklearn.feature_extraction.text.TfidfTransformer.fit",
    "sklearn.feature_extraction.text.TfidfTransformer.transform",
    "sklearn.feature_selection._rfe.RFE._fit",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector.fit",
    "sklearn.feature_selection._univariate_selection._BaseFilter.fit",
    "sklearn.feature_selection._variance_threshold.VarianceThreshold.fit",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict_proba",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict",
    "sklearn.impute._base.MissingIndicator._validate_input",
    "sklearn.impute._base.SimpleImputer._validate_input",
    "sklearn.impute._iterative.IterativeImputer._initial_imputation",
    "sklearn.impute._knn.KNNImputer.fit",
    "sklearn.impute._knn.KNNImputer.transform",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.fit",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.transform",
    "sklearn.kernel_approximation.Nystroem.fit",
    "sklearn.kernel_approximation.Nystroem.transform",
    "sklearn.kernel_approximation.PolynomialCountSketch.fit",
    "sklearn.kernel_approximation.PolynomialCountSketch.transform",
    "sklearn.kernel_approximation.RBFSampler.fit",
    "sklearn.kernel_approximation.RBFSampler.transform",
    "sklearn.kernel_approximation.SkewedChi2Sampler.fit",
    "sklearn.kernel_approximation.SkewedChi2Sampler.transform",
    "sklearn.kernel_ridge.KernelRidge.fit",
    "sklearn.kernel_ridge.KernelRidge.predict",
    "sklearn.linear_model._base.LinearModel._decision_function",
    "sklearn.linear_model._base.LinearRegression.fit",
    "sklearn.linear_model._bayes.ARDRegression.fit",
    "sklearn.linear_model._bayes.BayesianRidge.fit",
    "sklearn.linear_model._coordinate_descent.ElasticNet.fit",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor._linear_predictor",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit",
    "sklearn.linear_model._huber.HuberRegressor.fit",
    "sklearn.linear_model._least_angle.Lars.fit",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._least_angle.LassoLarsIC.fit",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuit.fit",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.fit",
    "sklearn.linear_model._quantile.QuantileRegressor.fit",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.linear_model._ransac.RANSACRegressor.predict",
    "sklearn.linear_model._ransac.RANSACRegressor.score",
    "sklearn.linear_model._ridge.Ridge.fit",
    "sklearn.linear_model._ridge._RidgeGCV.fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._partial_fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._decision_function",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._partial_fit",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._partial_fit",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM.decision_function",
    "sklearn.linear_model._theil_sen.TheilSenRegressor.fit",
    "sklearn.manifold._locally_linear.LocallyLinearEmbedding._fit_transform",
    "sklearn.manifold._locally_linear.LocallyLinearEmbedding.transform",
    "sklearn.manifold._mds.MDS.fit_transform",
    "sklearn.manifold._spectral_embedding.SpectralEmbedding.fit",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.mixture._base.BaseMixture.fit_predict",
    "sklearn.mixture._base.BaseMixture.predict",
    "sklearn.mixture._base.BaseMixture.predict_proba",
    "sklearn.mixture._base.BaseMixture.score_samples",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._check_input_parameters",
    "sklearn.multiclass.OneVsOneClassifier.decision_function",
    "sklearn.multiclass.OneVsOneClassifier.fit",
    "sklearn.multiclass.OneVsOneClassifier.partial_fit",
    "sklearn.multiclass.OutputCodeClassifier.fit",
    "sklearn.multiclass._ConstantPredictor.decision_function",
    "sklearn.multiclass._ConstantPredictor.fit",
    "sklearn.multiclass._ConstantPredictor.predict",
    "sklearn.multiclass._ConstantPredictor.predict_proba",
    "sklearn.multioutput.ClassifierChain.decision_function",
    "sklearn.multioutput.ClassifierChain.predict_proba",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.multioutput._BaseChain.predict",
    "sklearn.multioutput._MultiOutputEstimator.fit",
    "sklearn.multioutput._MultiOutputEstimator.partial_fit",
    "sklearn.naive_bayes.CategoricalNB._check_X",
    "sklearn.naive_bayes.CategoricalNB._check_X_y",
    "sklearn.naive_bayes.GaussianNB._check_X",
    "sklearn.naive_bayes.GaussianNB._partial_fit",
    "sklearn.naive_bayes.GaussianNB.fit",
    "sklearn.naive_bayes._BaseDiscreteNB._check_X",
    "sklearn.naive_bayes._BaseDiscreteNB._check_X_y",
    "sklearn.neighbors._base.NeighborsBase._fit",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict_proba",
    "sklearn.neighbors._kde.KernelDensity.fit",
    "sklearn.neighbors._kde.KernelDensity.score_samples",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.transform",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.fit",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.predict",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._forward_pass_fast",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier._validate_input",
    "sklearn.neural_network._multilayer_perceptron.MLPRegressor._validate_input",
    "sklearn.neural_network._rbm.BernoulliRBM.fit",
    "sklearn.neural_network._rbm.BernoulliRBM.partial_fit",
    "sklearn.neural_network._rbm.BernoulliRBM.score_samples",
    "sklearn.neural_network._rbm.BernoulliRBM.transform",
    "sklearn.preprocessing._data.Binarizer.fit",
    "sklearn.preprocessing._data.Binarizer.transform",
    "sklearn.preprocessing._data.KernelCenterer.fit",
    "sklearn.preprocessing._data.KernelCenterer.transform",
    "sklearn.preprocessing._data.MaxAbsScaler.partial_fit",
    "sklearn.preprocessing._data.MaxAbsScaler.transform",
    "sklearn.preprocessing._data.MinMaxScaler.partial_fit",
    "sklearn.preprocessing._data.MinMaxScaler.transform",
    "sklearn.preprocessing._data.Normalizer.fit",
    "sklearn.preprocessing._data.Normalizer.transform",
    "sklearn.preprocessing._data.PowerTransformer._check_input",
    "sklearn.preprocessing._data.QuantileTransformer._check_inputs",
    "sklearn.preprocessing._data.RobustScaler.fit",
    "sklearn.preprocessing._data.RobustScaler.transform",
    "sklearn.preprocessing._data.StandardScaler.partial_fit",
    "sklearn.preprocessing._data.StandardScaler.transform",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.transform",
    "sklearn.preprocessing._function_transformer.FunctionTransformer._check_input",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.fit",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform",
    "sklearn.preprocessing._polynomial.SplineTransformer.fit",
    "sklearn.preprocessing._polynomial.SplineTransformer.transform",
    "sklearn.random_projection.BaseRandomProjection.fit",
    "sklearn.random_projection.GaussianRandomProjection.transform",
    "sklearn.random_projection.SparseRandomProjection.transform",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.fit",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.predict_proba",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.decision_function",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.fit",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.predict",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.predict_log_proba",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.predict_proba",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.score",
    "sklearn.svm._base.BaseLibSVM._validate_for_predict",
    "sklearn.svm._base.BaseLibSVM.fit",
    "sklearn.svm._classes.LinearSVC.fit",
    "sklearn.svm._classes.LinearSVR.fit",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._classes.BaseDecisionTree._validate_X_predict",
    "sklearn.utils.tests.test_estimator_checks.BadTransformerWithoutMixin.fit",
    "sklearn.utils.tests.test_estimator_checks.ChangesDict.fit",
    "sklearn.utils.tests.test_estimator_checks.ChangesUnderscoreAttribute.fit",
    "sklearn.utils.tests.test_estimator_checks.ChangesWrongAttribute.fit",
    "sklearn.utils.tests.test_estimator_checks.CorrectNotFittedErrorClassifier.fit",
    "sklearn.utils.tests.test_estimator_checks.HasImmutableParameters.fit",
    "sklearn.utils.tests.test_estimator_checks.HasMutableParameters.fit",
    "sklearn.utils.tests.test_estimator_checks.LargeSparseNotSupportedClassifier.fit",
    "sklearn.utils.tests.test_estimator_checks.ModifiesAnotherValue.fit",
    "sklearn.utils.tests.test_estimator_checks.ModifiesValueInsteadOfRaisingError.fit",
    "sklearn.utils.tests.test_estimator_checks.NoCheckinPredict.fit",
    "sklearn.utils.tests.test_estimator_checks.NoSampleWeightPandasSeriesType.fit",
    "sklearn.utils.tests.test_estimator_checks.NoSparseClassifier.fit",
    "sklearn.utils.tests.test_estimator_checks.NotInvariantPredict.fit",
    "sklearn.utils.tests.test_estimator_checks.NotInvariantSampleOrder.fit",
    "sklearn.utils.tests.test_estimator_checks.PartialFitChecksName.fit",
    "sklearn.utils.tests.test_estimator_checks.PartialFitChecksName.partial_fit",
    "sklearn.utils.tests.test_estimator_checks.RaisesErrorInSetParams.fit",
    "sklearn.utils.tests.test_estimator_checks.RequiresPositiveXRegressor.fit",
    "sklearn.utils.tests.test_estimator_checks.RequiresPositiveYRegressor.fit",
    "sklearn.utils.tests.test_estimator_checks.SetsWrongAttribute.fit",
    "sklearn.utils.tests.test_estimator_checks.SparseTransformer.fit"
  ],
  "sklearn.base.BaseEstimator._validate_params": [
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.fit",
    "sklearn.decomposition._fastica.fastica",
    "sklearn.decomposition._nmf.non_negative_factorization"
  ],
  "sklearn.base.BaseEstimator.get_params": [
    "Ovr{sklearn.base.BaseEstimator.get_params}",
    "benchmarks.bench_covertype.$toplevel",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.utils.metaestimators._BaseComposition._get_params",
    "sklearn.utils.metaestimators._BaseComposition._validate_names"
  ],
  "sklearn.base.BaseEstimator.set_params": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "examples.decomposition.plot_varimax_fa.$toplevel",
    "examples.ensemble.plot_ensemble_oob.$toplevel",
    "examples.linear_model.plot_bayesian_ridge_curvefit.$toplevel",
    "examples.linear_model.plot_logistic_path.$toplevel",
    "examples.linear_model.plot_ridge_coeffs.$toplevel",
    "examples.model_selection.plot_train_error_vs_test_error.$toplevel",
    "sklearn.feature_selection._mutual_info._compute_mi_cd",
    "sklearn.utils.estimator_checks._set_checking_parameters",
    "sklearn.utils.metaestimators._BaseComposition._set_params",
    "sklearn.utils.tests.test_estimator_checks.ModifiesAnotherValue.set_params",
    "sklearn.utils.tests.test_estimator_checks.ModifiesValueInsteadOfRaisingError.set_params",
    "sklearn.utils.tests.test_estimator_checks.RaisesErrorInSetParams.set_params"
  ],
  "sklearn.base.BiclusterMixin.biclusters_": [
    "examples.bicluster.plot_spectral_biclustering.$toplevel",
    "examples.bicluster.plot_spectral_coclustering.$toplevel"
  ],
  "sklearn.base.BiclusterMixin.get_indices": [
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.bicluster.plot_bicluster_newsgroups.bicluster_ncut",
    "sklearn.base.BiclusterMixin.get_shape",
    "sklearn.base.BiclusterMixin.get_submatrix"
  ],
  "sklearn.base.BiclusterMixin.get_shape": [
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel"
  ],
  "sklearn.base.ClassifierMixin.score": [
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.ensemble.plot_adaboost_hastie_10_2.$toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.ensemble.plot_gradient_boosting_early_stopping.$toplevel",
    "examples.ensemble.plot_gradient_boosting_oob.$toplevel",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.linear_model.plot_logistic_l1_l2_sparsity.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_mnist.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.neighbors.plot_nca_dim_reduction.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.plot_on_dataset",
    "examples.neural_networks.plot_mnist_filters.$toplevel",
    "sklearn.linear_model._logistic._log_reg_scoring_path"
  ],
  "sklearn.base.ClusterMixin.fit_predict": [
    "sklearn.cluster._affinity_propagation.AffinityPropagation.fit_predict",
    "sklearn.cluster._agglomerative.AgglomerativeClustering.fit_predict",
    "sklearn.cluster._spectral.SpectralClustering.fit_predict"
  ],
  "sklearn.base.RegressorMixin.score": [
    "examples.cross_decomposition.plot_pcr_vs_pls.$toplevel",
    "examples.ensemble.plot_random_forest_regression_multioutput.$toplevel",
    "examples.exercises.plot_cv_diabetes.$toplevel",
    "examples.model_selection.plot_train_error_vs_test_error.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "sklearn.linear_model.tests.test_huber.test_huber_better_r2_score"
  ],
  "sklearn.base.TransformerMixin.fit_transform": [
    "asv_benchmarks.benchmarks.datasets._digits_dataset",
    "asv_benchmarks.benchmarks.datasets._mnist_dataset",
    "asv_benchmarks.benchmarks.datasets._synth_classification_dataset",
    "asv_benchmarks.benchmarks.datasets._synth_regression_dataset",
    "benchmarks.bench_feature_expansions.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_categorical_only.$toplevel",
    "benchmarks.bench_plot_polynomial_kernel_approximation.$toplevel",
    "examples.applications.plot_digits_denoising.$toplevel",
    "examples.applications.plot_face_recognition.$toplevel",
    "examples.applications.plot_prediction_latency.generate_dataset",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.cluster.plot_face_compress.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.decomposition.plot_incremental_pca.$toplevel",
    "examples.decomposition.plot_varimax_fa.$toplevel",
    "examples.linear_model.plot_logistic_l1_l2_sparsity.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_mnist.$toplevel",
    "examples.manifold.plot_lle_digits.plot_embedding",
    "examples.miscellaneous.plot_isotonic_regression.$toplevel",
    "examples.miscellaneous.plot_johnson_lindenstrauss_bound.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.plot_on_dataset",
    "examples.preprocessing.plot_all_scaling.$toplevel",
    "examples.preprocessing.plot_discretization.$toplevel",
    "examples.preprocessing.plot_target_encoder_cross_val.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_0_0.$toplevel",
    "examples.svm.plot_rbf_parameters.$toplevel",
    "sklearn.decomposition._nmf._BaseNMF.fit",
    "sklearn.discriminant_analysis._cov",
    "sklearn.ensemble._forest.RandomTreesEmbedding.fit_transform",
    "sklearn.ensemble._voting._BaseVoting.fit_transform",
    "sklearn.manifold._isomap.Isomap.reconstruction_error",
    "sklearn.manifold._mds._smacof_single",
    "sklearn.preprocessing._data.maxabs_scale",
    "sklearn.preprocessing._data.minmax_scale",
    "sklearn.preprocessing._data.quantile_transform",
    "sklearn.preprocessing._data.robust_scale",
    "sklearn.utils.estimator_checks._regression_dataset",
    "sklearn.utils.estimator_checks.check_classifiers_classes",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.estimator_checks.check_clustering",
    "sklearn.utils.estimator_checks.check_transformer_data_not_an_array",
    "sklearn.utils.estimator_checks.check_transformer_general",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out_pandas",
    "sklearn.utils.estimator_checks.check_transformer_preserve_dtypes"
  ],
  "sklearn.calibration.CalibratedClassifierCV.__init__": [
    "examples.calibration.plot_calibration.$toplevel",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.calibration.plot_calibration_multiclass.$toplevel"
  ],
  "sklearn.calibration.CalibratedClassifierCV._get_estimator": [
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing"
  ],
  "sklearn.calibration.CalibratedClassifierCV.fit": [
    "examples.calibration.plot_calibration.$toplevel",
    "examples.calibration.plot_calibration_multiclass.$toplevel"
  ],
  "sklearn.calibration.CalibratedClassifierCV.predict": [
    "examples.calibration.plot_calibration_curve.$toplevel"
  ],
  "sklearn.calibration.CalibratedClassifierCV.predict_proba": [
    "examples.calibration.plot_calibration.$toplevel",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "sklearn.calibration.CalibratedClassifierCV.predict"
  ],
  "sklearn.calibration.CalibrationDisplay.__init__": [
    "sklearn.calibration.CalibrationDisplay.from_predictions"
  ],
  "sklearn.calibration.CalibrationDisplay.from_estimator": [
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.calibration.plot_compare_calibration.$toplevel"
  ],
  "sklearn.calibration.CalibrationDisplay.from_predictions": [
    "sklearn.calibration.CalibrationDisplay.from_estimator"
  ],
  "sklearn.calibration.CalibrationDisplay.plot": [
    "sklearn.calibration.CalibrationDisplay.from_predictions"
  ],
  "sklearn.calibration._CalibratedClassifier.__init__": [
    "sklearn.calibration._fit_calibrator"
  ],
  "sklearn.cluster._affinity_propagation.AffinityPropagation.__init__": [
    "examples.cluster.plot_affinity_propagation.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "sklearn.cluster._affinity_propagation.affinity_propagation"
  ],
  "sklearn.cluster._affinity_propagation.AffinityPropagation.fit": [
    "examples.cluster.plot_affinity_propagation.$toplevel",
    "sklearn.cluster._affinity_propagation.affinity_propagation"
  ],
  "sklearn.cluster._agglomerative.AgglomerativeClustering.__init__": [
    "benchmarks.bench_plot_hierarchical.compute_bench",
    "benchmarks.bench_plot_ward.$toplevel",
    "examples.cluster.plot_agglomerative_clustering.$toplevel",
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel",
    "examples.cluster.plot_agglomerative_dendrogram.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_coin_ward_segmentation.$toplevel",
    "examples.cluster.plot_digits_linkage.$toplevel",
    "examples.cluster.plot_inductive_clustering.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.cluster.plot_ward_structured_vs_unstructured.$toplevel",
    "sklearn.cluster._birch.Birch._global_clustering"
  ],
  "sklearn.cluster._agglomerative.AgglomerativeClustering._fit": [
    "sklearn.cluster._agglomerative.AgglomerativeClustering.fit"
  ],
  "sklearn.cluster._agglomerative.AgglomerativeClustering.fit": [
    "benchmarks.bench_plot_hierarchical.compute_bench",
    "benchmarks.bench_plot_ward.$toplevel",
    "examples.cluster.plot_agglomerative_clustering.$toplevel",
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel",
    "examples.cluster.plot_agglomerative_dendrogram.$toplevel",
    "examples.cluster.plot_coin_ward_segmentation.$toplevel",
    "examples.cluster.plot_digits_linkage.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.cluster.plot_ward_structured_vs_unstructured.$toplevel"
  ],
  "sklearn.cluster._agglomerative.AgglomerativeClustering.fit_predict": [
    "Ovr{sklearn.cluster._agglomerative.AgglomerativeClustering.fit_predict}"
  ],
  "sklearn.cluster._agglomerative.FeatureAgglomeration.__init__": [
    "examples.cluster.plot_digits_agglomeration.$toplevel",
    "examples.cluster.plot_feature_agglomeration_vs_univariate_selection.$toplevel"
  ],
  "sklearn.cluster._agglomerative.FeatureAgglomeration.fit": [
    "examples.cluster.plot_digits_agglomeration.$toplevel"
  ],
  "sklearn.cluster._agglomerative.FeatureAgglomeration.fit_predict": [
    "Ovr{sklearn.cluster._agglomerative.FeatureAgglomeration.fit_predict}"
  ],
  "sklearn.cluster._bicluster.BaseSpectral.__init__": [
    "sklearn.cluster._bicluster.SpectralBiclustering.__init__",
    "sklearn.cluster._bicluster.SpectralCoclustering.__init__"
  ],
  "sklearn.cluster._bicluster.BaseSpectral._check_parameters": [
    "Ovr{sklearn.cluster._bicluster.BaseSpectral._check_parameters}"
  ],
  "sklearn.cluster._bicluster.BaseSpectral._k_means": [
    "sklearn.cluster._bicluster.SpectralBiclustering._fit_best_piecewise.make_piecewise",
    "sklearn.cluster._bicluster.SpectralBiclustering._project_and_cluster",
    "sklearn.cluster._bicluster.SpectralCoclustering._fit"
  ],
  "sklearn.cluster._bicluster.BaseSpectral._svd": [
    "sklearn.cluster._bicluster.SpectralBiclustering._fit",
    "sklearn.cluster._bicluster.SpectralCoclustering._fit"
  ],
  "sklearn.cluster._bicluster.BaseSpectral.fit": [
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.bicluster.plot_spectral_biclustering.$toplevel",
    "examples.bicluster.plot_spectral_coclustering.$toplevel"
  ],
  "sklearn.cluster._bicluster.SpectralBiclustering.__init__": [
    "examples.bicluster.plot_spectral_biclustering.$toplevel"
  ],
  "sklearn.cluster._bicluster.SpectralBiclustering._check_parameters": [
    "Ovr{sklearn.cluster._bicluster.SpectralBiclustering._check_parameters}"
  ],
  "sklearn.cluster._bicluster.SpectralBiclustering._fit_best_piecewise": [
    "sklearn.cluster._bicluster.SpectralBiclustering._fit"
  ],
  "sklearn.cluster._bicluster.SpectralBiclustering._project_and_cluster": [
    "sklearn.cluster._bicluster.SpectralBiclustering._fit"
  ],
  "sklearn.cluster._bicluster.SpectralCoclustering.__init__": [
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.bicluster.plot_spectral_coclustering.$toplevel"
  ],
  "sklearn.cluster._bicluster.SpectralCoclustering._check_parameters": [
    "Ovr{sklearn.cluster._bicluster.SpectralCoclustering._check_parameters}"
  ],
  "sklearn.cluster._birch.Birch.__init__": [
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel"
  ],
  "sklearn.cluster._birch.Birch._fit": [
    "sklearn.cluster._birch.Birch.fit",
    "sklearn.cluster._birch.Birch.partial_fit"
  ],
  "sklearn.cluster._birch.Birch._get_leaves": [
    "sklearn.cluster._birch.Birch._fit"
  ],
  "sklearn.cluster._birch.Birch._global_clustering": [
    "sklearn.cluster._birch.Birch._fit",
    "sklearn.cluster._birch.Birch.partial_fit"
  ],
  "sklearn.cluster._birch.Birch._predict": [
    "sklearn.cluster._birch.Birch._global_clustering",
    "sklearn.cluster._birch.Birch.predict"
  ],
  "sklearn.cluster._birch.Birch.fit": [
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel"
  ],
  "sklearn.cluster._birch._CFNode.__init__": [
    "sklearn.cluster._birch.Birch._fit",
    "sklearn.cluster._birch._split_node"
  ],
  "sklearn.cluster._birch._CFNode.append_subcluster": [
    "sklearn.cluster._birch.Birch._fit",
    "sklearn.cluster._birch._CFNode.insert_cf_subcluster",
    "sklearn.cluster._birch._CFNode.update_split_subclusters",
    "sklearn.cluster._birch._split_node"
  ],
  "sklearn.cluster._birch._CFNode.update_split_subclusters": [
    "sklearn.cluster._birch._CFNode.insert_cf_subcluster"
  ],
  "sklearn.cluster._birch._CFSubcluster.__init__": [
    "sklearn.cluster._birch.Birch._fit",
    "sklearn.cluster._birch._split_node"
  ],
  "sklearn.cluster._birch._CFSubcluster.update": [
    "sklearn.cluster._birch._split_node"
  ],
  "sklearn.cluster._bisect_k_means.BisectingKMeans.__init__": [
    "examples.cluster.plot_bisect_kmeans.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel"
  ],
  "sklearn.cluster._bisect_k_means.BisectingKMeans._bisect": [
    "sklearn.cluster._bisect_k_means.BisectingKMeans.fit"
  ],
  "sklearn.cluster._bisect_k_means.BisectingKMeans._inertia_per_cluster": [
    "sklearn.cluster._bisect_k_means.BisectingKMeans._bisect"
  ],
  "sklearn.cluster._bisect_k_means.BisectingKMeans._predict_recursive": [
    "sklearn.cluster._bisect_k_means.BisectingKMeans._predict_recursive",
    "sklearn.cluster._bisect_k_means.BisectingKMeans.predict"
  ],
  "sklearn.cluster._bisect_k_means.BisectingKMeans._warn_mkl_vcomp": [
    "Ovr{sklearn.cluster._bisect_k_means.BisectingKMeans._warn_mkl_vcomp}"
  ],
  "sklearn.cluster._bisect_k_means.BisectingKMeans.fit": [
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel"
  ],
  "sklearn.cluster._bisect_k_means._BisectingTree.__init__": [
    "sklearn.cluster._bisect_k_means.BisectingKMeans.fit",
    "sklearn.cluster._bisect_k_means._BisectingTree.split"
  ],
  "sklearn.cluster._bisect_k_means._BisectingTree.get_cluster_to_bisect": [
    "sklearn.cluster._bisect_k_means.BisectingKMeans.fit"
  ],
  "sklearn.cluster._bisect_k_means._BisectingTree.iter_leaves": [
    "sklearn.cluster._bisect_k_means.BisectingKMeans.fit",
    "sklearn.cluster._bisect_k_means._BisectingTree.get_cluster_to_bisect"
  ],
  "sklearn.cluster._dbscan.DBSCAN.__init__": [
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.cluster.plot_hdbscan.$toplevel",
    "sklearn.cluster._dbscan.dbscan",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_dbscan"
  ],
  "sklearn.cluster._dbscan.DBSCAN.fit": [
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.cluster.plot_hdbscan.$toplevel",
    "sklearn.cluster._dbscan.DBSCAN.fit_predict",
    "sklearn.cluster._dbscan.dbscan"
  ],
  "sklearn.cluster._dbscan.DBSCAN.fit_predict": [
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_dbscan"
  ],
  "sklearn.cluster._feature_agglomeration.AgglomerationTransform.inverse_transform": [
    "examples.cluster.plot_digits_agglomeration.$toplevel"
  ],
  "sklearn.cluster._feature_agglomeration.AgglomerationTransform.transform": [
    "examples.cluster.plot_digits_agglomeration.$toplevel"
  ],
  "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.__init__": [
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_hdbscan.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel"
  ],
  "sklearn.cluster._hdbscan.hdbscan.HDBSCAN._weighted_cluster_center": [
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.fit"
  ],
  "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.dbscan_clustering": [
    "examples.cluster.plot_hdbscan.$toplevel"
  ],
  "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.fit": [
    "examples.cluster.plot_hdbscan.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.fit_predict"
  ],
  "sklearn.cluster._kmeans.KMeans.__init__": [
    "asv_benchmarks.benchmarks.cluster.KMeansBenchmark.make_estimator",
    "benchmarks.bench_plot_fastkmeans.compute_bench",
    "examples.cluster.plot_bisect_kmeans.$toplevel",
    "examples.cluster.plot_cluster_iris.$toplevel",
    "examples.cluster.plot_color_quantization.$toplevel",
    "examples.cluster.plot_kmeans_assumptions.$toplevel",
    "examples.cluster.plot_kmeans_digits.$toplevel",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.$toplevel",
    "examples.cluster.plot_mini_batch_kmeans.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.text.plot_document_clustering.$toplevel",
    "sklearn.cluster._bicluster.BaseSpectral._k_means",
    "sklearn.cluster._kmeans.k_means",
    "sklearn.mixture._base.BaseMixture._initialize_parameters",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit"
  ],
  "sklearn.cluster._kmeans.KMeans._check_params_vs_input": [
    "sklearn.cluster._kmeans.KMeans.fit"
  ],
  "sklearn.cluster._kmeans.KMeans._warn_mkl_vcomp": [
    "Ovr{sklearn.cluster._kmeans.KMeans._warn_mkl_vcomp}"
  ],
  "sklearn.cluster._kmeans.KMeans.fit": [
    "benchmarks.bench_plot_fastkmeans.compute_bench",
    "examples.cluster.plot_cluster_iris.$toplevel",
    "examples.cluster.plot_color_quantization.$toplevel",
    "examples.cluster.plot_kmeans_digits.$toplevel",
    "examples.cluster.plot_mini_batch_kmeans.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.text.plot_document_clustering.$toplevel",
    "sklearn.cluster._kmeans.k_means",
    "sklearn.mixture._base.BaseMixture._initialize_parameters",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit"
  ],
  "sklearn.cluster._kmeans.MiniBatchKMeans.__init__": [
    "asv_benchmarks.benchmarks.cluster.MiniBatchKMeansBenchmark.make_estimator",
    "benchmarks.bench_plot_fastkmeans.compute_bench",
    "benchmarks.bench_plot_fastkmeans.compute_bench_2",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_dict_face_patches.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.$toplevel",
    "examples.cluster.plot_mini_batch_kmeans.$toplevel",
    "examples.decomposition.plot_faces_decomposition.$toplevel",
    "examples.text.plot_document_clustering.$toplevel",
    "sklearn.cluster._bicluster.BaseSpectral._k_means",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_clones"
  ],
  "sklearn.cluster._kmeans.MiniBatchKMeans._check_params_vs_input": [
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.partial_fit"
  ],
  "sklearn.cluster._kmeans.MiniBatchKMeans._mini_batch_convergence": [
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit"
  ],
  "sklearn.cluster._kmeans.MiniBatchKMeans._random_reassign": [
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.partial_fit"
  ],
  "sklearn.cluster._kmeans.MiniBatchKMeans._warn_mkl_vcomp": [
    "Ovr{sklearn.cluster._kmeans.MiniBatchKMeans._warn_mkl_vcomp}"
  ],
  "sklearn.cluster._kmeans.MiniBatchKMeans.fit": [
    "benchmarks.bench_plot_fastkmeans.compute_bench",
    "benchmarks.bench_plot_fastkmeans.compute_bench_2",
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.$toplevel",
    "examples.cluster.plot_mini_batch_kmeans.$toplevel",
    "examples.decomposition.plot_faces_decomposition.$toplevel"
  ],
  "sklearn.cluster._kmeans.MiniBatchKMeans.partial_fit": [
    "examples.cluster.plot_dict_face_patches.$toplevel"
  ],
  "sklearn.cluster._kmeans._BaseKMeans.__init__": [
    "sklearn.cluster._bisect_k_means.BisectingKMeans.__init__",
    "sklearn.cluster._kmeans.KMeans.__init__",
    "sklearn.cluster._kmeans.MiniBatchKMeans.__init__"
  ],
  "sklearn.cluster._kmeans._BaseKMeans._check_mkl_vcomp": [
    "sklearn.cluster._bisect_k_means.BisectingKMeans.fit",
    "sklearn.cluster._kmeans.KMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.partial_fit"
  ],
  "sklearn.cluster._kmeans._BaseKMeans._check_params_vs_input": [
    "sklearn.cluster._bisect_k_means.BisectingKMeans.fit",
    "sklearn.cluster._kmeans.KMeans._check_params_vs_input",
    "sklearn.cluster._kmeans.MiniBatchKMeans._check_params_vs_input"
  ],
  "sklearn.cluster._kmeans._BaseKMeans._check_test_data": [
    "sklearn.cluster._bisect_k_means.BisectingKMeans.predict",
    "sklearn.cluster._kmeans._BaseKMeans.predict",
    "sklearn.cluster._kmeans._BaseKMeans.score",
    "sklearn.cluster._kmeans._BaseKMeans.transform"
  ],
  "sklearn.cluster._kmeans._BaseKMeans._init_centroids": [
    "sklearn.cluster._bisect_k_means.BisectingKMeans._bisect",
    "sklearn.cluster._kmeans.KMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.partial_fit"
  ],
  "sklearn.cluster._kmeans._BaseKMeans._transform": [
    "sklearn.cluster._kmeans._BaseKMeans.transform"
  ],
  "sklearn.cluster._kmeans._BaseKMeans._validate_center_shape": [
    "sklearn.cluster._kmeans.KMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.partial_fit",
    "sklearn.cluster._kmeans._BaseKMeans._init_centroids"
  ],
  "sklearn.cluster._kmeans._BaseKMeans._warn_mkl_vcomp": [
    "Ovr{sklearn.cluster._kmeans._BaseKMeans._warn_mkl_vcomp}"
  ],
  "sklearn.cluster._kmeans._BaseKMeans.fit_predict": [
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.cluster.plot_kmeans_assumptions.$toplevel",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel"
  ],
  "sklearn.cluster._kmeans._BaseKMeans.predict": [
    "examples.cluster.plot_kmeans_digits.$toplevel"
  ],
  "sklearn.cluster._mean_shift.MeanShift.__init__": [
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_mean_shift.$toplevel",
    "sklearn.cluster._mean_shift.mean_shift"
  ],
  "sklearn.cluster._mean_shift.MeanShift.fit": [
    "examples.cluster.plot_mean_shift.$toplevel",
    "sklearn.cluster._mean_shift.mean_shift"
  ],
  "sklearn.cluster._optics.OPTICS.__init__": [
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_optics.$toplevel"
  ],
  "sklearn.cluster._optics.OPTICS.fit": [
    "examples.cluster.plot_optics.$toplevel"
  ],
  "sklearn.cluster._spectral.SpectralClustering.__init__": [
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "sklearn.cluster._spectral.spectral_clustering",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_spectral_clustering"
  ],
  "sklearn.cluster._spectral.SpectralClustering.fit": [
    "sklearn.cluster._spectral.spectral_clustering"
  ],
  "sklearn.cluster._spectral.SpectralClustering.fit_predict": [
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_spectral_clustering"
  ],
  "sklearn.compose._column_transformer.ColumnTransformer.__init__": [
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.compose.plot_column_transformer.$toplevel",
    "examples.compose.plot_column_transformer_mixed_types.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.miscellaneous.plot_pipeline_display.$toplevel",
    "examples.miscellaneous.plot_set_output.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_0_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_2_0.$toplevel",
    "sklearn.compose._column_transformer.make_column_transformer"
  ],
  "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out": [
    "sklearn.compose._column_transformer.ColumnTransformer._hstack",
    "sklearn.compose._column_transformer.ColumnTransformer.get_feature_names_out"
  ],
  "sklearn.compose._column_transformer.ColumnTransformer._fit_transform": [
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform",
    "sklearn.compose._column_transformer.ColumnTransformer.transform"
  ],
  "sklearn.compose._column_transformer.ColumnTransformer._get_feature_name_out_for_transformer": [
    "sklearn.compose._column_transformer.ColumnTransformer.get_feature_names_out"
  ],
  "sklearn.compose._column_transformer.ColumnTransformer._hstack": [
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform",
    "sklearn.compose._column_transformer.ColumnTransformer.transform"
  ],
  "sklearn.compose._column_transformer.ColumnTransformer._iter": [
    "sklearn.compose._column_transformer.ColumnTransformer._fit_transform",
    "sklearn.compose._column_transformer.ColumnTransformer._hstack",
    "sklearn.compose._column_transformer.ColumnTransformer._record_output_indices",
    "sklearn.compose._column_transformer.ColumnTransformer._update_fitted_transformers",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_output",
    "sklearn.compose._column_transformer.ColumnTransformer.get_feature_names_out"
  ],
  "sklearn.compose._column_transformer.ColumnTransformer._log_message": [
    "sklearn.compose._column_transformer.ColumnTransformer._fit_transform"
  ],
  "sklearn.compose._column_transformer.ColumnTransformer._record_output_indices": [
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform"
  ],
  "sklearn.compose._column_transformer.ColumnTransformer._update_fitted_transformers": [
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform"
  ],
  "sklearn.compose._column_transformer.ColumnTransformer._validate_column_callables": [
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform"
  ],
  "sklearn.compose._column_transformer.ColumnTransformer._validate_output": [
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform",
    "sklearn.compose._column_transformer.ColumnTransformer.transform"
  ],
  "sklearn.compose._column_transformer.ColumnTransformer._validate_remainder": [
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform"
  ],
  "sklearn.compose._column_transformer.ColumnTransformer._validate_transformers": [
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform"
  ],
  "sklearn.compose._column_transformer.ColumnTransformer.fit": [
    "examples.release_highlights.plot_release_highlights_1_0_0.$toplevel"
  ],
  "sklearn.compose._column_transformer.ColumnTransformer.fit_transform": [
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "sklearn.compose._column_transformer.ColumnTransformer.fit"
  ],
  "sklearn.compose._column_transformer.ColumnTransformer.get_params": [
    "Ovr{sklearn.compose._column_transformer.ColumnTransformer.get_params}",
    "sklearn.utils.metaestimators._BaseComposition._validate_names"
  ],
  "sklearn.compose._column_transformer.ColumnTransformer.named_transformers_": [
    "sklearn.compose._column_transformer.ColumnTransformer.transform"
  ],
  "sklearn.compose._column_transformer.ColumnTransformer.set_output": [
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_2_0.$toplevel"
  ],
  "sklearn.compose._column_transformer.make_column_selector.__call__": [
    "benchmarks.bench_hist_gradient_boosting_adult.$toplevel",
    "examples.compose.plot_column_transformer_mixed_types.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel"
  ],
  "sklearn.compose._column_transformer.make_column_selector.__init__": [
    "benchmarks.bench_hist_gradient_boosting_adult.$toplevel",
    "examples.compose.plot_column_transformer_mixed_types.$toplevel",
    "examples.ensemble.plot_gradient_boosting_categorical.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel"
  ],
  "sklearn.compose._target.TransformedTargetRegressor.__init__": [
    "examples.compose.plot_transformed_target.$toplevel",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel"
  ],
  "sklearn.compose._target.TransformedTargetRegressor._fit_transformer": [
    "sklearn.compose._target.TransformedTargetRegressor.fit"
  ],
  "sklearn.compose._target.TransformedTargetRegressor.fit": [
    "examples.compose.plot_transformed_target.$toplevel"
  ],
  "sklearn.covariance._elliptic_envelope.EllipticEnvelope.__init__": [
    "examples.applications.plot_outlier_detection_wine.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel"
  ],
  "sklearn.covariance._elliptic_envelope.EllipticEnvelope.decision_function": [
    "examples.applications.plot_outlier_detection_wine.$toplevel",
    "sklearn.covariance._elliptic_envelope.EllipticEnvelope.predict"
  ],
  "sklearn.covariance._elliptic_envelope.EllipticEnvelope.predict": [
    "sklearn.covariance._elliptic_envelope.EllipticEnvelope.score"
  ],
  "sklearn.covariance._elliptic_envelope.EllipticEnvelope.score_samples": [
    "sklearn.covariance._elliptic_envelope.EllipticEnvelope.decision_function"
  ],
  "sklearn.covariance._empirical_covariance.EmpiricalCovariance.__init__": [
    "examples.classification.plot_lda.$toplevel",
    "examples.covariance.plot_covariance_estimation.$toplevel",
    "examples.covariance.plot_lw_vs_oas.$toplevel",
    "examples.covariance.plot_mahalanobis_distances.$toplevel",
    "examples.covariance.plot_robust_vs_empirical_covariance.$toplevel",
    "sklearn.covariance._graph_lasso.BaseGraphicalLasso.__init__",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._shrunk_covariance.LedoitWolf.__init__",
    "sklearn.covariance._shrunk_covariance.ShrunkCovariance.__init__",
    "sklearn.covariance._shrunk_covariance.oas"
  ],
  "sklearn.covariance._empirical_covariance.EmpiricalCovariance._set_covariance": [
    "sklearn.covariance._empirical_covariance.EmpiricalCovariance.fit",
    "sklearn.covariance._robust_covariance.MinCovDet.reweight_covariance",
    "sklearn.covariance._shrunk_covariance.LedoitWolf.fit",
    "sklearn.covariance._shrunk_covariance.OAS.fit",
    "sklearn.covariance._shrunk_covariance.ShrunkCovariance.fit"
  ],
  "sklearn.covariance._empirical_covariance.EmpiricalCovariance.error_norm": [
    "examples.covariance.plot_lw_vs_oas.$toplevel"
  ],
  "sklearn.covariance._empirical_covariance.EmpiricalCovariance.fit": [
    "examples.covariance.plot_mahalanobis_distances.$toplevel",
    "examples.covariance.plot_robust_vs_empirical_covariance.$toplevel"
  ],
  "sklearn.covariance._empirical_covariance.EmpiricalCovariance.get_precision": [
    "sklearn.covariance._empirical_covariance.EmpiricalCovariance.mahalanobis",
    "sklearn.covariance._empirical_covariance.EmpiricalCovariance.score",
    "sklearn.covariance._robust_covariance.MinCovDet.reweight_covariance"
  ],
  "sklearn.covariance._empirical_covariance.EmpiricalCovariance.mahalanobis": [
    "sklearn.covariance._elliptic_envelope.EllipticEnvelope.score_samples"
  ],
  "sklearn.covariance._graph_lasso.BaseGraphicalLasso.__init__": [
    "sklearn.covariance._graph_lasso.GraphicalLasso.__init__",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.__init__"
  ],
  "sklearn.covariance._graph_lasso.GraphicalLasso.__init__": [
    "sklearn.covariance._graph_lasso.graphical_lasso"
  ],
  "sklearn.covariance._graph_lasso.GraphicalLasso.fit": [
    "sklearn.covariance._graph_lasso.graphical_lasso"
  ],
  "sklearn.covariance._graph_lasso.GraphicalLassoCV.__init__": [
    "examples.applications.plot_stock_market.$toplevel",
    "examples.covariance.plot_sparse_cov.$toplevel"
  ],
  "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit": [
    "examples.applications.plot_stock_market.$toplevel",
    "examples.covariance.plot_sparse_cov.$toplevel"
  ],
  "sklearn.covariance._robust_covariance.MinCovDet.__init__": [
    "examples.covariance.plot_mahalanobis_distances.$toplevel",
    "examples.covariance.plot_robust_vs_empirical_covariance.$toplevel"
  ],
  "sklearn.covariance._robust_covariance.MinCovDet.correct_covariance": [
    "sklearn.covariance._robust_covariance.MinCovDet.fit"
  ],
  "sklearn.covariance._robust_covariance.MinCovDet.fit": [
    "examples.covariance.plot_mahalanobis_distances.$toplevel",
    "examples.covariance.plot_robust_vs_empirical_covariance.$toplevel"
  ],
  "sklearn.covariance._robust_covariance.MinCovDet.reweight_covariance": [
    "sklearn.covariance._robust_covariance.MinCovDet.fit"
  ],
  "sklearn.covariance._shrunk_covariance.LedoitWolf.__init__": [
    "examples.covariance.plot_covariance_estimation.$toplevel",
    "examples.covariance.plot_lw_vs_oas.$toplevel",
    "examples.decomposition.plot_pca_vs_fa_model_selection.lw_score",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf"
  ],
  "sklearn.covariance._shrunk_covariance.LedoitWolf.fit": [
    "examples.covariance.plot_covariance_estimation.$toplevel",
    "examples.covariance.plot_lw_vs_oas.$toplevel",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf"
  ],
  "sklearn.covariance._shrunk_covariance.OAS.fit": [
    "examples.covariance.plot_covariance_estimation.$toplevel",
    "examples.covariance.plot_lw_vs_oas.$toplevel",
    "sklearn.covariance._shrunk_covariance.oas"
  ],
  "sklearn.covariance._shrunk_covariance.ShrunkCovariance.__init__": [
    "examples.covariance.plot_covariance_estimation.$toplevel",
    "examples.decomposition.plot_pca_vs_fa_model_selection.shrunk_cov_score"
  ],
  "sklearn.covariance._shrunk_covariance.ShrunkCovariance.fit": [
    "examples.covariance.plot_covariance_estimation.$toplevel"
  ],
  "sklearn.cross_decomposition._pls.CCA.__init__": [
    "examples.cross_decomposition.plot_compare_cross_decomposition.$toplevel",
    "examples.miscellaneous.plot_multilabel.plot_subfigure"
  ],
  "sklearn.cross_decomposition._pls.PLSCanonical.__init__": [
    "examples.cross_decomposition.plot_compare_cross_decomposition.$toplevel"
  ],
  "sklearn.cross_decomposition._pls.PLSRegression.__init__": [
    "examples.cross_decomposition.plot_compare_cross_decomposition.$toplevel",
    "examples.cross_decomposition.plot_pcr_vs_pls.$toplevel"
  ],
  "sklearn.cross_decomposition._pls.PLSRegression.fit": [
    "examples.cross_decomposition.plot_compare_cross_decomposition.$toplevel",
    "examples.cross_decomposition.plot_pcr_vs_pls.$toplevel"
  ],
  "sklearn.cross_decomposition._pls.PLSSVD.fit": [
    "sklearn.cross_decomposition._pls.PLSSVD.fit_transform"
  ],
  "sklearn.cross_decomposition._pls._PLS.__init__": [
    "sklearn.cross_decomposition._pls.CCA.__init__",
    "sklearn.cross_decomposition._pls.PLSCanonical.__init__",
    "sklearn.cross_decomposition._pls.PLSRegression.__init__"
  ],
  "sklearn.cross_decomposition._pls._PLS.fit": [
    "examples.cross_decomposition.plot_compare_cross_decomposition.$toplevel",
    "examples.miscellaneous.plot_multilabel.plot_subfigure",
    "sklearn.cross_decomposition._pls.PLSRegression.fit",
    "sklearn.cross_decomposition._pls._PLS.fit_transform"
  ],
  "sklearn.cross_decomposition._pls._PLS.predict": [
    "examples.cross_decomposition.plot_compare_cross_decomposition.$toplevel",
    "examples.cross_decomposition.plot_pcr_vs_pls.$toplevel"
  ],
  "sklearn.cross_decomposition._pls._PLS.transform": [
    "examples.cross_decomposition.plot_compare_cross_decomposition.$toplevel",
    "examples.cross_decomposition.plot_pcr_vs_pls.$toplevel"
  ],
  "sklearn.datasets._base.RemoteFileMetadata.__init__": [
    "sklearn.datasets._california_housing.$toplevel",
    "sklearn.datasets._covtype.$toplevel",
    "sklearn.datasets._kddcup99.$toplevel",
    "sklearn.datasets._lfw.$toplevel",
    "sklearn.datasets._olivetti_faces.$toplevel",
    "sklearn.datasets._rcv1.$toplevel",
    "sklearn.datasets._species_distributions.$toplevel",
    "sklearn.datasets._twenty_newsgroups.$toplevel"
  ],
  "sklearn.datasets._base.RemoteFileMetadata.__new__": [
    "sklearn.datasets._california_housing.$toplevel",
    "sklearn.datasets._covtype.$toplevel",
    "sklearn.datasets._kddcup99.$toplevel",
    "sklearn.datasets._lfw.$toplevel",
    "sklearn.datasets._olivetti_faces.$toplevel",
    "sklearn.datasets._rcv1.$toplevel",
    "sklearn.datasets._species_distributions.$toplevel",
    "sklearn.datasets._twenty_newsgroups.$toplevel"
  ],
  "sklearn.decomposition._base._BasePCA.get_covariance": [
    "sklearn.decomposition._base._BasePCA.get_precision"
  ],
  "sklearn.decomposition._base._BasePCA.get_precision": [
    "sklearn.decomposition._pca.PCA.score_samples"
  ],
  "sklearn.decomposition._base._BasePCA.inverse_transform": [
    "examples.applications.plot_digits_denoising.$toplevel",
    "examples.decomposition.plot_kernel_pca.$toplevel",
    "examples.neighbors.plot_digits_kde_sampling.$toplevel"
  ],
  "sklearn.decomposition._base._BasePCA.transform": [
    "examples.applications.plot_digits_denoising.$toplevel",
    "examples.decomposition.plot_kernel_pca.$toplevel",
    "examples.decomposition.plot_pca_iris.$toplevel",
    "sklearn.decomposition._incremental_pca.IncrementalPCA.transform"
  ],
  "sklearn.decomposition._dict_learning.DictionaryLearning.__init__": [
    "asv_benchmarks.benchmarks.decomposition.DictionaryLearningBenchmark.make_estimator",
    "sklearn.decomposition._dict_learning.dict_learning"
  ],
  "sklearn.decomposition._dict_learning.DictionaryLearning.fit_transform": [
    "sklearn.decomposition._dict_learning.DictionaryLearning.fit",
    "sklearn.decomposition._dict_learning.dict_learning"
  ],
  "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.__init__": [
    "asv_benchmarks.benchmarks.decomposition.MiniBatchDictionaryLearningBenchmark.make_estimator",
    "examples.decomposition.plot_faces_decomposition.$toplevel",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._sparse_pca.MiniBatchSparsePCA._fit"
  ],
  "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._check_convergence": [
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit"
  ],
  "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._check_params": [
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.partial_fit"
  ],
  "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._initialize_dict": [
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.partial_fit"
  ],
  "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._minibatch_step": [
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.partial_fit"
  ],
  "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._update_inner_stats": [
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._minibatch_step"
  ],
  "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit": [
    "examples.decomposition.plot_faces_decomposition.$toplevel",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._sparse_pca.MiniBatchSparsePCA._fit"
  ],
  "sklearn.decomposition._dict_learning.SparseCoder.__init__": [
    "examples.decomposition.plot_sparse_coding.$toplevel"
  ],
  "sklearn.decomposition._dict_learning.SparseCoder.n_components_": [
    "sklearn.decomposition._dict_learning.SparseCoder._n_features_out"
  ],
  "sklearn.decomposition._dict_learning.SparseCoder.transform": [
    "examples.decomposition.plot_sparse_coding.$toplevel"
  ],
  "sklearn.decomposition._dict_learning._BaseSparseCoding.__init__": [
    "sklearn.decomposition._dict_learning.DictionaryLearning.__init__",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.__init__",
    "sklearn.decomposition._dict_learning.SparseCoder.__init__"
  ],
  "sklearn.decomposition._dict_learning._BaseSparseCoding._transform": [
    "sklearn.decomposition._dict_learning.SparseCoder.transform",
    "sklearn.decomposition._dict_learning._BaseSparseCoding.transform"
  ],
  "sklearn.decomposition._dict_learning._BaseSparseCoding.transform": [
    "examples.decomposition.plot_image_denoising.$toplevel"
  ],
  "sklearn.decomposition._factor_analysis.FactorAnalysis.__init__": [
    "examples.decomposition.plot_faces_decomposition.$toplevel",
    "examples.decomposition.plot_pca_vs_fa_model_selection.compute_scores",
    "examples.decomposition.plot_varimax_fa.$toplevel"
  ],
  "sklearn.decomposition._factor_analysis.FactorAnalysis._rotate": [
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit"
  ],
  "sklearn.decomposition._factor_analysis.FactorAnalysis.fit": [
    "examples.decomposition.plot_faces_decomposition.$toplevel"
  ],
  "sklearn.decomposition._factor_analysis.FactorAnalysis.get_covariance": [
    "sklearn.decomposition._factor_analysis.FactorAnalysis.get_precision"
  ],
  "sklearn.decomposition._factor_analysis.FactorAnalysis.get_precision": [
    "sklearn.decomposition._factor_analysis.FactorAnalysis.score_samples"
  ],
  "sklearn.decomposition._factor_analysis.FactorAnalysis.score_samples": [
    "sklearn.decomposition._factor_analysis.FactorAnalysis.score"
  ],
  "sklearn.decomposition._fastica.FastICA.__init__": [
    "examples.decomposition.plot_faces_decomposition.$toplevel",
    "examples.decomposition.plot_ica_blind_source_separation.$toplevel",
    "examples.decomposition.plot_ica_vs_pca.$toplevel",
    "sklearn.decomposition._fastica.fastica"
  ],
  "sklearn.decomposition._fastica.FastICA._fit_transform": [
    "sklearn.decomposition._fastica.FastICA.fit",
    "sklearn.decomposition._fastica.FastICA.fit_transform",
    "sklearn.decomposition._fastica.fastica"
  ],
  "sklearn.decomposition._fastica.FastICA.fit": [
    "examples.decomposition.plot_faces_decomposition.$toplevel",
    "examples.decomposition.plot_ica_vs_pca.$toplevel"
  ],
  "sklearn.decomposition._fastica.FastICA.fit_transform": [
    "examples.decomposition.plot_ica_blind_source_separation.$toplevel"
  ],
  "sklearn.decomposition._incremental_pca.IncrementalPCA.__init__": [
    "benchmarks.bench_plot_incremental_pca.fixed_batch_size_comparison",
    "benchmarks.bench_plot_incremental_pca.variable_batch_size_comparison",
    "examples.decomposition.plot_incremental_pca.$toplevel"
  ],
  "sklearn.decomposition._incremental_pca.IncrementalPCA.partial_fit": [
    "sklearn.decomposition._incremental_pca.IncrementalPCA.fit"
  ],
  "sklearn.decomposition._kernel_pca.KernelPCA.__init__": [
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "examples.applications.plot_digits_denoising.$toplevel",
    "examples.decomposition.plot_kernel_pca.$toplevel",
    "sklearn.manifold._isomap.Isomap._fit_transform"
  ],
  "sklearn.decomposition._kernel_pca.KernelPCA._fit_inverse_transform": [
    "sklearn.decomposition._kernel_pca.KernelPCA.fit",
    "sklearn.decomposition._kernel_pca.KernelPCA.fit_transform"
  ],
  "sklearn.decomposition._kernel_pca.KernelPCA._fit_transform": [
    "sklearn.decomposition._kernel_pca.KernelPCA.fit"
  ],
  "sklearn.decomposition._kernel_pca.KernelPCA._get_kernel": [
    "sklearn.decomposition._kernel_pca.KernelPCA._fit_inverse_transform",
    "sklearn.decomposition._kernel_pca.KernelPCA.fit",
    "sklearn.decomposition._kernel_pca.KernelPCA.inverse_transform",
    "sklearn.decomposition._kernel_pca.KernelPCA.transform"
  ],
  "sklearn.decomposition._kernel_pca.KernelPCA.fit": [
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "examples.applications.plot_digits_denoising.$toplevel",
    "examples.decomposition.plot_kernel_pca.$toplevel",
    "sklearn.decomposition._kernel_pca.KernelPCA.fit_transform"
  ],
  "sklearn.decomposition._kernel_pca.KernelPCA.inverse_transform": [
    "examples.applications.plot_digits_denoising.$toplevel",
    "examples.decomposition.plot_kernel_pca.$toplevel"
  ],
  "sklearn.decomposition._kernel_pca.KernelPCA.transform": [
    "examples.applications.plot_digits_denoising.$toplevel",
    "examples.decomposition.plot_kernel_pca.$toplevel"
  ],
  "sklearn.decomposition._lda.LatentDirichletAllocation.__init__": [
    "examples.applications.plot_topics_extraction_with_nmf_lda.$toplevel"
  ],
  "sklearn.decomposition._lda.LatentDirichletAllocation._approx_bound": [
    "sklearn.decomposition._lda.LatentDirichletAllocation._perplexity_precomp_distr",
    "sklearn.decomposition._lda.LatentDirichletAllocation.score"
  ],
  "sklearn.decomposition._lda.LatentDirichletAllocation._check_non_neg_array": [
    "sklearn.decomposition._lda.LatentDirichletAllocation.fit",
    "sklearn.decomposition._lda.LatentDirichletAllocation.partial_fit",
    "sklearn.decomposition._lda.LatentDirichletAllocation.perplexity",
    "sklearn.decomposition._lda.LatentDirichletAllocation.score",
    "sklearn.decomposition._lda.LatentDirichletAllocation.transform"
  ],
  "sklearn.decomposition._lda.LatentDirichletAllocation._e_step": [
    "sklearn.decomposition._lda.LatentDirichletAllocation._em_step",
    "sklearn.decomposition._lda.LatentDirichletAllocation._unnormalized_transform",
    "sklearn.decomposition._lda.LatentDirichletAllocation.fit"
  ],
  "sklearn.decomposition._lda.LatentDirichletAllocation._em_step": [
    "sklearn.decomposition._lda.LatentDirichletAllocation.fit",
    "sklearn.decomposition._lda.LatentDirichletAllocation.partial_fit"
  ],
  "sklearn.decomposition._lda.LatentDirichletAllocation._init_latent_vars": [
    "sklearn.decomposition._lda.LatentDirichletAllocation.fit",
    "sklearn.decomposition._lda.LatentDirichletAllocation.partial_fit"
  ],
  "sklearn.decomposition._lda.LatentDirichletAllocation._perplexity_precomp_distr": [
    "sklearn.decomposition._lda.LatentDirichletAllocation.fit",
    "sklearn.decomposition._lda.LatentDirichletAllocation.perplexity"
  ],
  "sklearn.decomposition._lda.LatentDirichletAllocation._unnormalized_transform": [
    "sklearn.decomposition._lda.LatentDirichletAllocation._perplexity_precomp_distr",
    "sklearn.decomposition._lda.LatentDirichletAllocation.score",
    "sklearn.decomposition._lda.LatentDirichletAllocation.transform"
  ],
  "sklearn.decomposition._lda.LatentDirichletAllocation.fit": [
    "examples.applications.plot_topics_extraction_with_nmf_lda.$toplevel"
  ],
  "sklearn.decomposition._nmf.MiniBatchNMF.__init__": [
    "examples.applications.plot_topics_extraction_with_nmf_lda.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel"
  ],
  "sklearn.decomposition._nmf.MiniBatchNMF._check_params": [
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform",
    "sklearn.decomposition._nmf.MiniBatchNMF.partial_fit"
  ],
  "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform": [
    "sklearn.decomposition._nmf.MiniBatchNMF.fit_transform"
  ],
  "sklearn.decomposition._nmf.MiniBatchNMF._minibatch_convergence": [
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform"
  ],
  "sklearn.decomposition._nmf.MiniBatchNMF._minibatch_step": [
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform",
    "sklearn.decomposition._nmf.MiniBatchNMF.partial_fit"
  ],
  "sklearn.decomposition._nmf.MiniBatchNMF._solve_W": [
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform",
    "sklearn.decomposition._nmf.MiniBatchNMF._minibatch_step",
    "sklearn.decomposition._nmf.MiniBatchNMF.transform"
  ],
  "sklearn.decomposition._nmf.MiniBatchNMF.fit_transform": [
    "sklearn.decomposition._nmf._BaseNMF.fit"
  ],
  "sklearn.decomposition._nmf.MiniBatchNMF.partial_fit": [
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel"
  ],
  "sklearn.decomposition._nmf.MiniBatchNMF.transform": [
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel"
  ],
  "sklearn.decomposition._nmf.NMF.__init__": [
    "benchmarks.bench_plot_nmf._PGNMF.__init__",
    "examples.applications.plot_topics_extraction_with_nmf_lda.$toplevel",
    "examples.compose.plot_compare_reduction.$toplevel",
    "examples.decomposition.plot_faces_decomposition.$toplevel",
    "sklearn.decomposition._nmf.non_negative_factorization"
  ],
  "sklearn.decomposition._nmf.NMF._check_params": [
    "sklearn.decomposition._nmf.NMF._fit_transform"
  ],
  "sklearn.decomposition._nmf.NMF._fit_transform": [
    "Ovr{sklearn.decomposition._nmf.NMF._fit_transform}"
  ],
  "sklearn.decomposition._nmf.NMF.fit_transform": [
    "Ovr{sklearn.decomposition._nmf.NMF.fit_transform}"
  ],
  "sklearn.decomposition._nmf._BaseNMF.__init__": [
    "sklearn.decomposition._nmf.MiniBatchNMF.__init__",
    "sklearn.decomposition._nmf.NMF.__init__"
  ],
  "sklearn.decomposition._nmf._BaseNMF._check_params": [
    "sklearn.decomposition._nmf.MiniBatchNMF._check_params",
    "sklearn.decomposition._nmf.NMF._check_params"
  ],
  "sklearn.decomposition._nmf._BaseNMF._check_w_h": [
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform",
    "sklearn.decomposition._nmf.MiniBatchNMF.partial_fit",
    "sklearn.decomposition._nmf.NMF._fit_transform"
  ],
  "sklearn.decomposition._nmf._BaseNMF._compute_regularization": [
    "sklearn.decomposition._nmf.MiniBatchNMF._minibatch_step",
    "sklearn.decomposition._nmf.MiniBatchNMF._solve_W",
    "sklearn.decomposition._nmf.NMF._fit_transform"
  ],
  "sklearn.decomposition._nmf._BaseNMF.fit": [
    "examples.applications.plot_topics_extraction_with_nmf_lda.$toplevel",
    "examples.decomposition.plot_faces_decomposition.$toplevel"
  ],
  "sklearn.decomposition._pca.PCA.__init__": [
    "asv_benchmarks.benchmarks.decomposition.PCABenchmark.make_estimator",
    "benchmarks.bench_plot_incremental_pca.fixed_batch_size_comparison",
    "benchmarks.bench_plot_incremental_pca.variable_batch_size_comparison",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "examples.applications.plot_digits_denoising.$toplevel",
    "examples.applications.plot_face_recognition.$toplevel",
    "examples.cluster.plot_kmeans_digits.$toplevel",
    "examples.compose.plot_compare_reduction.$toplevel",
    "examples.compose.plot_digits_pipe.$toplevel",
    "examples.compose.plot_feature_union.$toplevel",
    "examples.cross_decomposition.plot_pcr_vs_pls.$toplevel",
    "examples.datasets.plot_iris_dataset.$toplevel",
    "examples.decomposition.plot_faces_decomposition.$toplevel",
    "examples.decomposition.plot_ica_blind_source_separation.$toplevel",
    "examples.decomposition.plot_ica_vs_pca.$toplevel",
    "examples.decomposition.plot_incremental_pca.$toplevel",
    "examples.decomposition.plot_kernel_pca.$toplevel",
    "examples.decomposition.plot_pca_3d.plot_figs",
    "examples.decomposition.plot_pca_iris.$toplevel",
    "examples.decomposition.plot_pca_vs_fa_model_selection.$toplevel",
    "examples.decomposition.plot_pca_vs_fa_model_selection.compute_scores",
    "examples.decomposition.plot_pca_vs_lda.$toplevel",
    "examples.decomposition.plot_varimax_fa.$toplevel",
    "examples.manifold.plot_mds.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.miscellaneous.plot_multilabel.plot_subfigure",
    "examples.miscellaneous.plot_pipeline_display.$toplevel",
    "examples.model_selection.plot_grid_search_refit_callable.$toplevel",
    "examples.neighbors.plot_digits_kde_sampling.$toplevel",
    "examples.neighbors.plot_nca_dim_reduction.$toplevel",
    "examples.preprocessing.plot_scaling_importance.$toplevel",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._initialize",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_clones"
  ],
  "sklearn.decomposition._pca.PCA._fit": [
    "sklearn.decomposition._pca.PCA.fit",
    "sklearn.decomposition._pca.PCA.fit_transform"
  ],
  "sklearn.decomposition._pca.PCA._fit_full": [
    "sklearn.decomposition._pca.PCA._fit"
  ],
  "sklearn.decomposition._pca.PCA._fit_truncated": [
    "sklearn.decomposition._pca.PCA._fit"
  ],
  "sklearn.decomposition._pca.PCA.fit": [
    "examples.applications.plot_digits_denoising.$toplevel",
    "examples.applications.plot_face_recognition.$toplevel",
    "examples.cluster.plot_kmeans_digits.$toplevel",
    "examples.compose.plot_digits_pipe.$toplevel",
    "examples.cross_decomposition.plot_pcr_vs_pls.$toplevel",
    "examples.decomposition.plot_faces_decomposition.$toplevel",
    "examples.decomposition.plot_ica_vs_pca.$toplevel",
    "examples.decomposition.plot_kernel_pca.$toplevel",
    "examples.decomposition.plot_pca_3d.plot_figs",
    "examples.decomposition.plot_pca_iris.$toplevel",
    "examples.decomposition.plot_pca_vs_fa_model_selection.$toplevel",
    "examples.decomposition.plot_pca_vs_lda.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.preprocessing.plot_scaling_importance.$toplevel",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._initialize"
  ],
  "sklearn.decomposition._pca.PCA.fit_transform": [
    "benchmarks.bench_tsne_mnist.$toplevel",
    "examples.cluster.plot_kmeans_digits.$toplevel",
    "examples.datasets.plot_iris_dataset.$toplevel",
    "examples.decomposition.plot_ica_blind_source_separation.$toplevel",
    "examples.decomposition.plot_incremental_pca.$toplevel",
    "examples.manifold.plot_mds.$toplevel",
    "examples.miscellaneous.plot_multilabel.plot_subfigure",
    "examples.neighbors.plot_digits_kde_sampling.$toplevel",
    "sklearn.manifold._t_sne.TSNE._fit"
  ],
  "sklearn.decomposition._pca.PCA.score_samples": [
    "sklearn.decomposition._pca.PCA.score"
  ],
  "sklearn.decomposition._sparse_pca.MiniBatchSparsePCA.__init__": [
    "examples.decomposition.plot_faces_decomposition.$toplevel"
  ],
  "sklearn.decomposition._sparse_pca._BaseSparsePCA.__init__": [
    "sklearn.decomposition._sparse_pca.MiniBatchSparsePCA.__init__",
    "sklearn.decomposition._sparse_pca.SparsePCA.__init__"
  ],
  "sklearn.decomposition._sparse_pca._BaseSparsePCA.fit": [
    "examples.decomposition.plot_faces_decomposition.$toplevel"
  ],
  "sklearn.decomposition._truncated_svd.TruncatedSVD.__init__": [
    "asv_benchmarks.benchmarks.datasets._20newsgroups_lowdim_dataset",
    "examples.compose.plot_column_transformer.$toplevel",
    "examples.ensemble.plot_random_forest_embedding.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.text.plot_document_clustering.$toplevel"
  ],
  "sklearn.decomposition._truncated_svd.TruncatedSVD.fit_transform": [
    "asv_benchmarks.benchmarks.datasets._20newsgroups_lowdim_dataset",
    "examples.ensemble.plot_random_forest_embedding.$toplevel",
    "sklearn.decomposition._truncated_svd.TruncatedSVD.fit"
  ],
  "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.__init__": [
    "examples.classification.plot_lda.$toplevel",
    "examples.classification.plot_lda_qda.$toplevel",
    "examples.decomposition.plot_pca_vs_lda.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.neighbors.plot_nca_dim_reduction.$toplevel",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._initialize"
  ],
  "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_eigen": [
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"
  ],
  "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_lstsq": [
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"
  ],
  "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_svd": [
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"
  ],
  "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function": [
    "Ovr{sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function}",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"
  ],
  "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit": [
    "examples.classification.plot_lda.$toplevel",
    "examples.classification.plot_lda_qda.$toplevel",
    "examples.decomposition.plot_pca_vs_lda.$toplevel",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._initialize"
  ],
  "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba": [
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"
  ],
  "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.__init__": [
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.classification.plot_lda_qda.$toplevel"
  ],
  "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis._decision_function": [
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"
  ],
  "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit": [
    "examples.classification.plot_lda_qda.$toplevel"
  ],
  "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba": [
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"
  ],
  "sklearn.dummy.DummyClassifier.__init__": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "sklearn.ensemble._gb_losses.BinomialDeviance.init_estimator",
    "sklearn.ensemble._gb_losses.ExponentialLoss.init_estimator",
    "sklearn.ensemble._gb_losses.MultinomialDeviance.init_estimator"
  ],
  "sklearn.dummy.DummyClassifier.predict": [
    "benchmarks.bench_20newsgroups.$toplevel"
  ],
  "sklearn.dummy.DummyClassifier.predict_proba": [
    "sklearn.dummy.DummyClassifier.predict",
    "sklearn.dummy.DummyClassifier.predict_log_proba"
  ],
  "sklearn.dummy.DummyRegressor.__init__": [
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "sklearn.ensemble._gb_losses.HuberLossFunction.init_estimator",
    "sklearn.ensemble._gb_losses.LeastAbsoluteError.init_estimator",
    "sklearn.ensemble._gb_losses.LeastSquaresError.init_estimator",
    "sklearn.ensemble._gb_losses.QuantileLossFunction.init_estimator"
  ],
  "sklearn.dummy.DummyRegressor.fit": [
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel"
  ],
  "sklearn.dummy.DummyRegressor.predict": [
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel"
  ],
  "sklearn.ensemble._bagging.BaggingClassifier._set_oob_score": [
    "Ovr{sklearn.ensemble._bagging.BaggingClassifier._set_oob_score}"
  ],
  "sklearn.ensemble._bagging.BaggingClassifier._validate_estimator": [
    "sklearn.ensemble._bagging.BaseBagging._fit"
  ],
  "sklearn.ensemble._bagging.BaggingClassifier._validate_y": [
    "Ovr{sklearn.ensemble._bagging.BaggingClassifier._validate_y}"
  ],
  "sklearn.ensemble._bagging.BaggingClassifier.predict_proba": [
    "sklearn.ensemble._bagging.BaggingClassifier.predict",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba"
  ],
  "sklearn.ensemble._bagging.BaggingRegressor.__init__": [
    "examples.ensemble.plot_bias_variance.$toplevel"
  ],
  "sklearn.ensemble._bagging.BaggingRegressor._set_oob_score": [
    "Ovr{sklearn.ensemble._bagging.BaggingRegressor._set_oob_score}"
  ],
  "sklearn.ensemble._bagging.BaggingRegressor._validate_estimator": [
    "sklearn.ensemble._bagging.BaseBagging._fit"
  ],
  "sklearn.ensemble._bagging.BaggingRegressor.predict": [
    "examples.ensemble.plot_bias_variance.$toplevel"
  ],
  "sklearn.ensemble._bagging.BaseBagging._fit": [
    "sklearn.ensemble._bagging.BaseBagging.fit"
  ],
  "sklearn.ensemble._bagging.BaseBagging._get_estimators_indices": [
    "sklearn.ensemble._bagging.BaseBagging.estimators_samples_"
  ],
  "sklearn.ensemble._bagging.BaseBagging._parallel_args": [
    "Ovr{sklearn.ensemble._bagging.BaseBagging._parallel_args}",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_proba"
  ],
  "sklearn.ensemble._bagging.BaseBagging._set_oob_score": [
    "Ovr{sklearn.ensemble._bagging.BaseBagging._set_oob_score}"
  ],
  "sklearn.ensemble._bagging.BaseBagging._validate_y": [
    "Ovr{sklearn.ensemble._bagging.BaseBagging._validate_y}"
  ],
  "sklearn.ensemble._bagging.BaseBagging.estimators_samples_": [
    "sklearn.ensemble._bagging.BaggingClassifier._set_oob_score",
    "sklearn.ensemble._bagging.BaggingRegressor._set_oob_score"
  ],
  "sklearn.ensemble._base.BaseEnsemble.__init__": [
    "sklearn.ensemble._bagging.BaseBagging.__init__",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.__init__"
  ],
  "sklearn.ensemble._base.BaseEnsemble._make_estimator": [
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost_discrete",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost_real",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor._boost"
  ],
  "sklearn.ensemble._base.BaseEnsemble._validate_estimator": [
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.fit"
  ],
  "sklearn.ensemble._base._BaseHeterogeneousEnsemble._validate_estimators": [
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.ensemble._voting._BaseVoting.fit"
  ],
  "sklearn.ensemble._base._BaseHeterogeneousEnsemble.get_params": [
    "Ovr{sklearn.ensemble._base._BaseHeterogeneousEnsemble.get_params}",
    "sklearn.utils.metaestimators._BaseComposition._validate_names"
  ],
  "sklearn.ensemble._forest.BaseForest._set_oob_score_and_attributes": [
    "Ovr{sklearn.ensemble._forest.BaseForest._set_oob_score_and_attributes}"
  ],
  "sklearn.ensemble._forest.BaseForest._validate_X_predict": [
    "sklearn.ensemble._forest.BaseForest.apply",
    "sklearn.ensemble._forest.BaseForest.decision_path",
    "sklearn.ensemble._forest.ForestClassifier.predict_proba",
    "sklearn.ensemble._forest.ForestRegressor.predict"
  ],
  "sklearn.ensemble._forest.BaseForest._validate_y_class_weight": [
    "Ovr{sklearn.ensemble._forest.BaseForest._validate_y_class_weight}"
  ],
  "sklearn.ensemble._forest.BaseForest.apply": [
    "sklearn.ensemble._forest.RandomTreesEmbedding.fit_transform",
    "sklearn.ensemble._forest.RandomTreesEmbedding.transform"
  ],
  "sklearn.ensemble._forest.BaseForest.feature_importances_": [
    "examples.ensemble.plot_forest_importances.$toplevel",
    "examples.ensemble.plot_forest_importances_faces.$toplevel",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel"
  ],
  "sklearn.ensemble._forest.BaseForest.fit": [
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.ensemble.plot_ensemble_oob.$toplevel",
    "examples.ensemble.plot_feature_transformation.$toplevel",
    "examples.ensemble.plot_forest_importances.$toplevel",
    "examples.ensemble.plot_forest_importances_faces.$toplevel",
    "examples.ensemble.plot_random_forest_embedding.$toplevel",
    "examples.ensemble.plot_random_forest_regression_multioutput.$toplevel",
    "examples.ensemble.plot_voting_regressor.$toplevel",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "examples.miscellaneous.plot_roc_curve_visualization_api.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel"
  ],
  "sklearn.ensemble._forest.ExtraTreesClassifier.__init__": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.ensemble.plot_random_forest_embedding.$toplevel",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_clones"
  ],
  "sklearn.ensemble._forest.ExtraTreesRegressor.__init__": [
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel"
  ],
  "sklearn.ensemble._forest.ForestClassifier.__init__": [
    "sklearn.ensemble._forest.ExtraTreesClassifier.__init__",
    "sklearn.ensemble._forest.RandomForestClassifier.__init__"
  ],
  "sklearn.ensemble._forest.ForestClassifier._set_oob_score_and_attributes": [
    "Ovr{sklearn.ensemble._forest.ForestClassifier._set_oob_score_and_attributes}"
  ],
  "sklearn.ensemble._forest.ForestClassifier._validate_y_class_weight": [
    "Ovr{sklearn.ensemble._forest.ForestClassifier._validate_y_class_weight}"
  ],
  "sklearn.ensemble._forest.ForestClassifier.predict": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel"
  ],
  "sklearn.ensemble._forest.ForestClassifier.predict_proba": [
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.ensemble.plot_random_forest_embedding.$toplevel",
    "sklearn.ensemble._forest.ForestClassifier.predict",
    "sklearn.ensemble._forest.ForestClassifier.predict_log_proba"
  ],
  "sklearn.ensemble._forest.ForestRegressor.__init__": [
    "sklearn.ensemble._forest.ExtraTreesRegressor.__init__",
    "sklearn.ensemble._forest.RandomForestRegressor.__init__"
  ],
  "sklearn.ensemble._forest.ForestRegressor._set_oob_score_and_attributes": [
    "Ovr{sklearn.ensemble._forest.ForestRegressor._set_oob_score_and_attributes}"
  ],
  "sklearn.ensemble._forest.ForestRegressor.predict": [
    "examples.ensemble.plot_random_forest_regression_multioutput.$toplevel",
    "examples.ensemble.plot_voting_regressor.$toplevel",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel"
  ],
  "sklearn.ensemble._forest.RandomForestClassifier.__init__": [
    "asv_benchmarks.benchmarks.ensemble.RandomForestClassifierBenchmark.make_estimator",
    "asv_benchmarks.benchmarks.model_selection.CrossValidationBenchmark.setup",
    "asv_benchmarks.benchmarks.model_selection.GridSearchBenchmark.make_estimator",
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.calibration.plot_compare_calibration.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.cluster.plot_inductive_clustering.$toplevel",
    "examples.ensemble.plot_ensemble_oob.$toplevel",
    "examples.ensemble.plot_feature_transformation.$toplevel",
    "examples.ensemble.plot_forest_importances.$toplevel",
    "examples.ensemble.plot_forest_importances_faces.$toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.ensemble.plot_voting_probas.$toplevel",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "examples.miscellaneous.plot_pipeline_display.$toplevel",
    "examples.miscellaneous.plot_roc_curve_visualization_api.$toplevel",
    "examples.model_selection.plot_det.$toplevel",
    "examples.model_selection.plot_successive_halving_iterations.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel"
  ],
  "sklearn.ensemble._forest.RandomForestRegressor.__init__": [
    "examples.applications.plot_prediction_latency.$toplevel",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.ensemble.plot_random_forest_regression_multioutput.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.ensemble.plot_voting_regressor.$toplevel",
    "examples.impute.plot_iterative_imputer_variants_comparison.$toplevel",
    "examples.impute.plot_missing_values.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel"
  ],
  "sklearn.ensemble._forest.RandomTreesEmbedding.__init__": [
    "examples.ensemble.plot_feature_transformation.$toplevel",
    "examples.ensemble.plot_random_forest_embedding.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel"
  ],
  "sklearn.ensemble._forest.RandomTreesEmbedding._set_oob_score_and_attributes": [
    "Ovr{sklearn.ensemble._forest.RandomTreesEmbedding._set_oob_score_and_attributes}"
  ],
  "sklearn.ensemble._forest.RandomTreesEmbedding.fit_transform": [
    "examples.ensemble.plot_random_forest_embedding.$toplevel",
    "sklearn.ensemble._forest.RandomTreesEmbedding.fit"
  ],
  "sklearn.ensemble._forest.RandomTreesEmbedding.transform": [
    "examples.ensemble.plot_random_forest_embedding.$toplevel"
  ],
  "sklearn.ensemble._gb.BaseGradientBoosting._check_initialized": [
    "sklearn.ensemble._gb.BaseGradientBoosting._raw_predict_init",
    "sklearn.ensemble._gb.BaseGradientBoosting.apply",
    "sklearn.ensemble._gb.BaseGradientBoosting.feature_importances_"
  ],
  "sklearn.ensemble._gb.BaseGradientBoosting._check_params": [
    "sklearn.ensemble._gb.BaseGradientBoosting.fit"
  ],
  "sklearn.ensemble._gb.BaseGradientBoosting._clear_state": [
    "sklearn.ensemble._gb.BaseGradientBoosting.fit"
  ],
  "sklearn.ensemble._gb.BaseGradientBoosting._fit_stage": [
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stages"
  ],
  "sklearn.ensemble._gb.BaseGradientBoosting._fit_stages": [
    "sklearn.ensemble._gb.BaseGradientBoosting.fit"
  ],
  "sklearn.ensemble._gb.BaseGradientBoosting._init_state": [
    "sklearn.ensemble._gb.BaseGradientBoosting.fit"
  ],
  "sklearn.ensemble._gb.BaseGradientBoosting._is_initialized": [
    "sklearn.ensemble._gb.BaseGradientBoosting.fit"
  ],
  "sklearn.ensemble._gb.BaseGradientBoosting._raw_predict": [
    "sklearn.ensemble._gb.BaseGradientBoosting.fit",
    "sklearn.ensemble._gb.GradientBoostingClassifier.decision_function",
    "sklearn.ensemble._gb.GradientBoostingRegressor.predict"
  ],
  "sklearn.ensemble._gb.BaseGradientBoosting._raw_predict_init": [
    "sklearn.ensemble._gb.BaseGradientBoosting._raw_predict",
    "sklearn.ensemble._gb.BaseGradientBoosting._staged_raw_predict"
  ],
  "sklearn.ensemble._gb.BaseGradientBoosting._resize_state": [
    "sklearn.ensemble._gb.BaseGradientBoosting.fit"
  ],
  "sklearn.ensemble._gb.BaseGradientBoosting._staged_raw_predict": [
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stages",
    "sklearn.ensemble._gb.GradientBoostingClassifier.staged_decision_function",
    "sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict",
    "sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict_proba",
    "sklearn.ensemble._gb.GradientBoostingRegressor.staged_predict"
  ],
  "sklearn.ensemble._gb.BaseGradientBoosting._validate_y": [
    "Ovr{sklearn.ensemble._gb.BaseGradientBoosting._validate_y}"
  ],
  "sklearn.ensemble._gb.BaseGradientBoosting.feature_importances_": [
    "examples.ensemble.plot_gradient_boosting_regression.$toplevel"
  ],
  "sklearn.ensemble._gb.BaseGradientBoosting.fit": [
    "examples.ensemble.plot_feature_transformation.$toplevel",
    "examples.ensemble.plot_gradient_boosting_early_stopping.$toplevel",
    "examples.ensemble.plot_gradient_boosting_oob.$toplevel",
    "examples.ensemble.plot_gradient_boosting_oob.cv_estimate",
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regression.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "examples.ensemble.plot_voting_regressor.$toplevel"
  ],
  "sklearn.ensemble._gb.GradientBoostingClassifier.__init__": [
    "asv_benchmarks.benchmarks.ensemble.GradientBoostingClassifierBenchmark.make_estimator",
    "benchmarks.bench_covertype.$toplevel",
    "examples.ensemble.plot_feature_transformation.$toplevel",
    "examples.ensemble.plot_gradient_boosting_early_stopping.$toplevel",
    "examples.ensemble.plot_gradient_boosting_oob.$toplevel",
    "examples.ensemble.plot_gradient_boosting_oob.cv_estimate",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel"
  ],
  "sklearn.ensemble._gb.GradientBoostingClassifier._validate_y": [
    "Ovr{sklearn.ensemble._gb.GradientBoostingClassifier._validate_y}"
  ],
  "sklearn.ensemble._gb.GradientBoostingClassifier.decision_function": [
    "sklearn.ensemble._gb.GradientBoostingClassifier.predict",
    "sklearn.ensemble._gb.GradientBoostingClassifier.predict_proba"
  ],
  "sklearn.ensemble._gb.GradientBoostingClassifier.predict": [
    "benchmarks.bench_covertype.$toplevel"
  ],
  "sklearn.ensemble._gb.GradientBoostingClassifier.predict_proba": [
    "sklearn.ensemble._gb.GradientBoostingClassifier.predict_log_proba"
  ],
  "sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict_proba": [
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel"
  ],
  "sklearn.ensemble._gb.GradientBoostingRegressor.__init__": [
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regression.$toplevel",
    "examples.ensemble.plot_voting_regressor.$toplevel"
  ],
  "sklearn.ensemble._gb.GradientBoostingRegressor._validate_y": [
    "Ovr{sklearn.ensemble._gb.GradientBoostingRegressor._validate_y}"
  ],
  "sklearn.ensemble._gb.GradientBoostingRegressor.predict": [
    "examples.ensemble.plot_gradient_boosting_regression.$toplevel",
    "examples.ensemble.plot_voting_regressor.$toplevel"
  ],
  "sklearn.ensemble._gb.GradientBoostingRegressor.staged_predict": [
    "examples.ensemble.plot_gradient_boosting_regression.$toplevel"
  ],
  "sklearn.ensemble._gb.VerboseReporter.__init__": [
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stages"
  ],
  "sklearn.ensemble._gb.VerboseReporter.init": [
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stages"
  ],
  "sklearn.ensemble._gb.VerboseReporter.update": [
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stages"
  ],
  "sklearn.ensemble._gb_losses.BinomialDeviance._raw_prediction_to_proba": [
    "sklearn.ensemble._gb_losses.BinomialDeviance._raw_prediction_to_decision"
  ],
  "sklearn.ensemble._gb_losses.BinomialDeviance._update_terminal_region": [
    "Ovr{sklearn.ensemble._gb_losses.BinomialDeviance._update_terminal_region}"
  ],
  "sklearn.ensemble._gb_losses.ExponentialLoss._update_terminal_region": [
    "Ovr{sklearn.ensemble._gb_losses.ExponentialLoss._update_terminal_region}"
  ],
  "sklearn.ensemble._gb_losses.HuberLossFunction._update_terminal_region": [
    "Ovr{sklearn.ensemble._gb_losses.HuberLossFunction._update_terminal_region}"
  ],
  "sklearn.ensemble._gb_losses.LeastAbsoluteError._update_terminal_region": [
    "Ovr{sklearn.ensemble._gb_losses.LeastAbsoluteError._update_terminal_region}"
  ],
  "sklearn.ensemble._gb_losses.LeastSquaresError._update_terminal_region": [
    "Ovr{sklearn.ensemble._gb_losses.LeastSquaresError._update_terminal_region}"
  ],
  "sklearn.ensemble._gb_losses.LossFunction.__init__": [
    "sklearn.ensemble._gb_losses.BinomialDeviance.__init__",
    "sklearn.ensemble._gb_losses.ExponentialLoss.__init__",
    "sklearn.ensemble._gb_losses.MultinomialDeviance.__init__",
    "sklearn.ensemble._gb_losses.RegressionLossFunction.__init__"
  ],
  "sklearn.ensemble._gb_losses.LossFunction._update_terminal_region": [
    "Ovr{sklearn.ensemble._gb_losses.LossFunction._update_terminal_region}"
  ],
  "sklearn.ensemble._gb_losses.MultinomialDeviance._raw_prediction_to_proba": [
    "sklearn.ensemble._gb_losses.MultinomialDeviance._raw_prediction_to_decision"
  ],
  "sklearn.ensemble._gb_losses.MultinomialDeviance._update_terminal_region": [
    "Ovr{sklearn.ensemble._gb_losses.MultinomialDeviance._update_terminal_region}"
  ],
  "sklearn.ensemble._gb_losses.QuantileLossFunction._update_terminal_region": [
    "Ovr{sklearn.ensemble._gb_losses.QuantileLossFunction._update_terminal_region}"
  ],
  "sklearn.ensemble._gb_losses.RegressionLossFunction.__init__": [
    "sklearn.ensemble._gb_losses.HuberLossFunction.__init__",
    "sklearn.ensemble._gb_losses.QuantileLossFunction.__init__"
  ],
  "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.__init__": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._bin_data": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_early_stopping_loss": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_early_stopping_scorer": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_interaction_cst": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._clear_state": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._encode_y": [
    "Ovr{sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._encode_y}"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._finalize_sample_weight": [
    "Ovr{sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._finalize_sample_weight}"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._get_loss": [
    "Ovr{sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._get_loss}"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._get_small_trainset": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._is_fitted": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._predict_iterations": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._raw_predict",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._staged_raw_predict"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._print_iteration_stats": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._raw_predict": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier.decision_function",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier.predict_proba",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.predict"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._should_stop": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_early_stopping_loss",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_early_stopping_scorer"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._staged_raw_predict": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier.staged_decision_function",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier.staged_predict_proba",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.staged_predict"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._validate_parameters": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit": [
    "examples.ensemble.plot_monotonic_constraints.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_2_0.$toplevel"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.n_iter_": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier.__init__": [
    "asv_benchmarks.benchmarks.ensemble.HistGradientBoostingClassifierBenchmark.make_estimator",
    "benchmarks.bench_hist_gradient_boosting_adult.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_categorical_only.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier._encode_y": [
    "Ovr{sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier._encode_y}"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier._finalize_sample_weight": [
    "Ovr{sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier._finalize_sample_weight}"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier._get_loss": [
    "Ovr{sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier._get_loss}"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier.predict_proba": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier.predict"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier.staged_predict_proba": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier.staged_predict"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.__init__": [
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_categorical.$toplevel",
    "examples.ensemble.plot_monotonic_constraints.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_2_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor._encode_y": [
    "Ovr{sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor._encode_y}"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor._get_loss": [
    "Ovr{sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor._get_loss}"
  ],
  "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.predict": [
    "examples.ensemble.plot_monotonic_constraints.$toplevel"
  ],
  "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.__init__": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit"
  ],
  "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._apply_shrinkage": [
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.grow"
  ],
  "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._compute_best_split_and_push": [
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._intilialize_root",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.split_next"
  ],
  "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._compute_interactions": [
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.split_next"
  ],
  "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._finalize_leaf": [
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._compute_best_split_and_push",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._finalize_splittable_nodes",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._intilialize_root",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.split_next"
  ],
  "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._finalize_splittable_nodes": [
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.split_next"
  ],
  "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._intilialize_root": [
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.__init__"
  ],
  "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._validate_parameters": [
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.__init__"
  ],
  "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.grow": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit"
  ],
  "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.make_predictor": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit"
  ],
  "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.split_next": [
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.grow"
  ],
  "sklearn.ensemble._hist_gradient_boosting.grower.TreeNode.__init__": [
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._intilialize_root",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.split_next"
  ],
  "sklearn.ensemble._hist_gradient_boosting.grower.TreeNode.set_children_bounds": [
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.split_next",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeNode.__init__"
  ],
  "sklearn.ensemble._hist_gradient_boosting.predictor.TreePredictor.__init__": [
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.make_predictor"
  ],
  "sklearn.ensemble._iforest.IsolationForest.__init__": [
    "benchmarks.bench_isolation_forest.$toplevel",
    "examples.ensemble.plot_isolation_forest.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.compute_prediction"
  ],
  "sklearn.ensemble._iforest.IsolationForest._compute_chunked_score_samples": [
    "sklearn.ensemble._iforest.IsolationForest._score_samples"
  ],
  "sklearn.ensemble._iforest.IsolationForest._compute_score_samples": [
    "sklearn.ensemble._iforest.IsolationForest._compute_chunked_score_samples"
  ],
  "sklearn.ensemble._iforest.IsolationForest._parallel_args": [
    "Ovr{sklearn.ensemble._iforest.IsolationForest._parallel_args}"
  ],
  "sklearn.ensemble._iforest.IsolationForest._score_samples": [
    "sklearn.ensemble._iforest.IsolationForest.fit",
    "sklearn.ensemble._iforest.IsolationForest.score_samples"
  ],
  "sklearn.ensemble._iforest.IsolationForest._set_oob_score": [
    "Ovr{sklearn.ensemble._iforest.IsolationForest._set_oob_score}"
  ],
  "sklearn.ensemble._iforest.IsolationForest.decision_function": [
    "benchmarks.bench_isolation_forest.$toplevel",
    "sklearn.ensemble._iforest.IsolationForest.predict"
  ],
  "sklearn.ensemble._iforest.IsolationForest.fit": [
    "benchmarks.bench_isolation_forest.$toplevel",
    "examples.ensemble.plot_isolation_forest.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.compute_prediction"
  ],
  "sklearn.ensemble._iforest.IsolationForest.score_samples": [
    "sklearn.ensemble._iforest.IsolationForest.decision_function"
  ],
  "sklearn.ensemble._stacking.StackingClassifier.__init__": [
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel"
  ],
  "sklearn.ensemble._stacking.StackingClassifier._validate_estimators": [
    "sklearn.ensemble._stacking._BaseStacking.fit"
  ],
  "sklearn.ensemble._stacking.StackingClassifier.fit": [
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel"
  ],
  "sklearn.ensemble._stacking.StackingClassifier.transform": [
    "sklearn.ensemble._stacking.StackingClassifier.decision_function",
    "sklearn.ensemble._stacking.StackingClassifier.predict_proba"
  ],
  "sklearn.ensemble._stacking.StackingRegressor.__init__": [
    "examples.ensemble.plot_stack_predictors.$toplevel"
  ],
  "sklearn.ensemble._stacking._BaseStacking._clone_final_estimator": [
    "sklearn.ensemble._stacking.StackingClassifier._validate_final_estimator",
    "sklearn.ensemble._stacking.StackingRegressor._validate_final_estimator"
  ],
  "sklearn.ensemble._stacking._BaseStacking._concatenate_predictions": [
    "sklearn.ensemble._stacking._BaseStacking._transform",
    "sklearn.ensemble._stacking._BaseStacking.fit"
  ],
  "sklearn.ensemble._stacking._BaseStacking._method_name": [
    "sklearn.ensemble._stacking._BaseStacking.fit"
  ],
  "sklearn.ensemble._stacking._BaseStacking._transform": [
    "sklearn.ensemble._stacking.StackingClassifier.transform",
    "sklearn.ensemble._stacking.StackingRegressor.transform"
  ],
  "sklearn.ensemble._voting.VotingClassifier.__init__": [
    "examples.ensemble.plot_voting_decision_regions.$toplevel",
    "examples.ensemble.plot_voting_probas.$toplevel"
  ],
  "sklearn.ensemble._voting.VotingClassifier._collect_probas": [
    "sklearn.ensemble._voting.VotingClassifier.predict_proba",
    "sklearn.ensemble._voting.VotingClassifier.transform"
  ],
  "sklearn.ensemble._voting.VotingClassifier.fit": [
    "examples.ensemble.plot_voting_decision_regions.$toplevel"
  ],
  "sklearn.ensemble._voting.VotingClassifier.predict_proba": [
    "sklearn.ensemble._voting.VotingClassifier.predict"
  ],
  "sklearn.ensemble._voting.VotingRegressor.__init__": [
    "examples.ensemble.plot_voting_regressor.$toplevel"
  ],
  "sklearn.ensemble._voting.VotingRegressor.fit": [
    "examples.ensemble.plot_voting_regressor.$toplevel"
  ],
  "sklearn.ensemble._voting.VotingRegressor.predict": [
    "examples.ensemble.plot_voting_regressor.$toplevel"
  ],
  "sklearn.ensemble._voting._BaseVoting._log_message": [
    "sklearn.ensemble._voting._BaseVoting.fit"
  ],
  "sklearn.ensemble._voting._BaseVoting._predict": [
    "sklearn.ensemble._voting.VotingClassifier.predict",
    "sklearn.ensemble._voting.VotingClassifier.transform",
    "sklearn.ensemble._voting.VotingRegressor.predict",
    "sklearn.ensemble._voting.VotingRegressor.transform"
  ],
  "sklearn.ensemble._voting._BaseVoting._weights_not_none": [
    "sklearn.ensemble._voting.VotingClassifier.predict",
    "sklearn.ensemble._voting.VotingClassifier.predict_proba",
    "sklearn.ensemble._voting.VotingRegressor.predict"
  ],
  "sklearn.ensemble._weight_boosting.AdaBoostClassifier.__init__": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.ensemble.plot_adaboost_hastie_10_2.$toplevel",
    "examples.ensemble.plot_adaboost_multiclass.$toplevel",
    "examples.ensemble.plot_adaboost_twoclass.$toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel"
  ],
  "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost": [
    "Ovr{sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost}"
  ],
  "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost_discrete": [
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost"
  ],
  "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost_real": [
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost"
  ],
  "sklearn.ensemble._weight_boosting.AdaBoostClassifier._compute_proba_from_decision": [
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_proba",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict_proba"
  ],
  "sklearn.ensemble._weight_boosting.AdaBoostClassifier._validate_estimator": [
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.fit"
  ],
  "sklearn.ensemble._weight_boosting.AdaBoostClassifier.decision_function": [
    "examples.ensemble.plot_adaboost_twoclass.$toplevel",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_proba"
  ],
  "sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel"
  ],
  "sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_proba": [
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.predict_log_proba"
  ],
  "sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_decision_function": [
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict_proba"
  ],
  "sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict": [
    "examples.ensemble.plot_adaboost_hastie_10_2.$toplevel",
    "examples.ensemble.plot_adaboost_multiclass.$toplevel"
  ],
  "sklearn.ensemble._weight_boosting.AdaBoostRegressor.__init__": [
    "examples.ensemble.plot_adaboost_regression.$toplevel"
  ],
  "sklearn.ensemble._weight_boosting.AdaBoostRegressor._boost": [
    "Ovr{sklearn.ensemble._weight_boosting.AdaBoostRegressor._boost}"
  ],
  "sklearn.ensemble._weight_boosting.AdaBoostRegressor._get_median_predict": [
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor.predict",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor.staged_predict"
  ],
  "sklearn.ensemble._weight_boosting.AdaBoostRegressor._validate_estimator": [
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.fit"
  ],
  "sklearn.ensemble._weight_boosting.AdaBoostRegressor.predict": [
    "examples.ensemble.plot_adaboost_regression.$toplevel"
  ],
  "sklearn.ensemble._weight_boosting.BaseWeightBoosting._boost": [
    "Ovr{sklearn.ensemble._weight_boosting.BaseWeightBoosting._boost}"
  ],
  "sklearn.ensemble._weight_boosting.BaseWeightBoosting._check_X": [
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.decision_function",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_decision_function",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_predict",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor.predict",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor.staged_predict",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.staged_score"
  ],
  "sklearn.ensemble._weight_boosting.BaseWeightBoosting.fit": [
    "examples.ensemble.plot_adaboost_hastie_10_2.$toplevel",
    "examples.ensemble.plot_adaboost_multiclass.$toplevel",
    "examples.ensemble.plot_adaboost_regression.$toplevel",
    "examples.ensemble.plot_adaboost_twoclass.$toplevel"
  ],
  "sklearn.exceptions.InconsistentVersionWarning.__init__": [
    "sklearn.base.BaseEstimator.__setstate__"
  ],
  "sklearn.exceptions.UnsetMetadataPassedError.__init__": [
    "sklearn.utils._metadata_requests.MethodMetadataRequest._route_params"
  ],
  "sklearn.externals._arff.ArffDecoder.__init__": [
    "sklearn.externals._arff.load",
    "sklearn.externals._arff.loads"
  ],
  "sklearn.externals._arff.ArffDecoder._decode": [
    "sklearn.externals._arff.ArffDecoder.decode"
  ],
  "sklearn.externals._arff.ArffDecoder._decode_attribute": [
    "sklearn.externals._arff.ArffDecoder._decode"
  ],
  "sklearn.externals._arff.ArffDecoder._decode_comment": [
    "sklearn.externals._arff.ArffDecoder._decode"
  ],
  "sklearn.externals._arff.ArffDecoder._decode_relation": [
    "sklearn.externals._arff.ArffDecoder._decode"
  ],
  "sklearn.externals._arff.ArffDecoder.decode": [
    "sklearn.externals._arff.load",
    "sklearn.externals._arff.loads"
  ],
  "sklearn.externals._arff.ArffEncoder._encode_attribute": [
    "sklearn.externals._arff.ArffEncoder.iter_encode"
  ],
  "sklearn.externals._arff.ArffEncoder._encode_comment": [
    "sklearn.externals._arff.ArffEncoder.iter_encode"
  ],
  "sklearn.externals._arff.ArffEncoder._encode_relation": [
    "sklearn.externals._arff.ArffEncoder.iter_encode"
  ],
  "sklearn.externals._arff.ArffEncoder.encode": [
    "sklearn.externals._arff.dumps"
  ],
  "sklearn.externals._arff.ArffEncoder.iter_encode": [
    "sklearn.externals._arff.ArffEncoder.encode",
    "sklearn.externals._arff.dump"
  ],
  "sklearn.externals._arff.ArffException.__init__": [
    "sklearn.externals._arff.ArffDecoder._decode_attribute",
    "sklearn.externals._arff.ArffDecoder._decode_relation",
    "sklearn.externals._arff.BadAttributeName.__init__",
    "sklearn.externals._arff.BadDataFormat.__init__",
    "sklearn.externals._arff.BadLayout.__init__",
    "sklearn.externals._arff.BadNominalFormatting.__init__",
    "sklearn.externals._arff.BadNominalValue.__init__",
    "sklearn.externals._arff.COOData.decode_rows",
    "sklearn.externals._arff.DenseGeneratorData._decode_values",
    "sklearn.externals._arff.LODGeneratorData.decode_rows"
  ],
  "sklearn.externals._arff.BadAttributeName.__init__": [
    "sklearn.externals._arff.ArffDecoder._decode"
  ],
  "sklearn.externals._arff.BadDataFormat.__init__": [
    "sklearn.externals._arff.COOData.decode_rows",
    "sklearn.externals._arff.DenseGeneratorData.decode_rows",
    "sklearn.externals._arff.LODGeneratorData.decode_rows"
  ],
  "sklearn.externals._arff.BadLayout.__init__": [
    "sklearn.externals._arff.ArffDecoder._decode",
    "sklearn.externals._arff.COOData.decode_rows",
    "sklearn.externals._arff.LODGeneratorData.decode_rows",
    "sklearn.externals._arff._parse_values"
  ],
  "sklearn.externals._arff.BadNominalValue.__init__": [
    "sklearn.externals._arff.EncodedNominalConversor.__call__",
    "sklearn.externals._arff.NominalConversor.__call__"
  ],
  "sklearn.externals._arff.BadObject.__init__": [
    "sklearn.externals._arff.ArffEncoder.iter_encode",
    "sklearn.externals._arff.COOData.encode_data",
    "sklearn.externals._arff.DenseGeneratorData.encode_data",
    "sklearn.externals._arff.LODGeneratorData.encode_data"
  ],
  "sklearn.externals._arff.DenseGeneratorData._decode_values": [
    "sklearn.externals._arff.DenseGeneratorData.decode_rows"
  ],
  "sklearn.externals._arff.EncodedNominalConversor.__call__": [
    "sklearn.externals._arff.ArffDecoder._decode"
  ],
  "sklearn.externals._arff.EncodedNominalConversor.__init__": [
    "sklearn.externals._arff.ArffDecoder._decode"
  ],
  "sklearn.externals._arff.NominalConversor.__call__": [
    "sklearn.externals._arff.ArffDecoder._decode"
  ],
  "sklearn.externals._arff.NominalConversor.__init__": [
    "sklearn.externals._arff.ArffDecoder._decode"
  ],
  "sklearn.externals._packaging._structures.InfinityType.__repr__": [
    "sklearn.externals._packaging._structures.InfinityType.__hash__"
  ],
  "sklearn.externals._packaging._structures.NegativeInfinityType.__repr__": [
    "sklearn.externals._packaging._structures.NegativeInfinityType.__hash__"
  ],
  "sklearn.externals._packaging.version.LegacyVersion.__init__": [
    "sklearn.externals._packaging.version.parse"
  ],
  "sklearn.externals._packaging.version.LegacyVersion.__str__": [
    "sklearn.externals._packaging.version.LegacyVersion.__repr__"
  ],
  "sklearn.externals._packaging.version.LegacyVersion.base_version": [
    "doc.conf.$toplevel",
    "sklearn.utils.fixes.$toplevel"
  ],
  "sklearn.externals._packaging.version.LegacyVersion.is_devrelease": [
    "doc.conf.$toplevel"
  ],
  "sklearn.externals._packaging.version.LegacyVersion.is_postrelease": [
    "doc.conf.$toplevel"
  ],
  "sklearn.externals._packaging.version.LegacyVersion.release": [
    "doc.conf.$toplevel"
  ],
  "sklearn.externals._packaging.version.Version.__init__": [
    "sklearn.externals._packaging.version.parse"
  ],
  "sklearn.externals._packaging.version.Version.__str__": [
    "sklearn.externals._packaging.version.Version.__repr__",
    "sklearn.externals._packaging.version.Version.public"
  ],
  "sklearn.externals._packaging.version.Version.base_version": [
    "doc.conf.$toplevel",
    "sklearn.utils.fixes.$toplevel"
  ],
  "sklearn.externals._packaging.version.Version.dev": [
    "sklearn.externals._packaging.version.Version.__str__",
    "sklearn.externals._packaging.version.Version.is_devrelease",
    "sklearn.externals._packaging.version.Version.is_prerelease"
  ],
  "sklearn.externals._packaging.version.Version.epoch": [
    "sklearn.externals._packaging.version.Version.__str__",
    "sklearn.externals._packaging.version.Version.base_version"
  ],
  "sklearn.externals._packaging.version.Version.is_devrelease": [
    "doc.conf.$toplevel"
  ],
  "sklearn.externals._packaging.version.Version.is_postrelease": [
    "doc.conf.$toplevel"
  ],
  "sklearn.externals._packaging.version.Version.local": [
    "sklearn.externals._packaging.version.Version.__str__"
  ],
  "sklearn.externals._packaging.version.Version.post": [
    "sklearn.externals._packaging.version.Version.__str__",
    "sklearn.externals._packaging.version.Version.is_postrelease"
  ],
  "sklearn.externals._packaging.version.Version.pre": [
    "sklearn.externals._packaging.version.Version.__str__",
    "sklearn.externals._packaging.version.Version.is_prerelease"
  ],
  "sklearn.externals._packaging.version.Version.release": [
    "doc.conf.$toplevel",
    "sklearn.externals._packaging.version.Version.__str__",
    "sklearn.externals._packaging.version.Version.base_version",
    "sklearn.externals._packaging.version.Version.major",
    "sklearn.externals._packaging.version.Version.micro",
    "sklearn.externals._packaging.version.Version.minor"
  ],
  "sklearn.externals._packaging.version._BaseVersion.__ge__": [
    "build_tools.circle.list_versions.get_file_extension",
    "doc.conftest.setup_preprocessing",
    "setup.check_package_status",
    "sklearn._build_utils._check_cython_version",
    "sklearn.conftest.$toplevel",
    "sklearn.utils._array_api._check_array_api_dispatch",
    "sklearn.utils._in_unstable_openblas_configuration",
    "sklearn.utils.fixes.$toplevel"
  ],
  "sklearn.externals._packaging.version._BaseVersion.__lt__": [
    "doc.conftest.setup_preprocessing",
    "sklearn._build_utils._check_cython_version",
    "sklearn.conftest.$toplevel",
    "sklearn.utils._array_api._check_array_api_dispatch",
    "sklearn.utils._in_unstable_openblas_configuration",
    "sklearn.utils.fixes.$toplevel"
  ],
  "sklearn.externals._packaging.version._Version.__init__": [
    "sklearn.externals._packaging.version.Version.__init__"
  ],
  "sklearn.externals._packaging.version._Version.__new__": [
    "sklearn.externals._packaging.version.Version.__init__"
  ],
  "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.__init__": [
    "examples.compose.plot_column_transformer.$toplevel",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel"
  ],
  "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._add_iterable_element": [
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._transform",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit"
  ],
  "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._transform": [
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit_transform",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.transform"
  ],
  "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit_transform": [
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel"
  ],
  "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.get_feature_names_out": [
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel"
  ],
  "sklearn.feature_extraction._hash.FeatureHasher.__init__": [
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "sklearn.feature_extraction.text.HashingVectorizer._get_hasher"
  ],
  "sklearn.feature_extraction._hash.FeatureHasher.transform": [
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel"
  ],
  "sklearn.feature_extraction.text.CountVectorizer.__init__": [
    "examples.applications.plot_topics_extraction_with_nmf_lda.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized",
    "sklearn.feature_extraction.text.TfidfVectorizer.__init__"
  ],
  "sklearn.feature_extraction.text.CountVectorizer._count_vocab": [
    "sklearn.feature_extraction.text.CountVectorizer.fit_transform",
    "sklearn.feature_extraction.text.CountVectorizer.transform"
  ],
  "sklearn.feature_extraction.text.CountVectorizer._limit_features": [
    "sklearn.feature_extraction.text.CountVectorizer.fit_transform"
  ],
  "sklearn.feature_extraction.text.CountVectorizer._sort_features": [
    "sklearn.feature_extraction.text.CountVectorizer.fit_transform"
  ],
  "sklearn.feature_extraction.text.CountVectorizer.fit_transform": [
    "examples.applications.plot_topics_extraction_with_nmf_lda.$toplevel",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized",
    "sklearn.feature_extraction.text.CountVectorizer.fit",
    "sklearn.feature_extraction.text.TfidfVectorizer.fit",
    "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"
  ],
  "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out": [
    "examples.applications.plot_topics_extraction_with_nmf_lda.$toplevel",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.load_dataset",
    "examples.text.plot_document_clustering.$toplevel",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized"
  ],
  "sklearn.feature_extraction.text.CountVectorizer.transform": [
    "Ovr{sklearn.feature_extraction.text.CountVectorizer.transform}",
    "sklearn.feature_extraction.text.TfidfVectorizer.transform"
  ],
  "sklearn.feature_extraction.text.HashingVectorizer.__init__": [
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.text.plot_document_clustering.$toplevel",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel"
  ],
  "sklearn.feature_extraction.text.HashingVectorizer._get_hasher": [
    "sklearn.feature_extraction.text.HashingVectorizer.fit",
    "sklearn.feature_extraction.text.HashingVectorizer.transform"
  ],
  "sklearn.feature_extraction.text.HashingVectorizer.fit": [
    "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"
  ],
  "sklearn.feature_extraction.text.HashingVectorizer.transform": [
    "examples.applications.plot_out_of_core_classification.$toplevel"
  ],
  "sklearn.feature_extraction.text.TfidfTransformer.__init__": [
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "examples.text.plot_document_clustering.$toplevel",
    "sklearn.feature_extraction.text.TfidfVectorizer.fit",
    "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform",
    "sklearn.feature_extraction.text.TfidfVectorizer.idf_@setter"
  ],
  "sklearn.feature_extraction.text.TfidfTransformer.fit": [
    "sklearn.feature_extraction.text.TfidfVectorizer.fit",
    "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"
  ],
  "sklearn.feature_extraction.text.TfidfTransformer.transform": [
    "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"
  ],
  "sklearn.feature_extraction.text.TfidfVectorizer.__init__": [
    "asv_benchmarks.benchmarks.datasets._20newsgroups_highdim_dataset",
    "asv_benchmarks.benchmarks.datasets._20newsgroups_lowdim_dataset",
    "benchmarks.bench_plot_nmf.load_20news",
    "doc.tutorial.text_analytics.solutions.exercise_01_language_train_model.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_02_sentiment.$toplevel",
    "examples.applications.plot_topics_extraction_with_nmf_lda.$toplevel",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.compose.plot_column_transformer.$toplevel",
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.load_dataset",
    "examples.text.plot_document_clustering.$toplevel",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel"
  ],
  "sklearn.feature_extraction.text.TfidfVectorizer._check_params": [
    "sklearn.feature_extraction.text.TfidfVectorizer.fit",
    "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"
  ],
  "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform": [
    "asv_benchmarks.benchmarks.datasets._20newsgroups_highdim_dataset",
    "asv_benchmarks.benchmarks.datasets._20newsgroups_lowdim_dataset",
    "benchmarks.bench_plot_nmf.load_20news",
    "examples.applications.plot_topics_extraction_with_nmf_lda.$toplevel",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.load_dataset",
    "examples.text.plot_document_clustering.$toplevel"
  ],
  "sklearn.feature_extraction.text.TfidfVectorizer.transform": [
    "Ovr{sklearn.feature_extraction.text.TfidfVectorizer.transform}",
    "examples.text.plot_document_classification_20newsgroups.load_dataset"
  ],
  "sklearn.feature_extraction.text._VectorizerMixin._char_ngrams": [
    "sklearn.feature_extraction.text._VectorizerMixin.build_analyzer"
  ],
  "sklearn.feature_extraction.text._VectorizerMixin._char_wb_ngrams": [
    "sklearn.feature_extraction.text._VectorizerMixin.build_analyzer"
  ],
  "sklearn.feature_extraction.text._VectorizerMixin._check_stop_words_consistency": [
    "sklearn.feature_extraction.text._VectorizerMixin.build_analyzer"
  ],
  "sklearn.feature_extraction.text._VectorizerMixin._check_vocabulary": [
    "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out",
    "sklearn.feature_extraction.text.CountVectorizer.inverse_transform",
    "sklearn.feature_extraction.text.CountVectorizer.transform"
  ],
  "sklearn.feature_extraction.text._VectorizerMixin._validate_ngram_range": [
    "sklearn.feature_extraction.text.CountVectorizer.fit_transform",
    "sklearn.feature_extraction.text.HashingVectorizer.fit",
    "sklearn.feature_extraction.text.HashingVectorizer.transform"
  ],
  "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary": [
    "sklearn.feature_extraction.text.CountVectorizer.fit_transform",
    "sklearn.feature_extraction.text._VectorizerMixin._check_vocabulary"
  ],
  "sklearn.feature_extraction.text._VectorizerMixin._warn_for_unused_params": [
    "sklearn.feature_extraction.text.CountVectorizer.fit_transform",
    "sklearn.feature_extraction.text.HashingVectorizer.fit",
    "sklearn.feature_extraction.text.TfidfVectorizer.fit"
  ],
  "sklearn.feature_extraction.text._VectorizerMixin._word_ngrams": [
    "sklearn.feature_extraction.text._VectorizerMixin.build_analyzer"
  ],
  "sklearn.feature_extraction.text._VectorizerMixin.build_analyzer": [
    "sklearn.feature_extraction.text.CountVectorizer._count_vocab",
    "sklearn.feature_extraction.text.HashingVectorizer.transform"
  ],
  "sklearn.feature_extraction.text._VectorizerMixin.build_preprocessor": [
    "sklearn.feature_extraction.text._VectorizerMixin.build_analyzer"
  ],
  "sklearn.feature_extraction.text._VectorizerMixin.build_tokenizer": [
    "Ovr{sklearn.feature_extraction.text._VectorizerMixin.build_tokenizer}",
    "examples.bicluster.plot_bicluster_newsgroups.NumberNormalizingVectorizer.build_tokenizer"
  ],
  "sklearn.feature_extraction.text._VectorizerMixin.decode": [
    "sklearn.feature_extraction.text._VectorizerMixin.build_analyzer"
  ],
  "sklearn.feature_extraction.text._VectorizerMixin.get_stop_words": [
    "sklearn.feature_extraction.text._VectorizerMixin.build_analyzer"
  ],
  "sklearn.feature_selection._base.SelectorMixin._get_support_mask": [
    "Ovr{sklearn.feature_selection._base.SelectorMixin._get_support_mask}"
  ],
  "sklearn.feature_selection._base.SelectorMixin._transform": [
    "sklearn.feature_selection._base.SelectorMixin.transform",
    "sklearn.feature_selection._rfe.RFECV.fit"
  ],
  "sklearn.feature_selection._base.SelectorMixin.get_support": [
    "examples.feature_selection.plot_feature_selection.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel",
    "sklearn.feature_selection._base.SelectorMixin._transform",
    "sklearn.feature_selection._base.SelectorMixin.get_feature_names_out",
    "sklearn.feature_selection._base.SelectorMixin.inverse_transform"
  ],
  "sklearn.feature_selection._base.SelectorMixin.inverse_transform": [
    "sklearn.feature_selection._base.SelectorMixin.inverse_transform"
  ],
  "sklearn.feature_selection._base.SelectorMixin.transform": [
    "sklearn.feature_selection._rfe.RFE.decision_function",
    "sklearn.feature_selection._rfe.RFE.predict",
    "sklearn.feature_selection._rfe.RFE.predict_log_proba",
    "sklearn.feature_selection._rfe.RFE.predict_proba",
    "sklearn.feature_selection._rfe.RFE.score"
  ],
  "sklearn.feature_selection._from_model.SelectFromModel.__init__": [
    "examples.feature_selection.plot_select_from_model_diabetes.$toplevel"
  ],
  "sklearn.feature_selection._from_model.SelectFromModel._check_max_features": [
    "sklearn.feature_selection._from_model.SelectFromModel.fit",
    "sklearn.feature_selection._from_model.SelectFromModel.partial_fit"
  ],
  "sklearn.feature_selection._from_model.SelectFromModel._get_support_mask": [
    "Ovr{sklearn.feature_selection._from_model.SelectFromModel._get_support_mask}"
  ],
  "sklearn.feature_selection._from_model.SelectFromModel.fit": [
    "examples.feature_selection.plot_select_from_model_diabetes.$toplevel"
  ],
  "sklearn.feature_selection._rfe.RFE.__init__": [
    "examples.feature_selection.plot_rfe_digits.$toplevel",
    "sklearn.feature_selection._rfe.RFECV.fit"
  ],
  "sklearn.feature_selection._rfe.RFE._fit": [
    "sklearn.feature_selection._rfe.RFE.fit"
  ],
  "sklearn.feature_selection._rfe.RFE._get_support_mask": [
    "Ovr{sklearn.feature_selection._rfe.RFE._get_support_mask}"
  ],
  "sklearn.feature_selection._rfe.RFE.fit": [
    "examples.feature_selection.plot_rfe_digits.$toplevel",
    "sklearn.feature_selection._rfe.RFECV.fit"
  ],
  "sklearn.feature_selection._rfe.RFECV.__init__": [
    "examples.feature_selection.plot_rfe_with_cross_validation.$toplevel"
  ],
  "sklearn.feature_selection._rfe.RFECV.fit": [
    "examples.feature_selection.plot_rfe_with_cross_validation.$toplevel"
  ],
  "sklearn.feature_selection._sequential.SequentialFeatureSelector.__init__": [
    "examples.feature_selection.plot_select_from_model_diabetes.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel"
  ],
  "sklearn.feature_selection._sequential.SequentialFeatureSelector._get_best_new_feature_score": [
    "sklearn.feature_selection._sequential.SequentialFeatureSelector.fit"
  ],
  "sklearn.feature_selection._sequential.SequentialFeatureSelector._get_support_mask": [
    "Ovr{sklearn.feature_selection._sequential.SequentialFeatureSelector._get_support_mask}"
  ],
  "sklearn.feature_selection._sequential.SequentialFeatureSelector.fit": [
    "examples.feature_selection.plot_select_from_model_diabetes.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel"
  ],
  "sklearn.feature_selection._univariate_selection.GenericUnivariateSelect._check_params": [
    "Ovr{sklearn.feature_selection._univariate_selection.GenericUnivariateSelect._check_params}"
  ],
  "sklearn.feature_selection._univariate_selection.GenericUnivariateSelect._get_support_mask": [
    "Ovr{sklearn.feature_selection._univariate_selection.GenericUnivariateSelect._get_support_mask}"
  ],
  "sklearn.feature_selection._univariate_selection.GenericUnivariateSelect._make_selector": [
    "sklearn.feature_selection._univariate_selection.GenericUnivariateSelect._check_params",
    "sklearn.feature_selection._univariate_selection.GenericUnivariateSelect._get_support_mask"
  ],
  "sklearn.feature_selection._univariate_selection.SelectFdr._get_support_mask": [
    "Ovr{sklearn.feature_selection._univariate_selection.SelectFdr._get_support_mask}"
  ],
  "sklearn.feature_selection._univariate_selection.SelectFpr._get_support_mask": [
    "Ovr{sklearn.feature_selection._univariate_selection.SelectFpr._get_support_mask}"
  ],
  "sklearn.feature_selection._univariate_selection.SelectFwe._get_support_mask": [
    "Ovr{sklearn.feature_selection._univariate_selection.SelectFwe._get_support_mask}"
  ],
  "sklearn.feature_selection._univariate_selection.SelectKBest.__init__": [
    "examples.compose.plot_compare_reduction.$toplevel",
    "examples.compose.plot_feature_union.$toplevel",
    "examples.feature_selection.plot_feature_selection.$toplevel",
    "examples.feature_selection.plot_feature_selection_pipeline.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "sklearn.utils.tests.test_pprint.test_gridsearch_pipeline"
  ],
  "sklearn.feature_selection._univariate_selection.SelectKBest._check_params": [
    "Ovr{sklearn.feature_selection._univariate_selection.SelectKBest._check_params}"
  ],
  "sklearn.feature_selection._univariate_selection.SelectKBest._get_support_mask": [
    "Ovr{sklearn.feature_selection._univariate_selection.SelectKBest._get_support_mask}"
  ],
  "sklearn.feature_selection._univariate_selection.SelectPercentile.__init__": [
    "examples.cluster.plot_feature_agglomeration_vs_univariate_selection.$toplevel",
    "examples.compose.plot_column_transformer_mixed_types.$toplevel",
    "examples.miscellaneous.plot_set_output.$toplevel",
    "examples.svm.plot_svm_anova.$toplevel"
  ],
  "sklearn.feature_selection._univariate_selection.SelectPercentile._get_support_mask": [
    "Ovr{sklearn.feature_selection._univariate_selection.SelectPercentile._get_support_mask}"
  ],
  "sklearn.feature_selection._univariate_selection._BaseFilter.__init__": [
    "sklearn.feature_selection._univariate_selection.GenericUnivariateSelect.__init__",
    "sklearn.feature_selection._univariate_selection.SelectFdr.__init__",
    "sklearn.feature_selection._univariate_selection.SelectFpr.__init__",
    "sklearn.feature_selection._univariate_selection.SelectFwe.__init__",
    "sklearn.feature_selection._univariate_selection.SelectKBest.__init__",
    "sklearn.feature_selection._univariate_selection.SelectPercentile.__init__"
  ],
  "sklearn.feature_selection._univariate_selection._BaseFilter._check_params": [
    "Ovr{sklearn.feature_selection._univariate_selection._BaseFilter._check_params}"
  ],
  "sklearn.feature_selection._univariate_selection._BaseFilter.fit": [
    "examples.feature_selection.plot_feature_selection.$toplevel"
  ],
  "sklearn.feature_selection._variance_threshold.VarianceThreshold._get_support_mask": [
    "Ovr{sklearn.feature_selection._variance_threshold.VarianceThreshold._get_support_mask}"
  ],
  "sklearn.gaussian_process._gpc.GaussianProcessClassifier.__init__": [
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.gaussian_process.plot_gpc.$toplevel",
    "examples.gaussian_process.plot_gpc_iris.$toplevel",
    "examples.gaussian_process.plot_gpc_isoprobability.$toplevel",
    "examples.gaussian_process.plot_gpc_xor.$toplevel",
    "examples.gaussian_process.plot_gpr_on_structured_data.$toplevel"
  ],
  "sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit": [
    "examples.gaussian_process.plot_gpc.$toplevel",
    "examples.gaussian_process.plot_gpc_iris.$toplevel",
    "examples.gaussian_process.plot_gpc_isoprobability.$toplevel",
    "examples.gaussian_process.plot_gpc_xor.$toplevel"
  ],
  "sklearn.gaussian_process._gpc.GaussianProcessClassifier.kernel_": [
    "examples.gaussian_process.plot_gpc.$toplevel",
    "examples.gaussian_process.plot_gpc_isoprobability.$toplevel"
  ],
  "sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood": [
    "examples.gaussian_process.plot_gpc.$toplevel"
  ],
  "sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict": [
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.gaussian_process.plot_gpc.$toplevel"
  ],
  "sklearn.gaussian_process._gpc.GaussianProcessClassifier.predict_proba": [
    "examples.gaussian_process.plot_gpc.$toplevel",
    "examples.gaussian_process.plot_gpc_isoprobability.$toplevel"
  ],
  "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.__init__": [
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit"
  ],
  "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace._constrained_optimization": [
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit"
  ],
  "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace._posterior_mode": [
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.log_marginal_likelihood"
  ],
  "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.log_marginal_likelihood": [
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit.obj_func"
  ],
  "sklearn.gaussian_process._gpr.GaussianProcessRegressor.__init__": [
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.gaussian_process.plot_gpr_co2.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy_targets.$toplevel",
    "examples.gaussian_process.plot_gpr_on_structured_data.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.$toplevel"
  ],
  "sklearn.gaussian_process._gpr.GaussianProcessRegressor._constrained_optimization": [
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit"
  ],
  "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit": [
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.gaussian_process.plot_gpr_co2.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy_targets.$toplevel",
    "examples.gaussian_process.plot_gpr_on_structured_data.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.$toplevel"
  ],
  "sklearn.gaussian_process._gpr.GaussianProcessRegressor.log_marginal_likelihood": [
    "examples.gaussian_process.plot_gpr_noisy.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.$toplevel",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit.obj_func"
  ],
  "sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict": [
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.gaussian_process.plot_gpr_co2.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy_targets.$toplevel",
    "examples.gaussian_process.plot_gpr_on_structured_data.$toplevel",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.sample_y"
  ],
  "sklearn.gaussian_process.kernels.CompoundKernel.__call__": [
    "Ovr{sklearn.gaussian_process.kernels.CompoundKernel.__call__}",
    "sklearn.gaussian_process.kernels.CompoundKernel.__eq__"
  ],
  "sklearn.gaussian_process.kernels.CompoundKernel.__eq__": [
    "sklearn.gaussian_process.kernels.CompoundKernel.__eq__"
  ],
  "sklearn.gaussian_process.kernels.CompoundKernel.__init__": [
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.kernel_"
  ],
  "sklearn.gaussian_process.kernels.CompoundKernel.bounds": [
    "Ovr{sklearn.gaussian_process.kernels.CompoundKernel.bounds}"
  ],
  "sklearn.gaussian_process.kernels.CompoundKernel.get_params": [
    "Ovr{sklearn.gaussian_process.kernels.CompoundKernel.get_params}"
  ],
  "sklearn.gaussian_process.kernels.CompoundKernel.theta": [
    "Ovr{sklearn.gaussian_process.kernels.CompoundKernel.theta}"
  ],
  "sklearn.gaussian_process.kernels.ConstantKernel.__call__": [
    "sklearn.gaussian_process.kernels.Kernel.__add__",
    "sklearn.gaussian_process.kernels.Kernel.__mul__",
    "sklearn.gaussian_process.kernels.Kernel.__radd__",
    "sklearn.gaussian_process.kernels.Kernel.__rmul__"
  ],
  "sklearn.gaussian_process.kernels.ConstantKernel.__init__": [
    "examples.gaussian_process.plot_gpc_isoprobability.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.$toplevel",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict",
    "sklearn.gaussian_process.kernels.Kernel.__add__",
    "sklearn.gaussian_process.kernels.Kernel.__mul__",
    "sklearn.gaussian_process.kernels.Kernel.__radd__",
    "sklearn.gaussian_process.kernels.Kernel.__rmul__"
  ],
  "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameter_constant_value": [
    "sklearn.gaussian_process.kernels.ConstantKernel.__call__"
  ],
  "sklearn.gaussian_process.kernels.DotProduct.__call__": [
    "Ovr{sklearn.gaussian_process.kernels.DotProduct.__call__}"
  ],
  "sklearn.gaussian_process.kernels.DotProduct.__init__": [
    "examples.gaussian_process.plot_gpc_isoprobability.$toplevel",
    "examples.gaussian_process.plot_gpc_xor.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.$toplevel"
  ],
  "sklearn.gaussian_process.kernels.DotProduct.hyperparameter_sigma_0": [
    "sklearn.gaussian_process.kernels.DotProduct.__call__"
  ],
  "sklearn.gaussian_process.kernels.ExpSineSquared.__call__": [
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.gaussian_process.plot_gpr_co2.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.$toplevel"
  ],
  "sklearn.gaussian_process.kernels.ExpSineSquared.__init__": [
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.gaussian_process.plot_gpr_co2.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.$toplevel"
  ],
  "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale": [
    "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"
  ],
  "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_periodicity": [
    "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"
  ],
  "sklearn.gaussian_process.kernels.Exponentiation.__call__": [
    "Ovr{sklearn.gaussian_process.kernels.Exponentiation.__call__}",
    "sklearn.gaussian_process.kernels.Exponentiation.__eq__"
  ],
  "sklearn.gaussian_process.kernels.Exponentiation.__eq__": [
    "sklearn.gaussian_process.kernels.Exponentiation.__eq__"
  ],
  "sklearn.gaussian_process.kernels.Exponentiation.__init__": [
    "sklearn.gaussian_process.kernels.Kernel.__pow__"
  ],
  "sklearn.gaussian_process.kernels.Exponentiation.bounds": [
    "Ovr{sklearn.gaussian_process.kernels.Exponentiation.bounds}"
  ],
  "sklearn.gaussian_process.kernels.Exponentiation.get_params": [
    "Ovr{sklearn.gaussian_process.kernels.Exponentiation.get_params}"
  ],
  "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters": [
    "Ovr{sklearn.gaussian_process.kernels.Exponentiation.hyperparameters}"
  ],
  "sklearn.gaussian_process.kernels.Exponentiation.theta": [
    "Ovr{sklearn.gaussian_process.kernels.Exponentiation.theta}"
  ],
  "sklearn.gaussian_process.kernels.Hyperparameter.__eq__": [
    "click.parser.Argument.process"
  ],
  "sklearn.gaussian_process.kernels.Hyperparameter.__new__": [
    "examples.gaussian_process.plot_gpr_on_structured_data.SequenceKernel.hyperparameter_baseline_similarity",
    "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameter_constant_value",
    "sklearn.gaussian_process.kernels.DotProduct.hyperparameter_sigma_0",
    "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale",
    "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_periodicity",
    "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters",
    "sklearn.gaussian_process.kernels.KernelOperator.hyperparameters",
    "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameter_gamma",
    "sklearn.gaussian_process.kernels.RBF.hyperparameter_length_scale",
    "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameter_alpha",
    "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameter_length_scale",
    "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameter_noise_level",
    "sklearn.gaussian_process.tests._mini_sequence_kernel.MiniSeqKernel.hyperparameter_baseline_similarity"
  ],
  "sklearn.gaussian_process.kernels.Kernel.__call__": [
    "Ovr{sklearn.gaussian_process.kernels.Kernel.__call__}",
    "sklearn.gaussian_process.kernels.KernelOperator.__eq__"
  ],
  "sklearn.gaussian_process.kernels.Kernel.__eq__": [
    "sklearn.gaussian_process.kernels.Kernel.__eq__"
  ],
  "sklearn.gaussian_process.kernels.Kernel.__mul__": [
    "examples.gaussian_process.plot_gpc_isoprobability.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.$toplevel",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict"
  ],
  "sklearn.gaussian_process.kernels.Kernel.__pow__": [
    "examples.gaussian_process.plot_gpc_isoprobability.$toplevel",
    "examples.gaussian_process.plot_gpc_xor.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.$toplevel"
  ],
  "sklearn.gaussian_process.kernels.Kernel.bounds": [
    "Ovr{sklearn.gaussian_process.kernels.Kernel.bounds}"
  ],
  "sklearn.gaussian_process.kernels.Kernel.clone_with_theta": [
    "sklearn.gaussian_process.kernels.Matern.__call__.f"
  ],
  "sklearn.gaussian_process.kernels.Kernel.get_params": [
    "Ovr{sklearn.gaussian_process.kernels.Kernel.get_params}"
  ],
  "sklearn.gaussian_process.kernels.Kernel.hyperparameters": [
    "Ovr{sklearn.gaussian_process.kernels.Kernel.hyperparameters}"
  ],
  "sklearn.gaussian_process.kernels.Kernel.theta": [
    "Ovr{sklearn.gaussian_process.kernels.Kernel.theta}",
    "sklearn.gaussian_process.kernels.Matern.__call__",
    "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"
  ],
  "sklearn.gaussian_process.kernels.KernelOperator.__eq__": [
    "sklearn.gaussian_process.kernels.KernelOperator.__eq__"
  ],
  "sklearn.gaussian_process.kernels.KernelOperator.__init__": [
    "sklearn.gaussian_process.kernels.Kernel.__add__",
    "sklearn.gaussian_process.kernels.Kernel.__mul__",
    "sklearn.gaussian_process.kernels.Kernel.__radd__",
    "sklearn.gaussian_process.kernels.Kernel.__rmul__"
  ],
  "sklearn.gaussian_process.kernels.KernelOperator.bounds": [
    "Ovr{sklearn.gaussian_process.kernels.KernelOperator.bounds}"
  ],
  "sklearn.gaussian_process.kernels.KernelOperator.get_params": [
    "Ovr{sklearn.gaussian_process.kernels.KernelOperator.get_params}"
  ],
  "sklearn.gaussian_process.kernels.KernelOperator.hyperparameters": [
    "Ovr{sklearn.gaussian_process.kernels.KernelOperator.hyperparameters}"
  ],
  "sklearn.gaussian_process.kernels.KernelOperator.theta": [
    "Ovr{sklearn.gaussian_process.kernels.KernelOperator.theta}"
  ],
  "sklearn.gaussian_process.kernels.Matern.__call__": [
    "Ovr{sklearn.gaussian_process.kernels.Matern.__call__}",
    "examples.gaussian_process.plot_gpr_prior_posterior.$toplevel"
  ],
  "sklearn.gaussian_process.kernels.Matern.__init__": [
    "examples.gaussian_process.plot_gpr_prior_posterior.$toplevel"
  ],
  "sklearn.gaussian_process.kernels.PairwiseKernel.__call__": [
    "Ovr{sklearn.gaussian_process.kernels.PairwiseKernel.__call__}",
    "sklearn.gaussian_process.kernels.PairwiseKernel.diag"
  ],
  "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameter_gamma": [
    "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"
  ],
  "sklearn.gaussian_process.kernels.RBF.__call__": [
    "Ovr{sklearn.gaussian_process.kernels.RBF.__call__}"
  ],
  "sklearn.gaussian_process.kernels.RBF.__init__": [
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.gaussian_process.plot_gpc.$toplevel",
    "examples.gaussian_process.plot_gpc_iris.$toplevel",
    "examples.gaussian_process.plot_gpc_xor.$toplevel",
    "examples.gaussian_process.plot_gpr_co2.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy_targets.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.$toplevel",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict",
    "sklearn.gaussian_process.kernels.Matern.__init__"
  ],
  "sklearn.gaussian_process.kernels.RBF.anisotropic": [
    "sklearn.gaussian_process.kernels.Matern.__call__",
    "sklearn.gaussian_process.kernels.Matern.__repr__",
    "sklearn.gaussian_process.kernels.RBF.__call__",
    "sklearn.gaussian_process.kernels.RBF.__repr__",
    "sklearn.gaussian_process.kernels.RBF.hyperparameter_length_scale"
  ],
  "sklearn.gaussian_process.kernels.RBF.hyperparameter_length_scale": [
    "sklearn.gaussian_process.kernels.Matern.__call__",
    "sklearn.gaussian_process.kernels.RBF.__call__"
  ],
  "sklearn.gaussian_process.kernels.RationalQuadratic.__call__": [
    "examples.gaussian_process.plot_gpr_co2.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.$toplevel"
  ],
  "sklearn.gaussian_process.kernels.RationalQuadratic.__init__": [
    "examples.gaussian_process.plot_gpr_co2.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.$toplevel"
  ],
  "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameter_alpha": [
    "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"
  ],
  "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameter_length_scale": [
    "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"
  ],
  "sklearn.gaussian_process.kernels.WhiteKernel.__call__": [
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.gaussian_process.plot_gpr_co2.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy.$toplevel"
  ],
  "sklearn.gaussian_process.kernels.WhiteKernel.__init__": [
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.gaussian_process.plot_gpr_co2.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy.$toplevel"
  ],
  "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameter_noise_level": [
    "sklearn.gaussian_process.kernels.WhiteKernel.__call__"
  ],
  "sklearn.gaussian_process.tests._mini_sequence_kernel.MiniSeqKernel.__call__": [
    "sklearn.gaussian_process.tests._mini_sequence_kernel.MiniSeqKernel.clone_with_theta"
  ],
  "sklearn.gaussian_process.tests._mini_sequence_kernel.MiniSeqKernel._f": [
    "sklearn.gaussian_process.tests._mini_sequence_kernel.MiniSeqKernel.__call__",
    "sklearn.gaussian_process.tests._mini_sequence_kernel.MiniSeqKernel.diag"
  ],
  "sklearn.gaussian_process.tests._mini_sequence_kernel.MiniSeqKernel._g": [
    "sklearn.gaussian_process.tests._mini_sequence_kernel.MiniSeqKernel.__call__"
  ],
  "sklearn.impute._base.MissingIndicator.__init__": [
    "sklearn.impute._base._BaseImputer._fit_indicator"
  ],
  "sklearn.impute._base.MissingIndicator._fit": [
    "sklearn.impute._base.MissingIndicator.fit",
    "sklearn.impute._base.MissingIndicator.fit_transform",
    "sklearn.impute._base._BaseImputer._fit_indicator"
  ],
  "sklearn.impute._base.MissingIndicator._get_missing_features_info": [
    "sklearn.impute._base.MissingIndicator._fit",
    "sklearn.impute._base.MissingIndicator.transform"
  ],
  "sklearn.impute._base.MissingIndicator._validate_input": [
    "sklearn.impute._base.MissingIndicator._fit",
    "sklearn.impute._base.MissingIndicator.transform"
  ],
  "sklearn.impute._base.SimpleImputer.__init__": [
    "examples.compose.plot_column_transformer_mixed_types.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.impute.plot_iterative_imputer_variants_comparison.$toplevel",
    "examples.impute.plot_missing_values.get_impute_mean",
    "examples.impute.plot_missing_values.get_impute_zero_score",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.miscellaneous.plot_estimator_representation.$toplevel",
    "examples.miscellaneous.plot_pipeline_display.$toplevel",
    "examples.miscellaneous.plot_set_output.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "sklearn.impute._iterative.IterativeImputer._initial_imputation"
  ],
  "sklearn.impute._base.SimpleImputer._dense_fit": [
    "sklearn.impute._base.SimpleImputer.fit"
  ],
  "sklearn.impute._base.SimpleImputer._sparse_fit": [
    "sklearn.impute._base.SimpleImputer.fit"
  ],
  "sklearn.impute._base.SimpleImputer._validate_input": [
    "sklearn.impute._base.SimpleImputer.fit",
    "sklearn.impute._base.SimpleImputer.transform"
  ],
  "sklearn.impute._base._BaseImputer.__init__": [
    "sklearn.impute._base.SimpleImputer.__init__",
    "sklearn.impute._iterative.IterativeImputer.__init__",
    "sklearn.impute._knn.KNNImputer.__init__"
  ],
  "sklearn.impute._base._BaseImputer._concatenate_indicator": [
    "sklearn.impute._base.SimpleImputer.transform",
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.impute._iterative.IterativeImputer.transform",
    "sklearn.impute._knn.KNNImputer.transform"
  ],
  "sklearn.impute._base._BaseImputer._concatenate_indicator_feature_names_out": [
    "sklearn.impute._base.SimpleImputer.get_feature_names_out",
    "sklearn.impute._iterative.IterativeImputer.get_feature_names_out",
    "sklearn.impute._knn.KNNImputer.get_feature_names_out"
  ],
  "sklearn.impute._base._BaseImputer._fit_indicator": [
    "sklearn.impute._base.SimpleImputer._dense_fit",
    "sklearn.impute._base.SimpleImputer._sparse_fit",
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.impute._knn.KNNImputer.fit"
  ],
  "sklearn.impute._base._BaseImputer._transform_indicator": [
    "sklearn.impute._base.SimpleImputer.transform",
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.impute._iterative.IterativeImputer.transform",
    "sklearn.impute._knn.KNNImputer.transform"
  ],
  "sklearn.impute._iterative.IterativeImputer.__init__": [
    "examples.impute.plot_iterative_imputer_variants_comparison.$toplevel",
    "examples.impute.plot_missing_values.get_impute_iterative"
  ],
  "sklearn.impute._iterative.IterativeImputer._get_abs_corr_mat": [
    "sklearn.impute._iterative.IterativeImputer.fit_transform"
  ],
  "sklearn.impute._iterative.IterativeImputer._get_neighbor_feat_idx": [
    "sklearn.impute._iterative.IterativeImputer.fit_transform"
  ],
  "sklearn.impute._iterative.IterativeImputer._get_ordered_idx": [
    "sklearn.impute._iterative.IterativeImputer.fit_transform"
  ],
  "sklearn.impute._iterative.IterativeImputer._impute_one_feature": [
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.impute._iterative.IterativeImputer.transform"
  ],
  "sklearn.impute._iterative.IterativeImputer._initial_imputation": [
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.impute._iterative.IterativeImputer.transform"
  ],
  "sklearn.impute._iterative.IterativeImputer._validate_limit": [
    "sklearn.impute._iterative.IterativeImputer.fit_transform"
  ],
  "sklearn.impute._iterative.IterativeImputer.fit_transform": [
    "sklearn.impute._iterative.IterativeImputer.fit"
  ],
  "sklearn.impute._iterative._ImputerTriplet.__init__": [
    "sklearn.impute._iterative.IterativeImputer.fit_transform"
  ],
  "sklearn.impute._iterative._ImputerTriplet.__new__": [
    "sklearn.impute._iterative.IterativeImputer.fit_transform"
  ],
  "sklearn.impute._knn.KNNImputer.__init__": [
    "examples.impute.plot_missing_values.get_impute_knn_score",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel"
  ],
  "sklearn.impute._knn.KNNImputer._calc_impute": [
    "sklearn.impute._knn.KNNImputer.transform.process_chunk"
  ],
  "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.__init__": [
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.from_estimator"
  ],
  "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.from_estimator": [
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.cluster.plot_inductive_clustering.$toplevel",
    "examples.ensemble.plot_adaboost_twoclass.$toplevel",
    "examples.ensemble.plot_isolation_forest.$toplevel",
    "examples.ensemble.plot_voting_decision_regions.$toplevel",
    "examples.linear_model.plot_iris_logistic.$toplevel",
    "examples.linear_model.plot_logistic_multinomial.$toplevel",
    "examples.linear_model.plot_sgd_iris.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.neighbors.plot_classification.$toplevel",
    "examples.neighbors.plot_nca_classification.$toplevel",
    "examples.neighbors.plot_nearest_centroid.$toplevel",
    "examples.preprocessing.plot_scaling_importance.fit_and_plot_model",
    "examples.svm.plot_custom_kernel.$toplevel",
    "examples.svm.plot_iris_svc.$toplevel",
    "examples.svm.plot_linearsvc_support_vectors.$toplevel",
    "examples.svm.plot_separating_hyperplane.$toplevel",
    "examples.svm.plot_separating_hyperplane_unbalanced.$toplevel",
    "examples.tree.plot_iris_dtc.$toplevel"
  ],
  "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.plot": [
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.from_estimator"
  ],
  "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.__init__": [
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator"
  ],
  "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._get_sample_count": [
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot"
  ],
  "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_average_dependence": [
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_one_way_partial_dependence"
  ],
  "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_ice_lines": [
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_one_way_partial_dependence"
  ],
  "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_one_way_partial_dependence": [
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot"
  ],
  "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_two_way_partial_dependence": [
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot"
  ],
  "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator": [
    "examples.ensemble.plot_monotonic_constraints.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.miscellaneous.plot_partial_dependence_visualization_api.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_2_0.$toplevel"
  ],
  "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot": [
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator"
  ],
  "sklearn.isotonic.IsotonicRegression.__init__": [
    "examples.miscellaneous.plot_isotonic_regression.$toplevel",
    "sklearn.calibration._fit_calibrator",
    "sklearn.manifold._mds._smacof_single"
  ],
  "sklearn.isotonic.IsotonicRegression._build_f": [
    "sklearn.isotonic.IsotonicRegression.__setstate__",
    "sklearn.isotonic.IsotonicRegression.fit"
  ],
  "sklearn.isotonic.IsotonicRegression._build_y": [
    "sklearn.isotonic.IsotonicRegression.fit"
  ],
  "sklearn.isotonic.IsotonicRegression._check_input_data_shape": [
    "sklearn.isotonic.IsotonicRegression._build_y",
    "sklearn.isotonic.IsotonicRegression._transform"
  ],
  "sklearn.isotonic.IsotonicRegression._transform": [
    "sklearn.isotonic.IsotonicRegression.predict",
    "sklearn.isotonic.IsotonicRegression.transform"
  ],
  "sklearn.isotonic.IsotonicRegression.predict": [
    "examples.miscellaneous.plot_isotonic_regression.$toplevel"
  ],
  "sklearn.kernel_approximation.Nystroem.__init__": [
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_plot_polynomial_kernel_approximation.$toplevel",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.impute.plot_iterative_imputer_variants_comparison.$toplevel",
    "examples.linear_model.plot_sgdocsvm_vs_ocsvm.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel"
  ],
  "sklearn.kernel_approximation.Nystroem._get_kernel_params": [
    "sklearn.kernel_approximation.Nystroem.fit",
    "sklearn.kernel_approximation.Nystroem.transform"
  ],
  "sklearn.kernel_approximation.PolynomialCountSketch.__init__": [
    "benchmarks.bench_plot_polynomial_kernel_approximation.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel"
  ],
  "sklearn.kernel_approximation.RBFSampler.__init__": [
    "benchmarks.bench_mnist.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel"
  ],
  "sklearn.kernel_ridge.KernelRidge.__init__": [
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.miscellaneous.plot_kernel_ridge_regression.$toplevel",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_csc",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_csr",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_multi_output",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_precomputed",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_precomputed_kernel_unchanged",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_sample_weights",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_singular_kernel"
  ],
  "sklearn.kernel_ridge.KernelRidge._get_kernel": [
    "sklearn.kernel_ridge.KernelRidge.fit",
    "sklearn.kernel_ridge.KernelRidge.predict"
  ],
  "sklearn.kernel_ridge.KernelRidge.fit": [
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_csc",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_csr",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_multi_output",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_precomputed",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_precomputed_kernel_unchanged",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_sample_weights",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_singular_kernel"
  ],
  "sklearn.kernel_ridge.KernelRidge.predict": [
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.miscellaneous.plot_kernel_ridge_regression.$toplevel",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_singular_kernel"
  ],
  "sklearn.linear_model._base.LinearClassifierMixin._predict_proba_lr": [
    "sklearn.linear_model._logistic.LogisticRegression.predict_proba",
    "sklearn.linear_model._stochastic_gradient.SGDClassifier.predict_proba"
  ],
  "sklearn.linear_model._base.LinearClassifierMixin.decision_function": [
    "Ovr{sklearn.linear_model._base.LinearClassifierMixin.decision_function}",
    "examples.calibration.plot_calibration_curve.NaivelyCalibratedLinearSVC.fit",
    "examples.calibration.plot_calibration_curve.NaivelyCalibratedLinearSVC.predict_proba",
    "examples.calibration.plot_compare_calibration.NaivelyCalibratedLinearSVC.fit",
    "examples.calibration.plot_compare_calibration.NaivelyCalibratedLinearSVC.predict_proba",
    "examples.linear_model.plot_sgd_separating_hyperplane.$toplevel",
    "examples.linear_model.plot_sgd_weighted_samples.$toplevel",
    "sklearn.linear_model._logistic.LogisticRegression.predict_proba",
    "sklearn.linear_model._ridge._RidgeClassifierMixin.predict",
    "sklearn.linear_model._stochastic_gradient.SGDClassifier.predict_proba",
    "sklearn.utils.tests.test_estimator_checks.PoorScoreLogisticRegression.decision_function"
  ],
  "sklearn.linear_model._base.LinearClassifierMixin.predict": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.linear_model.plot_sgd_comparison.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_20newsgroups.$toplevel",
    "sklearn.linear_model._ridge._RidgeClassifierMixin.predict"
  ],
  "sklearn.linear_model._base.LinearModel._decision_function": [
    "Ovr{sklearn.linear_model._base.LinearModel._decision_function}",
    "sklearn.linear_model._bayes.ARDRegression.predict",
    "sklearn.linear_model._bayes.BayesianRidge.predict"
  ],
  "sklearn.linear_model._base.LinearModel._set_intercept": [
    "sklearn.linear_model._base.LinearRegression.fit",
    "sklearn.linear_model._bayes.ARDRegression.fit",
    "sklearn.linear_model._bayes.BayesianRidge.fit",
    "sklearn.linear_model._coordinate_descent.ElasticNet.fit",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit",
    "sklearn.linear_model._least_angle.Lars._fit",
    "sklearn.linear_model._least_angle.LassoLarsIC.fit",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuit.fit",
    "sklearn.linear_model._ridge._BaseRidge.fit",
    "sklearn.linear_model._ridge._RidgeGCV.fit"
  ],
  "sklearn.linear_model._base.LinearModel.predict": [
    "benchmarks.bench_sgd_regression.$toplevel",
    "examples.ensemble.plot_voting_regressor.$toplevel",
    "examples.inspection.plot_causal_interpretation.$toplevel",
    "examples.linear_model.plot_ols.$toplevel",
    "examples.linear_model.plot_ols_ridge_variance.$toplevel",
    "examples.linear_model.plot_ransac.$toplevel",
    "examples.linear_model.plot_theilsen.$toplevel",
    "examples.miscellaneous.plot_isotonic_regression.$toplevel",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel"
  ],
  "sklearn.linear_model._base.LinearRegression.__init__": [
    "asv_benchmarks.benchmarks.linear_model.LinearRegressionBenchmark.make_estimator",
    "benchmarks.bench_glm.$toplevel",
    "examples.cross_decomposition.plot_pcr_vs_pls.$toplevel",
    "examples.ensemble.plot_voting_regressor.$toplevel",
    "examples.inspection.plot_causal_interpretation.$toplevel",
    "examples.linear_model.plot_ard.$toplevel",
    "examples.linear_model.plot_logistic.$toplevel",
    "examples.linear_model.plot_nnls.$toplevel",
    "examples.linear_model.plot_ols.$toplevel",
    "examples.linear_model.plot_ols_3d.$toplevel",
    "examples.linear_model.plot_ols_ridge_variance.$toplevel",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.linear_model.plot_ransac.$toplevel",
    "examples.linear_model.plot_robust_fit.$toplevel",
    "examples.linear_model.plot_theilsen.$toplevel",
    "examples.miscellaneous.plot_isotonic_regression.$toplevel",
    "examples.miscellaneous.plot_metadata_routing.$toplevel",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "examples.model_selection.plot_cv_predict.$toplevel",
    "examples.model_selection.plot_underfitting_overfitting.$toplevel",
    "examples.preprocessing.plot_discretization.$toplevel",
    "sklearn.compose._target.TransformedTargetRegressor._more_tags",
    "sklearn.compose._target.TransformedTargetRegressor.fit",
    "sklearn.linear_model._least_angle.LassoLarsIC._estimate_noise_variance",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.linear_model.tests.test_huber.test_huber_equals_lr_for_high_epsilon",
    "sklearn.utils.estimator_checks._construct_instance",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_clones"
  ],
  "sklearn.linear_model._base.LinearRegression.fit": [
    "benchmarks.bench_glm.$toplevel",
    "examples.ensemble.plot_voting_regressor.$toplevel",
    "examples.inspection.plot_causal_interpretation.$toplevel",
    "examples.linear_model.plot_ard.$toplevel",
    "examples.linear_model.plot_logistic.$toplevel",
    "examples.linear_model.plot_nnls.$toplevel",
    "examples.linear_model.plot_ols.$toplevel",
    "examples.linear_model.plot_ols_3d.$toplevel",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.linear_model.plot_ransac.$toplevel",
    "examples.miscellaneous.plot_isotonic_regression.$toplevel",
    "examples.preprocessing.plot_discretization.$toplevel",
    "sklearn.linear_model._least_angle.LassoLarsIC._estimate_noise_variance",
    "sklearn.linear_model.tests.test_huber.test_huber_equals_lr_for_high_epsilon",
    "sklearn.utils.tests.test_estimator_checks.RequiresPositiveXRegressor.fit",
    "sklearn.utils.tests.test_estimator_checks.RequiresPositiveYRegressor.fit"
  ],
  "sklearn.linear_model._base.SparseCoefMixin.sparsify": [
    "benchmarks.bench_sparsify.$toplevel"
  ],
  "sklearn.linear_model._bayes.ARDRegression.__init__": [
    "examples.linear_model.plot_ard.$toplevel",
    "examples.linear_model.plot_lasso_and_elasticnet.$toplevel"
  ],
  "sklearn.linear_model._bayes.ARDRegression._update_sigma": [
    "sklearn.linear_model._bayes.ARDRegression.fit"
  ],
  "sklearn.linear_model._bayes.ARDRegression._update_sigma_woodbury": [
    "sklearn.linear_model._bayes.ARDRegression.fit"
  ],
  "sklearn.linear_model._bayes.ARDRegression.fit": [
    "examples.linear_model.plot_ard.$toplevel",
    "examples.linear_model.plot_lasso_and_elasticnet.$toplevel"
  ],
  "sklearn.linear_model._bayes.BayesianRidge.__init__": [
    "examples.cluster.plot_feature_agglomeration_vs_univariate_selection.$toplevel",
    "examples.impute.plot_iterative_imputer_variants_comparison.$toplevel",
    "examples.linear_model.plot_ard.$toplevel",
    "examples.linear_model.plot_bayesian_ridge_curvefit.$toplevel",
    "sklearn.impute._iterative.IterativeImputer.fit_transform"
  ],
  "sklearn.linear_model._bayes.BayesianRidge._log_marginal_likelihood": [
    "sklearn.linear_model._bayes.BayesianRidge.fit"
  ],
  "sklearn.linear_model._bayes.BayesianRidge._update_coef_": [
    "sklearn.linear_model._bayes.BayesianRidge.fit"
  ],
  "sklearn.linear_model._bayes.BayesianRidge.fit": [
    "examples.linear_model.plot_ard.$toplevel",
    "examples.linear_model.plot_bayesian_ridge_curvefit.$toplevel"
  ],
  "sklearn.linear_model._bayes.BayesianRidge.predict": [
    "examples.linear_model.plot_bayesian_ridge_curvefit.$toplevel"
  ],
  "sklearn.linear_model._coordinate_descent.ElasticNet.__init__": [
    "asv_benchmarks.benchmarks.linear_model.ElasticNetBenchmark.make_estimator",
    "benchmarks.bench_sgd_regression.$toplevel",
    "examples.linear_model.plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.$toplevel",
    "examples.linear_model.plot_lasso_and_elasticnet.$toplevel",
    "examples.model_selection.plot_train_error_vs_test_error.$toplevel",
    "sklearn.linear_model._coordinate_descent.ElasticNetCV._get_estimator",
    "sklearn.linear_model._coordinate_descent.Lasso.__init__"
  ],
  "sklearn.linear_model._coordinate_descent.ElasticNet._decision_function": [
    "Ovr{sklearn.linear_model._coordinate_descent.ElasticNet._decision_function}"
  ],
  "sklearn.linear_model._coordinate_descent.ElasticNet.fit": [
    "benchmarks.bench_sgd_regression.$toplevel",
    "examples.applications.plot_tomography_l1_reconstruction.$toplevel",
    "examples.linear_model.plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.$toplevel",
    "examples.linear_model.plot_lasso_and_elasticnet.$toplevel",
    "examples.linear_model.plot_lasso_dense_vs_sparse_data.$toplevel",
    "examples.linear_model.plot_multi_task_lasso_support.$toplevel",
    "examples.model_selection.plot_train_error_vs_test_error.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "sklearn.decomposition._dict_learning._sparse_encode_precomputed"
  ],
  "sklearn.linear_model._coordinate_descent.ElasticNetCV._get_estimator": [
    "Ovr{sklearn.linear_model._coordinate_descent.ElasticNetCV._get_estimator}"
  ],
  "sklearn.linear_model._coordinate_descent.ElasticNetCV._is_multitask": [
    "Ovr{sklearn.linear_model._coordinate_descent.ElasticNetCV._is_multitask}"
  ],
  "sklearn.linear_model._coordinate_descent.Lasso.__init__": [
    "asv_benchmarks.benchmarks.linear_model.LassoBenchmark.make_estimator",
    "examples.applications.plot_tomography_l1_reconstruction.$toplevel",
    "examples.exercises.plot_cv_diabetes.$toplevel",
    "examples.linear_model.plot_lasso_and_elasticnet.$toplevel",
    "examples.linear_model.plot_lasso_dense_vs_sparse_data.$toplevel",
    "examples.linear_model.plot_multi_task_lasso_support.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "sklearn.decomposition._dict_learning._sparse_encode_precomputed",
    "sklearn.linear_model._coordinate_descent.LassoCV._get_estimator"
  ],
  "sklearn.linear_model._coordinate_descent.LassoCV.__init__": [
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.exercises.plot_cv_diabetes.$toplevel",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.linear_model.plot_lasso_model_selection.$toplevel"
  ],
  "sklearn.linear_model._coordinate_descent.LassoCV._get_estimator": [
    "Ovr{sklearn.linear_model._coordinate_descent.LassoCV._get_estimator}"
  ],
  "sklearn.linear_model._coordinate_descent.LassoCV._is_multitask": [
    "Ovr{sklearn.linear_model._coordinate_descent.LassoCV._is_multitask}"
  ],
  "sklearn.linear_model._coordinate_descent.LinearModelCV._get_estimator": [
    "Ovr{sklearn.linear_model._coordinate_descent.LinearModelCV._get_estimator}"
  ],
  "sklearn.linear_model._coordinate_descent.LinearModelCV._is_multitask": [
    "Ovr{sklearn.linear_model._coordinate_descent.LinearModelCV._is_multitask}"
  ],
  "sklearn.linear_model._coordinate_descent.LinearModelCV.fit": [
    "examples.exercises.plot_cv_diabetes.$toplevel"
  ],
  "sklearn.linear_model._coordinate_descent.LinearModelCV.path": [
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit"
  ],
  "sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.__init__": [
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNetCV._get_estimator",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator"
  ],
  "sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit": [
    "examples.linear_model.plot_multi_task_lasso_support.$toplevel"
  ],
  "sklearn.linear_model._coordinate_descent.MultiTaskElasticNetCV._get_estimator": [
    "Ovr{sklearn.linear_model._coordinate_descent.MultiTaskElasticNetCV._get_estimator}"
  ],
  "sklearn.linear_model._coordinate_descent.MultiTaskElasticNetCV._is_multitask": [
    "Ovr{sklearn.linear_model._coordinate_descent.MultiTaskElasticNetCV._is_multitask}"
  ],
  "sklearn.linear_model._coordinate_descent.MultiTaskLasso.__init__": [
    "examples.linear_model.plot_multi_task_lasso_support.$toplevel",
    "sklearn.linear_model._coordinate_descent.MultiTaskLassoCV._get_estimator"
  ],
  "sklearn.linear_model._coordinate_descent.MultiTaskLassoCV._get_estimator": [
    "Ovr{sklearn.linear_model._coordinate_descent.MultiTaskLassoCV._get_estimator}"
  ],
  "sklearn.linear_model._coordinate_descent.MultiTaskLassoCV._is_multitask": [
    "Ovr{sklearn.linear_model._coordinate_descent.MultiTaskLassoCV._is_multitask}"
  ],
  "sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.inner_solve": [
    "Ovr{sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.inner_solve}"
  ],
  "sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.setup": [
    "Ovr{sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.setup}"
  ],
  "sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.update_gradient_hessian": [
    "Ovr{sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.update_gradient_hessian}"
  ],
  "sklearn.linear_model._glm._newton_solver.NewtonSolver.__init__": [
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit",
    "sklearn.linear_model._logistic._logistic_regression_path"
  ],
  "sklearn.linear_model._glm._newton_solver.NewtonSolver.check_convergence": [
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.solve"
  ],
  "sklearn.linear_model._glm._newton_solver.NewtonSolver.fallback_lbfgs_solve": [
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.solve"
  ],
  "sklearn.linear_model._glm._newton_solver.NewtonSolver.finalize": [
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.solve"
  ],
  "sklearn.linear_model._glm._newton_solver.NewtonSolver.inner_solve": [
    "Ovr{sklearn.linear_model._glm._newton_solver.NewtonSolver.inner_solve}"
  ],
  "sklearn.linear_model._glm._newton_solver.NewtonSolver.line_search": [
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.solve"
  ],
  "sklearn.linear_model._glm._newton_solver.NewtonSolver.setup": [
    "Ovr{sklearn.linear_model._glm._newton_solver.NewtonSolver.setup}",
    "sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.setup"
  ],
  "sklearn.linear_model._glm._newton_solver.NewtonSolver.solve": [
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit",
    "sklearn.linear_model._logistic._logistic_regression_path"
  ],
  "sklearn.linear_model._glm._newton_solver.NewtonSolver.update_gradient_hessian": [
    "Ovr{sklearn.linear_model._glm._newton_solver.NewtonSolver.update_gradient_hessian}"
  ],
  "sklearn.linear_model._glm.glm.GammaRegressor.__init__": [
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel"
  ],
  "sklearn.linear_model._glm.glm.GammaRegressor._get_loss": [
    "Ovr{sklearn.linear_model._glm.glm.GammaRegressor._get_loss}"
  ],
  "sklearn.linear_model._glm.glm.PoissonRegressor.__init__": [
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel"
  ],
  "sklearn.linear_model._glm.glm.PoissonRegressor._get_loss": [
    "Ovr{sklearn.linear_model._glm.glm.PoissonRegressor._get_loss}"
  ],
  "sklearn.linear_model._glm.glm.TweedieRegressor.__init__": [
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel"
  ],
  "sklearn.linear_model._glm.glm.TweedieRegressor._get_loss": [
    "Ovr{sklearn.linear_model._glm.glm.TweedieRegressor._get_loss}"
  ],
  "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.__init__": [
    "sklearn.linear_model._glm.glm.GammaRegressor.__init__",
    "sklearn.linear_model._glm.glm.PoissonRegressor.__init__",
    "sklearn.linear_model._glm.glm.TweedieRegressor.__init__"
  ],
  "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor._get_loss": [
    "Ovr{sklearn.linear_model._glm.glm._GeneralizedLinearRegressor._get_loss}"
  ],
  "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor._linear_predictor": [
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.predict",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.score"
  ],
  "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit": [
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel"
  ],
  "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.predict": [
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel"
  ],
  "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.score": [
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel"
  ],
  "sklearn.linear_model._huber.HuberRegressor.__init__": [
    "examples.linear_model.plot_huber_vs_ridge.$toplevel",
    "examples.linear_model.plot_robust_fit.$toplevel",
    "sklearn.linear_model.tests.test_huber.test_huber_and_sgd_same_results",
    "sklearn.linear_model.tests.test_huber.test_huber_better_r2_score",
    "sklearn.linear_model.tests.test_huber.test_huber_bool",
    "sklearn.linear_model.tests.test_huber.test_huber_equals_lr_for_high_epsilon",
    "sklearn.linear_model.tests.test_huber.test_huber_max_iter",
    "sklearn.linear_model.tests.test_huber.test_huber_sample_weights",
    "sklearn.linear_model.tests.test_huber.test_huber_scaling_invariant",
    "sklearn.linear_model.tests.test_huber.test_huber_sparse",
    "sklearn.linear_model.tests.test_huber.test_huber_warm_start"
  ],
  "sklearn.linear_model._huber.HuberRegressor.fit": [
    "examples.linear_model.plot_huber_vs_ridge.$toplevel",
    "sklearn.linear_model.tests.test_huber.test_huber_and_sgd_same_results",
    "sklearn.linear_model.tests.test_huber.test_huber_better_r2_score",
    "sklearn.linear_model.tests.test_huber.test_huber_bool",
    "sklearn.linear_model.tests.test_huber.test_huber_equals_lr_for_high_epsilon",
    "sklearn.linear_model.tests.test_huber.test_huber_max_iter",
    "sklearn.linear_model.tests.test_huber.test_huber_sample_weights",
    "sklearn.linear_model.tests.test_huber.test_huber_scaling_invariant",
    "sklearn.linear_model.tests.test_huber.test_huber_sparse",
    "sklearn.linear_model.tests.test_huber.test_huber_warm_start"
  ],
  "sklearn.linear_model._least_angle.Lars.__init__": [
    "sklearn.decomposition._dict_learning._sparse_encode_precomputed",
    "sklearn.linear_model._least_angle.LarsCV.__init__"
  ],
  "sklearn.linear_model._least_angle.Lars._fit": [
    "sklearn.linear_model._least_angle.Lars.fit",
    "sklearn.linear_model._least_angle.LarsCV.fit"
  ],
  "sklearn.linear_model._least_angle.Lars._get_gram": [
    "sklearn.linear_model._least_angle.Lars._fit"
  ],
  "sklearn.linear_model._least_angle.Lars.fit": [
    "benchmarks.bench_glm.$toplevel",
    "sklearn.decomposition._dict_learning._sparse_encode_precomputed"
  ],
  "sklearn.linear_model._least_angle.LassoLars.__init__": [
    "benchmarks.bench_glm.$toplevel",
    "sklearn.decomposition._dict_learning._sparse_encode_precomputed"
  ],
  "sklearn.linear_model._least_angle.LassoLarsCV.__init__": [
    "examples.linear_model.plot_lasso_model_selection.$toplevel"
  ],
  "sklearn.linear_model._least_angle.LassoLarsIC.__init__": [
    "examples.linear_model.plot_lasso_lars_ic.$toplevel",
    "examples.linear_model.plot_lasso_model_selection.$toplevel"
  ],
  "sklearn.linear_model._least_angle.LassoLarsIC._estimate_noise_variance": [
    "sklearn.linear_model._least_angle.LassoLarsIC.fit"
  ],
  "sklearn.linear_model._linear_loss.LinearModelLoss.__init__": [
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.__init__",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit",
    "sklearn.linear_model._logistic._logistic_regression_path"
  ],
  "sklearn.linear_model._linear_loss.LinearModelLoss.gradient": [
    "sklearn.linear_model._logistic._logistic_regression_path"
  ],
  "sklearn.linear_model._linear_loss.LinearModelLoss.gradient_hessian_product": [
    "sklearn.linear_model._logistic._logistic_regression_path"
  ],
  "sklearn.linear_model._linear_loss.LinearModelLoss.init_zero_coef": [
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit"
  ],
  "sklearn.linear_model._linear_loss.LinearModelLoss.l2_penalty": [
    "sklearn.linear_model._linear_loss.LinearModelLoss.loss",
    "sklearn.linear_model._linear_loss.LinearModelLoss.loss_gradient"
  ],
  "sklearn.linear_model._linear_loss.LinearModelLoss.loss": [
    "sklearn.linear_model._logistic._logistic_regression_path"
  ],
  "sklearn.linear_model._linear_loss.LinearModelLoss.loss_gradient": [
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit",
    "sklearn.linear_model._logistic._logistic_regression_path"
  ],
  "sklearn.linear_model._linear_loss.LinearModelLoss.weight_intercept": [
    "sklearn.linear_model._linear_loss.LinearModelLoss.gradient",
    "sklearn.linear_model._linear_loss.LinearModelLoss.gradient_hessian",
    "sklearn.linear_model._linear_loss.LinearModelLoss.loss",
    "sklearn.linear_model._linear_loss.LinearModelLoss.loss_gradient",
    "sklearn.linear_model._linear_loss.LinearModelLoss.weight_intercept_raw"
  ],
  "sklearn.linear_model._linear_loss.LinearModelLoss.weight_intercept_raw": [
    "sklearn.linear_model._linear_loss.LinearModelLoss.gradient",
    "sklearn.linear_model._linear_loss.LinearModelLoss.gradient_hessian",
    "sklearn.linear_model._linear_loss.LinearModelLoss.gradient_hessian_product",
    "sklearn.linear_model._linear_loss.LinearModelLoss.loss",
    "sklearn.linear_model._linear_loss.LinearModelLoss.loss_gradient"
  ],
  "sklearn.linear_model._logistic.LogisticRegression.__init__": [
    "asv_benchmarks.benchmarks.linear_model.LogisticRegressionBenchmark.make_estimator",
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_rcv1_logreg_convergence.$toplevel",
    "benchmarks.bench_saga.fit_single",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.calibration.plot_compare_calibration.$toplevel",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.compose.plot_column_transformer_mixed_types.$toplevel",
    "examples.compose.plot_digits_pipe.$toplevel",
    "examples.ensemble.plot_feature_transformation.$toplevel",
    "examples.ensemble.plot_voting_probas.$toplevel",
    "examples.exercises.plot_digits_classification_exercise.$toplevel",
    "examples.feature_selection.plot_rfe_with_cross_validation.$toplevel",
    "examples.linear_model.plot_iris_logistic.$toplevel",
    "examples.linear_model.plot_logistic.$toplevel",
    "examples.linear_model.plot_logistic_l1_l2_sparsity.$toplevel",
    "examples.linear_model.plot_logistic_multinomial.$toplevel",
    "examples.linear_model.plot_logistic_path.$toplevel",
    "examples.linear_model.plot_sgd_comparison.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_20newsgroups.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_mnist.$toplevel",
    "examples.miscellaneous.plot_display_object_visualization.$toplevel",
    "examples.miscellaneous.plot_estimator_representation.$toplevel",
    "examples.miscellaneous.plot_pipeline_display.$toplevel",
    "examples.miscellaneous.plot_set_output.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.multioutput.plot_classifier_chain_yeast.$toplevel",
    "examples.neural_networks.plot_rbm_logistic_classification.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_0_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "sklearn.ensemble._stacking.StackingClassifier._sk_visual_block_",
    "sklearn.ensemble._stacking.StackingClassifier._validate_final_estimator",
    "sklearn.linear_model._logistic._log_reg_scoring_path",
    "sklearn.utils.estimator_checks._construct_instance",
    "sklearn.utils.tests.test_estimator_checks.test_check_dataframe_column_names_consistency",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator"
  ],
  "sklearn.linear_model._logistic.LogisticRegression.fit": [
    "examples.exercises.plot_digits_classification_exercise.$toplevel",
    "examples.linear_model.plot_iris_logistic.$toplevel",
    "examples.linear_model.plot_logistic.$toplevel",
    "examples.linear_model.plot_logistic_l1_l2_sparsity.$toplevel",
    "examples.linear_model.plot_logistic_multinomial.$toplevel",
    "examples.linear_model.plot_logistic_path.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_20newsgroups.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_mnist.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.model_selection.plot_roc.$toplevel"
  ],
  "sklearn.linear_model._logistic.LogisticRegression.predict_proba": [
    "examples.calibration.plot_calibration_curve.$toplevel",
    "sklearn.linear_model._logistic.LogisticRegression.predict_log_proba"
  ],
  "sklearn.linear_model._logistic.LogisticRegressionCV.__init__": [
    "examples.preprocessing.plot_scaling_importance.$toplevel",
    "sklearn.utils.tests.test_pprint.test_changed_only"
  ],
  "sklearn.linear_model._logistic.LogisticRegressionCV.score": [
    "examples.linear_model.plot_logistic_l1_l2_sparsity.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_mnist.$toplevel",
    "sklearn.linear_model._logistic._log_reg_scoring_path"
  ],
  "sklearn.linear_model._omp.OrthogonalMatchingPursuit.__init__": [
    "examples.linear_model.plot_omp.$toplevel",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.fit"
  ],
  "sklearn.linear_model._omp.OrthogonalMatchingPursuit.fit": [
    "examples.linear_model.plot_omp.$toplevel",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.fit"
  ],
  "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.__init__": [
    "examples.linear_model.plot_omp.$toplevel"
  ],
  "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.fit": [
    "examples.linear_model.plot_omp.$toplevel"
  ],
  "sklearn.linear_model._passive_aggressive.PassiveAggressiveClassifier.__init__": [
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.linear_model.plot_sgd_comparison.$toplevel"
  ],
  "sklearn.linear_model._perceptron.Perceptron.__init__": [
    "doc.tutorial.text_analytics.solutions.exercise_01_language_train_model.$toplevel",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.linear_model.plot_sgd_comparison.$toplevel"
  ],
  "sklearn.linear_model._quantile.QuantileRegressor.__init__": [
    "examples.linear_model.plot_quantile_regression.$toplevel"
  ],
  "sklearn.linear_model._quantile.QuantileRegressor.fit": [
    "examples.linear_model.plot_quantile_regression.$toplevel"
  ],
  "sklearn.linear_model._ransac.RANSACRegressor.__init__": [
    "examples.linear_model.plot_ransac.$toplevel",
    "examples.linear_model.plot_robust_fit.$toplevel",
    "examples.linear_model.plot_theilsen.$toplevel"
  ],
  "sklearn.linear_model._ransac.RANSACRegressor.fit": [
    "examples.linear_model.plot_ransac.$toplevel"
  ],
  "sklearn.linear_model._ransac.RANSACRegressor.predict": [
    "examples.linear_model.plot_ransac.$toplevel",
    "examples.linear_model.plot_theilsen.$toplevel"
  ],
  "sklearn.linear_model._ridge.Ridge.__init__": [
    "asv_benchmarks.benchmarks.linear_model.RidgeBenchmark.make_estimator",
    "benchmarks.bench_glm.$toplevel",
    "benchmarks.bench_sgd_regression.$toplevel",
    "examples.applications.plot_prediction_latency.$toplevel",
    "examples.applications.plot_tomography_l1_reconstruction.$toplevel",
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.impute.plot_iterative_imputer_variants_comparison.$toplevel",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.linear_model.plot_huber_vs_ridge.$toplevel",
    "examples.linear_model.plot_ols_ridge_variance.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_polynomial_interpolation.$toplevel",
    "examples.linear_model.plot_ridge_coeffs.$toplevel",
    "examples.linear_model.plot_ridge_path.$toplevel",
    "examples.preprocessing.plot_target_encoder_cross_val.$toplevel",
    "sklearn.linear_model._ridge._BaseRidgeCV.fit",
    "sklearn.linear_model.tests.test_huber.test_huber_better_r2_score",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_csc",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_csr",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_multi_output",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_sample_weights",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_singular_kernel",
    "sklearn.utils.estimator_checks._construct_instance"
  ],
  "sklearn.linear_model._ridge.Ridge.fit": [
    "benchmarks.bench_glm.$toplevel",
    "benchmarks.bench_sgd_regression.$toplevel",
    "examples.applications.plot_tomography_l1_reconstruction.$toplevel",
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.linear_model.plot_huber_vs_ridge.$toplevel",
    "examples.linear_model.plot_ridge_coeffs.$toplevel",
    "examples.linear_model.plot_ridge_path.$toplevel",
    "examples.preprocessing.plot_target_encoder_cross_val.$toplevel",
    "sklearn.linear_model.tests.test_huber.test_huber_better_r2_score",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_csc",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_csr",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_multi_output",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_sample_weights",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_singular_kernel"
  ],
  "sklearn.linear_model._ridge.RidgeCV.fit": [
    "examples.compose.plot_transformed_target.$toplevel",
    "examples.feature_selection.plot_select_from_model_diabetes.$toplevel"
  ],
  "sklearn.linear_model._ridge.RidgeClassifier.__init__": [
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "sklearn.linear_model._ridge._BaseRidgeCV.fit"
  ],
  "sklearn.linear_model._ridge.RidgeClassifier.fit": [
    "examples.text.plot_document_classification_20newsgroups.$toplevel"
  ],
  "sklearn.linear_model._ridge._BaseRidgeCV.__init__": [
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.compose.plot_transformed_target.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.feature_selection.plot_select_from_model_diabetes.$toplevel",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "sklearn.ensemble._stacking.StackingRegressor._sk_visual_block_",
    "sklearn.ensemble._stacking.StackingRegressor._validate_final_estimator"
  ],
  "sklearn.linear_model._ridge._IdentityClassifier.__init__": [
    "sklearn.linear_model._ridge._RidgeGCV.fit"
  ],
  "sklearn.linear_model._ridge._IdentityClassifier.decision_function": [
    "Ovr{sklearn.linear_model._ridge._IdentityClassifier.decision_function}"
  ],
  "sklearn.linear_model._ridge._RidgeClassifierMixin._prepare_data": [
    "sklearn.linear_model._ridge.RidgeClassifier.fit",
    "sklearn.linear_model._ridge.RidgeClassifierCV.fit"
  ],
  "sklearn.linear_model._ridge._RidgeClassifierMixin.predict": [
    "examples.text.plot_document_classification_20newsgroups.$toplevel"
  ],
  "sklearn.linear_model._ridge._RidgeGCV.__init__": [
    "sklearn.linear_model._ridge._BaseRidgeCV.fit"
  ],
  "sklearn.linear_model._ridge._RidgeGCV._compute_covariance": [
    "sklearn.linear_model._ridge._RidgeGCV._eigen_decompose_covariance"
  ],
  "sklearn.linear_model._ridge._RidgeGCV._compute_gram": [
    "sklearn.linear_model._ridge._RidgeGCV._eigen_decompose_gram"
  ],
  "sklearn.linear_model._ridge._RidgeGCV._decomp_diag": [
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_gram",
    "sklearn.linear_model._ridge._RidgeGCV._solve_svd_design_matrix"
  ],
  "sklearn.linear_model._ridge._RidgeGCV._diag_dot": [
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_gram",
    "sklearn.linear_model._ridge._RidgeGCV._solve_svd_design_matrix"
  ],
  "sklearn.linear_model._ridge._RidgeGCV._eigen_decompose_covariance": [
    "sklearn.linear_model._ridge._RidgeGCV.fit"
  ],
  "sklearn.linear_model._ridge._RidgeGCV._eigen_decompose_gram": [
    "sklearn.linear_model._ridge._RidgeGCV.fit"
  ],
  "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance": [
    "sklearn.linear_model._ridge._RidgeGCV.fit"
  ],
  "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance_intercept": [
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance"
  ],
  "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance_no_intercept": [
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance"
  ],
  "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_gram": [
    "sklearn.linear_model._ridge._RidgeGCV.fit"
  ],
  "sklearn.linear_model._ridge._RidgeGCV._solve_svd_design_matrix": [
    "sklearn.linear_model._ridge._RidgeGCV.fit"
  ],
  "sklearn.linear_model._ridge._RidgeGCV._sparse_multidot_diag": [
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance_intercept",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance_no_intercept"
  ],
  "sklearn.linear_model._ridge._RidgeGCV._svd_decompose_design_matrix": [
    "sklearn.linear_model._ridge._RidgeGCV.fit"
  ],
  "sklearn.linear_model._ridge._RidgeGCV.fit": [
    "sklearn.linear_model._ridge._BaseRidgeCV.fit"
  ],
  "sklearn.linear_model._ridge._XT_CenterStackOp.__init__": [
    "sklearn.linear_model._ridge._X_CenterStackOp._transpose"
  ],
  "sklearn.linear_model._ridge._X_CenterStackOp.__init__": [
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance_intercept"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGD.__init__": [
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM.__init__"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGD._allocate_parameter_mem": [
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._partial_fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._partial_fit",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._partial_fit"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGD._get_learning_rate_type": [
    "sklearn.linear_model._stochastic_gradient.BaseSGD._more_validate_params",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._fit_regressor",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._fit_one_class"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGD._get_loss_function": [
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._partial_fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._fit_regressor",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._partial_fit"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGD._get_penalty_type": [
    "sklearn.linear_model._stochastic_gradient.BaseSGD._more_validate_params",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._fit_regressor",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._fit_one_class"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGD._make_validation_score_cb": [
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._fit_regressor",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._fit_one_class"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGD._make_validation_split": [
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit_multiclass",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._fit_regressor",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._fit_one_class"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGD._more_validate_params": [
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveClassifier.fit",
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveClassifier.partial_fit",
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveRegressor.fit",
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveRegressor.partial_fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.partial_fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.partial_fit",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM.fit",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM.partial_fit"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.__init__": [
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveClassifier.__init__",
    "sklearn.linear_model._perceptron.Perceptron.__init__",
    "sklearn.linear_model._stochastic_gradient.SGDClassifier.__init__"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit": [
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveClassifier.fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.fit"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit_binary": [
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._partial_fit"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit_multiclass": [
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._partial_fit"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._partial_fit": [
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveClassifier.partial_fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.partial_fit"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.fit": [
    "examples.linear_model.plot_sgd_iris.$toplevel",
    "examples.linear_model.plot_sgd_separating_hyperplane.$toplevel",
    "examples.linear_model.plot_sgd_weighted_samples.$toplevel",
    "sklearn.utils.tests.test_estimator_checks.UntaggedBinaryClassifier.fit"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.partial_fit": [
    "sklearn.utils.tests.test_estimator_checks.UntaggedBinaryClassifier.partial_fit"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.__init__": [
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveRegressor.__init__",
    "sklearn.linear_model._stochastic_gradient.SGDRegressor.__init__"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._decision_function": [
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.predict"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._fit": [
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveRegressor.fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.fit"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._fit_regressor": [
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._partial_fit"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._partial_fit": [
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveRegressor.partial_fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor._fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.partial_fit"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.fit": [
    "benchmarks.bench_sgd_regression.$toplevel",
    "benchmarks.bench_sparsify.$toplevel",
    "sklearn.linear_model.tests.test_huber.test_huber_and_sgd_same_results"
  ],
  "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.predict": [
    "benchmarks.bench_sgd_regression.$toplevel",
    "benchmarks.bench_sparsify.$toplevel",
    "benchmarks.bench_sparsify.benchmark_dense_predict",
    "benchmarks.bench_sparsify.benchmark_sparse_predict"
  ],
  "sklearn.linear_model._stochastic_gradient.SGDClassifier.__init__": [
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_rcv1_logreg_convergence.$toplevel",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.linear_model.plot_sgd_comparison.$toplevel",
    "examples.linear_model.plot_sgd_early_stopping.$toplevel",
    "examples.linear_model.plot_sgd_iris.$toplevel",
    "examples.linear_model.plot_sgd_separating_hyperplane.$toplevel",
    "examples.linear_model.plot_sgd_weighted_samples.$toplevel",
    "examples.model_selection.plot_randomized_search.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_clones",
    "sklearn.utils.tests.test_estimator_checks.test_decision_proba_tie_ranking"
  ],
  "sklearn.linear_model._stochastic_gradient.SGDClassifier.predict_proba": [
    "sklearn.linear_model._stochastic_gradient.SGDClassifier.predict_log_proba"
  ],
  "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM.__init__": [
    "benchmarks.bench_online_ocsvm.$toplevel",
    "examples.linear_model.plot_sgdocsvm_vs_ocsvm.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel"
  ],
  "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._fit": [
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM.fit"
  ],
  "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._fit_one_class": [
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._partial_fit"
  ],
  "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._partial_fit": [
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._fit",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM.partial_fit"
  ],
  "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM.decision_function": [
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM.predict",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM.score_samples"
  ],
  "sklearn.linear_model._stochastic_gradient.SGDRegressor.__init__": [
    "asv_benchmarks.benchmarks.linear_model.SGDRegressorBenchmark.make_estimator",
    "benchmarks.bench_sgd_regression.$toplevel",
    "benchmarks.bench_sparsify.$toplevel",
    "examples.applications.plot_prediction_latency.$toplevel",
    "sklearn.linear_model.tests.test_huber.test_huber_and_sgd_same_results",
    "sklearn.utils.estimator_checks._construct_instance"
  ],
  "sklearn.linear_model._stochastic_gradient._ValidationScoreCallback.__init__": [
    "sklearn.linear_model._stochastic_gradient.BaseSGD._make_validation_score_cb"
  ],
  "sklearn.linear_model._theil_sen.TheilSenRegressor.__init__": [
    "examples.linear_model.plot_robust_fit.$toplevel",
    "examples.linear_model.plot_theilsen.$toplevel"
  ],
  "sklearn.linear_model._theil_sen.TheilSenRegressor._check_subparams": [
    "sklearn.linear_model._theil_sen.TheilSenRegressor.fit"
  ],
  "sklearn.manifold._isomap.Isomap.__init__": [
    "examples.manifold.plot_compare_methods.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.manifold.plot_manifold_sphere.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_isomap"
  ],
  "sklearn.manifold._isomap.Isomap._fit_transform": [
    "sklearn.manifold._isomap.Isomap.fit",
    "sklearn.manifold._isomap.Isomap.fit_transform"
  ],
  "sklearn.manifold._isomap.Isomap.fit_transform": [
    "examples.manifold.plot_compare_methods.$toplevel",
    "examples.manifold.plot_manifold_sphere.$toplevel",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_isomap"
  ],
  "sklearn.manifold._isomap.Isomap.transform": [
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_isomap"
  ],
  "sklearn.manifold._locally_linear.LocallyLinearEmbedding.__init__": [
    "examples.applications.plot_stock_market.$toplevel",
    "examples.manifold.plot_compare_methods.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.manifold.plot_manifold_sphere.$toplevel"
  ],
  "sklearn.manifold._locally_linear.LocallyLinearEmbedding._fit_transform": [
    "sklearn.manifold._locally_linear.LocallyLinearEmbedding.fit",
    "sklearn.manifold._locally_linear.LocallyLinearEmbedding.fit_transform"
  ],
  "sklearn.manifold._locally_linear.LocallyLinearEmbedding.fit_transform": [
    "examples.applications.plot_stock_market.$toplevel",
    "examples.manifold.plot_compare_methods.$toplevel",
    "examples.manifold.plot_manifold_sphere.$toplevel"
  ],
  "sklearn.manifold._mds.MDS.__init__": [
    "examples.manifold.plot_compare_methods.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.manifold.plot_manifold_sphere.$toplevel",
    "examples.manifold.plot_mds.$toplevel"
  ],
  "sklearn.manifold._mds.MDS.fit": [
    "examples.manifold.plot_mds.$toplevel"
  ],
  "sklearn.manifold._mds.MDS.fit_transform": [
    "examples.manifold.plot_compare_methods.$toplevel",
    "examples.manifold.plot_manifold_sphere.$toplevel",
    "examples.manifold.plot_mds.$toplevel",
    "sklearn.manifold._mds.MDS.fit"
  ],
  "sklearn.manifold._spectral_embedding.SpectralEmbedding.__init__": [
    "examples.cluster.plot_digits_linkage.$toplevel",
    "examples.manifold.plot_compare_methods.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.manifold.plot_manifold_sphere.$toplevel",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_spectral_embedding"
  ],
  "sklearn.manifold._spectral_embedding.SpectralEmbedding._get_affinity_matrix": [
    "sklearn.manifold._spectral_embedding.SpectralEmbedding.fit"
  ],
  "sklearn.manifold._spectral_embedding.SpectralEmbedding.fit": [
    "sklearn.manifold._spectral_embedding.SpectralEmbedding.fit_transform"
  ],
  "sklearn.manifold._spectral_embedding.SpectralEmbedding.fit_transform": [
    "examples.cluster.plot_digits_linkage.$toplevel",
    "examples.manifold.plot_compare_methods.$toplevel",
    "examples.manifold.plot_manifold_sphere.$toplevel",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_spectral_embedding"
  ],
  "sklearn.manifold._t_sne.TSNE.__init__": [
    "asv_benchmarks.benchmarks.manifold.TSNEBenchmark.make_estimator",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "examples.manifold.plot_compare_methods.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.manifold.plot_manifold_sphere.$toplevel",
    "examples.manifold.plot_swissroll.$toplevel",
    "examples.manifold.plot_t_sne_perplexity.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_tsne"
  ],
  "sklearn.manifold._t_sne.TSNE._check_params_vs_input": [
    "sklearn.manifold._t_sne.TSNE.fit_transform"
  ],
  "sklearn.manifold._t_sne.TSNE._fit": [
    "sklearn.manifold._t_sne.TSNE.fit_transform"
  ],
  "sklearn.manifold._t_sne.TSNE._tsne": [
    "sklearn.manifold._t_sne.TSNE._fit"
  ],
  "sklearn.manifold._t_sne.TSNE.fit_transform": [
    "examples.manifold.plot_compare_methods.$toplevel",
    "examples.manifold.plot_manifold_sphere.$toplevel",
    "examples.manifold.plot_swissroll.$toplevel",
    "examples.manifold.plot_t_sne_perplexity.$toplevel",
    "sklearn.manifold._t_sne.TSNE.fit",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_tsne"
  ],
  "sklearn.metrics._pairwise_distances_reduction._dispatcher.ArgKmin.compute": [
    "sklearn.metrics.pairwise.pairwise_distances_argmin",
    "sklearn.metrics.pairwise.pairwise_distances_argmin_min",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors"
  ],
  "sklearn.metrics._pairwise_distances_reduction._dispatcher.ArgKminClassMode.compute": [
    "sklearn.neighbors._classification.KNeighborsClassifier.predict_proba"
  ],
  "sklearn.metrics._pairwise_distances_reduction._dispatcher.ArgKminClassMode.is_usable_for": [
    "sklearn.neighbors._classification.KNeighborsClassifier.predict",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict_proba"
  ],
  "sklearn.metrics._pairwise_distances_reduction._dispatcher.BaseDistancesReductionDispatcher.is_usable_for": [
    "sklearn.metrics._pairwise_distances_reduction._dispatcher.ArgKminClassMode.is_usable_for",
    "sklearn.metrics.pairwise.pairwise_distances_argmin",
    "sklearn.metrics.pairwise.pairwise_distances_argmin_min",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors"
  ],
  "sklearn.metrics._pairwise_distances_reduction._dispatcher.BaseDistancesReductionDispatcher.valid_metrics": [
    "sklearn.metrics._pairwise_distances_reduction._dispatcher.BaseDistancesReductionDispatcher.is_usable_for"
  ],
  "sklearn.metrics._pairwise_distances_reduction._dispatcher.RadiusNeighbors.compute": [
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors"
  ],
  "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.__init__": [
    "examples.miscellaneous.plot_display_object_visualization.$toplevel",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.from_predictions"
  ],
  "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.from_estimator": [
    "examples.applications.plot_face_recognition.$toplevel",
    "examples.model_selection.plot_confusion_matrix.$toplevel"
  ],
  "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.from_predictions": [
    "examples.classification.plot_digits_classification.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.from_estimator"
  ],
  "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.plot": [
    "examples.miscellaneous.plot_display_object_visualization.$toplevel",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.from_predictions"
  ],
  "sklearn.metrics._plot.det_curve.DetCurveDisplay.__init__": [
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.from_predictions"
  ],
  "sklearn.metrics._plot.det_curve.DetCurveDisplay.from_estimator": [
    "examples.model_selection.plot_det.$toplevel"
  ],
  "sklearn.metrics._plot.det_curve.DetCurveDisplay.from_predictions": [
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.from_estimator"
  ],
  "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot": [
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.from_predictions"
  ],
  "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.__init__": [
    "examples.miscellaneous.plot_display_object_visualization.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.from_predictions"
  ],
  "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.from_estimator": [
    "examples.model_selection.plot_precision_recall.$toplevel"
  ],
  "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.from_predictions": [
    "examples.model_selection.plot_precision_recall.$toplevel",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.from_estimator"
  ],
  "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.plot": [
    "examples.miscellaneous.plot_display_object_visualization.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.from_predictions"
  ],
  "sklearn.metrics._plot.regression.PredictionErrorDisplay.__init__": [
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_predictions"
  ],
  "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_estimator": [
    "examples.release_highlights.plot_release_highlights_1_2_0.$toplevel"
  ],
  "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_predictions": [
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.compose.plot_transformed_target.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.model_selection.plot_cv_predict.$toplevel",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_estimator"
  ],
  "sklearn.metrics._plot.regression.PredictionErrorDisplay.plot": [
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_predictions"
  ],
  "sklearn.metrics._plot.roc_curve.RocCurveDisplay.__init__": [
    "examples.miscellaneous.plot_display_object_visualization.$toplevel",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.from_predictions"
  ],
  "sklearn.metrics._plot.roc_curve.RocCurveDisplay.from_estimator": [
    "examples.ensemble.plot_feature_transformation.$toplevel",
    "examples.miscellaneous.plot_roc_curve_visualization_api.$toplevel",
    "examples.model_selection.plot_det.$toplevel",
    "examples.model_selection.plot_roc_crossval.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel"
  ],
  "sklearn.metrics._plot.roc_curve.RocCurveDisplay.from_predictions": [
    "examples.miscellaneous.plot_outlier_detection_bench.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.from_estimator"
  ],
  "sklearn.metrics._plot.roc_curve.RocCurveDisplay.plot": [
    "examples.miscellaneous.plot_display_object_visualization.$toplevel",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.from_predictions"
  ],
  "sklearn.metrics._scorer._BaseScorer.__init__": [
    "sklearn.metrics._scorer.make_scorer"
  ],
  "sklearn.metrics._scorer._BaseScorer._factory_args": [
    "Ovr{sklearn.metrics._scorer._BaseScorer._factory_args}"
  ],
  "sklearn.metrics._scorer._BaseScorer._get_pos_label": [
    "sklearn.metrics._scorer._ProbaScorer._score",
    "sklearn.metrics._scorer._ThresholdScorer._score"
  ],
  "sklearn.metrics._scorer._BaseScorer._warn_overlap": [
    "sklearn.metrics._scorer._BaseScorer.set_score_request",
    "sklearn.metrics._scorer._PredictScorer._score",
    "sklearn.metrics._scorer._ProbaScorer._score",
    "sklearn.metrics._scorer._ThresholdScorer._score"
  ],
  "sklearn.metrics._scorer._MultimetricScorer.__call__": [
    "sklearn.metrics._scorer._MultimetricScorer.__call__"
  ],
  "sklearn.metrics._scorer._MultimetricScorer.__init__": [
    "sklearn.inspection._permutation_importance.permutation_importance",
    "sklearn.model_selection._validation._score"
  ],
  "sklearn.metrics._scorer._MultimetricScorer._use_cache": [
    "sklearn.metrics._scorer._MultimetricScorer.__call__"
  ],
  "sklearn.metrics._scorer._PassthroughScorer.__init__": [
    "sklearn.metrics._scorer.check_scoring"
  ],
  "sklearn.metrics._scorer._ProbaScorer._factory_args": [
    "Ovr{sklearn.metrics._scorer._ProbaScorer._factory_args}"
  ],
  "sklearn.metrics._scorer._ThresholdScorer._factory_args": [
    "Ovr{sklearn.metrics._scorer._ThresholdScorer._factory_args}"
  ],
  "sklearn.mixture._base.BaseMixture.__init__": [
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture.__init__",
    "sklearn.mixture._gaussian_mixture.GaussianMixture.__init__"
  ],
  "sklearn.mixture._base.BaseMixture._check_parameters": [
    "Ovr{sklearn.mixture._base.BaseMixture._check_parameters}"
  ],
  "sklearn.mixture._base.BaseMixture._e_step": [
    "sklearn.mixture._base.BaseMixture.fit_predict"
  ],
  "sklearn.mixture._base.BaseMixture._estimate_log_prob": [
    "Ovr{sklearn.mixture._base.BaseMixture._estimate_log_prob}"
  ],
  "sklearn.mixture._base.BaseMixture._estimate_log_prob_resp": [
    "sklearn.mixture._base.BaseMixture._e_step",
    "sklearn.mixture._base.BaseMixture.predict_proba"
  ],
  "sklearn.mixture._base.BaseMixture._estimate_log_weights": [
    "Ovr{sklearn.mixture._base.BaseMixture._estimate_log_weights}"
  ],
  "sklearn.mixture._base.BaseMixture._estimate_weighted_log_prob": [
    "sklearn.mixture._base.BaseMixture._estimate_log_prob_resp",
    "sklearn.mixture._base.BaseMixture.predict",
    "sklearn.mixture._base.BaseMixture.score_samples"
  ],
  "sklearn.mixture._base.BaseMixture._get_parameters": [
    "Ovr{sklearn.mixture._base.BaseMixture._get_parameters}"
  ],
  "sklearn.mixture._base.BaseMixture._initialize": [
    "Ovr{sklearn.mixture._base.BaseMixture._initialize}"
  ],
  "sklearn.mixture._base.BaseMixture._initialize_parameters": [
    "sklearn.mixture._base.BaseMixture.fit_predict"
  ],
  "sklearn.mixture._base.BaseMixture._m_step": [
    "Ovr{sklearn.mixture._base.BaseMixture._m_step}"
  ],
  "sklearn.mixture._base.BaseMixture._print_verbose_msg_init_beg": [
    "sklearn.mixture._base.BaseMixture.fit_predict"
  ],
  "sklearn.mixture._base.BaseMixture._print_verbose_msg_init_end": [
    "sklearn.mixture._base.BaseMixture.fit_predict"
  ],
  "sklearn.mixture._base.BaseMixture._print_verbose_msg_iter_end": [
    "sklearn.mixture._base.BaseMixture.fit_predict"
  ],
  "sklearn.mixture._base.BaseMixture._set_parameters": [
    "Ovr{sklearn.mixture._base.BaseMixture._set_parameters}"
  ],
  "sklearn.mixture._base.BaseMixture.fit": [
    "examples.mixture.plot_concentration_prior.$toplevel",
    "examples.mixture.plot_gmm.$toplevel",
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.mixture.plot_gmm_init.$toplevel",
    "examples.mixture.plot_gmm_init.get_initial_means",
    "examples.mixture.plot_gmm_pdf.$toplevel",
    "examples.mixture.plot_gmm_sin.$toplevel"
  ],
  "sklearn.mixture._base.BaseMixture.fit_predict": [
    "examples.cluster.plot_kmeans_assumptions.$toplevel",
    "sklearn.mixture._base.BaseMixture.fit"
  ],
  "sklearn.mixture._base.BaseMixture.predict": [
    "examples.mixture.plot_gmm_covariances.$toplevel"
  ],
  "sklearn.mixture._base.BaseMixture.score": [
    "sklearn.mixture._gaussian_mixture.GaussianMixture.aic",
    "sklearn.mixture._gaussian_mixture.GaussianMixture.bic"
  ],
  "sklearn.mixture._base.BaseMixture.score_samples": [
    "examples.mixture.plot_gmm_pdf.$toplevel",
    "sklearn.mixture._base.BaseMixture.score"
  ],
  "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture.__init__": [
    "examples.mixture.plot_concentration_prior.$toplevel",
    "examples.mixture.plot_gmm.$toplevel",
    "examples.mixture.plot_gmm_sin.$toplevel"
  ],
  "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._check_means_parameters": [
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._check_parameters"
  ],
  "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._check_parameters": [
    "Ovr{sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._check_parameters}"
  ],
  "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._check_precision_parameters": [
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._check_parameters"
  ],
  "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._check_weights_parameters": [
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._check_parameters"
  ],
  "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._checkcovariance_prior_parameter": [
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._check_parameters"
  ],
  "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_log_prob": [
    "Ovr{sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_log_prob}"
  ],
  "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_log_weights": [
    "Ovr{sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_log_weights}"
  ],
  "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_means": [
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._initialize",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._m_step"
  ],
  "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_precisions": [
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._initialize",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._m_step"
  ],
  "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_weights": [
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._initialize",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._m_step"
  ],
  "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._get_parameters": [
    "Ovr{sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._get_parameters}"
  ],
  "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._initialize": [
    "Ovr{sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._initialize}"
  ],
  "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._m_step": [
    "Ovr{sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._m_step}"
  ],
  "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._set_parameters": [
    "Ovr{sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._set_parameters}"
  ],
  "sklearn.mixture._gaussian_mixture.GaussianMixture.__init__": [
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_kmeans_assumptions.$toplevel",
    "examples.mixture.plot_gmm.$toplevel",
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.mixture.plot_gmm_init.$toplevel",
    "examples.mixture.plot_gmm_init.get_initial_means",
    "examples.mixture.plot_gmm_pdf.$toplevel",
    "examples.mixture.plot_gmm_selection.$toplevel",
    "examples.mixture.plot_gmm_sin.$toplevel",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_clones"
  ],
  "sklearn.mixture._gaussian_mixture.GaussianMixture._check_parameters": [
    "Ovr{sklearn.mixture._gaussian_mixture.GaussianMixture._check_parameters}"
  ],
  "sklearn.mixture._gaussian_mixture.GaussianMixture._estimate_log_prob": [
    "Ovr{sklearn.mixture._gaussian_mixture.GaussianMixture._estimate_log_prob}"
  ],
  "sklearn.mixture._gaussian_mixture.GaussianMixture._estimate_log_weights": [
    "Ovr{sklearn.mixture._gaussian_mixture.GaussianMixture._estimate_log_weights}"
  ],
  "sklearn.mixture._gaussian_mixture.GaussianMixture._get_parameters": [
    "Ovr{sklearn.mixture._gaussian_mixture.GaussianMixture._get_parameters}"
  ],
  "sklearn.mixture._gaussian_mixture.GaussianMixture._initialize": [
    "Ovr{sklearn.mixture._gaussian_mixture.GaussianMixture._initialize}"
  ],
  "sklearn.mixture._gaussian_mixture.GaussianMixture._m_step": [
    "Ovr{sklearn.mixture._gaussian_mixture.GaussianMixture._m_step}"
  ],
  "sklearn.mixture._gaussian_mixture.GaussianMixture._n_parameters": [
    "sklearn.mixture._gaussian_mixture.GaussianMixture.aic",
    "sklearn.mixture._gaussian_mixture.GaussianMixture.bic"
  ],
  "sklearn.mixture._gaussian_mixture.GaussianMixture._set_parameters": [
    "Ovr{sklearn.mixture._gaussian_mixture.GaussianMixture._set_parameters}"
  ],
  "sklearn.model_selection._plot.LearningCurveDisplay.__init__": [
    "sklearn.model_selection._plot.LearningCurveDisplay.from_estimator"
  ],
  "sklearn.model_selection._plot.LearningCurveDisplay.from_estimator": [
    "examples.miscellaneous.plot_kernel_ridge_regression.$toplevel",
    "examples.model_selection.plot_learning_curve.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_2_0.$toplevel"
  ],
  "sklearn.model_selection._plot.LearningCurveDisplay.plot": [
    "sklearn.model_selection._plot.LearningCurveDisplay.from_estimator"
  ],
  "sklearn.model_selection._plot.ValidationCurveDisplay.__init__": [
    "sklearn.model_selection._plot.ValidationCurveDisplay.from_estimator"
  ],
  "sklearn.model_selection._plot.ValidationCurveDisplay.from_estimator": [
    "examples.model_selection.plot_validation_curve.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel"
  ],
  "sklearn.model_selection._plot.ValidationCurveDisplay.plot": [
    "sklearn.model_selection._plot.ValidationCurveDisplay.from_estimator"
  ],
  "sklearn.model_selection._plot._BaseCurveDisplay._plot_curve": [
    "sklearn.model_selection._plot.LearningCurveDisplay.plot",
    "sklearn.model_selection._plot.ValidationCurveDisplay.plot"
  ],
  "sklearn.model_selection._search.BaseSearchCV.__init__": [
    "sklearn.model_selection._search.GridSearchCV.__init__",
    "sklearn.model_selection._search.RandomizedSearchCV.__init__",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.__init__"
  ],
  "sklearn.model_selection._search.BaseSearchCV._check_refit_for_multimetric": [
    "sklearn.model_selection._search.BaseSearchCV.fit"
  ],
  "sklearn.model_selection._search.BaseSearchCV._format_results": [
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates"
  ],
  "sklearn.model_selection._search.BaseSearchCV._more_tags": [
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._more_tags"
  ],
  "sklearn.model_selection._search.BaseSearchCV._run_search": [
    "Ovr{sklearn.model_selection._search.BaseSearchCV._run_search}"
  ],
  "sklearn.model_selection._search.BaseSearchCV._select_best_index": [
    "sklearn.model_selection._search.BaseSearchCV.fit"
  ],
  "sklearn.model_selection._search.BaseSearchCV.decision_function": [
    "examples.preprocessing.plot_discretization_classification.$toplevel"
  ],
  "sklearn.model_selection._search.BaseSearchCV.fit": [
    "doc.tutorial.text_analytics.solutions.exercise_02_sentiment.$toplevel",
    "examples.applications.plot_face_recognition.$toplevel",
    "examples.compose.plot_column_transformer_mixed_types.$toplevel",
    "examples.compose.plot_compare_reduction.$toplevel",
    "examples.compose.plot_digits_pipe.$toplevel",
    "examples.compose.plot_feature_union.$toplevel",
    "examples.covariance.plot_covariance_estimation.$toplevel",
    "examples.decomposition.plot_pca_vs_fa_model_selection.shrunk_cov_score",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.exercises.plot_cv_diabetes.$toplevel",
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.miscellaneous.plot_kernel_ridge_regression.$toplevel",
    "examples.mixture.plot_gmm_selection.$toplevel",
    "examples.model_selection.plot_grid_search_digits.$toplevel",
    "examples.model_selection.plot_grid_search_refit_callable.$toplevel",
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel",
    "examples.model_selection.plot_multi_metric_evaluation.$toplevel",
    "examples.model_selection.plot_nested_cross_validation_iris.$toplevel",
    "examples.model_selection.plot_randomized_search.$toplevel",
    "examples.model_selection.plot_successive_halving_heatmap.$toplevel",
    "examples.neighbors.plot_caching_nearest_neighbors.$toplevel",
    "examples.neighbors.plot_digits_kde_sampling.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.svm.plot_rbf_parameters.$toplevel",
    "sklearn.linear_model._ridge._BaseRidgeCV.fit",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.fit"
  ],
  "sklearn.model_selection._search.BaseSearchCV.predict": [
    "doc.tutorial.text_analytics.solutions.exercise_02_sentiment.$toplevel",
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.miscellaneous.plot_kernel_ridge_regression.$toplevel",
    "examples.mixture.plot_gmm_selection.$toplevel",
    "examples.model_selection.plot_grid_search_digits.$toplevel"
  ],
  "sklearn.model_selection._search.BaseSearchCV.predict_proba": [
    "examples.preprocessing.plot_discretization_classification.$toplevel"
  ],
  "sklearn.model_selection._search.BaseSearchCV.score": [
    "examples.compose.plot_column_transformer_mixed_types.$toplevel",
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel"
  ],
  "sklearn.model_selection._search.GridSearchCV.__init__": [
    "asv_benchmarks.benchmarks.model_selection.GridSearchBenchmark.make_estimator",
    "doc.tutorial.text_analytics.solutions.exercise_02_sentiment.$toplevel",
    "examples.cluster.plot_feature_agglomeration_vs_univariate_selection.$toplevel",
    "examples.compose.plot_compare_reduction.$toplevel",
    "examples.compose.plot_digits_pipe.$toplevel",
    "examples.compose.plot_feature_union.$toplevel",
    "examples.covariance.plot_covariance_estimation.$toplevel",
    "examples.decomposition.plot_pca_vs_fa_model_selection.shrunk_cov_score",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.exercises.plot_cv_diabetes.$toplevel",
    "examples.miscellaneous.plot_kernel_ridge_regression.$toplevel",
    "examples.miscellaneous.plot_pipeline_display.$toplevel",
    "examples.mixture.plot_gmm_selection.$toplevel",
    "examples.model_selection.plot_grid_search_digits.$toplevel",
    "examples.model_selection.plot_grid_search_refit_callable.$toplevel",
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "examples.model_selection.plot_multi_metric_evaluation.$toplevel",
    "examples.model_selection.plot_nested_cross_validation_iris.$toplevel",
    "examples.model_selection.plot_randomized_search.$toplevel",
    "examples.model_selection.plot_successive_halving_heatmap.$toplevel",
    "examples.neighbors.plot_caching_nearest_neighbors.$toplevel",
    "examples.neighbors.plot_digits_kde_sampling.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.svm.plot_rbf_parameters.$toplevel",
    "sklearn.linear_model._ridge._BaseRidgeCV.fit"
  ],
  "sklearn.model_selection._search.GridSearchCV._run_search": [
    "Ovr{sklearn.model_selection._search.GridSearchCV._run_search}"
  ],
  "sklearn.model_selection._search.ParameterGrid.__getitem__": [
    "sklearn.model_selection._search.ParameterSampler.__iter__"
  ],
  "sklearn.model_selection._search.ParameterGrid.__init__": [
    "sklearn.model_selection._search.GridSearchCV._run_search",
    "sklearn.model_selection._search.ParameterSampler.__iter__",
    "sklearn.model_selection._search.ParameterSampler.__len__",
    "sklearn.model_selection._search_successive_halving.HalvingGridSearchCV._generate_candidate_params"
  ],
  "sklearn.model_selection._search.ParameterSampler.__init__": [
    "sklearn.model_selection._search.RandomizedSearchCV._run_search",
    "sklearn.model_selection._search_successive_halving.HalvingRandomSearchCV._generate_candidate_params"
  ],
  "sklearn.model_selection._search.ParameterSampler._is_all_lists": [
    "sklearn.model_selection._search.ParameterSampler.__iter__",
    "sklearn.model_selection._search.ParameterSampler.__len__"
  ],
  "sklearn.model_selection._search.RandomizedSearchCV.__init__": [
    "examples.applications.plot_face_recognition.$toplevel",
    "examples.compose.plot_column_transformer_mixed_types.$toplevel",
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel",
    "examples.model_selection.plot_randomized_search.$toplevel"
  ],
  "sklearn.model_selection._search.RandomizedSearchCV._run_search": [
    "Ovr{sklearn.model_selection._search.RandomizedSearchCV._run_search}"
  ],
  "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.__init__": [
    "sklearn.model_selection._search_successive_halving.HalvingGridSearchCV.__init__",
    "sklearn.model_selection._search_successive_halving.HalvingRandomSearchCV.__init__"
  ],
  "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._check_input_parameters": [
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.fit"
  ],
  "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._generate_candidate_params": [
    "Ovr{sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._generate_candidate_params}"
  ],
  "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search": [
    "Ovr{sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search}"
  ],
  "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.fit": [
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.model_selection.plot_successive_halving_heatmap.$toplevel",
    "examples.model_selection.plot_successive_halving_iterations.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel"
  ],
  "sklearn.model_selection._search_successive_halving.HalvingGridSearchCV.__init__": [
    "examples.model_selection.plot_successive_halving_heatmap.$toplevel"
  ],
  "sklearn.model_selection._search_successive_halving.HalvingGridSearchCV._generate_candidate_params": [
    "Ovr{sklearn.model_selection._search_successive_halving.HalvingGridSearchCV._generate_candidate_params}"
  ],
  "sklearn.model_selection._search_successive_halving.HalvingRandomSearchCV.__init__": [
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.model_selection.plot_successive_halving_iterations.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel"
  ],
  "sklearn.model_selection._search_successive_halving.HalvingRandomSearchCV._generate_candidate_params": [
    "Ovr{sklearn.model_selection._search_successive_halving.HalvingRandomSearchCV._generate_candidate_params}"
  ],
  "sklearn.model_selection._search_successive_halving._SubsampleMetaSplitter.__init__": [
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search"
  ],
  "sklearn.model_selection._split.BaseCrossValidator._iter_test_indices": [
    "Ovr{sklearn.model_selection._split.BaseCrossValidator._iter_test_indices}"
  ],
  "sklearn.model_selection._split.BaseCrossValidator._iter_test_masks": [
    "Ovr{sklearn.model_selection._split.BaseCrossValidator._iter_test_masks}"
  ],
  "sklearn.model_selection._split.BaseCrossValidator.split": [
    "sklearn.model_selection._split._BaseKFold.split"
  ],
  "sklearn.model_selection._split.BaseShuffleSplit.__init__": [
    "sklearn.model_selection._split.ShuffleSplit.__init__",
    "sklearn.model_selection._split.StratifiedShuffleSplit.__init__"
  ],
  "sklearn.model_selection._split.BaseShuffleSplit._iter_indices": [
    "Ovr{sklearn.model_selection._split.BaseShuffleSplit._iter_indices}"
  ],
  "sklearn.model_selection._split.BaseShuffleSplit.split": [
    "sklearn.linear_model._stochastic_gradient.BaseSGD._make_validation_split",
    "sklearn.model_selection._split.StratifiedShuffleSplit.split",
    "sklearn.model_selection._split.train_test_split",
    "sklearn.utils.estimator_checks.check_fit_idempotent"
  ],
  "sklearn.model_selection._split.GroupKFold._iter_test_indices": [
    "Ovr{sklearn.model_selection._split.GroupKFold._iter_test_indices}"
  ],
  "sklearn.model_selection._split.GroupShuffleSplit._iter_indices": [
    "Ovr{sklearn.model_selection._split.GroupShuffleSplit._iter_indices}"
  ],
  "sklearn.model_selection._split.GroupShuffleSplit.split": [
    "sklearn.linear_model._stochastic_gradient.BaseSGD._make_validation_split",
    "sklearn.model_selection._split.train_test_split",
    "sklearn.utils.estimator_checks.check_fit_idempotent"
  ],
  "sklearn.model_selection._split.KFold.__init__": [
    "examples.cluster.plot_feature_agglomeration_vs_univariate_selection.$toplevel",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_oob.cv_estimate",
    "examples.exercises.plot_cv_diabetes.$toplevel",
    "examples.model_selection.plot_cv_indices.$toplevel",
    "examples.model_selection.plot_nested_cross_validation_iris.$toplevel",
    "sklearn.model_selection._split.check_cv",
    "sklearn.model_selection.tests.common.OneTimeSplitter.__init__",
    "sklearn.preprocessing._target_encoder.TargetEncoder.fit_transform"
  ],
  "sklearn.model_selection._split.KFold._iter_test_indices": [
    "Ovr{sklearn.model_selection._split.KFold._iter_test_indices}"
  ],
  "sklearn.model_selection._split.LeaveOneGroupOut._iter_test_masks": [
    "Ovr{sklearn.model_selection._split.LeaveOneGroupOut._iter_test_masks}"
  ],
  "sklearn.model_selection._split.LeaveOneOut._iter_test_indices": [
    "Ovr{sklearn.model_selection._split.LeaveOneOut._iter_test_indices}"
  ],
  "sklearn.model_selection._split.LeavePGroupsOut._iter_test_masks": [
    "Ovr{sklearn.model_selection._split.LeavePGroupsOut._iter_test_masks}"
  ],
  "sklearn.model_selection._split.LeavePOut._iter_test_indices": [
    "Ovr{sklearn.model_selection._split.LeavePOut._iter_test_indices}"
  ],
  "sklearn.model_selection._split.PredefinedSplit._iter_test_masks": [
    "Ovr{sklearn.model_selection._split.PredefinedSplit._iter_test_masks}",
    "sklearn.model_selection._split.PredefinedSplit.split"
  ],
  "sklearn.model_selection._split.RepeatedKFold.__init__": [
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel"
  ],
  "sklearn.model_selection._split.RepeatedStratifiedKFold.__init__": [
    "examples.model_selection.plot_grid_search_stats.$toplevel"
  ],
  "sklearn.model_selection._split.ShuffleSplit.__init__": [
    "examples.model_selection.plot_learning_curve.$toplevel",
    "examples.svm.plot_svm_scale_c.$toplevel",
    "sklearn.linear_model._stochastic_gradient.BaseSGD._make_validation_split",
    "sklearn.model_selection._split.train_test_split",
    "sklearn.utils.estimator_checks.check_fit_idempotent"
  ],
  "sklearn.model_selection._split.ShuffleSplit._iter_indices": [
    "Ovr{sklearn.model_selection._split.ShuffleSplit._iter_indices}"
  ],
  "sklearn.model_selection._split.StratifiedGroupKFold._find_best_fold": [
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices"
  ],
  "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices": [
    "Ovr{sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices}"
  ],
  "sklearn.model_selection._split.StratifiedKFold.__init__": [
    "examples.feature_selection.plot_rfe_with_cross_validation.$toplevel",
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.model_selection.plot_permutation_tests_for_classification.$toplevel",
    "examples.model_selection.plot_roc_crossval.$toplevel",
    "examples.semi_supervised.plot_self_training_varying_threshold.$toplevel",
    "sklearn.model_selection._split.check_cv",
    "sklearn.preprocessing._target_encoder.TargetEncoder.fit_transform"
  ],
  "sklearn.model_selection._split.StratifiedKFold._iter_test_masks": [
    "Ovr{sklearn.model_selection._split.StratifiedKFold._iter_test_masks}"
  ],
  "sklearn.model_selection._split.StratifiedKFold._make_test_folds": [
    "sklearn.model_selection._split.StratifiedKFold._iter_test_masks"
  ],
  "sklearn.model_selection._split.StratifiedKFold.split": [
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.model_selection.plot_roc_crossval.$toplevel",
    "examples.semi_supervised.plot_self_training_varying_threshold.$toplevel",
    "sklearn.preprocessing._target_encoder.TargetEncoder.fit_transform"
  ],
  "sklearn.model_selection._split.StratifiedShuffleSplit.__init__": [
    "examples.svm.plot_rbf_parameters.$toplevel",
    "sklearn.linear_model._stochastic_gradient.BaseSGD._make_validation_split",
    "sklearn.model_selection._split.train_test_split"
  ],
  "sklearn.model_selection._split.StratifiedShuffleSplit._iter_indices": [
    "Ovr{sklearn.model_selection._split.StratifiedShuffleSplit._iter_indices}"
  ],
  "sklearn.model_selection._split.StratifiedShuffleSplit.split": [
    "sklearn.linear_model._stochastic_gradient.BaseSGD._make_validation_split",
    "sklearn.model_selection._split.train_test_split"
  ],
  "sklearn.model_selection._split.TimeSeriesSplit.__init__": [
    "examples.applications.plot_cyclical_feature_engineering.$toplevel"
  ],
  "sklearn.model_selection._split.TimeSeriesSplit.split": [
    "examples.applications.plot_cyclical_feature_engineering.$toplevel"
  ],
  "sklearn.model_selection._split._BaseKFold.__init__": [
    "sklearn.model_selection._split.KFold.__init__",
    "sklearn.model_selection._split.StratifiedKFold.__init__",
    "sklearn.model_selection._split.TimeSeriesSplit.__init__"
  ],
  "sklearn.model_selection._split._BaseKFold.split": [
    "examples.ensemble.plot_gradient_boosting_oob.cv_estimate",
    "examples.exercises.plot_cv_diabetes.$toplevel",
    "sklearn.model_selection._split.StratifiedKFold.split",
    "sklearn.model_selection.tests.common.OneTimeSplitter.__init__",
    "sklearn.preprocessing._target_encoder.TargetEncoder.fit_transform"
  ],
  "sklearn.model_selection._split._CVIterableWrapper.__init__": [
    "sklearn.model_selection._split.check_cv"
  ],
  "sklearn.model_selection._split._RepeatedSplits.__init__": [
    "sklearn.model_selection._split.RepeatedKFold.__init__",
    "sklearn.model_selection._split.RepeatedStratifiedKFold.__init__"
  ],
  "sklearn.model_selection._split._RepeatedSplits.split": [
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.model_selection.plot_grid_search_stats.$toplevel"
  ],
  "sklearn.multiclass.OneVsOneClassifier.__init__": [
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit"
  ],
  "sklearn.multiclass.OneVsOneClassifier.decision_function": [
    "sklearn.multiclass.OneVsOneClassifier.predict"
  ],
  "sklearn.multiclass.OneVsOneClassifier.n_classes_": [
    "sklearn.multiclass.OneVsOneClassifier.decision_function",
    "sklearn.multiclass.OneVsOneClassifier.partial_fit",
    "sklearn.multiclass.OneVsOneClassifier.predict"
  ],
  "sklearn.multiclass.OneVsRestClassifier.__init__": [
    "examples.miscellaneous.plot_multilabel.plot_subfigure",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.multioutput.plot_classifier_chain_yeast.$toplevel",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit"
  ],
  "sklearn.multiclass.OneVsRestClassifier.decision_function": [
    "examples.model_selection.plot_precision_recall.$toplevel"
  ],
  "sklearn.multiclass.OneVsRestClassifier.fit": [
    "examples.miscellaneous.plot_multilabel.plot_subfigure",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.multioutput.plot_classifier_chain_yeast.$toplevel"
  ],
  "sklearn.multiclass.OneVsRestClassifier.multilabel_": [
    "sklearn.multiclass.OneVsRestClassifier.predict_proba"
  ],
  "sklearn.multiclass.OneVsRestClassifier.n_classes_": [
    "sklearn.multiclass.OneVsRestClassifier.partial_fit"
  ],
  "sklearn.multiclass.OneVsRestClassifier.predict": [
    "examples.multioutput.plot_classifier_chain_yeast.$toplevel"
  ],
  "sklearn.multiclass._ConstantPredictor.fit": [
    "sklearn.multiclass._fit_binary"
  ],
  "sklearn.multioutput.ClassifierChain.fit": [
    "examples.multioutput.plot_classifier_chain_yeast.$toplevel"
  ],
  "sklearn.multioutput.MultiOutputRegressor.__init__": [
    "examples.ensemble.plot_random_forest_regression_multioutput.$toplevel"
  ],
  "sklearn.multioutput._BaseChain.__init__": [
    "examples.multioutput.plot_classifier_chain_yeast.$toplevel"
  ],
  "sklearn.multioutput._BaseChain._log_message": [
    "sklearn.multioutput._BaseChain.fit"
  ],
  "sklearn.multioutput._BaseChain.predict": [
    "examples.multioutput.plot_classifier_chain_yeast.$toplevel"
  ],
  "sklearn.multioutput._MultiOutputEstimator.fit": [
    "examples.ensemble.plot_random_forest_regression_multioutput.$toplevel"
  ],
  "sklearn.multioutput._MultiOutputEstimator.predict": [
    "examples.ensemble.plot_random_forest_regression_multioutput.$toplevel",
    "sklearn.multioutput.MultiOutputClassifier.score"
  ],
  "sklearn.naive_bayes.BernoulliNB.__init__": [
    "examples.ensemble.plot_random_forest_embedding.$toplevel"
  ],
  "sklearn.naive_bayes.BernoulliNB._check_X": [
    "Ovr{sklearn.naive_bayes.BernoulliNB._check_X}"
  ],
  "sklearn.naive_bayes.BernoulliNB._check_X_y": [
    "Ovr{sklearn.naive_bayes.BernoulliNB._check_X_y}"
  ],
  "sklearn.naive_bayes.BernoulliNB._count": [
    "Ovr{sklearn.naive_bayes.BernoulliNB._count}"
  ],
  "sklearn.naive_bayes.BernoulliNB._joint_log_likelihood": [
    "Ovr{sklearn.naive_bayes.BernoulliNB._joint_log_likelihood}"
  ],
  "sklearn.naive_bayes.BernoulliNB._update_feature_log_prob": [
    "Ovr{sklearn.naive_bayes.BernoulliNB._update_feature_log_prob}"
  ],
  "sklearn.naive_bayes.CategoricalNB._check_X": [
    "Ovr{sklearn.naive_bayes.CategoricalNB._check_X}"
  ],
  "sklearn.naive_bayes.CategoricalNB._check_X_y": [
    "Ovr{sklearn.naive_bayes.CategoricalNB._check_X_y}"
  ],
  "sklearn.naive_bayes.CategoricalNB._count": [
    "Ovr{sklearn.naive_bayes.CategoricalNB._count}"
  ],
  "sklearn.naive_bayes.CategoricalNB._init_counters": [
    "Ovr{sklearn.naive_bayes.CategoricalNB._init_counters}"
  ],
  "sklearn.naive_bayes.CategoricalNB._joint_log_likelihood": [
    "Ovr{sklearn.naive_bayes.CategoricalNB._joint_log_likelihood}"
  ],
  "sklearn.naive_bayes.CategoricalNB._update_feature_log_prob": [
    "Ovr{sklearn.naive_bayes.CategoricalNB._update_feature_log_prob}"
  ],
  "sklearn.naive_bayes.CategoricalNB._validate_n_categories": [
    "sklearn.naive_bayes.CategoricalNB._count"
  ],
  "sklearn.naive_bayes.ComplementNB.__init__": [
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel"
  ],
  "sklearn.naive_bayes.ComplementNB._count": [
    "Ovr{sklearn.naive_bayes.ComplementNB._count}"
  ],
  "sklearn.naive_bayes.ComplementNB._joint_log_likelihood": [
    "Ovr{sklearn.naive_bayes.ComplementNB._joint_log_likelihood}"
  ],
  "sklearn.naive_bayes.ComplementNB._update_feature_log_prob": [
    "Ovr{sklearn.naive_bayes.ComplementNB._update_feature_log_prob}"
  ],
  "sklearn.naive_bayes.GaussianNB.__init__": [
    "benchmarks.bench_covertype.$toplevel",
    "examples.calibration.plot_calibration.$toplevel",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.calibration.plot_compare_calibration.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.ensemble.plot_voting_probas.$toplevel",
    "examples.model_selection.plot_learning_curve.$toplevel"
  ],
  "sklearn.naive_bayes.GaussianNB._check_X": [
    "Ovr{sklearn.naive_bayes.GaussianNB._check_X}"
  ],
  "sklearn.naive_bayes.GaussianNB._joint_log_likelihood": [
    "Ovr{sklearn.naive_bayes.GaussianNB._joint_log_likelihood}"
  ],
  "sklearn.naive_bayes.GaussianNB._partial_fit": [
    "sklearn.naive_bayes.GaussianNB.fit",
    "sklearn.naive_bayes.GaussianNB.partial_fit"
  ],
  "sklearn.naive_bayes.GaussianNB._update_mean_variance": [
    "sklearn.naive_bayes.GaussianNB._partial_fit"
  ],
  "sklearn.naive_bayes.GaussianNB.fit": [
    "examples.calibration.plot_calibration.$toplevel"
  ],
  "sklearn.naive_bayes.MultinomialNB.__init__": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "examples.applications.plot_out_of_core_classification.$toplevel"
  ],
  "sklearn.naive_bayes.MultinomialNB._count": [
    "Ovr{sklearn.naive_bayes.MultinomialNB._count}"
  ],
  "sklearn.naive_bayes.MultinomialNB._joint_log_likelihood": [
    "Ovr{sklearn.naive_bayes.MultinomialNB._joint_log_likelihood}"
  ],
  "sklearn.naive_bayes.MultinomialNB._update_feature_log_prob": [
    "Ovr{sklearn.naive_bayes.MultinomialNB._update_feature_log_prob}"
  ],
  "sklearn.naive_bayes._BaseDiscreteNB.__init__": [
    "sklearn.naive_bayes.BernoulliNB.__init__",
    "sklearn.naive_bayes.CategoricalNB.__init__",
    "sklearn.naive_bayes.ComplementNB.__init__",
    "sklearn.naive_bayes.MultinomialNB.__init__"
  ],
  "sklearn.naive_bayes._BaseDiscreteNB._check_X": [
    "Ovr{sklearn.naive_bayes._BaseDiscreteNB._check_X}",
    "sklearn.naive_bayes.BernoulliNB._check_X"
  ],
  "sklearn.naive_bayes._BaseDiscreteNB._check_X_y": [
    "Ovr{sklearn.naive_bayes._BaseDiscreteNB._check_X_y}",
    "sklearn.naive_bayes.BernoulliNB._check_X_y"
  ],
  "sklearn.naive_bayes._BaseDiscreteNB._check_alpha": [
    "sklearn.naive_bayes._BaseDiscreteNB.fit",
    "sklearn.naive_bayes._BaseDiscreteNB.partial_fit"
  ],
  "sklearn.naive_bayes._BaseDiscreteNB._count": [
    "Ovr{sklearn.naive_bayes._BaseDiscreteNB._count}"
  ],
  "sklearn.naive_bayes._BaseDiscreteNB._init_counters": [
    "Ovr{sklearn.naive_bayes._BaseDiscreteNB._init_counters}"
  ],
  "sklearn.naive_bayes._BaseDiscreteNB._update_class_log_prior": [
    "sklearn.naive_bayes._BaseDiscreteNB.fit",
    "sklearn.naive_bayes._BaseDiscreteNB.partial_fit"
  ],
  "sklearn.naive_bayes._BaseDiscreteNB._update_feature_log_prob": [
    "Ovr{sklearn.naive_bayes._BaseDiscreteNB._update_feature_log_prob}"
  ],
  "sklearn.naive_bayes._BaseDiscreteNB.fit": [
    "examples.ensemble.plot_random_forest_embedding.$toplevel",
    "sklearn.naive_bayes.CategoricalNB.fit"
  ],
  "sklearn.naive_bayes._BaseDiscreteNB.partial_fit": [
    "sklearn.naive_bayes.CategoricalNB.partial_fit"
  ],
  "sklearn.naive_bayes._BaseNB._check_X": [
    "Ovr{sklearn.naive_bayes._BaseNB._check_X}"
  ],
  "sklearn.naive_bayes._BaseNB._joint_log_likelihood": [
    "Ovr{sklearn.naive_bayes._BaseNB._joint_log_likelihood}"
  ],
  "sklearn.naive_bayes._BaseNB.predict": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "examples.calibration.plot_calibration_curve.$toplevel"
  ],
  "sklearn.naive_bayes._BaseNB.predict_log_proba": [
    "sklearn.naive_bayes._BaseNB.predict_proba"
  ],
  "sklearn.naive_bayes._BaseNB.predict_proba": [
    "examples.calibration.plot_calibration.$toplevel",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.ensemble.plot_random_forest_embedding.$toplevel"
  ],
  "sklearn.neighbors._base.KNeighborsMixin._kneighbors_reduce_func": [
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors"
  ],
  "sklearn.neighbors._base.KNeighborsMixin.kneighbors": [
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "sklearn.cluster._mean_shift.estimate_bandwidth",
    "sklearn.feature_selection._mutual_info._compute_mi_cc",
    "sklearn.feature_selection._mutual_info._compute_mi_cd",
    "sklearn.manifold._locally_linear.locally_linear_embedding",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict_proba",
    "sklearn.neighbors._lof.LocalOutlierFactor.fit",
    "sklearn.neighbors._lof.LocalOutlierFactor.score_samples",
    "sklearn.neighbors._regression.KNeighborsRegressor.predict"
  ],
  "sklearn.neighbors._base.KNeighborsMixin.kneighbors_graph": [
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.neighbors._graph.KNeighborsTransformer.transform"
  ],
  "sklearn.neighbors._base.NeighborsBase._check_algorithm_metric": [
    "sklearn.neighbors._base.NeighborsBase._fit"
  ],
  "sklearn.neighbors._base.NeighborsBase._fit": [
    "sklearn.neighbors._classification.KNeighborsClassifier.fit",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.fit",
    "sklearn.neighbors._graph.KNeighborsTransformer.fit",
    "sklearn.neighbors._graph.RadiusNeighborsTransformer.fit",
    "sklearn.neighbors._lof.LocalOutlierFactor.fit",
    "sklearn.neighbors._regression.KNeighborsRegressor.fit",
    "sklearn.neighbors._regression.RadiusNeighborsRegressor.fit",
    "sklearn.neighbors._unsupervised.NearestNeighbors.fit"
  ],
  "sklearn.neighbors._base.RadiusNeighborsMixin._radius_neighbors_reduce_func": [
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors"
  ],
  "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors": [
    "sklearn.cluster._dbscan.DBSCAN.fit",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba",
    "sklearn.neighbors._regression.RadiusNeighborsRegressor.predict"
  ],
  "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors_graph": [
    "sklearn.neighbors._graph.RadiusNeighborsTransformer.transform"
  ],
  "sklearn.neighbors._classification.KNeighborsClassifier.__init__": [
    "asv_benchmarks.benchmarks.neighbors.KNeighborsClassifierBenchmark.make_estimator",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.ensemble.plot_voting_decision_regions.$toplevel",
    "examples.exercises.plot_digits_classification_exercise.$toplevel",
    "examples.neighbors.plot_caching_nearest_neighbors.$toplevel",
    "examples.neighbors.plot_classification.$toplevel",
    "examples.neighbors.plot_nca_classification.$toplevel",
    "examples.neighbors.plot_nca_dim_reduction.$toplevel",
    "examples.preprocessing.plot_scaling_importance.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel"
  ],
  "sklearn.neighbors._classification.KNeighborsClassifier.fit": [
    "examples.ensemble.plot_voting_decision_regions.$toplevel",
    "examples.exercises.plot_digits_classification_exercise.$toplevel",
    "examples.neighbors.plot_classification.$toplevel",
    "examples.neighbors.plot_nca_dim_reduction.$toplevel"
  ],
  "sklearn.neighbors._classification.KNeighborsClassifier.predict_proba": [
    "sklearn.neighbors._classification.KNeighborsClassifier.predict"
  ],
  "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba": [
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict"
  ],
  "sklearn.neighbors._graph.KNeighborsTransformer.__init__": [
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.neighbors.plot_caching_nearest_neighbors.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_isomap",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_kneighbors_regressor",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_lof_novelty_false",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_lof_novelty_true",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_spectral_clustering",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_spectral_embedding",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_tsne"
  ],
  "sklearn.neighbors._graph.KNeighborsTransformer.fit": [
    "sklearn.neighbors._graph.KNeighborsTransformer.fit_transform"
  ],
  "sklearn.neighbors._graph.RadiusNeighborsTransformer.__init__": [
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_dbscan",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_kneighbors_regressor"
  ],
  "sklearn.neighbors._graph.RadiusNeighborsTransformer.fit": [
    "sklearn.neighbors._graph.RadiusNeighborsTransformer.fit_transform"
  ],
  "sklearn.neighbors._kde.KernelDensity.__init__": [
    "examples.neighbors.plot_digits_kde_sampling.$toplevel",
    "examples.neighbors.plot_kde_1d.$toplevel",
    "examples.neighbors.plot_species_kde.$toplevel"
  ],
  "sklearn.neighbors._kde.KernelDensity._choose_algorithm": [
    "sklearn.neighbors._kde.KernelDensity.fit"
  ],
  "sklearn.neighbors._kde.KernelDensity.fit": [
    "examples.neighbors.plot_kde_1d.$toplevel",
    "examples.neighbors.plot_species_kde.$toplevel"
  ],
  "sklearn.neighbors._kde.KernelDensity.score_samples": [
    "examples.neighbors.plot_species_kde.$toplevel",
    "sklearn.neighbors._kde.KernelDensity.score"
  ],
  "sklearn.neighbors._lof.LocalOutlierFactor.__init__": [
    "benchmarks.bench_lof.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.compute_prediction",
    "examples.neighbors.plot_lof_novelty_detection.$toplevel",
    "examples.neighbors.plot_lof_outlier_detection.$toplevel",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_lof_novelty_false",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_lof_novelty_true"
  ],
  "sklearn.neighbors._lof.LocalOutlierFactor._local_reachability_density": [
    "sklearn.neighbors._lof.LocalOutlierFactor.fit",
    "sklearn.neighbors._lof.LocalOutlierFactor.score_samples"
  ],
  "sklearn.neighbors._lof.LocalOutlierFactor._predict": [
    "sklearn.neighbors._lof.LocalOutlierFactor.predict"
  ],
  "sklearn.neighbors._lof.LocalOutlierFactor.decision_function": [
    "examples.neighbors.plot_lof_novelty_detection.$toplevel",
    "sklearn.neighbors._lof.LocalOutlierFactor._predict"
  ],
  "sklearn.neighbors._lof.LocalOutlierFactor.fit": [
    "benchmarks.bench_lof.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.compute_prediction",
    "examples.neighbors.plot_lof_novelty_detection.$toplevel",
    "sklearn.neighbors._lof.LocalOutlierFactor.fit_predict",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_lof_novelty_true"
  ],
  "sklearn.neighbors._lof.LocalOutlierFactor.fit_predict": [
    "examples.neighbors.plot_lof_outlier_detection.$toplevel",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_lof_novelty_false"
  ],
  "sklearn.neighbors._lof.LocalOutlierFactor.predict": [
    "examples.neighbors.plot_lof_novelty_detection.$toplevel"
  ],
  "sklearn.neighbors._lof.LocalOutlierFactor.score_samples": [
    "sklearn.neighbors._lof.LocalOutlierFactor.decision_function"
  ],
  "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.__init__": [
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.neighbors.plot_nca_classification.$toplevel",
    "examples.neighbors.plot_nca_dim_reduction.$toplevel",
    "examples.neighbors.plot_nca_illustration.$toplevel"
  ],
  "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._initialize": [
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit"
  ],
  "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit": [
    "examples.neighbors.plot_nca_illustration.$toplevel"
  ],
  "sklearn.neighbors._nearest_centroid.NearestCentroid.__init__": [
    "examples.neighbors.plot_nearest_centroid.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel"
  ],
  "sklearn.neighbors._nearest_centroid.NearestCentroid.fit": [
    "examples.neighbors.plot_nearest_centroid.$toplevel"
  ],
  "sklearn.neighbors._nearest_centroid.NearestCentroid.predict": [
    "examples.neighbors.plot_nearest_centroid.$toplevel"
  ],
  "sklearn.neighbors._regression.KNeighborsRegressor.__init__": [
    "examples.impute.plot_iterative_imputer_variants_comparison.$toplevel",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "examples.neighbors.plot_regression.$toplevel",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_kneighbors_regressor",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_pairwise"
  ],
  "sklearn.neighbors._regression.KNeighborsRegressor.fit": [
    "examples.neighbors.plot_regression.$toplevel"
  ],
  "sklearn.neighbors._regression.KNeighborsRegressor.predict": [
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel"
  ],
  "sklearn.neighbors._regression.RadiusNeighborsRegressor.__init__": [
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_kneighbors_regressor"
  ],
  "sklearn.neighbors._unsupervised.NearestNeighbors.__init__": [
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_tsne_mnist.nn_accuracy",
    "sklearn.cluster._dbscan.DBSCAN.fit",
    "sklearn.cluster._hdbscan.hdbscan._hdbscan_prims",
    "sklearn.cluster._mean_shift.MeanShift.fit",
    "sklearn.cluster._mean_shift.estimate_bandwidth",
    "sklearn.cluster._optics.compute_optics_graph",
    "sklearn.cluster._spectral.SpectralClustering.fit",
    "sklearn.feature_selection._mutual_info._compute_mi_cc",
    "sklearn.feature_selection._mutual_info._compute_mi_cd",
    "sklearn.manifold._isomap.Isomap._fit_transform",
    "sklearn.manifold._locally_linear.LocallyLinearEmbedding._fit_transform",
    "sklearn.manifold._locally_linear.barycenter_kneighbors_graph",
    "sklearn.manifold._locally_linear.locally_linear_embedding",
    "sklearn.manifold._spectral_embedding.SpectralEmbedding._get_affinity_matrix",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.manifold._t_sne.trustworthiness",
    "sklearn.neighbors._graph.kneighbors_graph",
    "sklearn.neighbors._graph.radius_neighbors_graph",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation._get_kernel"
  ],
  "sklearn.neighbors._unsupervised.NearestNeighbors.fit": [
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_tsne_mnist.nn_accuracy",
    "sklearn.cluster._dbscan.DBSCAN.fit",
    "sklearn.cluster._hdbscan.hdbscan._hdbscan_prims",
    "sklearn.cluster._mean_shift.MeanShift.fit",
    "sklearn.cluster._mean_shift.estimate_bandwidth",
    "sklearn.cluster._optics.compute_optics_graph",
    "sklearn.cluster._spectral.SpectralClustering.fit",
    "sklearn.feature_selection._mutual_info._compute_mi_cc",
    "sklearn.feature_selection._mutual_info._compute_mi_cd",
    "sklearn.manifold._isomap.Isomap._fit_transform",
    "sklearn.manifold._locally_linear.LocallyLinearEmbedding._fit_transform",
    "sklearn.manifold._locally_linear.barycenter_kneighbors_graph",
    "sklearn.manifold._locally_linear.locally_linear_embedding",
    "sklearn.manifold._spectral_embedding.SpectralEmbedding._get_affinity_matrix",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.manifold._t_sne.trustworthiness",
    "sklearn.neighbors._graph.kneighbors_graph",
    "sklearn.neighbors._graph.radius_neighbors_graph",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation._get_kernel"
  ],
  "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._backprop": [
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._loss_grad_lbfgs"
  ],
  "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._compute_loss_grad": [
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._backprop"
  ],
  "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit": [
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron.fit",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier.partial_fit",
    "sklearn.neural_network._multilayer_perceptron.MLPRegressor.partial_fit"
  ],
  "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_lbfgs": [
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit"
  ],
  "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic": [
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit"
  ],
  "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._forward_pass": [
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._backprop"
  ],
  "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._forward_pass_fast": [
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier._predict",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier.predict_proba",
    "sklearn.neural_network._multilayer_perceptron.MLPRegressor._predict"
  ],
  "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._init_coef": [
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._initialize"
  ],
  "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._initialize": [
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit"
  ],
  "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._loss_grad_lbfgs": [
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_lbfgs"
  ],
  "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._unpack": [
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_lbfgs",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._loss_grad_lbfgs"
  ],
  "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._update_no_improvement_count": [
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic"
  ],
  "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron.fit": [
    "examples.neural_networks.plot_mlp_training_curves.plot_on_dataset",
    "examples.neural_networks.plot_mnist_filters.$toplevel"
  ],
  "sklearn.neural_network._multilayer_perceptron.MLPClassifier.__init__": [
    "benchmarks.bench_mnist.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.neural_networks.plot_mlp_alpha.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.plot_on_dataset",
    "examples.neural_networks.plot_mnist_filters.$toplevel"
  ],
  "sklearn.neural_network._multilayer_perceptron.MLPClassifier._predict": [
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier._score",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier.predict"
  ],
  "sklearn.neural_network._multilayer_perceptron.MLPClassifier.predict_proba": [
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier.predict_log_proba"
  ],
  "sklearn.neural_network._multilayer_perceptron.MLPRegressor.__init__": [
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.miscellaneous.plot_partial_dependence_visualization_api.$toplevel"
  ],
  "sklearn.neural_network._multilayer_perceptron.MLPRegressor._predict": [
    "sklearn.neural_network._multilayer_perceptron.MLPRegressor._score",
    "sklearn.neural_network._multilayer_perceptron.MLPRegressor.predict"
  ],
  "sklearn.neural_network._rbm.BernoulliRBM.__init__": [
    "examples.neural_networks.plot_rbm_logistic_classification.$toplevel"
  ],
  "sklearn.neural_network._rbm.BernoulliRBM._fit": [
    "sklearn.neural_network._rbm.BernoulliRBM.fit",
    "sklearn.neural_network._rbm.BernoulliRBM.partial_fit"
  ],
  "sklearn.neural_network._rbm.BernoulliRBM._free_energy": [
    "sklearn.neural_network._rbm.BernoulliRBM.score_samples"
  ],
  "sklearn.neural_network._rbm.BernoulliRBM._mean_hiddens": [
    "sklearn.neural_network._rbm.BernoulliRBM._fit",
    "sklearn.neural_network._rbm.BernoulliRBM._sample_hiddens",
    "sklearn.neural_network._rbm.BernoulliRBM.transform"
  ],
  "sklearn.neural_network._rbm.BernoulliRBM._sample_hiddens": [
    "sklearn.neural_network._rbm.BernoulliRBM.gibbs"
  ],
  "sklearn.neural_network._rbm.BernoulliRBM._sample_visibles": [
    "sklearn.neural_network._rbm.BernoulliRBM._fit",
    "sklearn.neural_network._rbm.BernoulliRBM.gibbs"
  ],
  "sklearn.neural_network._rbm.BernoulliRBM.score_samples": [
    "sklearn.neural_network._rbm.BernoulliRBM.fit"
  ],
  "sklearn.neural_network._stochastic_optimizers.AdamOptimizer.__init__": [
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_adam_optimizer"
  ],
  "sklearn.neural_network._stochastic_optimizers.BaseOptimizer.__init__": [
    "sklearn.neural_network._stochastic_optimizers.AdamOptimizer.__init__",
    "sklearn.neural_network._stochastic_optimizers.SGDOptimizer.__init__",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_base_optimizer"
  ],
  "sklearn.neural_network._stochastic_optimizers.BaseOptimizer.trigger_stopping": [
    "Ovr{sklearn.neural_network._stochastic_optimizers.BaseOptimizer.trigger_stopping}"
  ],
  "sklearn.neural_network._stochastic_optimizers.BaseOptimizer.update_params": [
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_adam_optimizer",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_nesterovs_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_no_momentum"
  ],
  "sklearn.neural_network._stochastic_optimizers.SGDOptimizer.__init__": [
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_nesterovs_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_no_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_trigger_stopping"
  ],
  "sklearn.neural_network._stochastic_optimizers.SGDOptimizer.trigger_stopping": [
    "Ovr{sklearn.neural_network._stochastic_optimizers.SGDOptimizer.trigger_stopping}",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_trigger_stopping"
  ],
  "sklearn.pipeline.FeatureUnion.__init__": [
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.compose.plot_feature_union.$toplevel",
    "sklearn.pipeline.make_union"
  ],
  "sklearn.pipeline.FeatureUnion._hstack": [
    "sklearn.pipeline.FeatureUnion.fit_transform",
    "sklearn.pipeline.FeatureUnion.transform"
  ],
  "sklearn.pipeline.FeatureUnion._iter": [
    "sklearn.pipeline.FeatureUnion.__sklearn_is_fitted__",
    "sklearn.pipeline.FeatureUnion._parallel_func",
    "sklearn.pipeline.FeatureUnion.get_feature_names_out",
    "sklearn.pipeline.FeatureUnion.set_output",
    "sklearn.pipeline.FeatureUnion.transform"
  ],
  "sklearn.pipeline.FeatureUnion._log_message": [
    "sklearn.pipeline.FeatureUnion._parallel_func"
  ],
  "sklearn.pipeline.FeatureUnion._parallel_func": [
    "sklearn.pipeline.FeatureUnion.fit",
    "sklearn.pipeline.FeatureUnion.fit_transform"
  ],
  "sklearn.pipeline.FeatureUnion._update_transformer_list": [
    "sklearn.pipeline.FeatureUnion.fit",
    "sklearn.pipeline.FeatureUnion.fit_transform"
  ],
  "sklearn.pipeline.FeatureUnion._validate_transformer_weights": [
    "sklearn.pipeline.FeatureUnion._parallel_func"
  ],
  "sklearn.pipeline.FeatureUnion._validate_transformers": [
    "sklearn.pipeline.FeatureUnion._parallel_func"
  ],
  "sklearn.pipeline.FeatureUnion.fit": [
    "examples.compose.plot_feature_union.$toplevel"
  ],
  "sklearn.pipeline.FeatureUnion.get_params": [
    "Ovr{sklearn.pipeline.FeatureUnion.get_params}",
    "sklearn.utils.metaestimators._BaseComposition._validate_names"
  ],
  "sklearn.pipeline.FeatureUnion.named_transformers": [
    "sklearn.pipeline.FeatureUnion.__getitem__"
  ],
  "sklearn.pipeline.Pipeline.__getitem__": [
    "examples.inspection.plot_permutation_importance.$toplevel"
  ],
  "sklearn.pipeline.Pipeline.__init__": [
    "benchmarks.bench_plot_polynomial_kernel_approximation.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_01_language_train_model.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_02_sentiment.$toplevel",
    "examples.cluster.plot_feature_agglomeration_vs_univariate_selection.$toplevel",
    "examples.compose.plot_column_transformer.$toplevel",
    "examples.compose.plot_column_transformer_mixed_types.$toplevel",
    "examples.compose.plot_compare_reduction.$toplevel",
    "examples.compose.plot_digits_pipe.$toplevel",
    "examples.compose.plot_feature_union.$toplevel",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.miscellaneous.plot_pipeline_display.$toplevel",
    "examples.model_selection.plot_grid_search_refit_callable.$toplevel",
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel",
    "examples.model_selection.plot_underfitting_overfitting.$toplevel",
    "examples.neighbors.plot_caching_nearest_neighbors.$toplevel",
    "examples.neighbors.plot_nca_classification.$toplevel",
    "examples.neural_networks.plot_rbm_logistic_classification.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "examples.svm.plot_svm_anova.$toplevel",
    "sklearn.pipeline.Pipeline.__getitem__",
    "sklearn.pipeline.make_pipeline"
  ],
  "sklearn.pipeline.Pipeline._check_fit_params": [
    "sklearn.pipeline.Pipeline.fit",
    "sklearn.pipeline.Pipeline.fit_predict",
    "sklearn.pipeline.Pipeline.fit_transform"
  ],
  "sklearn.pipeline.Pipeline._final_estimator": [
    "sklearn.pipeline.Pipeline._can_fit_transform",
    "sklearn.pipeline.Pipeline._can_transform",
    "sklearn.pipeline.Pipeline.fit",
    "sklearn.pipeline.Pipeline.fit_transform"
  ],
  "sklearn.pipeline.Pipeline._fit": [
    "sklearn.pipeline.Pipeline.fit",
    "sklearn.pipeline.Pipeline.fit_predict",
    "sklearn.pipeline.Pipeline.fit_transform"
  ],
  "sklearn.pipeline.Pipeline._iter": [
    "sklearn.pipeline.Pipeline._can_inverse_transform",
    "sklearn.pipeline.Pipeline._fit",
    "sklearn.pipeline.Pipeline.decision_function",
    "sklearn.pipeline.Pipeline.get_feature_names_out",
    "sklearn.pipeline.Pipeline.inverse_transform",
    "sklearn.pipeline.Pipeline.predict",
    "sklearn.pipeline.Pipeline.predict_log_proba",
    "sklearn.pipeline.Pipeline.predict_proba",
    "sklearn.pipeline.Pipeline.score",
    "sklearn.pipeline.Pipeline.score_samples",
    "sklearn.pipeline.Pipeline.set_output",
    "sklearn.pipeline.Pipeline.transform"
  ],
  "sklearn.pipeline.Pipeline._log_message": [
    "sklearn.pipeline.Pipeline._fit",
    "sklearn.pipeline.Pipeline.fit",
    "sklearn.pipeline.Pipeline.fit_predict",
    "sklearn.pipeline.Pipeline.fit_transform"
  ],
  "sklearn.pipeline.Pipeline._validate_steps": [
    "sklearn.pipeline.Pipeline._fit"
  ],
  "sklearn.pipeline.Pipeline.fit": [
    "benchmarks.bench_plot_polynomial_kernel_approximation.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_01_language_train_model.$toplevel",
    "examples.cluster.plot_feature_agglomeration_vs_univariate_selection.$toplevel",
    "examples.compose.plot_column_transformer.$toplevel",
    "examples.compose.plot_column_transformer_mixed_types.$toplevel",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.model_selection.plot_underfitting_overfitting.$toplevel",
    "examples.neighbors.plot_nca_classification.$toplevel",
    "examples.neural_networks.plot_rbm_logistic_classification.$toplevel"
  ],
  "sklearn.pipeline.Pipeline.get_params": [
    "Ovr{sklearn.pipeline.Pipeline.get_params}",
    "sklearn.utils.metaestimators._BaseComposition._validate_names"
  ],
  "sklearn.pipeline.Pipeline.named_steps": [
    "sklearn.pipeline.Pipeline.__getitem__"
  ],
  "sklearn.pipeline.Pipeline.predict": [
    "doc.tutorial.text_analytics.solutions.exercise_01_language_train_model.$toplevel",
    "examples.compose.plot_column_transformer.$toplevel",
    "examples.model_selection.plot_underfitting_overfitting.$toplevel",
    "examples.neural_networks.plot_rbm_logistic_classification.$toplevel"
  ],
  "sklearn.pipeline.Pipeline.score": [
    "examples.compose.plot_column_transformer_mixed_types.$toplevel",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.neighbors.plot_nca_classification.$toplevel"
  ],
  "sklearn.pipeline.Pipeline.set_params": [
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.svm.plot_svm_anova.$toplevel"
  ],
  "sklearn.preprocessing._data.KernelCenterer.__init__": [
    "sklearn.decomposition._kernel_pca.KernelPCA.fit",
    "sklearn.manifold._isomap.Isomap.reconstruction_error"
  ],
  "sklearn.preprocessing._data.MaxAbsScaler.__init__": [
    "asv_benchmarks.benchmarks.datasets._digits_dataset",
    "asv_benchmarks.benchmarks.datasets._mnist_dataset",
    "examples.preprocessing.plot_all_scaling.$toplevel",
    "sklearn.preprocessing._data.maxabs_scale"
  ],
  "sklearn.preprocessing._data.MaxAbsScaler._reset": [
    "sklearn.preprocessing._data.MaxAbsScaler.fit"
  ],
  "sklearn.preprocessing._data.MaxAbsScaler.partial_fit": [
    "sklearn.preprocessing._data.MaxAbsScaler.fit"
  ],
  "sklearn.preprocessing._data.MinMaxScaler.__init__": [
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.applications.plot_digits_denoising.$toplevel",
    "examples.compose.plot_compare_reduction.$toplevel",
    "examples.feature_selection.plot_feature_selection.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.manifold.plot_lle_digits.plot_embedding",
    "examples.neural_networks.plot_mlp_training_curves.plot_on_dataset",
    "examples.preprocessing.plot_all_scaling.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel",
    "sklearn.preprocessing._data.minmax_scale"
  ],
  "sklearn.preprocessing._data.MinMaxScaler._reset": [
    "sklearn.preprocessing._data.MinMaxScaler.fit"
  ],
  "sklearn.preprocessing._data.MinMaxScaler.partial_fit": [
    "sklearn.preprocessing._data.MinMaxScaler.fit"
  ],
  "sklearn.preprocessing._data.Normalizer.__init__": [
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.preprocessing.plot_all_scaling.$toplevel",
    "examples.text.plot_document_clustering.$toplevel"
  ],
  "sklearn.preprocessing._data.PowerTransformer.__init__": [
    "examples.preprocessing.plot_all_scaling.$toplevel",
    "examples.preprocessing.plot_map_data_to_normal.$toplevel",
    "sklearn.preprocessing._data.power_transform"
  ],
  "sklearn.preprocessing._data.PowerTransformer._check_input": [
    "sklearn.preprocessing._data.PowerTransformer._fit",
    "sklearn.preprocessing._data.PowerTransformer.inverse_transform",
    "sklearn.preprocessing._data.PowerTransformer.transform"
  ],
  "sklearn.preprocessing._data.PowerTransformer._fit": [
    "sklearn.preprocessing._data.PowerTransformer.fit",
    "sklearn.preprocessing._data.PowerTransformer.fit_transform"
  ],
  "sklearn.preprocessing._data.PowerTransformer._yeo_johnson_transform": [
    "sklearn.preprocessing._data.PowerTransformer._yeo_johnson_optimize._neg_log_likelihood"
  ],
  "sklearn.preprocessing._data.PowerTransformer.fit": [
    "examples.preprocessing.plot_map_data_to_normal.$toplevel"
  ],
  "sklearn.preprocessing._data.PowerTransformer.fit_transform": [
    "examples.preprocessing.plot_all_scaling.$toplevel",
    "sklearn.preprocessing._data.power_transform"
  ],
  "sklearn.preprocessing._data.QuantileTransformer.__init__": [
    "examples.compose.plot_transformed_target.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.preprocessing.plot_all_scaling.$toplevel",
    "examples.preprocessing.plot_map_data_to_normal.$toplevel",
    "sklearn.preprocessing._data.quantile_transform"
  ],
  "sklearn.preprocessing._data.QuantileTransformer._check_inputs": [
    "sklearn.preprocessing._data.QuantileTransformer.fit",
    "sklearn.preprocessing._data.QuantileTransformer.inverse_transform",
    "sklearn.preprocessing._data.QuantileTransformer.transform"
  ],
  "sklearn.preprocessing._data.QuantileTransformer._dense_fit": [
    "sklearn.preprocessing._data.QuantileTransformer.fit"
  ],
  "sklearn.preprocessing._data.QuantileTransformer._sparse_fit": [
    "sklearn.preprocessing._data.QuantileTransformer.fit"
  ],
  "sklearn.preprocessing._data.QuantileTransformer._transform": [
    "sklearn.preprocessing._data.QuantileTransformer.inverse_transform",
    "sklearn.preprocessing._data.QuantileTransformer.transform"
  ],
  "sklearn.preprocessing._data.QuantileTransformer._transform_col": [
    "sklearn.preprocessing._data.QuantileTransformer._transform"
  ],
  "sklearn.preprocessing._data.QuantileTransformer.fit": [
    "examples.preprocessing.plot_map_data_to_normal.$toplevel"
  ],
  "sklearn.preprocessing._data.RobustScaler.__init__": [
    "examples.preprocessing.plot_all_scaling.$toplevel",
    "sklearn.preprocessing._data.robust_scale"
  ],
  "sklearn.preprocessing._data.StandardScaler.__init__": [
    "asv_benchmarks.benchmarks.datasets._synth_classification_dataset",
    "asv_benchmarks.benchmarks.datasets._synth_regression_dataset",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "examples.applications.plot_face_recognition.$toplevel",
    "examples.applications.plot_prediction_latency.generate_dataset",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.cluster.plot_kmeans_digits.bench_k_means",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.compose.plot_column_transformer_mixed_types.$toplevel",
    "examples.compose.plot_digits_pipe.$toplevel",
    "examples.cross_decomposition.plot_pcr_vs_pls.$toplevel",
    "examples.decomposition.plot_varimax_fa.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.linear_model.plot_ard.$toplevel",
    "examples.linear_model.plot_lasso_lars_ic.$toplevel",
    "examples.linear_model.plot_lasso_model_selection.$toplevel",
    "examples.linear_model.plot_logistic_l1_l2_sparsity.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_mnist.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.miscellaneous.plot_display_object_visualization.$toplevel",
    "examples.miscellaneous.plot_estimator_representation.$toplevel",
    "examples.miscellaneous.plot_partial_dependence_visualization_api.$toplevel",
    "examples.miscellaneous.plot_pipeline_display.$toplevel",
    "examples.miscellaneous.plot_set_output.$toplevel",
    "examples.model_selection.plot_det.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.neighbors.plot_nca_classification.$toplevel",
    "examples.neighbors.plot_nca_dim_reduction.$toplevel",
    "examples.neural_networks.plot_mlp_alpha.$toplevel",
    "examples.preprocessing.plot_all_scaling.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_scaling_importance.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_0_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_2_0.$toplevel",
    "examples.svm.plot_rbf_parameters.$toplevel",
    "examples.svm.plot_svm_anova.$toplevel",
    "sklearn.discriminant_analysis._cov",
    "sklearn.preprocessing._data.PowerTransformer._fit",
    "sklearn.utils.estimator_checks._regression_dataset",
    "sklearn.utils.estimator_checks.check_classifiers_classes",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.estimator_checks.check_clustering",
    "sklearn.utils.estimator_checks.check_transformer_data_not_an_array",
    "sklearn.utils.estimator_checks.check_transformer_general",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out_pandas",
    "sklearn.utils.estimator_checks.check_transformer_preserve_dtypes"
  ],
  "sklearn.preprocessing._data.StandardScaler._reset": [
    "sklearn.preprocessing._data.StandardScaler.fit"
  ],
  "sklearn.preprocessing._data.StandardScaler.fit": [
    "examples.miscellaneous.plot_set_output.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_0_0.$toplevel"
  ],
  "sklearn.preprocessing._data.StandardScaler.partial_fit": [
    "sklearn.preprocessing._data.StandardScaler.fit"
  ],
  "sklearn.preprocessing._data.StandardScaler.transform": [
    "examples.applications.plot_face_recognition.$toplevel",
    "examples.applications.plot_prediction_latency.generate_dataset",
    "examples.linear_model.plot_sparse_logistic_regression_mnist.$toplevel",
    "examples.miscellaneous.plot_set_output.$toplevel"
  ],
  "sklearn.preprocessing._discretization.KBinsDiscretizer.__init__": [
    "benchmarks.bench_hist_gradient_boosting_categorical_only.$toplevel",
    "examples.cluster.plot_face_compress.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.preprocessing.plot_discretization.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_discretization_strategies.$toplevel",
    "examples.preprocessing.plot_target_encoder_cross_val.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_2_0.$toplevel"
  ],
  "sklearn.preprocessing._discretization.KBinsDiscretizer._validate_n_bins": [
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit"
  ],
  "sklearn.preprocessing._discretization.KBinsDiscretizer.fit": [
    "examples.preprocessing.plot_discretization_strategies.$toplevel"
  ],
  "sklearn.preprocessing._discretization.KBinsDiscretizer.transform": [
    "examples.preprocessing.plot_discretization.$toplevel",
    "examples.preprocessing.plot_discretization_strategies.$toplevel"
  ],
  "sklearn.preprocessing._encoders.OneHotEncoder.__init__": [
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.compose.plot_column_transformer_mixed_types.$toplevel",
    "examples.ensemble.plot_feature_transformation.$toplevel",
    "examples.ensemble.plot_gradient_boosting_categorical.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.miscellaneous.plot_estimator_representation.$toplevel",
    "examples.miscellaneous.plot_pipeline_display.$toplevel",
    "examples.miscellaneous.plot_set_output.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_0_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "sklearn.ensemble._forest.RandomTreesEmbedding.fit_transform",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit"
  ],
  "sklearn.preprocessing._encoders.OneHotEncoder._check_get_feature_name_combiner": [
    "sklearn.preprocessing._encoders.OneHotEncoder.get_feature_names_out"
  ],
  "sklearn.preprocessing._encoders.OneHotEncoder._compute_n_features_outs": [
    "sklearn.preprocessing._encoders.OneHotEncoder.fit"
  ],
  "sklearn.preprocessing._encoders.OneHotEncoder._compute_transformed_categories": [
    "sklearn.preprocessing._encoders.OneHotEncoder.get_feature_names_out",
    "sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform"
  ],
  "sklearn.preprocessing._encoders.OneHotEncoder._map_drop_idx_to_infrequent": [
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx"
  ],
  "sklearn.preprocessing._encoders.OneHotEncoder._remove_dropped_categories": [
    "sklearn.preprocessing._encoders.OneHotEncoder._compute_transformed_categories",
    "sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform"
  ],
  "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx": [
    "sklearn.preprocessing._encoders.OneHotEncoder.fit"
  ],
  "sklearn.preprocessing._encoders.OneHotEncoder.fit": [
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit"
  ],
  "sklearn.preprocessing._encoders.OrdinalEncoder.__init__": [
    "benchmarks.bench_hist_gradient_boosting_adult.$toplevel",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.ensemble.plot_gradient_boosting_categorical.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_2_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel"
  ],
  "sklearn.preprocessing._encoders.OrdinalEncoder.fit": [
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel"
  ],
  "sklearn.preprocessing._encoders._BaseEncoder._check_X": [
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.preprocessing._encoders._BaseEncoder._transform"
  ],
  "sklearn.preprocessing._encoders._BaseEncoder._check_infrequent_enabled": [
    "sklearn.preprocessing._encoders._BaseEncoder._fit"
  ],
  "sklearn.preprocessing._encoders._BaseEncoder._fit": [
    "sklearn.preprocessing._encoders.OneHotEncoder.fit",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.preprocessing._target_encoder.TargetEncoder._fit_encodings_all"
  ],
  "sklearn.preprocessing._encoders._BaseEncoder._fit_infrequent_category_mapping": [
    "sklearn.preprocessing._encoders._BaseEncoder._fit"
  ],
  "sklearn.preprocessing._encoders._BaseEncoder._identify_infrequent": [
    "sklearn.preprocessing._encoders._BaseEncoder._fit_infrequent_category_mapping"
  ],
  "sklearn.preprocessing._encoders._BaseEncoder._map_infrequent_categories": [
    "sklearn.preprocessing._encoders._BaseEncoder._transform"
  ],
  "sklearn.preprocessing._encoders._BaseEncoder._transform": [
    "sklearn.preprocessing._encoders.OneHotEncoder.transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.transform",
    "sklearn.preprocessing._target_encoder.TargetEncoder._fit_encodings_all",
    "sklearn.preprocessing._target_encoder.TargetEncoder.transform"
  ],
  "sklearn.preprocessing._encoders._BaseEncoder.infrequent_categories_": [
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit"
  ],
  "sklearn.preprocessing._function_transformer.FunctionTransformer.__init__": [
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.applications.plot_cyclical_feature_engineering.cos_transformer",
    "examples.applications.plot_cyclical_feature_engineering.sin_transformer",
    "examples.compose.plot_column_transformer.$toplevel",
    "examples.ensemble.plot_feature_transformation.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "sklearn.compose._column_transformer.ColumnTransformer._iter",
    "sklearn.compose._target.TransformedTargetRegressor._fit_transformer",
    "sklearn.pipeline.FeatureUnion._iter"
  ],
  "sklearn.preprocessing._function_transformer.FunctionTransformer._check_input": [
    "sklearn.preprocessing._function_transformer.FunctionTransformer.fit",
    "sklearn.preprocessing._function_transformer.FunctionTransformer.transform"
  ],
  "sklearn.preprocessing._function_transformer.FunctionTransformer._check_inverse_transform": [
    "sklearn.preprocessing._function_transformer.FunctionTransformer.fit"
  ],
  "sklearn.preprocessing._function_transformer.FunctionTransformer._transform": [
    "sklearn.preprocessing._function_transformer.FunctionTransformer.inverse_transform",
    "sklearn.preprocessing._function_transformer.FunctionTransformer.transform"
  ],
  "sklearn.preprocessing._function_transformer.FunctionTransformer.inverse_transform": [
    "sklearn.preprocessing._function_transformer.FunctionTransformer._check_inverse_transform"
  ],
  "sklearn.preprocessing._function_transformer.FunctionTransformer.set_output": [
    "sklearn.compose._column_transformer.ColumnTransformer._iter"
  ],
  "sklearn.preprocessing._function_transformer.FunctionTransformer.transform": [
    "sklearn.preprocessing._function_transformer.FunctionTransformer._check_inverse_transform"
  ],
  "sklearn.preprocessing._label.LabelBinarizer.__init__": [
    "benchmarks.bench_isolation_forest.$toplevel",
    "benchmarks.bench_lof.$toplevel",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_saga.exp",
    "examples.miscellaneous.plot_outlier_detection_bench.preprocess_dataset",
    "examples.model_selection.plot_roc.$toplevel",
    "sklearn.feature_selection._univariate_selection.chi2",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._ridge._RidgeClassifierMixin._prepare_data",
    "sklearn.metrics._classification.hinge_loss",
    "sklearn.metrics._classification.log_loss",
    "sklearn.multiclass.OneVsRestClassifier.fit",
    "sklearn.multiclass.OneVsRestClassifier.partial_fit",
    "sklearn.naive_bayes._BaseDiscreteNB.fit",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier._validate_input",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier.partial_fit",
    "sklearn.svm._bounds.l1_min_c"
  ],
  "sklearn.preprocessing._label.LabelBinarizer.fit": [
    "benchmarks.bench_saga.exp",
    "examples.model_selection.plot_roc.$toplevel",
    "sklearn.metrics._classification.log_loss",
    "sklearn.multiclass.OneVsRestClassifier.partial_fit",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier._validate_input",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier.partial_fit",
    "sklearn.preprocessing._label.LabelBinarizer.fit_transform"
  ],
  "sklearn.preprocessing._label.LabelBinarizer.fit_transform": [
    "benchmarks.bench_isolation_forest.$toplevel",
    "benchmarks.bench_lof.$toplevel",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.preprocess_dataset",
    "sklearn.feature_selection._univariate_selection.chi2",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._ridge._RidgeClassifierMixin._prepare_data",
    "sklearn.metrics._classification.hinge_loss",
    "sklearn.multiclass.OneVsRestClassifier.fit",
    "sklearn.naive_bayes._BaseDiscreteNB.fit",
    "sklearn.svm._bounds.l1_min_c"
  ],
  "sklearn.preprocessing._label.LabelBinarizer.inverse_transform": [
    "benchmarks.bench_saga.exp"
  ],
  "sklearn.preprocessing._label.LabelBinarizer.transform": [
    "sklearn.metrics._classification.log_loss"
  ],
  "sklearn.preprocessing._label.LabelEncoder.fit": [
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.calibration._CalibratedClassifier.predict_proba",
    "sklearn.calibration._fit_calibrator",
    "sklearn.ensemble._stacking.StackingClassifier.fit",
    "sklearn.ensemble._voting.VotingClassifier.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.metrics._classification.hinge_loss",
    "sklearn.metrics._classification.matthews_corrcoef",
    "sklearn.metrics._classification.multilabel_confusion_matrix",
    "sklearn.utils.tests.test_estimator_checks.BadBalancedWeightsClassifier.fit"
  ],
  "sklearn.preprocessing._label.LabelEncoder.fit_transform": [
    "benchmarks.bench_saga.exp",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier._encode_y",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.metrics.cluster._unsupervised.calinski_harabasz_score",
    "sklearn.metrics.cluster._unsupervised.davies_bouldin_score",
    "sklearn.metrics.cluster._unsupervised.silhouette_samples",
    "sklearn.model_selection._validation.cross_val_predict",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.fit",
    "sklearn.preprocessing._target_encoder.TargetEncoder._fit_encodings_all",
    "sklearn.svm._base._fit_liblinear",
    "sklearn.utils.class_weight.compute_class_weight"
  ],
  "sklearn.preprocessing._label.LabelEncoder.transform": [
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.from_estimator",
    "sklearn.metrics._classification.hinge_loss",
    "sklearn.metrics._classification.matthews_corrcoef",
    "sklearn.metrics._classification.multilabel_confusion_matrix",
    "sklearn.utils.class_weight.compute_class_weight"
  ],
  "sklearn.preprocessing._label.MultiLabelBinarizer.__init__": [
    "sklearn.datasets._samples_generator.make_multilabel_classification"
  ],
  "sklearn.preprocessing._label.MultiLabelBinarizer._build_cache": [
    "sklearn.preprocessing._label.MultiLabelBinarizer.transform"
  ],
  "sklearn.preprocessing._label.MultiLabelBinarizer._transform": [
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit_transform",
    "sklearn.preprocessing._label.MultiLabelBinarizer.transform"
  ],
  "sklearn.preprocessing._label.MultiLabelBinarizer.fit": [
    "sklearn.datasets._samples_generator.make_multilabel_classification",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit_transform"
  ],
  "sklearn.preprocessing._polynomial.PolynomialFeatures.__init__": [
    "benchmarks.bench_feature_expansions.$toplevel",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.linear_model.plot_ard.$toplevel",
    "examples.linear_model.plot_polynomial_interpolation.$toplevel",
    "examples.linear_model.plot_robust_fit.$toplevel",
    "examples.miscellaneous.plot_pipeline_display.$toplevel",
    "examples.model_selection.plot_underfitting_overfitting.$toplevel"
  ],
  "sklearn.preprocessing._polynomial.PolynomialFeatures._combinations": [
    "sklearn.preprocessing._polynomial.PolynomialFeatures.powers_",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform"
  ],
  "sklearn.preprocessing._polynomial.PolynomialFeatures._num_combinations": [
    "sklearn.preprocessing._polynomial.PolynomialFeatures.fit"
  ],
  "sklearn.preprocessing._polynomial.PolynomialFeatures.fit": [
    "examples.linear_model.plot_polynomial_interpolation.$toplevel"
  ],
  "sklearn.preprocessing._polynomial.PolynomialFeatures.powers_": [
    "sklearn.preprocessing._polynomial.PolynomialFeatures.get_feature_names_out"
  ],
  "sklearn.preprocessing._polynomial.PolynomialFeatures.transform": [
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform"
  ],
  "sklearn.preprocessing._polynomial.SplineTransformer.__init__": [
    "examples.applications.plot_cyclical_feature_engineering.periodic_spline_transformer",
    "examples.linear_model.plot_polynomial_interpolation.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_0_0.$toplevel"
  ],
  "sklearn.preprocessing._polynomial.SplineTransformer._get_base_knot_positions": [
    "sklearn.preprocessing._polynomial.SplineTransformer.fit"
  ],
  "sklearn.preprocessing._polynomial.SplineTransformer.fit": [
    "examples.linear_model.plot_polynomial_interpolation.$toplevel"
  ],
  "sklearn.preprocessing._target_encoder.TargetEncoder.__init__": [
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.preprocessing.plot_target_encoder_cross_val.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel"
  ],
  "sklearn.preprocessing._target_encoder.TargetEncoder._fit_encodings_all": [
    "sklearn.preprocessing._target_encoder.TargetEncoder.fit",
    "sklearn.preprocessing._target_encoder.TargetEncoder.fit_transform"
  ],
  "sklearn.preprocessing._target_encoder.TargetEncoder._transform_X_ordinal": [
    "sklearn.preprocessing._target_encoder.TargetEncoder.fit_transform",
    "sklearn.preprocessing._target_encoder.TargetEncoder.transform"
  ],
  "sklearn.preprocessing._target_encoder.TargetEncoder.fit": [
    "examples.preprocessing.plot_target_encoder_cross_val.$toplevel"
  ],
  "sklearn.preprocessing._target_encoder.TargetEncoder.fit_transform": [
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel"
  ],
  "sklearn.preprocessing._target_encoder.TargetEncoder.transform": [
    "examples.preprocessing.plot_target_encoder_cross_val.$toplevel"
  ],
  "sklearn.random_projection.BaseRandomProjection.__init__": [
    "sklearn.random_projection.GaussianRandomProjection.__init__",
    "sklearn.random_projection.SparseRandomProjection.__init__"
  ],
  "sklearn.random_projection.BaseRandomProjection._compute_inverse_components": [
    "sklearn.random_projection.BaseRandomProjection.fit",
    "sklearn.random_projection.BaseRandomProjection.inverse_transform"
  ],
  "sklearn.random_projection.BaseRandomProjection._make_random_matrix": [
    "Ovr{sklearn.random_projection.BaseRandomProjection._make_random_matrix}"
  ],
  "sklearn.random_projection.GaussianRandomProjection.__init__": [
    "benchmarks.bench_random_projections.$toplevel"
  ],
  "sklearn.random_projection.GaussianRandomProjection._make_random_matrix": [
    "Ovr{sklearn.random_projection.GaussianRandomProjection._make_random_matrix}"
  ],
  "sklearn.random_projection.SparseRandomProjection.__init__": [
    "benchmarks.bench_random_projections.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.miscellaneous.plot_johnson_lindenstrauss_bound.$toplevel"
  ],
  "sklearn.random_projection.SparseRandomProjection._make_random_matrix": [
    "Ovr{sklearn.random_projection.SparseRandomProjection._make_random_matrix}"
  ],
  "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.__init__": [
    "sklearn.semi_supervised._label_propagation.LabelPropagation.__init__",
    "sklearn.semi_supervised._label_propagation.LabelSpreading.__init__"
  ],
  "sklearn.semi_supervised._label_propagation.BaseLabelPropagation._build_graph": [
    "Ovr{sklearn.semi_supervised._label_propagation.BaseLabelPropagation._build_graph}"
  ],
  "sklearn.semi_supervised._label_propagation.BaseLabelPropagation._get_kernel": [
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.predict_proba",
    "sklearn.semi_supervised._label_propagation.LabelPropagation._build_graph",
    "sklearn.semi_supervised._label_propagation.LabelSpreading._build_graph"
  ],
  "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.fit": [
    "examples.semi_supervised.plot_label_propagation_digits.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel",
    "examples.semi_supervised.plot_label_propagation_structure.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_versus_svm_iris.$toplevel",
    "sklearn.semi_supervised._label_propagation.LabelPropagation.fit"
  ],
  "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.predict_proba": [
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.predict"
  ],
  "sklearn.semi_supervised._label_propagation.LabelPropagation._build_graph": [
    "Ovr{sklearn.semi_supervised._label_propagation.LabelPropagation._build_graph}"
  ],
  "sklearn.semi_supervised._label_propagation.LabelSpreading.__init__": [
    "examples.semi_supervised.plot_label_propagation_digits.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel",
    "examples.semi_supervised.plot_label_propagation_structure.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_versus_svm_iris.$toplevel"
  ],
  "sklearn.semi_supervised._label_propagation.LabelSpreading._build_graph": [
    "Ovr{sklearn.semi_supervised._label_propagation.LabelSpreading._build_graph}"
  ],
  "sklearn.semi_supervised._self_training.SelfTrainingClassifier.__init__": [
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel",
    "examples.semi_supervised.plot_self_training_varying_threshold.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_versus_svm_iris.$toplevel"
  ],
  "sklearn.semi_supervised._self_training.SelfTrainingClassifier.fit": [
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel",
    "examples.semi_supervised.plot_self_training_varying_threshold.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_versus_svm_iris.$toplevel"
  ],
  "sklearn.semi_supervised._self_training.SelfTrainingClassifier.predict": [
    "examples.semi_supervised.plot_self_training_varying_threshold.$toplevel"
  ],
  "sklearn.svm._base.BaseLibSVM._compute_kernel": [
    "sklearn.svm._base.BaseLibSVM._decision_function",
    "sklearn.svm._base.BaseLibSVM._dense_fit",
    "sklearn.svm._base.BaseLibSVM._dense_predict",
    "sklearn.svm._base.BaseSVC._dense_predict_proba"
  ],
  "sklearn.svm._base.BaseLibSVM._decision_function": [
    "sklearn.svm._base.BaseSVC.decision_function",
    "sklearn.svm._classes.OneClassSVM.decision_function"
  ],
  "sklearn.svm._base.BaseLibSVM._dense_decision_function": [
    "sklearn.svm._base.BaseLibSVM._decision_function"
  ],
  "sklearn.svm._base.BaseLibSVM._dense_fit": [
    "sklearn.svm._base.BaseLibSVM.fit"
  ],
  "sklearn.svm._base.BaseLibSVM._dense_predict": [
    "sklearn.svm._base.BaseLibSVM.predict"
  ],
  "sklearn.svm._base.BaseLibSVM._get_coef": [
    "Ovr{sklearn.svm._base.BaseLibSVM._get_coef}"
  ],
  "sklearn.svm._base.BaseLibSVM._sparse_decision_function": [
    "sklearn.svm._base.BaseLibSVM._decision_function"
  ],
  "sklearn.svm._base.BaseLibSVM._sparse_fit": [
    "sklearn.svm._base.BaseLibSVM.fit"
  ],
  "sklearn.svm._base.BaseLibSVM._sparse_predict": [
    "sklearn.svm._base.BaseLibSVM.predict"
  ],
  "sklearn.svm._base.BaseLibSVM._validate_for_predict": [
    "sklearn.svm._base.BaseLibSVM._decision_function",
    "sklearn.svm._base.BaseLibSVM.predict",
    "sklearn.svm._base.BaseSVC.predict_proba"
  ],
  "sklearn.svm._base.BaseLibSVM._validate_targets": [
    "Ovr{sklearn.svm._base.BaseLibSVM._validate_targets}"
  ],
  "sklearn.svm._base.BaseLibSVM._warn_from_fit_status": [
    "sklearn.svm._base.BaseLibSVM._dense_fit",
    "sklearn.svm._base.BaseLibSVM._sparse_fit"
  ],
  "sklearn.svm._base.BaseLibSVM.coef_": [
    "examples.svm.plot_svm_margin.$toplevel"
  ],
  "sklearn.svm._base.BaseLibSVM.fit": [
    "benchmarks.bench_plot_polynomial_kernel_approximation.$toplevel",
    "examples.applications.svm_gui.Controller.fit",
    "examples.classification.plot_digits_classification.$toplevel",
    "examples.ensemble.plot_voting_decision_regions.$toplevel",
    "examples.exercises.plot_iris_exercise.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.miscellaneous.plot_roc_curve_visualization_api.$toplevel",
    "examples.model_selection.plot_confusion_matrix.$toplevel",
    "examples.model_selection.plot_roc_crossval.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_versus_svm_iris.$toplevel",
    "examples.svm.plot_custom_kernel.$toplevel",
    "examples.svm.plot_rbf_parameters.$toplevel",
    "examples.svm.plot_separating_hyperplane.$toplevel",
    "examples.svm.plot_separating_hyperplane_unbalanced.$toplevel",
    "examples.svm.plot_svm_kernels.$toplevel",
    "examples.svm.plot_svm_margin.$toplevel",
    "examples.svm.plot_svm_nonlinear.$toplevel",
    "examples.svm.plot_svm_regression.$toplevel",
    "examples.svm.plot_svm_tie_breaking.$toplevel",
    "examples.svm.plot_weighted_samples.$toplevel"
  ],
  "sklearn.svm._base.BaseLibSVM.n_support_": [
    "sklearn.svm._base.BaseLibSVM._validate_for_predict"
  ],
  "sklearn.svm._base.BaseLibSVM.predict": [
    "examples.miscellaneous.plot_kernel_ridge_regression.$toplevel"
  ],
  "sklearn.svm._base.BaseSVC.__init__": [
    "sklearn.svm._classes.NuSVC.__init__",
    "sklearn.svm._classes.SVC.__init__"
  ],
  "sklearn.svm._base.BaseSVC._class_weight": [
    "sklearn.svm._base.BaseSVC._sparse_predict_proba"
  ],
  "sklearn.svm._base.BaseSVC._dense_predict_proba": [
    "sklearn.svm._base.BaseSVC.predict_proba"
  ],
  "sklearn.svm._base.BaseSVC._get_coef": [
    "Ovr{sklearn.svm._base.BaseSVC._get_coef}"
  ],
  "sklearn.svm._base.BaseSVC._sparse_predict_proba": [
    "sklearn.svm._base.BaseSVC.predict_proba"
  ],
  "sklearn.svm._base.BaseSVC._validate_targets": [
    "Ovr{sklearn.svm._base.BaseSVC._validate_targets}"
  ],
  "sklearn.svm._base.BaseSVC.decision_function": [
    "examples.exercises.plot_iris_exercise.$toplevel",
    "examples.svm.plot_svm_kernels.$toplevel",
    "examples.svm.plot_svm_margin.$toplevel",
    "examples.svm.plot_svm_nonlinear.$toplevel",
    "sklearn.svm._base.BaseSVC.predict"
  ],
  "sklearn.svm._base.BaseSVC.predict": [
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.classification.plot_digits_classification.$toplevel"
  ],
  "sklearn.svm._base.BaseSVC.predict_proba": [
    "sklearn.svm._base.BaseSVC.predict_log_proba"
  ],
  "sklearn.svm._base.BaseSVC.probA_": [
    "sklearn.svm._base.BaseSVC.predict_proba"
  ],
  "sklearn.svm._base.BaseSVC.probB_": [
    "sklearn.svm._base.BaseSVC.predict_proba"
  ],
  "sklearn.svm._classes.LinearSVC.__init__": [
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_plot_polynomial_kernel_approximation.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_02_sentiment.$toplevel",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.calibration.plot_compare_calibration.$toplevel",
    "examples.compose.plot_column_transformer.$toplevel",
    "examples.compose.plot_compare_reduction.$toplevel",
    "examples.feature_selection.plot_feature_selection.$toplevel",
    "examples.feature_selection.plot_feature_selection_pipeline.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.model_selection.plot_det.$toplevel",
    "examples.model_selection.plot_grid_search_refit_callable.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "examples.svm.plot_iris_svc.$toplevel",
    "examples.svm.plot_linearsvc_support_vectors.$toplevel",
    "examples.svm.plot_svm_scale_c.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "sklearn.calibration.CalibratedClassifierCV._get_estimator"
  ],
  "sklearn.svm._classes.LinearSVC.fit": [
    "benchmarks.bench_plot_polynomial_kernel_approximation.$toplevel",
    "examples.calibration.plot_calibration_curve.NaivelyCalibratedLinearSVC.fit",
    "examples.calibration.plot_compare_calibration.NaivelyCalibratedLinearSVC.fit",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.svm.plot_linearsvc_support_vectors.$toplevel"
  ],
  "sklearn.svm._classes.NuSVC.__init__": [
    "examples.svm.plot_svm_nonlinear.$toplevel",
    "sklearn.utils.tests.test_estimator_checks.test_xfail_ignored_in_check_estimator"
  ],
  "sklearn.svm._classes.OneClassSVM.__init__": [
    "benchmarks.bench_online_ocsvm.$toplevel",
    "examples.applications.plot_outlier_detection_wine.$toplevel",
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution",
    "examples.applications.svm_gui.Controller.fit",
    "examples.linear_model.plot_sgdocsvm_vs_ocsvm.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.svm.plot_oneclass.$toplevel"
  ],
  "sklearn.svm._classes.OneClassSVM.decision_function": [
    "examples.applications.plot_outlier_detection_wine.$toplevel",
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution",
    "examples.linear_model.plot_sgdocsvm_vs_ocsvm.$toplevel",
    "examples.svm.plot_oneclass.$toplevel",
    "sklearn.svm._classes.OneClassSVM.score_samples"
  ],
  "sklearn.svm._classes.OneClassSVM.fit": [
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution",
    "examples.applications.svm_gui.Controller.fit",
    "examples.linear_model.plot_sgdocsvm_vs_ocsvm.$toplevel",
    "examples.svm.plot_oneclass.$toplevel"
  ],
  "sklearn.svm._classes.OneClassSVM.predict": [
    "examples.linear_model.plot_sgdocsvm_vs_ocsvm.$toplevel",
    "examples.svm.plot_oneclass.$toplevel"
  ],
  "sklearn.svm._classes.SVC.__init__": [
    "asv_benchmarks.benchmarks.svm.SVCBenchmark.make_estimator",
    "benchmarks.bench_plot_polynomial_kernel_approximation.$toplevel",
    "examples.applications.plot_face_recognition.$toplevel",
    "examples.applications.svm_gui.Controller.fit",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.classification.plot_digits_classification.$toplevel",
    "examples.compose.plot_feature_union.$toplevel",
    "examples.ensemble.plot_voting_decision_regions.$toplevel",
    "examples.exercises.plot_cv_digits.$toplevel",
    "examples.exercises.plot_iris_exercise.$toplevel",
    "examples.feature_selection.plot_rfe_digits.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.miscellaneous.plot_multilabel.plot_subfigure",
    "examples.miscellaneous.plot_pipeline_display.$toplevel",
    "examples.miscellaneous.plot_roc_curve_visualization_api.$toplevel",
    "examples.model_selection.plot_confusion_matrix.$toplevel",
    "examples.model_selection.plot_grid_search_digits.$toplevel",
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "examples.model_selection.plot_learning_curve.$toplevel",
    "examples.model_selection.plot_nested_cross_validation_iris.$toplevel",
    "examples.model_selection.plot_permutation_tests_for_classification.$toplevel",
    "examples.model_selection.plot_roc_crossval.$toplevel",
    "examples.model_selection.plot_successive_halving_heatmap.$toplevel",
    "examples.model_selection.plot_validation_curve.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel",
    "examples.semi_supervised.plot_self_training_varying_threshold.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_versus_svm_iris.$toplevel",
    "examples.svm.plot_custom_kernel.$toplevel",
    "examples.svm.plot_iris_svc.$toplevel",
    "examples.svm.plot_rbf_parameters.$toplevel",
    "examples.svm.plot_separating_hyperplane.$toplevel",
    "examples.svm.plot_separating_hyperplane_unbalanced.$toplevel",
    "examples.svm.plot_svm_anova.$toplevel",
    "examples.svm.plot_svm_kernels.$toplevel",
    "examples.svm.plot_svm_margin.$toplevel",
    "examples.svm.plot_svm_tie_breaking.$toplevel",
    "examples.svm.plot_weighted_samples.$toplevel",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_pairwise"
  ],
  "sklearn.svm._classes.SVR.__init__": [
    "examples.applications.plot_prediction_latency.$toplevel",
    "examples.miscellaneous.plot_kernel_ridge_regression.$toplevel",
    "examples.svm.plot_svm_regression.$toplevel"
  ],
  "sklearn.tree._classes.BaseDecisionTree._compute_missing_values_in_feature_mask": [
    "sklearn.tree._classes.BaseDecisionTree._fit"
  ],
  "sklearn.tree._classes.BaseDecisionTree._prune_tree": [
    "sklearn.tree._classes.BaseDecisionTree._fit"
  ],
  "sklearn.tree._classes.BaseDecisionTree._support_missing_values": [
    "sklearn.tree._classes.BaseDecisionTree._compute_missing_values_in_feature_mask",
    "sklearn.tree._classes.BaseDecisionTree._validate_X_predict"
  ],
  "sklearn.tree._classes.BaseDecisionTree._validate_X_predict": [
    "sklearn.tree._classes.BaseDecisionTree.apply",
    "sklearn.tree._classes.BaseDecisionTree.decision_path",
    "sklearn.tree._classes.BaseDecisionTree.predict",
    "sklearn.tree._classes.DecisionTreeClassifier.predict_proba"
  ],
  "sklearn.tree._classes.BaseDecisionTree.apply": [
    "examples.tree.plot_unveil_tree_structure.$toplevel"
  ],
  "sklearn.tree._classes.BaseDecisionTree.cost_complexity_pruning_path": [
    "examples.tree.plot_cost_complexity_pruning.$toplevel"
  ],
  "sklearn.tree._classes.BaseDecisionTree.decision_path": [
    "examples.tree.plot_unveil_tree_structure.$toplevel"
  ],
  "sklearn.tree._classes.BaseDecisionTree.predict": [
    "benchmarks.bench_covertype.$toplevel",
    "examples.ensemble.plot_adaboost_regression.$toplevel",
    "examples.ensemble.plot_bias_variance.$toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.tree.plot_tree_regression.$toplevel",
    "examples.tree.plot_tree_regression_multioutput.$toplevel"
  ],
  "sklearn.tree._classes.DecisionTreeClassifier.__init__": [
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_tree.bench_scikit_tree_classifier",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.ensemble.plot_adaboost_hastie_10_2.$toplevel",
    "examples.ensemble.plot_adaboost_multiclass.$toplevel",
    "examples.ensemble.plot_adaboost_twoclass.$toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.ensemble.plot_voting_decision_regions.$toplevel",
    "examples.model_selection.plot_multi_metric_evaluation.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel",
    "examples.tree.plot_cost_complexity_pruning.$toplevel",
    "examples.tree.plot_iris_dtc.$toplevel",
    "examples.tree.plot_unveil_tree_structure.$toplevel",
    "sklearn.ensemble._bagging.BaggingClassifier._more_tags",
    "sklearn.ensemble._bagging.BaggingClassifier._validate_estimator",
    "sklearn.ensemble._forest.RandomForestClassifier.__init__",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._validate_estimator",
    "sklearn.tree._classes.ExtraTreeClassifier.__init__"
  ],
  "sklearn.tree._classes.DecisionTreeClassifier.fit": [
    "benchmarks.bench_tree.bench_scikit_tree_classifier",
    "examples.ensemble.plot_adaboost_hastie_10_2.$toplevel",
    "examples.ensemble.plot_voting_decision_regions.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_3_0.$toplevel",
    "examples.tree.plot_cost_complexity_pruning.$toplevel",
    "examples.tree.plot_iris_dtc.$toplevel",
    "examples.tree.plot_unveil_tree_structure.$toplevel"
  ],
  "sklearn.tree._classes.DecisionTreeClassifier.predict_proba": [
    "sklearn.tree._classes.DecisionTreeClassifier.predict_log_proba"
  ],
  "sklearn.tree._classes.DecisionTreeRegressor.__init__": [
    "benchmarks.bench_tree.bench_scikit_tree_regressor",
    "examples.ensemble.plot_adaboost_regression.$toplevel",
    "examples.ensemble.plot_bias_variance.$toplevel",
    "examples.miscellaneous.plot_partial_dependence_visualization_api.$toplevel",
    "examples.preprocessing.plot_discretization.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel",
    "examples.tree.plot_tree_regression.$toplevel",
    "examples.tree.plot_tree_regression_multioutput.$toplevel",
    "sklearn.ensemble._bagging.BaggingRegressor._more_tags",
    "sklearn.ensemble._bagging.BaggingRegressor._validate_estimator",
    "sklearn.ensemble._forest.RandomForestRegressor.__init__",
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stage",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor._validate_estimator",
    "sklearn.tree._classes.ExtraTreeRegressor.__init__"
  ],
  "sklearn.tree._classes.DecisionTreeRegressor.fit": [
    "benchmarks.bench_tree.bench_scikit_tree_regressor",
    "examples.ensemble.plot_adaboost_regression.$toplevel",
    "examples.miscellaneous.plot_partial_dependence_visualization_api.$toplevel",
    "examples.preprocessing.plot_discretization.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel",
    "examples.tree.plot_tree_regression.$toplevel",
    "examples.tree.plot_tree_regression_multioutput.$toplevel",
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stage"
  ],
  "sklearn.tree._classes.ExtraTreeClassifier.__init__": [
    "sklearn.ensemble._forest.ExtraTreesClassifier.__init__"
  ],
  "sklearn.tree._classes.ExtraTreeRegressor.__init__": [
    "sklearn.ensemble._forest.ExtraTreesRegressor.__init__",
    "sklearn.ensemble._forest.RandomTreesEmbedding.__init__",
    "sklearn.ensemble._iforest.IsolationForest.__init__"
  ],
  "sklearn.tree._export._BaseTreeExporter.__init__": [
    "sklearn.tree._export._DOTTreeExporter.__init__",
    "sklearn.tree._export._MPLTreeExporter.__init__"
  ],
  "sklearn.tree._export._BaseTreeExporter.get_color": [
    "sklearn.tree._export._BaseTreeExporter.get_fill_color"
  ],
  "sklearn.tree._export._BaseTreeExporter.get_fill_color": [
    "sklearn.tree._export._DOTTreeExporter.recurse",
    "sklearn.tree._export._MPLTreeExporter.recurse"
  ],
  "sklearn.tree._export._BaseTreeExporter.node_to_str": [
    "sklearn.tree._export._DOTTreeExporter.recurse",
    "sklearn.tree._export._MPLTreeExporter._make_tree"
  ],
  "sklearn.tree._export._DOTTreeExporter.__init__": [
    "sklearn.tree._export.export_graphviz"
  ],
  "sklearn.tree._export._DOTTreeExporter.export": [
    "sklearn.tree._export.export_graphviz"
  ],
  "sklearn.tree._export._DOTTreeExporter.head": [
    "sklearn.tree._export._DOTTreeExporter.export"
  ],
  "sklearn.tree._export._DOTTreeExporter.recurse": [
    "sklearn.tree._export._DOTTreeExporter.export",
    "sklearn.tree._export._DOTTreeExporter.recurse"
  ],
  "sklearn.tree._export._DOTTreeExporter.tail": [
    "sklearn.tree._export._DOTTreeExporter.export"
  ],
  "sklearn.tree._export._MPLTreeExporter.__init__": [
    "sklearn.tree._export.plot_tree"
  ],
  "sklearn.tree._export._MPLTreeExporter._make_tree": [
    "sklearn.tree._export._MPLTreeExporter._make_tree",
    "sklearn.tree._export._MPLTreeExporter.export"
  ],
  "sklearn.tree._export._MPLTreeExporter.export": [
    "sklearn.tree._export.plot_tree"
  ],
  "sklearn.tree._export._MPLTreeExporter.recurse": [
    "sklearn.tree._export._MPLTreeExporter.export",
    "sklearn.tree._export._MPLTreeExporter.recurse"
  ],
  "sklearn.tree._reingold_tilford.DrawTree.__init__": [
    "sklearn.tree._reingold_tilford.DrawTree.__init__",
    "sklearn.tree._reingold_tilford.buchheim"
  ],
  "sklearn.tree._reingold_tilford.DrawTree.__str__": [
    "sklearn.tree._reingold_tilford.DrawTree.__repr__"
  ],
  "sklearn.tree._reingold_tilford.DrawTree.get_lmost_sibling": [
    "sklearn.tree._reingold_tilford.DrawTree.$class_toplevel"
  ],
  "sklearn.tree._reingold_tilford.Tree.__init__": [
    "sklearn.tree._export._MPLTreeExporter._make_tree"
  ],
  "sklearn.utils._array_api._ArrayAPIWrapper.__init__": [
    "sklearn.utils._array_api.get_namespace"
  ],
  "sklearn.utils._available_if._AvailableIfDescriptor.__init__": [
    "sklearn.utils._available_if.available_if"
  ],
  "sklearn.utils._bunch.Bunch.__getitem__": [
    "Ovr{sklearn.utils._bunch.Bunch.__getitem__}",
    "sklearn.utils._bunch.Bunch.__getattr__",
    "sklearn.utils._metadata_requests.MetadataRouter._route_params",
    "sklearn.utils._metadata_requests.MetadataRouter.route_params"
  ],
  "sklearn.utils._bunch.Bunch.__init__": [
    "examples.applications.plot_species_distribution_modeling.create_species_bunch",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.compose._column_transformer.ColumnTransformer.named_transformers_",
    "sklearn.datasets._base.load_breast_cancer",
    "sklearn.datasets._base.load_diabetes",
    "sklearn.datasets._base.load_digits",
    "sklearn.datasets._base.load_files",
    "sklearn.datasets._base.load_iris",
    "sklearn.datasets._base.load_linnerud",
    "sklearn.datasets._base.load_sample_images",
    "sklearn.datasets._base.load_wine",
    "sklearn.datasets._california_housing.fetch_california_housing",
    "sklearn.datasets._covtype.fetch_covtype",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._kddcup99.fetch_kddcup99",
    "sklearn.datasets._lfw.fetch_lfw_pairs",
    "sklearn.datasets._lfw.fetch_lfw_people",
    "sklearn.datasets._olivetti_faces.fetch_olivetti_faces",
    "sklearn.datasets._openml._download_data_to_bunch",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._species_distributions.fetch_species_distributions",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized",
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble.named_estimators",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.ensemble._voting._BaseVoting.fit",
    "sklearn.inspection._partial_dependence.partial_dependence",
    "sklearn.inspection._permutation_importance._create_importances_bunch",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.metrics._scorer._MultimetricScorer.__call__",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.multioutput._MultiOutputEstimator.fit",
    "sklearn.multioutput._MultiOutputEstimator.partial_fit",
    "sklearn.pipeline.FeatureUnion.named_transformers",
    "sklearn.pipeline.Pipeline.named_steps",
    "sklearn.tree._classes.BaseDecisionTree.cost_complexity_pruning_path",
    "sklearn.utils._metadata_requests.MetadataRouter._route_params",
    "sklearn.utils._metadata_requests.MetadataRouter.route_params",
    "sklearn.utils._metadata_requests.MethodMetadataRequest._route_params"
  ],
  "sklearn.utils._bunch.Bunch._set_deprecated": [
    "sklearn.inspection._partial_dependence.partial_dependence"
  ],
  "sklearn.utils._encode.MissingValues.__init__": [
    "sklearn.utils._encode._extract_missing"
  ],
  "sklearn.utils._encode.MissingValues.__new__": [
    "sklearn.utils._encode._extract_missing"
  ],
  "sklearn.utils._encode._NaNCounter.__init__": [
    "sklearn.utils._encode._get_counts"
  ],
  "sklearn.utils._encode._NaNCounter._generate_items": [
    "sklearn.utils._encode._NaNCounter.__init__"
  ],
  "sklearn.utils._encode._nandict.__init__": [
    "sklearn.utils._encode._map_to_integer"
  ],
  "sklearn.utils._estimator_html_repr._IDCounter.__init__": [
    "sklearn.utils._estimator_html_repr.$toplevel"
  ],
  "sklearn.utils._estimator_html_repr._IDCounter.get_id": [
    "sklearn.utils._estimator_html_repr._write_label_html",
    "sklearn.utils._estimator_html_repr.estimator_html_repr"
  ],
  "sklearn.utils._estimator_html_repr._VisualBlock.__init__": [
    "sklearn.compose._column_transformer.ColumnTransformer._sk_visual_block_",
    "sklearn.ensemble._stacking._BaseStacking._sk_visual_block_with_final_estimator",
    "sklearn.ensemble._voting._BaseVoting._sk_visual_block_",
    "sklearn.pipeline.FeatureUnion._sk_visual_block_",
    "sklearn.pipeline.Pipeline._sk_visual_block_",
    "sklearn.utils._estimator_html_repr._get_visual_block",
    "sklearn.utils._estimator_html_repr._write_estimator_html"
  ],
  "sklearn.utils._metadata_requests.MetadataRequest.__init__": [
    "sklearn.metrics._scorer._BaseScorer.set_score_request",
    "sklearn.metrics._scorer._PassthroughScorer.get_metadata_routing",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils._metadata_requests.get_routing_for_object"
  ],
  "sklearn.utils._metadata_requests.MetadataRequest.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.utils._metadata_requests.MetadataRequest.__str__"
  ],
  "sklearn.utils._metadata_requests.MetadataRequest._serialize": [
    "sklearn.utils._metadata_requests.MetadataRequest.__repr__"
  ],
  "sklearn.utils._metadata_requests.MetadataRouter.__init__": [
    "examples.miscellaneous.plot_metadata_routing.MetaClassifier.get_metadata_routing",
    "examples.miscellaneous.plot_metadata_routing.MetaRegressor.get_metadata_routing",
    "examples.miscellaneous.plot_metadata_routing.RouterConsumerClassifier.get_metadata_routing",
    "examples.miscellaneous.plot_metadata_routing.SimplePipeline.get_metadata_routing",
    "examples.miscellaneous.plot_metadata_routing.WeightedMetaRegressor.get_metadata_routing",
    "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing",
    "sklearn.metrics._scorer._MultimetricScorer.get_metadata_routing",
    "sklearn.multioutput.ClassifierChain.get_metadata_routing",
    "sklearn.multioutput.RegressorChain.get_metadata_routing",
    "sklearn.multioutput._MultiOutputEstimator.get_metadata_routing"
  ],
  "sklearn.utils._metadata_requests.MetadataRouter.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.utils._metadata_requests.MetadataRouter.__str__"
  ],
  "sklearn.utils._metadata_requests.MetadataRouter._get_param_names": [
    "sklearn.utils._metadata_requests.MetadataRouter._route_params",
    "sklearn.utils._metadata_requests.MetadataRouter.validate_metadata"
  ],
  "sklearn.utils._metadata_requests.MetadataRouter._serialize": [
    "sklearn.utils._metadata_requests.MetadataRouter.__repr__"
  ],
  "sklearn.utils._metadata_requests.MetadataRouter.add": [
    "examples.miscellaneous.plot_metadata_routing.MetaClassifier.get_metadata_routing",
    "examples.miscellaneous.plot_metadata_routing.MetaRegressor.get_metadata_routing",
    "examples.miscellaneous.plot_metadata_routing.SimplePipeline.get_metadata_routing",
    "sklearn.metrics._scorer._MultimetricScorer.get_metadata_routing",
    "sklearn.multioutput.ClassifierChain.get_metadata_routing",
    "sklearn.multioutput.RegressorChain.get_metadata_routing",
    "sklearn.multioutput._MultiOutputEstimator.get_metadata_routing"
  ],
  "sklearn.utils._metadata_requests.MetadataRouter.add_self_request": [
    "examples.miscellaneous.plot_metadata_routing.RouterConsumerClassifier.get_metadata_routing",
    "examples.miscellaneous.plot_metadata_routing.WeightedMetaRegressor.get_metadata_routing",
    "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing"
  ],
  "sklearn.utils._metadata_requests.MethodMapping.__init__": [
    "examples.miscellaneous.plot_metadata_routing.SimplePipeline.get_metadata_routing",
    "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing",
    "sklearn.multioutput.ClassifierChain.get_metadata_routing",
    "sklearn.multioutput.RegressorChain.get_metadata_routing",
    "sklearn.multioutput._MultiOutputEstimator.get_metadata_routing",
    "sklearn.utils._metadata_requests.MethodMapping.from_str"
  ],
  "sklearn.utils._metadata_requests.MethodMapping.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.utils._metadata_requests.MethodMapping.__str__"
  ],
  "sklearn.utils._metadata_requests.MethodMapping._serialize": [
    "sklearn.utils._metadata_requests.MethodMapping.__repr__"
  ],
  "sklearn.utils._metadata_requests.MethodMapping.add": [
    "examples.miscellaneous.plot_metadata_routing.SimplePipeline.get_metadata_routing",
    "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing",
    "sklearn.multioutput.ClassifierChain.get_metadata_routing",
    "sklearn.multioutput.RegressorChain.get_metadata_routing",
    "sklearn.multioutput._MultiOutputEstimator.get_metadata_routing",
    "sklearn.utils._metadata_requests.MethodMapping.from_str"
  ],
  "sklearn.utils._metadata_requests.MethodMapping.from_str": [
    "sklearn.utils._metadata_requests.MetadataRouter.__iter__",
    "sklearn.utils._metadata_requests.MetadataRouter.add"
  ],
  "sklearn.utils._metadata_requests.MethodMetadataRequest.__init__": [
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests.MetadataRequest.__init__",
    "sklearn.utils._metadata_requests._MetadataRequester._build_request_for_signature"
  ],
  "sklearn.utils._metadata_requests.MethodMetadataRequest.__repr__": [
    "sklearn.utils._metadata_requests.MethodMetadataRequest.__str__"
  ],
  "sklearn.utils._metadata_requests.MethodMetadataRequest._check_warnings": [
    "sklearn.utils._metadata_requests.MethodMetadataRequest._route_params"
  ],
  "sklearn.utils._metadata_requests.MethodMetadataRequest._serialize": [
    "sklearn.utils._metadata_requests.MethodMetadataRequest.__repr__"
  ],
  "sklearn.utils._metadata_requests.MethodMetadataRequest.add_request": [
    "sklearn.utils._metadata_requests._MetadataRequester._build_request_for_signature"
  ],
  "sklearn.utils._metadata_requests.MethodPair.__init__": [
    "sklearn.utils._metadata_requests.MethodMapping.add"
  ],
  "sklearn.utils._metadata_requests.MethodPair.__new__": [
    "sklearn.utils._metadata_requests.MethodMapping.add"
  ],
  "sklearn.utils._metadata_requests.RequestMethod.__init__": [
    "sklearn.utils._metadata_requests._MetadataRequester.__init_subclass__",
    "sklearn.utils._mocking.$toplevel"
  ],
  "sklearn.utils._metadata_requests.RouterMappingPair.__init__": [
    "sklearn.utils._metadata_requests.MetadataRouter.__iter__",
    "sklearn.utils._metadata_requests.MetadataRouter.add"
  ],
  "sklearn.utils._metadata_requests.RouterMappingPair.__new__": [
    "sklearn.utils._metadata_requests.MetadataRouter.__iter__",
    "sklearn.utils._metadata_requests.MetadataRouter.add"
  ],
  "sklearn.utils._metadata_requests._MetadataRequester._build_request_for_signature": [
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests"
  ],
  "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests": [
    "sklearn.utils._metadata_requests._MetadataRequester.__init_subclass__",
    "sklearn.utils._metadata_requests._MetadataRequester._get_metadata_request"
  ],
  "sklearn.utils._metadata_requests._MetadataRequester._get_metadata_request": [
    "sklearn.utils._metadata_requests._MetadataRequester.get_metadata_routing"
  ],
  "sklearn.utils._mocking.ArraySlicingWrapper.__init__": [
    "sklearn.utils._mocking.MockDataFrame.__init__"
  ],
  "sklearn.utils._mocking.CheckingClassifier._check_X_y": [
    "sklearn.utils._mocking.CheckingClassifier.decision_function",
    "sklearn.utils._mocking.CheckingClassifier.fit",
    "sklearn.utils._mocking.CheckingClassifier.predict",
    "sklearn.utils._mocking.CheckingClassifier.predict_proba",
    "sklearn.utils._mocking.CheckingClassifier.score"
  ],
  "sklearn.utils._mocking.MockDataFrame.__eq__": [
    "sklearn.utils._mocking.MockDataFrame.__ne__"
  ],
  "sklearn.utils._mocking.MockDataFrame.__init__": [
    "sklearn.utils._mocking.ArraySlicingWrapper.__getitem__",
    "sklearn.utils._mocking.MockDataFrame.__eq__",
    "sklearn.utils._mocking.MockDataFrame.take"
  ],
  "sklearn.utils._param_validation.HasMethods.__str__": [
    "sklearn.utils._param_validation._CVObjects.__str__"
  ],
  "sklearn.utils._param_validation.HasMethods.is_satisfied_by": [
    "sklearn.utils._param_validation._CVObjects.is_satisfied_by"
  ],
  "sklearn.utils._param_validation.Hidden.__init__": [
    "sklearn.calibration.CalibratedClassifierCV.$class_toplevel",
    "sklearn.cluster._agglomerative.AgglomerativeClustering.$class_toplevel",
    "sklearn.cluster._agglomerative.FeatureAgglomeration.$class_toplevel",
    "sklearn.cluster._kmeans._BaseKMeans.$class_toplevel",
    "sklearn.compose._column_transformer.ColumnTransformer.$class_toplevel",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.$class_toplevel",
    "sklearn.decomposition._nmf._BaseNMF.$class_toplevel",
    "sklearn.decomposition._sparse_pca.MiniBatchSparsePCA.$class_toplevel",
    "sklearn.impute._knn.KNNImputer.$class_toplevel",
    "sklearn.linear_model._bayes.ARDRegression.$class_toplevel",
    "sklearn.linear_model._bayes.BayesianRidge.$class_toplevel",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.$class_toplevel",
    "sklearn.linear_model._least_angle.Lars.$class_toplevel",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuit.$class_toplevel",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.$class_toplevel",
    "sklearn.linear_model._quantile.QuantileRegressor.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.SGDClassifier.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.SGDRegressor.$class_toplevel",
    "sklearn.manifold._mds.MDS.$class_toplevel",
    "sklearn.naive_bayes._BaseDiscreteNB.$class_toplevel",
    "sklearn.pipeline.Pipeline.$class_toplevel",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.$class_toplevel",
    "sklearn.preprocessing._encoders.OneHotEncoder.$class_toplevel",
    "sklearn.svm._classes.LinearSVC.$class_toplevel",
    "sklearn.svm._classes.LinearSVR.$class_toplevel",
    "sklearn.tree._classes.DecisionTreeClassifier.$class_toplevel",
    "sklearn.tree._classes.DecisionTreeRegressor.$class_toplevel"
  ],
  "sklearn.utils._param_validation.Interval.__init__": [
    "sklearn.cluster._affinity_propagation.AffinityPropagation.$class_toplevel",
    "sklearn.cluster._agglomerative.AgglomerativeClustering.$class_toplevel",
    "sklearn.cluster._agglomerative.FeatureAgglomeration.$class_toplevel",
    "sklearn.cluster._bicluster.BaseSpectral.$class_toplevel",
    "sklearn.cluster._bicluster.SpectralBiclustering.$class_toplevel",
    "sklearn.cluster._bicluster.SpectralCoclustering.$class_toplevel",
    "sklearn.cluster._birch.Birch.$class_toplevel",
    "sklearn.cluster._dbscan.DBSCAN.$class_toplevel",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.$class_toplevel",
    "sklearn.cluster._kmeans.MiniBatchKMeans.$class_toplevel",
    "sklearn.cluster._kmeans._BaseKMeans.$class_toplevel",
    "sklearn.cluster._mean_shift.MeanShift.$class_toplevel",
    "sklearn.cluster._optics.OPTICS.$class_toplevel",
    "sklearn.cluster._spectral.SpectralClustering.$class_toplevel",
    "sklearn.compose._column_transformer.ColumnTransformer.$class_toplevel",
    "sklearn.covariance._elliptic_envelope.EllipticEnvelope.$class_toplevel",
    "sklearn.covariance._graph_lasso.BaseGraphicalLasso.$class_toplevel",
    "sklearn.covariance._graph_lasso.GraphicalLasso.$class_toplevel",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.$class_toplevel",
    "sklearn.covariance._robust_covariance.MinCovDet.$class_toplevel",
    "sklearn.covariance._shrunk_covariance.LedoitWolf.$class_toplevel",
    "sklearn.covariance._shrunk_covariance.ShrunkCovariance.$class_toplevel",
    "sklearn.cross_decomposition._pls.PLSSVD.$class_toplevel",
    "sklearn.cross_decomposition._pls._PLS.$class_toplevel",
    "sklearn.decomposition._dict_learning.DictionaryLearning.$class_toplevel",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.$class_toplevel",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.$class_toplevel",
    "sklearn.decomposition._fastica.FastICA.$class_toplevel",
    "sklearn.decomposition._incremental_pca.IncrementalPCA.$class_toplevel",
    "sklearn.decomposition._kernel_pca.KernelPCA.$class_toplevel",
    "sklearn.decomposition._lda.LatentDirichletAllocation.$class_toplevel",
    "sklearn.decomposition._nmf.MiniBatchNMF.$class_toplevel",
    "sklearn.decomposition._nmf._BaseNMF.$class_toplevel",
    "sklearn.decomposition._pca.PCA.$class_toplevel",
    "sklearn.decomposition._sparse_pca.MiniBatchSparsePCA.$class_toplevel",
    "sklearn.decomposition._sparse_pca._BaseSparsePCA.$class_toplevel",
    "sklearn.decomposition._truncated_svd.TruncatedSVD.$class_toplevel",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.$class_toplevel",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.$class_toplevel",
    "sklearn.dummy.DummyRegressor.$class_toplevel",
    "sklearn.ensemble._bagging.BaseBagging.$class_toplevel",
    "sklearn.ensemble._forest.BaseForest.$class_toplevel",
    "sklearn.ensemble._forest.RandomTreesEmbedding.$class_toplevel",
    "sklearn.ensemble._gb.BaseGradientBoosting.$class_toplevel",
    "sklearn.ensemble._gb.GradientBoostingRegressor.$class_toplevel",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.$class_toplevel",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.$class_toplevel",
    "sklearn.ensemble._iforest.IsolationForest.$class_toplevel",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.$class_toplevel",
    "sklearn.feature_extraction._hash.FeatureHasher.$class_toplevel",
    "sklearn.feature_extraction.image.PatchExtractor.$class_toplevel",
    "sklearn.feature_extraction.text.CountVectorizer.$class_toplevel",
    "sklearn.feature_extraction.text.HashingVectorizer.$class_toplevel",
    "sklearn.feature_selection._from_model.SelectFromModel.$class_toplevel",
    "sklearn.feature_selection._rfe.RFE.$class_toplevel",
    "sklearn.feature_selection._rfe.RFECV.$class_toplevel",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector.$class_toplevel",
    "sklearn.feature_selection._univariate_selection.GenericUnivariateSelect.$class_toplevel",
    "sklearn.feature_selection._univariate_selection.SelectFdr.$class_toplevel",
    "sklearn.feature_selection._univariate_selection.SelectFpr.$class_toplevel",
    "sklearn.feature_selection._univariate_selection.SelectFwe.$class_toplevel",
    "sklearn.feature_selection._univariate_selection.SelectKBest.$class_toplevel",
    "sklearn.feature_selection._univariate_selection.SelectPercentile.$class_toplevel",
    "sklearn.feature_selection._variance_threshold.VarianceThreshold.$class_toplevel",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.$class_toplevel",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.$class_toplevel",
    "sklearn.impute._iterative.IterativeImputer.$class_toplevel",
    "sklearn.impute._knn.KNNImputer.$class_toplevel",
    "sklearn.isotonic.IsotonicRegression.$class_toplevel",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.$class_toplevel",
    "sklearn.kernel_approximation.Nystroem.$class_toplevel",
    "sklearn.kernel_approximation.PolynomialCountSketch.$class_toplevel",
    "sklearn.kernel_approximation.RBFSampler.$class_toplevel",
    "sklearn.kernel_approximation.SkewedChi2Sampler.$class_toplevel",
    "sklearn.kernel_ridge.KernelRidge.$class_toplevel",
    "sklearn.linear_model._bayes.ARDRegression.$class_toplevel",
    "sklearn.linear_model._bayes.BayesianRidge.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.ElasticNet.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.ElasticNetCV.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNetCV.$class_toplevel",
    "sklearn.linear_model._glm.glm.TweedieRegressor.$class_toplevel",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.$class_toplevel",
    "sklearn.linear_model._huber.HuberRegressor.$class_toplevel",
    "sklearn.linear_model._least_angle.Lars.$class_toplevel",
    "sklearn.linear_model._least_angle.LarsCV.$class_toplevel",
    "sklearn.linear_model._least_angle.LassoLars.$class_toplevel",
    "sklearn.linear_model._least_angle.LassoLarsIC.$class_toplevel",
    "sklearn.linear_model._logistic.LogisticRegression.$class_toplevel",
    "sklearn.linear_model._logistic.LogisticRegressionCV.$class_toplevel",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuit.$class_toplevel",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.$class_toplevel",
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveClassifier.$class_toplevel",
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveRegressor.$class_toplevel",
    "sklearn.linear_model._perceptron.Perceptron.$class_toplevel",
    "sklearn.linear_model._quantile.QuantileRegressor.$class_toplevel",
    "sklearn.linear_model._ransac.RANSACRegressor.$class_toplevel",
    "sklearn.linear_model._ridge._BaseRidge.$class_toplevel",
    "sklearn.linear_model._ridge._BaseRidgeCV.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.BaseSGD.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.SGDClassifier.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.SGDRegressor.$class_toplevel",
    "sklearn.linear_model._theil_sen.TheilSenRegressor.$class_toplevel",
    "sklearn.manifold._isomap.Isomap.$class_toplevel",
    "sklearn.manifold._locally_linear.LocallyLinearEmbedding.$class_toplevel",
    "sklearn.manifold._mds.MDS.$class_toplevel",
    "sklearn.manifold._spectral_embedding.SpectralEmbedding.$class_toplevel",
    "sklearn.manifold._t_sne.TSNE.$class_toplevel",
    "sklearn.mixture._base.BaseMixture.$class_toplevel",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture.$class_toplevel",
    "sklearn.model_selection._search.RandomizedSearchCV.$class_toplevel",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.$class_toplevel",
    "sklearn.model_selection._search_successive_halving.HalvingRandomSearchCV.$class_toplevel",
    "sklearn.multiclass.OutputCodeClassifier.$class_toplevel",
    "sklearn.naive_bayes.BernoulliNB.$class_toplevel",
    "sklearn.naive_bayes.CategoricalNB.$class_toplevel",
    "sklearn.naive_bayes.GaussianNB.$class_toplevel",
    "sklearn.naive_bayes._BaseDiscreteNB.$class_toplevel",
    "sklearn.neighbors._base.NeighborsBase.$class_toplevel",
    "sklearn.neighbors._kde.KernelDensity.$class_toplevel",
    "sklearn.neighbors._lof.LocalOutlierFactor.$class_toplevel",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.$class_toplevel",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.$class_toplevel",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron.$class_toplevel",
    "sklearn.neural_network._rbm.BernoulliRBM.$class_toplevel",
    "sklearn.preprocessing._data.QuantileTransformer.$class_toplevel",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.$class_toplevel",
    "sklearn.preprocessing._encoders.OneHotEncoder.$class_toplevel",
    "sklearn.preprocessing._encoders.OrdinalEncoder.$class_toplevel",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.$class_toplevel",
    "sklearn.preprocessing._polynomial.SplineTransformer.$class_toplevel",
    "sklearn.preprocessing._target_encoder.TargetEncoder.$class_toplevel",
    "sklearn.random_projection.BaseRandomProjection.$class_toplevel",
    "sklearn.random_projection.SparseRandomProjection.$class_toplevel",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.$class_toplevel",
    "sklearn.semi_supervised._label_propagation.LabelSpreading.$class_toplevel",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.$class_toplevel",
    "sklearn.svm._base.BaseLibSVM.$class_toplevel",
    "sklearn.svm._classes.LinearSVC.$class_toplevel",
    "sklearn.svm._classes.LinearSVR.$class_toplevel",
    "sklearn.svm._classes.NuSVC.$class_toplevel",
    "sklearn.tree._classes.BaseDecisionTree.$class_toplevel",
    "sklearn.utils._param_validation.MissingValues.__init__",
    "sklearn.utils._param_validation._CVObjects.__init__",
    "sklearn.utils._param_validation._RandomStates.__init__",
    "sklearn.utils._param_validation._VerboseHelper.__init__",
    "sklearn.utils.tests.test_estimator_checks.test_check_outlier_contamination"
  ],
  "sklearn.utils._param_validation.Interval.__str__": [
    "sklearn.utils._param_validation.MissingValues.__str__",
    "sklearn.utils._param_validation._CVObjects.__str__",
    "sklearn.utils._param_validation._RandomStates.__str__",
    "sklearn.utils._param_validation._VerboseHelper.__str__"
  ],
  "sklearn.utils._param_validation.Interval._check_params": [
    "sklearn.utils._param_validation.Interval.__init__"
  ],
  "sklearn.utils._param_validation.Interval.is_satisfied_by": [
    "sklearn.utils._param_validation.MissingValues.is_satisfied_by",
    "sklearn.utils._param_validation._CVObjects.is_satisfied_by",
    "sklearn.utils._param_validation._RandomStates.is_satisfied_by",
    "sklearn.utils._param_validation._VerboseHelper.is_satisfied_by"
  ],
  "sklearn.utils._param_validation.MissingValues.__init__": [
    "sklearn.impute._base.MissingIndicator.$class_toplevel",
    "sklearn.impute._base._BaseImputer.$class_toplevel"
  ],
  "sklearn.utils._param_validation.Options.__init__": [
    "sklearn.decomposition._fastica.FastICA.$class_toplevel",
    "sklearn.feature_selection._from_model.SelectFromModel.$class_toplevel",
    "sklearn.linear_model._ransac.RANSACRegressor.$class_toplevel",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron.$class_toplevel",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.$class_toplevel",
    "sklearn.utils._param_validation.StrOptions.__init__"
  ],
  "sklearn.utils._param_validation.Options._mark_if_deprecated": [
    "sklearn.utils._param_validation.Options.__str__"
  ],
  "sklearn.utils._param_validation.StrOptions.__init__": [
    "sklearn.calibration.CalibratedClassifierCV.$class_toplevel",
    "sklearn.cluster._affinity_propagation.AffinityPropagation.$class_toplevel",
    "sklearn.cluster._agglomerative.AgglomerativeClustering.$class_toplevel",
    "sklearn.cluster._agglomerative.FeatureAgglomeration.$class_toplevel",
    "sklearn.cluster._bicluster.BaseSpectral.$class_toplevel",
    "sklearn.cluster._bicluster.SpectralBiclustering.$class_toplevel",
    "sklearn.cluster._bisect_k_means.BisectingKMeans.$class_toplevel",
    "sklearn.cluster._dbscan.DBSCAN.$class_toplevel",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.$class_toplevel",
    "sklearn.cluster._kmeans.KMeans.$class_toplevel",
    "sklearn.cluster._kmeans._BaseKMeans.$class_toplevel",
    "sklearn.cluster._optics.OPTICS.$class_toplevel",
    "sklearn.cluster._spectral.SpectralClustering.$class_toplevel",
    "sklearn.compose._column_transformer.ColumnTransformer.$class_toplevel",
    "sklearn.covariance._graph_lasso.BaseGraphicalLasso.$class_toplevel",
    "sklearn.covariance._graph_lasso.GraphicalLasso.$class_toplevel",
    "sklearn.cross_decomposition._pls._PLS.$class_toplevel",
    "sklearn.decomposition._dict_learning.DictionaryLearning.$class_toplevel",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.$class_toplevel",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.$class_toplevel",
    "sklearn.decomposition._fastica.FastICA.$class_toplevel",
    "sklearn.decomposition._kernel_pca.KernelPCA.$class_toplevel",
    "sklearn.decomposition._lda.LatentDirichletAllocation.$class_toplevel",
    "sklearn.decomposition._nmf.NMF.$class_toplevel",
    "sklearn.decomposition._nmf._BaseNMF.$class_toplevel",
    "sklearn.decomposition._pca.PCA.$class_toplevel",
    "sklearn.decomposition._sparse_pca.MiniBatchSparsePCA.$class_toplevel",
    "sklearn.decomposition._sparse_pca._BaseSparsePCA.$class_toplevel",
    "sklearn.decomposition._truncated_svd.TruncatedSVD.$class_toplevel",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.$class_toplevel",
    "sklearn.dummy.DummyClassifier.$class_toplevel",
    "sklearn.dummy.DummyRegressor.$class_toplevel",
    "sklearn.ensemble._bagging.BaseBagging.$class_toplevel",
    "sklearn.ensemble._forest.ExtraTreesClassifier.$class_toplevel",
    "sklearn.ensemble._forest.RandomForestClassifier.$class_toplevel",
    "sklearn.ensemble._gb.BaseGradientBoosting.$class_toplevel",
    "sklearn.ensemble._gb.GradientBoostingClassifier.$class_toplevel",
    "sklearn.ensemble._gb.GradientBoostingRegressor.$class_toplevel",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.$class_toplevel",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier.$class_toplevel",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.$class_toplevel",
    "sklearn.ensemble._iforest.IsolationForest.$class_toplevel",
    "sklearn.ensemble._stacking.StackingClassifier.$class_toplevel",
    "sklearn.ensemble._stacking._BaseStacking.$class_toplevel",
    "sklearn.ensemble._voting.VotingClassifier.$class_toplevel",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.$class_toplevel",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor.$class_toplevel",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.$class_toplevel",
    "sklearn.feature_extraction._hash.FeatureHasher.$class_toplevel",
    "sklearn.feature_extraction.text.CountVectorizer.$class_toplevel",
    "sklearn.feature_extraction.text.HashingVectorizer.$class_toplevel",
    "sklearn.feature_extraction.text.TfidfTransformer.$class_toplevel",
    "sklearn.feature_extraction.text.TfidfVectorizer.$class_toplevel",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector.$class_toplevel",
    "sklearn.feature_selection._univariate_selection.GenericUnivariateSelect.$class_toplevel",
    "sklearn.feature_selection._univariate_selection.SelectKBest.$class_toplevel",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.$class_toplevel",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.$class_toplevel",
    "sklearn.impute._base.MissingIndicator.$class_toplevel",
    "sklearn.impute._base.SimpleImputer.$class_toplevel",
    "sklearn.impute._iterative.IterativeImputer.$class_toplevel",
    "sklearn.impute._knn.KNNImputer.$class_toplevel",
    "sklearn.isotonic.IsotonicRegression.$class_toplevel",
    "sklearn.kernel_approximation.Nystroem.$class_toplevel",
    "sklearn.kernel_approximation.RBFSampler.$class_toplevel",
    "sklearn.kernel_ridge.KernelRidge.$class_toplevel",
    "sklearn.linear_model._bayes.ARDRegression.$class_toplevel",
    "sklearn.linear_model._bayes.BayesianRidge.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.ElasticNet.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.$class_toplevel",
    "sklearn.linear_model._glm.glm.TweedieRegressor.$class_toplevel",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.$class_toplevel",
    "sklearn.linear_model._least_angle.Lars.$class_toplevel",
    "sklearn.linear_model._least_angle.LassoLarsIC.$class_toplevel",
    "sklearn.linear_model._logistic.LogisticRegression.$class_toplevel",
    "sklearn.linear_model._logistic.LogisticRegressionCV.$class_toplevel",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuit.$class_toplevel",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.$class_toplevel",
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveClassifier.$class_toplevel",
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveRegressor.$class_toplevel",
    "sklearn.linear_model._perceptron.Perceptron.$class_toplevel",
    "sklearn.linear_model._quantile.QuantileRegressor.$class_toplevel",
    "sklearn.linear_model._ransac.RANSACRegressor.$class_toplevel",
    "sklearn.linear_model._ridge.RidgeClassifier.$class_toplevel",
    "sklearn.linear_model._ridge.RidgeClassifierCV.$class_toplevel",
    "sklearn.linear_model._ridge._BaseRidge.$class_toplevel",
    "sklearn.linear_model._ridge._BaseRidgeCV.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.SGDClassifier.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM.$class_toplevel",
    "sklearn.linear_model._stochastic_gradient.SGDRegressor.$class_toplevel",
    "sklearn.manifold._isomap.Isomap.$class_toplevel",
    "sklearn.manifold._locally_linear.LocallyLinearEmbedding.$class_toplevel",
    "sklearn.manifold._mds.MDS.$class_toplevel",
    "sklearn.manifold._spectral_embedding.SpectralEmbedding.$class_toplevel",
    "sklearn.manifold._t_sne.TSNE.$class_toplevel",
    "sklearn.mixture._base.BaseMixture.$class_toplevel",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture.$class_toplevel",
    "sklearn.mixture._gaussian_mixture.GaussianMixture.$class_toplevel",
    "sklearn.model_selection._search.BaseSearchCV.$class_toplevel",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.$class_toplevel",
    "sklearn.model_selection._search_successive_halving.HalvingRandomSearchCV.$class_toplevel",
    "sklearn.multioutput._BaseChain.$class_toplevel",
    "sklearn.naive_bayes._BaseDiscreteNB.$class_toplevel",
    "sklearn.neighbors._base.NeighborsBase.$class_toplevel",
    "sklearn.neighbors._classification.KNeighborsClassifier.$class_toplevel",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.$class_toplevel",
    "sklearn.neighbors._graph.KNeighborsTransformer.$class_toplevel",
    "sklearn.neighbors._graph.RadiusNeighborsTransformer.$class_toplevel",
    "sklearn.neighbors._kde.KernelDensity.$class_toplevel",
    "sklearn.neighbors._lof.LocalOutlierFactor.$class_toplevel",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.$class_toplevel",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.$class_toplevel",
    "sklearn.neighbors._regression.KNeighborsRegressor.$class_toplevel",
    "sklearn.neighbors._regression.RadiusNeighborsRegressor.$class_toplevel",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron.$class_toplevel",
    "sklearn.preprocessing._data.Normalizer.$class_toplevel",
    "sklearn.preprocessing._data.PowerTransformer.$class_toplevel",
    "sklearn.preprocessing._data.QuantileTransformer.$class_toplevel",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.$class_toplevel",
    "sklearn.preprocessing._encoders.OneHotEncoder.$class_toplevel",
    "sklearn.preprocessing._encoders.OrdinalEncoder.$class_toplevel",
    "sklearn.preprocessing._function_transformer.FunctionTransformer.$class_toplevel",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.$class_toplevel",
    "sklearn.preprocessing._polynomial.SplineTransformer.$class_toplevel",
    "sklearn.preprocessing._target_encoder.TargetEncoder.$class_toplevel",
    "sklearn.random_projection.BaseRandomProjection.$class_toplevel",
    "sklearn.random_projection.SparseRandomProjection.$class_toplevel",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.$class_toplevel",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.$class_toplevel",
    "sklearn.svm._base.BaseLibSVM.$class_toplevel",
    "sklearn.svm._base.BaseSVC.$class_toplevel",
    "sklearn.svm._classes.LinearSVC.$class_toplevel",
    "sklearn.svm._classes.LinearSVR.$class_toplevel",
    "sklearn.tree._classes.BaseDecisionTree.$class_toplevel",
    "sklearn.tree._classes.DecisionTreeClassifier.$class_toplevel",
    "sklearn.tree._classes.DecisionTreeRegressor.$class_toplevel"
  ],
  "sklearn.utils._param_validation._Booleans.__init__": [
    "sklearn.utils._param_validation.make_constraint"
  ],
  "sklearn.utils._param_validation._CVObjects.__init__": [
    "sklearn.utils._param_validation.make_constraint"
  ],
  "sklearn.utils._param_validation._Constraint.__init__": [
    "sklearn.utils._param_validation.HasMethods.__init__",
    "sklearn.utils._param_validation.Interval.__init__",
    "sklearn.utils._param_validation.MissingValues.__init__",
    "sklearn.utils._param_validation.Options.__init__",
    "sklearn.utils._param_validation._Booleans.__init__",
    "sklearn.utils._param_validation._CVObjects.__init__",
    "sklearn.utils._param_validation._InstancesOf.__init__",
    "sklearn.utils._param_validation._RandomStates.__init__",
    "sklearn.utils._param_validation._VerboseHelper.__init__",
    "sklearn.utils._param_validation.make_constraint"
  ],
  "sklearn.utils._param_validation._InstancesOf.__init__": [
    "sklearn.utils._param_validation.MissingValues.__init__",
    "sklearn.utils._param_validation._Booleans.__init__",
    "sklearn.utils._param_validation._RandomStates.__init__",
    "sklearn.utils._param_validation._VerboseHelper.__init__",
    "sklearn.utils._param_validation.make_constraint"
  ],
  "sklearn.utils._param_validation._InstancesOf.__str__": [
    "sklearn.utils._param_validation.MissingValues.__str__",
    "sklearn.utils._param_validation._Booleans.__str__",
    "sklearn.utils._param_validation._RandomStates.__str__",
    "sklearn.utils._param_validation._VerboseHelper.__str__"
  ],
  "sklearn.utils._param_validation._InstancesOf.is_satisfied_by": [
    "sklearn.utils._param_validation.MissingValues.is_satisfied_by",
    "sklearn.utils._param_validation._Booleans.is_satisfied_by",
    "sklearn.utils._param_validation._RandomStates.is_satisfied_by",
    "sklearn.utils._param_validation._VerboseHelper.is_satisfied_by"
  ],
  "sklearn.utils._param_validation._IterablesNotString.__str__": [
    "sklearn.utils._param_validation._CVObjects.__str__"
  ],
  "sklearn.utils._param_validation._IterablesNotString.is_satisfied_by": [
    "sklearn.utils._param_validation._CVObjects.is_satisfied_by"
  ],
  "sklearn.utils._param_validation._NanConstraint.__str__": [
    "sklearn.utils._param_validation.MissingValues.__str__"
  ],
  "sklearn.utils._param_validation._NanConstraint.is_satisfied_by": [
    "sklearn.utils._param_validation.MissingValues.is_satisfied_by"
  ],
  "sklearn.utils._param_validation._NoneConstraint.__str__": [
    "sklearn.utils._param_validation._CVObjects.__str__",
    "sklearn.utils._param_validation._RandomStates.__str__"
  ],
  "sklearn.utils._param_validation._NoneConstraint.is_satisfied_by": [
    "sklearn.utils._param_validation._CVObjects.is_satisfied_by",
    "sklearn.utils._param_validation._RandomStates.is_satisfied_by"
  ],
  "sklearn.utils._param_validation._PandasNAConstraint.__str__": [
    "sklearn.utils._param_validation.MissingValues.__str__"
  ],
  "sklearn.utils._param_validation._PandasNAConstraint.is_satisfied_by": [
    "sklearn.utils._param_validation.MissingValues.is_satisfied_by"
  ],
  "sklearn.utils._param_validation._RandomStates.__init__": [
    "sklearn.utils._param_validation.make_constraint"
  ],
  "sklearn.utils._param_validation._VerboseHelper.__init__": [
    "sklearn.utils._param_validation.make_constraint"
  ],
  "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_and_get_response_values": [
    "sklearn.calibration.CalibrationDisplay.from_estimator",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.from_estimator",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.from_estimator",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.from_estimator"
  ],
  "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_from_predictions_params": [
    "sklearn.calibration.CalibrationDisplay.from_predictions",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.from_predictions",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.from_predictions",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.from_predictions"
  ],
  "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_plot_params": [
    "sklearn.calibration.CalibrationDisplay.plot",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.plot",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.plot"
  ],
  "sklearn.utils._pprint.KeyValTuple.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.utils._pprint._EstimatorPrettyPrinter.$class_toplevel"
  ],
  "sklearn.utils._pprint._EstimatorPrettyPrinter.__init__": [
    "sklearn.base.BaseEstimator.__repr__",
    "sklearn.utils.tests.test_pprint.test_gridsearch_pipeline",
    "sklearn.utils.tests.test_pprint.test_n_max_elements_to_show"
  ],
  "sklearn.utils._pprint._EstimatorPrettyPrinter._format_params": [
    "sklearn.utils._pprint._EstimatorPrettyPrinter._pprint_estimator"
  ],
  "sklearn.utils._pprint._EstimatorPrettyPrinter._format_params_or_dict_items": [
    "sklearn.utils._pprint._EstimatorPrettyPrinter._format_dict_items",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._format_params"
  ],
  "sklearn.utils._pprint._EstimatorPrettyPrinter._pprint_estimator": [
    "sklearn.utils._pprint._EstimatorPrettyPrinter.$class_toplevel"
  ],
  "sklearn.utils._pprint._EstimatorPrettyPrinter._pprint_key_val_tuple": [
    "sklearn.utils._pprint._EstimatorPrettyPrinter.$class_toplevel"
  ],
  "sklearn.utils._set_output._SetOutputMixin.set_output": [
    "examples.miscellaneous.plot_set_output.$toplevel",
    "examples.preprocessing.plot_scaling_importance.$toplevel",
    "sklearn.compose._column_transformer.ColumnTransformer.set_output",
    "sklearn.impute._iterative.IterativeImputer._initial_imputation",
    "sklearn.manifold._isomap.Isomap._fit_transform",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.pipeline.FeatureUnion.set_output",
    "sklearn.preprocessing._data.PowerTransformer._fit",
    "sklearn.preprocessing._function_transformer.FunctionTransformer.set_output"
  ],
  "sklearn.utils._testing.MinimalClassifier.__init__": [
    "sklearn.utils.tests.test_estimator_checks.test_non_deterministic_estimator_skip_tests"
  ],
  "sklearn.utils._testing.MinimalClassifier.predict": [
    "sklearn.utils._testing.MinimalClassifier.score"
  ],
  "sklearn.utils._testing.MinimalClassifier.predict_proba": [
    "sklearn.utils._testing.MinimalClassifier.predict"
  ],
  "sklearn.utils._testing.MinimalRegressor.__init__": [
    "sklearn.utils.tests.test_estimator_checks.test_non_deterministic_estimator_skip_tests"
  ],
  "sklearn.utils._testing.MinimalRegressor.predict": [
    "sklearn.utils._testing.MinimalRegressor.score"
  ],
  "sklearn.utils._testing.MinimalTransformer.__init__": [
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_get_tags_default_keys",
    "sklearn.utils.tests.test_estimator_checks.test_non_deterministic_estimator_skip_tests"
  ],
  "sklearn.utils._testing.MinimalTransformer.fit": [
    "sklearn.utils._testing.MinimalTransformer.fit_transform"
  ],
  "sklearn.utils._testing._IgnoreWarnings.__call__": [
    "sklearn.utils._testing._IgnoreWarnings.__enter__",
    "sklearn.utils._testing._IgnoreWarnings.__exit__",
    "sklearn.utils._testing._IgnoreWarnings.__repr__",
    "sklearn.utils._testing.ignore_warnings"
  ],
  "sklearn.utils._testing._IgnoreWarnings.__init__": [
    "sklearn.utils._testing.ignore_warnings"
  ],
  "sklearn.utils._testing._Raises.__init__": [
    "sklearn.utils._testing.raises"
  ],
  "sklearn.utils.deprecation.deprecated._decorate_class": [
    "sklearn.utils.deprecation.deprecated.__call__"
  ],
  "sklearn.utils.deprecation.deprecated._decorate_fun": [
    "sklearn.utils.deprecation.deprecated.__call__"
  ],
  "sklearn.utils.deprecation.deprecated._decorate_property": [
    "sklearn.utils.deprecation.deprecated.__call__"
  ],
  "sklearn.utils.estimator_checks._NotAnArray.__init__": [
    "sklearn.utils.estimator_checks._check_transformer",
    "sklearn.utils.estimator_checks.check_estimators_data_not_an_array",
    "sklearn.utils.estimator_checks.check_sample_weights_not_an_array",
    "sklearn.utils.estimator_checks.check_transformer_data_not_an_array",
    "sklearn.utils.tests.test_estimator_checks.test_not_an_array_array_function"
  ],
  "sklearn.utils.metaestimators._BaseComposition._get_params": [
    "sklearn.compose._column_transformer.ColumnTransformer.get_params",
    "sklearn.pipeline.FeatureUnion.get_params",
    "sklearn.pipeline.Pipeline.get_params"
  ],
  "sklearn.utils.metaestimators._BaseComposition._replace_estimator": [
    "sklearn.utils.metaestimators._BaseComposition._set_params"
  ],
  "sklearn.utils.metaestimators._BaseComposition._set_params": [
    "sklearn.compose._column_transformer.ColumnTransformer.set_params",
    "sklearn.pipeline.FeatureUnion.set_params",
    "sklearn.pipeline.Pipeline.set_params"
  ],
  "sklearn.utils.metaestimators._BaseComposition._validate_names": [
    "sklearn.compose._column_transformer.ColumnTransformer._validate_transformers",
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble._validate_estimators",
    "sklearn.ensemble._stacking.StackingClassifier._validate_estimators",
    "sklearn.pipeline.FeatureUnion._validate_transformers",
    "sklearn.pipeline.Pipeline._validate_steps"
  ],
  "sklearn.utils.parallel.Parallel.__call__": [
    "benchmarks.bench_saga.exp",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.cluster._mean_shift.MeanShift.fit",
    "sklearn.compose._column_transformer.ColumnTransformer._fit_transform",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.decomposition._dict_learning._sparse_encode",
    "sklearn.ensemble._bagging.BaggingClassifier.decision_function",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_proba",
    "sklearn.ensemble._bagging.BaggingRegressor.predict",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._forest.BaseForest.apply",
    "sklearn.ensemble._forest.BaseForest.decision_path",
    "sklearn.ensemble._forest.BaseForest.feature_importances_",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._forest.ForestClassifier.predict_proba",
    "sklearn.ensemble._forest.ForestRegressor.predict",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.ensemble._voting._BaseVoting.fit",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.inspection._permutation_importance.permutation_importance",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.linear_model._base.LinearRegression.fit",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit_multiclass",
    "sklearn.linear_model._theil_sen.TheilSenRegressor.fit",
    "sklearn.manifold._mds.smacof",
    "sklearn.metrics.pairwise._parallel_pairwise",
    "sklearn.model_selection._validation.cross_val_predict",
    "sklearn.model_selection._validation.cross_validate",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.model_selection._validation.permutation_test_score",
    "sklearn.model_selection._validation.validation_curve",
    "sklearn.multiclass.OneVsOneClassifier.fit",
    "sklearn.multiclass.OneVsOneClassifier.partial_fit",
    "sklearn.multiclass.OneVsRestClassifier.fit",
    "sklearn.multiclass.OneVsRestClassifier.partial_fit",
    "sklearn.multiclass.OutputCodeClassifier.fit",
    "sklearn.multioutput._MultiOutputEstimator.fit",
    "sklearn.multioutput._MultiOutputEstimator.partial_fit",
    "sklearn.multioutput._MultiOutputEstimator.predict",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors",
    "sklearn.pipeline.FeatureUnion._parallel_func",
    "sklearn.pipeline.FeatureUnion.transform"
  ],
  "sklearn.utils.parallel._FuncWrapper.__call__": [
    "sklearn.utils.parallel._FuncWrapper.__call__",
    "sklearn.utils.parallel._FuncWrapper.__init__"
  ],
  "sklearn.utils.parallel._FuncWrapper.__init__": [
    "sklearn.utils.parallel.delayed.delayed_function"
  ],
  "sklearn.utils.tests.test_estimator_checks.ChangesDict.__init__": [
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator"
  ],
  "sklearn.utils.tests.test_estimator_checks.ChangesWrongAttribute.__init__": [
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator"
  ],
  "sklearn.utils.tests.test_estimator_checks.EstimatorMissingDefaultTags._get_tags": [
    "Ovr{sklearn.utils.tests.test_estimator_checks.EstimatorMissingDefaultTags._get_tags}"
  ],
  "sklearn.utils.tests.test_estimator_checks.HasImmutableParameters.__init__": [
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator"
  ],
  "sklearn.utils.tests.test_estimator_checks.HasMutableParameters.__init__": [
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator"
  ],
  "sklearn.utils.tests.test_estimator_checks.ModifiesAnotherValue.__init__": [
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator"
  ],
  "sklearn.utils.tests.test_estimator_checks.ModifiesValueInsteadOfRaisingError.__init__": [
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator"
  ],
  "sklearn.utils.tests.test_estimator_checks.OneClassSampleErrorClassifier.__init__": [
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator"
  ],
  "sklearn.utils.tests.test_estimator_checks.PoorScoreLogisticRegression.decision_function": [
    "Ovr{sklearn.utils.tests.test_estimator_checks.PoorScoreLogisticRegression.decision_function}",
    "sklearn.linear_model._logistic.LogisticRegression.predict_proba"
  ],
  "sklearn.utils.tests.test_estimator_checks.RaisesErrorInSetParams.__init__": [
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator"
  ],
  "sklearn.utils.tests.test_estimator_checks.SetsWrongAttribute.__init__": [
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator"
  ],
  "sklearn.utils.tests.test_estimator_checks.SparseTransformer.fit": [
    "sklearn.utils.tests.test_estimator_checks.SparseTransformer.fit_transform"
  ],
  "sklearn.utils.tests.test_estimator_checks._BaseMultiLabelClassifierMock.__init__": [
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_decision_function",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_predict",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_predict_proba"
  ],
  "sklearn.utils.tests.test_estimator_checks.test_check_fit_check_is_fitted.Estimator.__init__": [
    "sklearn.utils.tests.test_estimator_checks.test_check_fit_check_is_fitted"
  ],
  "sklearn.utils.tests.test_estimator_checks.test_check_no_attributes_set_in_init.NonConformantEstimatorNoParamSet.__init__": [
    "sklearn.utils.tests.test_estimator_checks.test_check_no_attributes_set_in_init"
  ],
  "sklearn.utils.tests.test_estimator_checks.test_check_no_attributes_set_in_init.NonConformantEstimatorPrivateSet.__init__": [
    "sklearn.utils.tests.test_estimator_checks.test_check_no_attributes_set_in_init"
  ],
  "sklearn.utils.tests.test_estimator_checks.test_check_outlier_contamination.OutlierDetectorWithoutConstraint.__init__": [
    "sklearn.utils.tests.test_estimator_checks.test_check_outlier_contamination"
  ],
  "sklearn.utils.tests.test_pprint.CountVectorizer.__init__": [
    "sklearn.utils.tests.test_pprint.test_n_max_elements_to_show"
  ],
  "sklearn.utils.tests.test_pprint.GridSearchCV.__init__": [
    "sklearn.utils.tests.test_pprint.test_gridsearch",
    "sklearn.utils.tests.test_pprint.test_gridsearch_pipeline",
    "sklearn.utils.tests.test_pprint.test_n_max_elements_to_show"
  ],
  "sklearn.utils.tests.test_pprint.LogisticRegression.__init__": [
    "sklearn.utils.tests.test_pprint.test_basic",
    "sklearn.utils.tests.test_pprint.test_bruteforce_ellipsis",
    "sklearn.utils.tests.test_pprint.test_builtin_prettyprinter",
    "sklearn.utils.tests.test_pprint.test_changed_only",
    "sklearn.utils.tests.test_pprint.test_deeply_nested",
    "sklearn.utils.tests.test_pprint.test_pipeline"
  ],
  "sklearn.utils.tests.test_pprint.NMF.__init__": [
    "sklearn.utils.tests.test_pprint.test_gridsearch_pipeline"
  ],
  "sklearn.utils.tests.test_pprint.PCA.__init__": [
    "sklearn.utils.tests.test_pprint.test_gridsearch_pipeline"
  ],
  "sklearn.utils.tests.test_pprint.Pipeline.__init__": [
    "sklearn.utils.tests.test_pprint.test_gridsearch_pipeline"
  ],
  "sklearn.utils.tests.test_pprint.RFE.__init__": [
    "sklearn.utils.tests.test_pprint.test_deeply_nested"
  ],
  "sklearn.utils.tests.test_pprint.SVC.__init__": [
    "sklearn.utils.tests.test_pprint.test_gridsearch",
    "sklearn.utils.tests.test_pprint.test_gridsearch_pipeline",
    "sklearn.utils.tests.test_pprint.test_n_max_elements_to_show"
  ],
  "sklearn.utils.tests.test_pprint.SimpleImputer.__init__": [
    "sklearn.utils.tests.test_pprint.test_changed_only"
  ],
  "sklearn.utils.tests.test_pprint.StandardScaler.__init__": [
    "sklearn.utils.tests.test_pprint.test_pipeline"
  ],
  "sklearn.utils.tests.test_pprint.test_complexity_print_changed_only.DummyEstimator.__init__": [
    "sklearn.utils.tests.test_pprint.test_complexity_print_changed_only"
  ],
  "sklearn.utils.tests.test_pprint.test_complexity_print_changed_only.DummyEstimator.__repr__": [
    "sklearn.utils.tests.test_pprint.test_complexity_print_changed_only"
  ],
  "sklearn.utils.tests.test_pprint.test_kwargs_in_init.WithKWargs.__init__": [
    "sklearn.utils.tests.test_pprint.test_kwargs_in_init"
  ],
  "sklearn.utils.tests.test_pprint.test_kwargs_in_init.WithKWargs.get_params": [
    "Ovr{sklearn.utils.tests.test_pprint.test_kwargs_in_init.WithKWargs.get_params}"
  ],
  "slice.__init__": [
    "asv_benchmarks.benchmarks.common.get_from_config",
    "asv_benchmarks.benchmarks.datasets._20newsgroups_highdim_dataset",
    "asv_benchmarks.benchmarks.datasets._digits_dataset",
    "benchmarks.bench_covertype.load_data",
    "benchmarks.bench_glmnet.$toplevel",
    "benchmarks.bench_hist_gradient_boosting.one_run",
    "benchmarks.bench_hist_gradient_boosting_adult.predict",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.predict",
    "benchmarks.bench_hist_gradient_boosting_threading.one_run",
    "benchmarks.bench_isolation_forest.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "benchmarks.bench_lof.$toplevel",
    "benchmarks.bench_mnist.load_data",
    "benchmarks.bench_multilabel_metrics.$toplevel",
    "benchmarks.bench_multilabel_metrics._tabulate",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_plot_hierarchical.$toplevel",
    "benchmarks.bench_plot_incremental_pca.$toplevel",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_plot_neighbors.get_data",
    "benchmarks.bench_plot_randomized_svd.get_data",
    "benchmarks.bench_plot_randomized_svd.scalable_frobenius_norm_discrepancy",
    "benchmarks.bench_rcv1_logreg_convergence.$toplevel",
    "benchmarks.bench_saga.exp",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "benchmarks.bench_sgd_regression.$toplevel",
    "benchmarks.bench_sparsify.$toplevel",
    "benchmarks.bench_text_vectorizers.$toplevel",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "build_tools.circle.list_versions.$toplevel",
    "build_tools.generate_authors_table.key",
    "build_tools.get_comment.get_message",
    "build_tools.get_comment.get_step_message",
    "click.core.BaseCommand.main",
    "click.core.MultiCommand.parse_args",
    "click.core.MultiCommand.resolve_command",
    "click.core.Option._parse_decls",
    "click.formatting.HelpFormatter.write_dl",
    "click.formatting.wrap_text._flush_par",
    "click.parser.OptionParser._get_value_from_state",
    "click.parser.OptionParser._match_short_opt",
    "click.parser.OptionParser._process_args_for_options",
    "click.parser.OptionParser._process_opts",
    "click.parser._unpack_args",
    "click.parser.split_opt",
    "click.shell_completion.BashComplete.get_completion_args",
    "click.shell_completion.FishComplete.get_completion_args",
    "click.shell_completion.ZshComplete.get_completion_args",
    "click.utils.make_default_short_help",
    "doc.conf.$toplevel",
    "doc.conf.SKExampleTitleSortKey.__call__",
    "doc.conf.make_carousel_thumbs",
    "doc.sphinxext.allow_nan_estimators.AllowNanEstimators.make_paragraph_for_estimator_type",
    "doc.sphinxext.sphinx_issues.format_commit_text",
    "doc.tutorial.machine_learning_map.parse_path.CaselessPreservingLiteral.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.And.checkRecursion",
    "doc.tutorial.machine_learning_map.pyparsing.And.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.CaselessKeyword.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.CaselessLiteral.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Combine.postParse",
    "doc.tutorial.machine_learning_map.pyparsing.Each.checkRecursion",
    "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Forward.validate",
    "doc.tutorial.machine_learning_map.pyparsing.GoToColumn.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Keyword.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.checkRecursion",
    "doc.tutorial.machine_learning_map.pyparsing.Or.checkRecursion",
    "doc.tutorial.machine_learning_map.pyparsing.ParseBaseException.markInputline",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.checkRecursion",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.validate",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.streamline",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.validate",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__delitem__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__reversed__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.clear",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.copy",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.resetCache",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setResultsName",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.split",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.transformString",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.SkipTo.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.White.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__str__.charsAsStr",
    "doc.tutorial.machine_learning_map.pyparsing.Word.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing._trim_arity.wrapper",
    "doc.tutorial.machine_learning_map.pyparsing._ustr",
    "doc.tutorial.machine_learning_map.pyparsing.infixNotation",
    "doc.tutorial.machine_learning_map.pyparsing.line",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "doc.tutorial.machine_learning_map.pyparsing.originalTextFor",
    "doc.tutorial.machine_learning_map.pyparsing.originalTextFor.extractText",
    "doc.tutorial.machine_learning_map.pyparsing.removeQuotes",
    "doc.tutorial.machine_learning_map.pyparsing.traceParseAction.z",
    "doc.tutorial.machine_learning_map.pyparsing.withAttribute",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.applications.plot_outlier_detection_wine.$toplevel",
    "examples.applications.plot_prediction_latency.atomic_benchmark_estimator",
    "examples.applications.plot_prediction_latency.generate_dataset",
    "examples.applications.plot_species_distribution_modeling.create_species_bunch",
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.applications.plot_tomography_l1_reconstruction.$toplevel",
    "examples.applications.plot_tomography_l1_reconstruction._generate_center_coordinates",
    "examples.applications.plot_tomography_l1_reconstruction.generate_synthetic_data",
    "examples.applications.plot_topics_extraction_with_nmf_lda.$toplevel",
    "examples.applications.plot_topics_extraction_with_nmf_lda.plot_top_words",
    "examples.applications.svm_gui.Controller.fit",
    "examples.applications.svm_gui.Model.dump_svmlight_file",
    "examples.applications.svm_gui.View.plot_support_vectors",
    "examples.applications.svm_gui.main",
    "examples.applications.wikipedia_principal_eigenvector.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.centrality_scores",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.bicluster.plot_bicluster_newsgroups.bicluster_ncut",
    "examples.bicluster.plot_spectral_biclustering.$toplevel",
    "examples.bicluster.plot_spectral_coclustering.$toplevel",
    "examples.calibration.plot_calibration.$toplevel",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.calibration.plot_compare_calibration.$toplevel",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.classification.plot_lda_qda.plot_data",
    "examples.cluster.plot_agglomerative_clustering.$toplevel",
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel",
    "examples.cluster.plot_bisect_kmeans.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_cluster_iris.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.cluster.plot_face_compress.$toplevel",
    "examples.cluster.plot_feature_agglomeration_vs_univariate_selection.$toplevel",
    "examples.cluster.plot_inductive_clustering.plot_scatter",
    "examples.cluster.plot_kmeans_assumptions.$toplevel",
    "examples.cluster.plot_kmeans_digits.$toplevel",
    "examples.cluster.plot_kmeans_plusplus.$toplevel",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.cluster.plot_optics.$toplevel",
    "examples.cluster.plot_ward_structured_vs_unstructured.$toplevel",
    "examples.compose.plot_column_transformer.subject_body_extractor",
    "examples.covariance.plot_mahalanobis_distances.$toplevel",
    "examples.covariance.plot_robust_vs_empirical_covariance.$toplevel",
    "examples.covariance.plot_sparse_cov.$toplevel",
    "examples.cross_decomposition.plot_compare_cross_decomposition.$toplevel",
    "examples.cross_decomposition.plot_pcr_vs_pls.$toplevel",
    "examples.datasets.plot_iris_dataset.$toplevel",
    "examples.datasets.plot_random_dataset.$toplevel",
    "examples.datasets.plot_random_multilabel_dataset.plot_2d",
    "examples.decomposition.plot_faces_decomposition.$toplevel",
    "examples.decomposition.plot_ica_vs_pca.$toplevel",
    "examples.decomposition.plot_ica_vs_pca.plot_samples",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "examples.decomposition.plot_kernel_pca.$toplevel",
    "examples.decomposition.plot_pca_3d.plot_figs",
    "examples.decomposition.plot_pca_iris.$toplevel",
    "examples.decomposition.plot_pca_vs_fa_model_selection.$toplevel",
    "examples.decomposition.plot_sparse_coding.$toplevel",
    "examples.decomposition.plot_sparse_coding.ricker_matrix",
    "examples.ensemble.plot_adaboost_multiclass.$toplevel",
    "examples.ensemble.plot_adaboost_regression.$toplevel",
    "examples.ensemble.plot_bias_variance.$toplevel",
    "examples.ensemble.plot_bias_variance.generate",
    "examples.ensemble.plot_feature_transformation.gbdt_apply",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.ensemble.plot_gradient_boosting_early_stopping.$toplevel",
    "examples.ensemble.plot_gradient_boosting_oob.heldout_score",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "examples.ensemble.plot_isolation_forest.$toplevel",
    "examples.ensemble.plot_monotonic_constraints.$toplevel",
    "examples.ensemble.plot_random_forest_embedding.$toplevel",
    "examples.ensemble.plot_random_forest_regression_multioutput.$toplevel",
    "examples.ensemble.plot_stack_predictors.load_ames_housing",
    "examples.ensemble.plot_voting_decision_regions.$toplevel",
    "examples.ensemble.plot_voting_probas.$toplevel",
    "examples.ensemble.plot_voting_regressor.$toplevel",
    "examples.exercises.plot_cv_diabetes.$toplevel",
    "examples.exercises.plot_digits_classification_exercise.$toplevel",
    "examples.exercises.plot_iris_exercise.$toplevel",
    "examples.feature_selection.plot_f_test_vs_mi.$toplevel",
    "examples.feature_selection.plot_feature_selection_pipeline.$toplevel",
    "examples.gaussian_process.plot_gpc.$toplevel",
    "examples.gaussian_process.plot_gpc_iris.$toplevel",
    "examples.gaussian_process.plot_gpc_isoprobability.$toplevel",
    "examples.gaussian_process.plot_gpc_isoprobability.g",
    "examples.gaussian_process.plot_gpc_xor.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.$toplevel",
    "examples.impute.plot_iterative_imputer_variants_comparison.$toplevel",
    "examples.impute.plot_missing_values.$toplevel",
    "examples.impute.plot_missing_values.add_missing_values",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "examples.linear_model.plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.$toplevel",
    "examples.linear_model.plot_huber_vs_ridge.$toplevel",
    "examples.linear_model.plot_iris_logistic.$toplevel",
    "examples.linear_model.plot_lasso_and_elasticnet.$toplevel",
    "examples.linear_model.plot_lasso_model_selection.$toplevel",
    "examples.linear_model.plot_logistic.$toplevel",
    "examples.linear_model.plot_multi_task_lasso_support.$toplevel",
    "examples.linear_model.plot_ols.$toplevel",
    "examples.linear_model.plot_ols_3d.$toplevel",
    "examples.linear_model.plot_ols_3d.plot_figs",
    "examples.linear_model.plot_polynomial_interpolation.$toplevel",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.linear_model.plot_ransac.$toplevel",
    "examples.linear_model.plot_ridge_path.$toplevel",
    "examples.linear_model.plot_robust_fit.$toplevel",
    "examples.linear_model.plot_sgd_early_stopping.load_mnist",
    "examples.linear_model.plot_sgd_iris.$toplevel",
    "examples.linear_model.plot_sgd_separating_hyperplane.$toplevel",
    "examples.linear_model.plot_sgd_weighted_samples.$toplevel",
    "examples.linear_model.plot_sgdocsvm_vs_ocsvm.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_20newsgroups.$toplevel",
    "examples.linear_model.plot_theilsen.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.load_mtpl2",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.plot_obs_pred",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.score_estimator",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.manifold.plot_mds.$toplevel",
    "examples.manifold.plot_swissroll.$toplevel",
    "examples.manifold.plot_t_sne_perplexity.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_isotonic_regression.$toplevel",
    "examples.miscellaneous.plot_johnson_lindenstrauss_bound.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.miscellaneous.plot_kernel_ridge_regression.$toplevel",
    "examples.miscellaneous.plot_metadata_routing.$toplevel",
    "examples.miscellaneous.plot_multilabel.plot_subfigure",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.preprocess_dataset",
    "examples.miscellaneous.plot_set_output.$toplevel",
    "examples.mixture.plot_concentration_prior.$toplevel",
    "examples.mixture.plot_concentration_prior.plot_results",
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.mixture.plot_gmm_covariances.make_ellipses",
    "examples.mixture.plot_gmm_init.$toplevel",
    "examples.mixture.plot_gmm_pdf.$toplevel",
    "examples.mixture.plot_gmm_selection.$toplevel",
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "examples.model_selection.plot_learning_curve.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.model_selection.plot_underfitting_overfitting.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.load_mnist",
    "examples.neighbors.plot_classification.$toplevel",
    "examples.neighbors.plot_digits_kde_sampling.$toplevel",
    "examples.neighbors.plot_kde_1d.$toplevel",
    "examples.neighbors.plot_lof_novelty_detection.$toplevel",
    "examples.neighbors.plot_lof_outlier_detection.$toplevel",
    "examples.neighbors.plot_nca_classification.$toplevel",
    "examples.neighbors.plot_nca_dim_reduction.$toplevel",
    "examples.neighbors.plot_nearest_centroid.$toplevel",
    "examples.neighbors.plot_regression.$toplevel",
    "examples.neighbors.plot_species_kde.$toplevel",
    "examples.neural_networks.plot_mlp_alpha.$toplevel",
    "examples.preprocessing.plot_all_scaling.$toplevel",
    "examples.preprocessing.plot_all_scaling.make_plot",
    "examples.preprocessing.plot_all_scaling.plot_distribution",
    "examples.preprocessing.plot_discretization.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_discretization_strategies.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_23_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_24_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_0_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel",
    "examples.semi_supervised.plot_self_training_varying_threshold.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_versus_svm_iris.$toplevel",
    "examples.svm.plot_custom_kernel.$toplevel",
    "examples.svm.plot_iris_svc.$toplevel",
    "examples.svm.plot_linearsvc_support_vectors.$toplevel",
    "examples.svm.plot_oneclass.$toplevel",
    "examples.svm.plot_rbf_parameters.$toplevel",
    "examples.svm.plot_separating_hyperplane.$toplevel",
    "examples.svm.plot_separating_hyperplane_unbalanced.$toplevel",
    "examples.svm.plot_svm_kernels.$toplevel",
    "examples.svm.plot_svm_margin.$toplevel",
    "examples.svm.plot_svm_nonlinear.$toplevel",
    "examples.svm.plot_svm_regression.$toplevel",
    "examples.svm.plot_svm_scale_c.$toplevel",
    "examples.svm.plot_svm_tie_breaking.$toplevel",
    "examples.svm.plot_weighted_samples.$toplevel",
    "examples.svm.plot_weighted_samples.plot_decision_function",
    "examples.text.plot_document_classification_20newsgroups.plot_feature_effects",
    "examples.text.plot_document_clustering.$toplevel",
    "examples.tree.plot_cost_complexity_pruning.$toplevel",
    "examples.tree.plot_iris_dtc.$toplevel",
    "examples.tree.plot_tree_regression.$toplevel",
    "examples.tree.plot_tree_regression_multioutput.$toplevel",
    "examples.tree.plot_unveil_tree_structure.$toplevel",
    "graphql.pyutils.default_ordered_dict.DefaultOrderedDict.__repr__",
    "jinja2.debug.fake_traceback",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.lexer.Lexer.wrap",
    "jinja2.lexer.compile_rules",
    "jinja2.nodes.Slice.as_const",
    "jinja2.parser.Parser.subparse.flush_data",
    "jinja2.visitor.NodeTransformer.generic_visit",
    "maint_tools.update_tracking_issue.create_or_update_issue",
    "pip._vendor.distlib.compat.OrderedDict.__init__",
    "pip._vendor.html5lib.treebuilders.base.ActiveFormattingElements.append",
    "pip._vendor.pyparsing.And.streamline",
    "pip._vendor.pyparsing.ParseExpression.streamline",
    "pip._vendor.pyparsing.ParserElement._setResultsName",
    "pip._vendor.pyparsing.ParserElement.copy",
    "pip._vendor.pyparsing.ParserElement.resetCache",
    "pip._vendor.pyparsing.ParserElement.transformString",
    "pip._vendor.pyparsing._trim_arity",
    "pip._vendor.pyparsing._trim_arity.extract_stack",
    "pip._vendor.pyparsing._ustr",
    "pip._vendor.urllib3._collections.HTTPHeaderDict.iteritems",
    "pip._vendor.urllib3._collections.HTTPHeaderDict.itermerged",
    "prompt_toolkit.layout.utils._ExplodedList.__setitem__",
    "setup.setup_package",
    "sklearn._loss.link.MultinomialLogit.link",
    "sklearn._loss.link.MultinomialLogit.symmetrize_raw_prediction",
    "sklearn._loss.loss.ExponentialLoss.predict_proba",
    "sklearn._loss.loss.HalfBinomialLoss.predict_proba",
    "sklearn._loss.loss.HalfMultinomialLoss.fit_intercept_only",
    "sklearn.base.BaseEstimator.__repr__",
    "sklearn.base.BiclusterMixin.get_submatrix",
    "sklearn.calibration._CalibratedClassifier.predict_proba",
    "sklearn.calibration._compute_predictions",
    "sklearn.calibration._fit_calibrator",
    "sklearn.calibration.calibration_curve",
    "sklearn.cluster._affinity_propagation._affinity_propagation",
    "sklearn.cluster._agglomerative.AgglomerativeClustering._fit",
    "sklearn.cluster._agglomerative._single_linkage_tree",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.cluster._bicluster.BaseSpectral._svd",
    "sklearn.cluster._bicluster.SpectralBiclustering._fit_best_piecewise",
    "sklearn.cluster._bicluster.SpectralCoclustering._fit",
    "sklearn.cluster._bicluster._log_normalize",
    "sklearn.cluster._bicluster._scale_normalize",
    "sklearn.cluster._birch._CFNode.append_subcluster",
    "sklearn.cluster._birch._iterate_sparse_X",
    "sklearn.cluster._feature_agglomeration.AgglomerationTransform.transform",
    "sklearn.cluster._hdbscan.hdbscan._hdbscan_prims",
    "sklearn.cluster._kmeans._kmeans_single_elkan",
    "sklearn.cluster._kmeans._kmeans_single_lloyd",
    "sklearn.cluster._kmeans._mini_batch_step",
    "sklearn.cluster._mean_shift.estimate_bandwidth",
    "sklearn.cluster._optics._compute_core_distances_",
    "sklearn.cluster._optics._extract_xi_labels",
    "sklearn.cluster._optics._set_reach_dist",
    "sklearn.cluster._optics._xi_cluster",
    "sklearn.cluster._spectral.cluster_qr",
    "sklearn.cluster._spectral.discretize",
    "sklearn.cluster.tests.common.generate_clustered_data",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.compose._column_transformer.ColumnTransformer._record_output_indices",
    "sklearn.compose._column_transformer.make_column_selector.__call__",
    "sklearn.compose._target.TransformedTargetRegressor._fit_transformer",
    "sklearn.covariance._empirical_covariance.EmpiricalCovariance.mahalanobis",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.covariance._graph_lasso.alpha_max",
    "sklearn.covariance._robust_covariance._c_step",
    "sklearn.covariance._robust_covariance.fast_mcd",
    "sklearn.covariance._robust_covariance.select_candidates",
    "sklearn.covariance._shrunk_covariance._ledoit_wolf",
    "sklearn.covariance._shrunk_covariance._oas",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf_shrinkage",
    "sklearn.covariance._shrunk_covariance.shrunk_covariance",
    "sklearn.cross_decomposition._pls.PLSSVD.fit",
    "sklearn.cross_decomposition._pls._PLS.fit",
    "sklearn.cross_decomposition._pls._get_first_singular_vectors_svd",
    "sklearn.cross_decomposition._pls._pinv2_old",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._base._convert_data_dataframe",
    "sklearn.datasets._base._pkl_filepath",
    "sklearn.datasets._base.load_csv_data",
    "sklearn.datasets._base.load_digits",
    "sklearn.datasets._california_housing.fetch_california_housing",
    "sklearn.datasets._covtype.fetch_covtype",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._kddcup99.fetch_kddcup99",
    "sklearn.datasets._lfw._load_imgs",
    "sklearn.datasets._lfw.fetch_lfw_pairs",
    "sklearn.datasets._lfw.fetch_lfw_people",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._samples_generator._generate_hypercube",
    "sklearn.datasets._samples_generator._shuffle",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.datasets._samples_generator.make_friedman1",
    "sklearn.datasets._samples_generator.make_friedman2",
    "sklearn.datasets._samples_generator.make_friedman3",
    "sklearn.datasets._samples_generator.make_gaussian_quantiles",
    "sklearn.datasets._samples_generator.make_regression",
    "sklearn.datasets._samples_generator.make_s_curve",
    "sklearn.datasets._samples_generator.make_sparse_coded_signal",
    "sklearn.datasets._samples_generator.make_sparse_uncorrelated",
    "sklearn.datasets._svmlight_format_io._dump_svmlight",
    "sklearn.datasets._twenty_newsgroups.strip_newsgroup_footer",
    "sklearn.datasets.tests.test_rcv1.test_fetch_rcv1",
    "sklearn.decomposition._base._BasePCA.get_covariance",
    "sklearn.decomposition._base._BasePCA.get_precision",
    "sklearn.decomposition._base._BasePCA.inverse_transform",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._initialize_dict",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning._BaseSparseCoding._transform",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning._sparse_encode",
    "sklearn.decomposition._dict_learning._update_dict",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._factor_analysis.FactorAnalysis._rotate",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.get_covariance",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.get_precision",
    "sklearn.decomposition._fastica.FastICA._fit_transform",
    "sklearn.decomposition._fastica._gs_decorrelation",
    "sklearn.decomposition._fastica._ica_def",
    "sklearn.decomposition._fastica._ica_par",
    "sklearn.decomposition._incremental_pca.IncrementalPCA.partial_fit",
    "sklearn.decomposition._kernel_pca.KernelPCA._fit_inverse_transform",
    "sklearn.decomposition._kernel_pca.KernelPCA._fit_transform",
    "sklearn.decomposition._kernel_pca.KernelPCA.transform",
    "sklearn.decomposition._lda.LatentDirichletAllocation._approx_bound",
    "sklearn.decomposition._lda.LatentDirichletAllocation._e_step",
    "sklearn.decomposition._lda.LatentDirichletAllocation.fit",
    "sklearn.decomposition._lda.LatentDirichletAllocation.partial_fit",
    "sklearn.decomposition._lda.LatentDirichletAllocation.transform",
    "sklearn.decomposition._lda._update_doc_distribution",
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform",
    "sklearn.decomposition._nmf.MiniBatchNMF._minibatch_step",
    "sklearn.decomposition._nmf.MiniBatchNMF._solve_W",
    "sklearn.decomposition._nmf._beta_divergence",
    "sklearn.decomposition._nmf._initialize_nmf",
    "sklearn.decomposition._nmf._multiplicative_update_h",
    "sklearn.decomposition._nmf._multiplicative_update_w",
    "sklearn.decomposition._nmf._special_sparse_dot",
    "sklearn.decomposition._nmf._update_coordinate_descent",
    "sklearn.decomposition._pca.PCA._fit_full",
    "sklearn.decomposition._pca.PCA._fit_truncated",
    "sklearn.decomposition._pca.PCA.fit_transform",
    "sklearn.decomposition._pca._assess_dimension",
    "sklearn.decomposition._sparse_pca.MiniBatchSparsePCA._fit",
    "sklearn.decomposition._sparse_pca.SparsePCA._fit",
    "sklearn.decomposition._truncated_svd.TruncatedSVD.fit_transform",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_eigen",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_svd",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba",
    "sklearn.discriminant_analysis._class_cov",
    "sklearn.discriminant_analysis._class_means",
    "sklearn.discriminant_analysis._cov",
    "sklearn.dummy.DummyClassifier.predict_proba",
    "sklearn.dummy.DummyRegressor.fit",
    "sklearn.ensemble._bagging.BaggingClassifier._set_oob_score",
    "sklearn.ensemble._bagging.BaggingClassifier.decision_function",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_proba",
    "sklearn.ensemble._bagging.BaggingRegressor._set_oob_score",
    "sklearn.ensemble._bagging.BaggingRegressor.predict",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._bagging._parallel_build_estimators",
    "sklearn.ensemble._bagging._parallel_decision_function",
    "sklearn.ensemble._bagging._parallel_predict_log_proba",
    "sklearn.ensemble._bagging._parallel_predict_proba",
    "sklearn.ensemble._bagging._parallel_predict_regression",
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble._validate_estimators",
    "sklearn.ensemble._base._partition_estimators",
    "sklearn.ensemble._forest.BaseForest._compute_oob_predictions",
    "sklearn.ensemble._forest.ForestClassifier._validate_y_class_weight",
    "sklearn.ensemble._forest.ForestClassifier.predict",
    "sklearn.ensemble._forest.ForestRegressor._get_oob_predictions",
    "sklearn.ensemble._gb.BaseGradientBoosting.apply",
    "sklearn.ensemble._gb.BaseGradientBoosting.fit",
    "sklearn.ensemble._gb_losses.BinomialDeviance._raw_prediction_to_proba",
    "sklearn.ensemble._gb_losses.BinomialDeviance.get_init_raw_predictions",
    "sklearn.ensemble._gb_losses.ExponentialLoss._raw_prediction_to_proba",
    "sklearn.ensemble._gb_losses.ExponentialLoss.get_init_raw_predictions",
    "sklearn.ensemble._gb_losses.LeastSquaresError.update_terminal_regions",
    "sklearn.ensemble._gb_losses.LossFunction.update_terminal_regions",
    "sklearn.ensemble._gb_losses.MultinomialDeviance.__call__",
    "sklearn.ensemble._gb_losses.MultinomialDeviance._raw_prediction_to_proba",
    "sklearn.ensemble._gb_losses.MultinomialDeviance.negative_gradient",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.fit",
    "sklearn.ensemble._hist_gradient_boosting.binning._find_binning_thresholds",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._predict_iterations",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._should_stop",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._staged_raw_predict",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._iforest.IsolationForest._compute_score_samples",
    "sklearn.ensemble._stacking.StackingClassifier.predict_proba",
    "sklearn.ensemble._stacking._BaseStacking._concatenate_predictions",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost_real",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.decision_function",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_decision_function",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor._get_median_predict",
    "sklearn.ensemble._weight_boosting._samme_proba",
    "sklearn.externals._arff.ArffDecoder._decode",
    "sklearn.externals._arff.ArffDecoder._decode_attribute",
    "sklearn.externals._arff._escape_sub_callback",
    "sklearn.externals._arff._unquote",
    "sklearn.externals._packaging.version._parse_version_parts",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._transform",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.inverse_transform",
    "sklearn.feature_extraction.image.PatchExtractor.transform",
    "sklearn.feature_extraction.image._extract_patches",
    "sklearn.feature_extraction.image._make_edges_3d",
    "sklearn.feature_extraction.image._mask_edges_weights",
    "sklearn.feature_extraction.image.extract_patches_2d",
    "sklearn.feature_extraction.image.reconstruct_from_patches_2d",
    "sklearn.feature_extraction.text.CountVectorizer._limit_features",
    "sklearn.feature_extraction.text.CountVectorizer.inverse_transform",
    "sklearn.feature_extraction.text._VectorizerMixin._char_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin._char_wb_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin._word_ngrams",
    "sklearn.feature_selection._base.SelectorMixin._transform",
    "sklearn.feature_selection._base.SelectorMixin.inverse_transform",
    "sklearn.feature_selection._from_model.SelectFromModel._get_support_mask",
    "sklearn.feature_selection._mutual_info._compute_mi_cc",
    "sklearn.feature_selection._mutual_info._compute_mi_cd",
    "sklearn.feature_selection._mutual_info._estimate_mi",
    "sklearn.feature_selection._mutual_info._iterate_columns",
    "sklearn.feature_selection._rfe.RFE._fit",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.feature_selection._rfe._rfe_single_fit",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector._get_best_new_feature_score",
    "sklearn.feature_selection._univariate_selection.SelectKBest._get_support_mask",
    "sklearn.feature_selection._univariate_selection.SelectPercentile._get_support_mask",
    "sklearn.gaussian_process._gpc.$toplevel",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace._posterior_mode",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.log_marginal_likelihood",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.predict_proba",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.log_marginal_likelihood",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.sample_y",
    "sklearn.gaussian_process.kernels.CompoundKernel.theta@setter",
    "sklearn.gaussian_process.kernels.ExpSineSquared.__call__",
    "sklearn.gaussian_process.kernels.Exponentiation.__call__",
    "sklearn.gaussian_process.kernels.Kernel.theta@setter",
    "sklearn.gaussian_process.kernels.KernelOperator.theta@setter",
    "sklearn.gaussian_process.kernels.Matern.__call__",
    "sklearn.gaussian_process.kernels.Product.__call__",
    "sklearn.gaussian_process.kernels.RBF.__call__",
    "sklearn.gaussian_process.kernels.RationalQuadratic.__call__",
    "sklearn.gaussian_process.kernels.WhiteKernel.__call__",
    "sklearn.gaussian_process.kernels._approx_fprime",
    "sklearn.impute._base.MissingIndicator.fit_transform",
    "sklearn.impute._base.MissingIndicator.transform",
    "sklearn.impute._base.SimpleImputer._dense_fit",
    "sklearn.impute._base.SimpleImputer._sparse_fit",
    "sklearn.impute._base.SimpleImputer.inverse_transform",
    "sklearn.impute._base.SimpleImputer.transform",
    "sklearn.impute._iterative.IterativeImputer._get_neighbor_feat_idx",
    "sklearn.impute._iterative.IterativeImputer._get_ordered_idx",
    "sklearn.impute._iterative.IterativeImputer._impute_one_feature",
    "sklearn.impute._iterative.IterativeImputer._initial_imputation",
    "sklearn.impute._knn.KNNImputer._calc_impute",
    "sklearn.impute._knn.KNNImputer.transform",
    "sklearn.impute._knn.KNNImputer.transform.process_chunk",
    "sklearn.inspection._permutation_importance._calculate_permutation_scores",
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_ice_lines",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.isotonic.IsotonicRegression._build_y",
    "sklearn.isotonic.isotonic_regression",
    "sklearn.kernel_approximation.Nystroem.fit",
    "sklearn.kernel_approximation.PolynomialCountSketch.transform",
    "sklearn.linear_model._base.LinearRegression.fit",
    "sklearn.linear_model._base._check_precomputed_gram_matrix",
    "sklearn.linear_model._base._rescale_data",
    "sklearn.linear_model._bayes.ARDRegression._update_sigma",
    "sklearn.linear_model._bayes.ARDRegression._update_sigma_woodbury",
    "sklearn.linear_model._bayes.ARDRegression.fit.update_coeff",
    "sklearn.linear_model._bayes.ARDRegression.predict",
    "sklearn.linear_model._bayes.BayesianRidge._log_marginal_likelihood",
    "sklearn.linear_model._bayes.BayesianRidge._update_coef_",
    "sklearn.linear_model._bayes.BayesianRidge.fit",
    "sklearn.linear_model._coordinate_descent.ElasticNet.fit",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._coordinate_descent._alpha_grid",
    "sklearn.linear_model._coordinate_descent._path_residuals",
    "sklearn.linear_model._coordinate_descent.enet_path",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit",
    "sklearn.linear_model._huber.HuberRegressor.fit",
    "sklearn.linear_model._huber._huber_loss_and_gradient",
    "sklearn.linear_model._least_angle.Lars._fit",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._least_angle.LassoLarsIC.fit",
    "sklearn.linear_model._least_angle._lars_path_residues",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._linear_loss.LinearModelLoss.gradient",
    "sklearn.linear_model._linear_loss.LinearModelLoss.gradient_hessian",
    "sklearn.linear_model._linear_loss.LinearModelLoss.gradient_hessian_product",
    "sklearn.linear_model._linear_loss.LinearModelLoss.gradient_hessian_product.hessp",
    "sklearn.linear_model._linear_loss.LinearModelLoss.loss_gradient",
    "sklearn.linear_model._linear_loss.LinearModelLoss.weight_intercept",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._logistic._log_reg_scoring_path",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuit.fit",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.fit",
    "sklearn.linear_model._omp._cholesky_omp",
    "sklearn.linear_model._omp._gram_omp",
    "sklearn.linear_model._omp._omp_path_residues",
    "sklearn.linear_model._omp.orthogonal_mp",
    "sklearn.linear_model._omp.orthogonal_mp_gram",
    "sklearn.linear_model._quantile.QuantileRegressor.fit",
    "sklearn.linear_model._ridge._RidgeGCV._compute_gram",
    "sklearn.linear_model._ridge._RidgeGCV._diag_dot",
    "sklearn.linear_model._ridge._RidgeGCV._eigen_decompose_covariance",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance_intercept",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_covariance_no_intercept",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_gram",
    "sklearn.linear_model._ridge._RidgeGCV._solve_svd_design_matrix",
    "sklearn.linear_model._ridge._RidgeGCV._sparse_multidot_diag",
    "sklearn.linear_model._ridge._RidgeGCV._svd_decompose_design_matrix",
    "sklearn.linear_model._ridge._RidgeGCV.fit",
    "sklearn.linear_model._ridge._XT_CenterStackOp._matmat",
    "sklearn.linear_model._ridge._XT_CenterStackOp._matvec",
    "sklearn.linear_model._ridge._X_CenterStackOp._matmat",
    "sklearn.linear_model._ridge._X_CenterStackOp._matvec",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.linear_model._ridge._solve_cholesky",
    "sklearn.linear_model._ridge._solve_cholesky_kernel",
    "sklearn.linear_model._ridge._solve_lbfgs",
    "sklearn.linear_model._ridge._solve_lsqr",
    "sklearn.linear_model._ridge._solve_sparse_cg",
    "sklearn.linear_model._ridge._solve_svd",
    "sklearn.linear_model._sag.sag_solver",
    "sklearn.linear_model._stochastic_gradient.BaseSGD._get_loss_function",
    "sklearn.linear_model._stochastic_gradient.SGDClassifier.predict_proba",
    "sklearn.linear_model._theil_sen.TheilSenRegressor.fit",
    "sklearn.linear_model._theil_sen._lstsq",
    "sklearn.linear_model._theil_sen._modified_weiszfeld_step",
    "sklearn.linear_model.tests.test_huber.make_regression_with_outliers",
    "sklearn.manifold._isomap.Isomap.transform",
    "sklearn.manifold._locally_linear.barycenter_kneighbors_graph",
    "sklearn.manifold._locally_linear.barycenter_weights",
    "sklearn.manifold._locally_linear.locally_linear_embedding",
    "sklearn.manifold._locally_linear.null_space",
    "sklearn.manifold._spectral_embedding._set_diag",
    "sklearn.manifold._spectral_embedding.spectral_embedding",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.manifold._t_sne.trustworthiness",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._classification.cohen_kappa_score",
    "sklearn.metrics._classification.hinge_loss",
    "sklearn.metrics._classification.jaccard_score",
    "sklearn.metrics._classification.log_loss",
    "sklearn.metrics._classification.multilabel_confusion_matrix",
    "sklearn.metrics._classification.precision_recall_fscore_support",
    "sklearn.metrics._ranking._binary_clf_curve",
    "sklearn.metrics._ranking._binary_roc_auc_score",
    "sklearn.metrics._ranking._dcg_sample_scores",
    "sklearn.metrics._ranking._tie_averaged_dcg",
    "sklearn.metrics._ranking.average_precision_score._binary_uninterpolated_average_precision",
    "sklearn.metrics._ranking.det_curve",
    "sklearn.metrics._ranking.label_ranking_average_precision_score",
    "sklearn.metrics._ranking.label_ranking_loss",
    "sklearn.metrics._ranking.precision_recall_curve",
    "sklearn.metrics._ranking.roc_auc_score",
    "sklearn.metrics._ranking.top_k_accuracy_score",
    "sklearn.metrics._regression.mean_tweedie_deviance",
    "sklearn.metrics._regression.r2_score",
    "sklearn.metrics._scorer._ThresholdScorer._score",
    "sklearn.metrics.cluster._unsupervised._silhouette_reduce",
    "sklearn.metrics.cluster._unsupervised.davies_bouldin_score",
    "sklearn.metrics.cluster._unsupervised.silhouette_score",
    "sklearn.metrics.cluster.tests.test_bicluster.test_consensus_score",
    "sklearn.metrics.pairwise._dist_wrapper",
    "sklearn.metrics.pairwise._euclidean_distances",
    "sklearn.metrics.pairwise._euclidean_distances_upcast",
    "sklearn.metrics.pairwise.manhattan_distances",
    "sklearn.metrics.pairwise.pairwise_distances_chunked",
    "sklearn.mixture._base.BaseMixture._estimate_log_prob_resp",
    "sklearn.mixture._base.BaseMixture._initialize_parameters",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_log_prob",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_log_weights",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_means",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_weights",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_wishart_diag",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_wishart_full",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._set_parameters",
    "sklearn.mixture._bayesian_mixture._log_wishart_norm",
    "sklearn.mixture._gaussian_mixture._compute_log_det_cholesky",
    "sklearn.mixture._gaussian_mixture._estimate_gaussian_covariances_diag",
    "sklearn.mixture._gaussian_mixture._estimate_gaussian_covariances_full",
    "sklearn.mixture._gaussian_mixture._estimate_gaussian_covariances_tied",
    "sklearn.mixture._gaussian_mixture._estimate_gaussian_parameters",
    "sklearn.mixture._gaussian_mixture._estimate_log_gaussian_prob",
    "sklearn.model_selection._search.BaseSearchCV._format_results._store",
    "sklearn.model_selection._search.ParameterGrid.__getitem__",
    "sklearn.model_selection._search_successive_halving._top_k",
    "sklearn.model_selection._split.GroupKFold._iter_test_indices",
    "sklearn.model_selection._split.KFold._iter_test_indices",
    "sklearn.model_selection._split.ShuffleSplit._iter_indices",
    "sklearn.model_selection._split.StratifiedKFold._make_test_folds",
    "sklearn.model_selection._split.StratifiedShuffleSplit._iter_indices",
    "sklearn.model_selection._split.TimeSeriesSplit.split",
    "sklearn.model_selection._split._pprint",
    "sklearn.model_selection._validation._enforce_prediction_order",
    "sklearn.model_selection._validation._fit_and_predict",
    "sklearn.model_selection._validation._incremental_fit_estimator",
    "sklearn.model_selection._validation.cross_val_predict",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.multiclass.OneVsOneClassifier.decision_function",
    "sklearn.multiclass.OneVsRestClassifier.predict_proba",
    "sklearn.multiclass.OutputCodeClassifier.fit",
    "sklearn.multiclass._predict_binary",
    "sklearn.multioutput.ClassifierChain.decision_function",
    "sklearn.multioutput.ClassifierChain.predict_proba",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.multioutput._BaseChain.predict",
    "sklearn.multioutput._MultiOutputEstimator.fit",
    "sklearn.multioutput._MultiOutputEstimator.partial_fit",
    "sklearn.naive_bayes.CategoricalNB._count",
    "sklearn.naive_bayes.CategoricalNB._count._update_cat_count",
    "sklearn.naive_bayes.CategoricalNB._joint_log_likelihood",
    "sklearn.naive_bayes.GaussianNB._joint_log_likelihood",
    "sklearn.naive_bayes.GaussianNB._partial_fit",
    "sklearn.neighbors._base.KNeighborsMixin._kneighbors_reduce_func",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors",
    "sklearn.neighbors._base.NeighborsBase._fit",
    "sklearn.neighbors._base._is_sorted_by_data",
    "sklearn.neighbors._base._kneighbors_from_graph.extract",
    "sklearn.neighbors._base._radius_neighbors_from_graph",
    "sklearn.neighbors._base.sort_graph_by_row_values",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict_proba",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.fit",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba",
    "sklearn.neighbors._kde.KernelDensity.sample",
    "sklearn.neighbors._lof.LocalOutlierFactor.fit",
    "sklearn.neighbors._lof.LocalOutlierFactor.score_samples",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._initialize",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.fit",
    "sklearn.neighbors._regression.KNeighborsRegressor.predict",
    "sklearn.neighbors._regression.RadiusNeighborsRegressor.predict",
    "sklearn.neural_network._base.inplace_softmax",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._unpack",
    "sklearn.pipeline.FeatureUnion._update_transformer_list",
    "sklearn.pipeline.Pipeline._validate_steps",
    "sklearn.preprocessing._data.KernelCenterer.transform",
    "sklearn.preprocessing._data.PowerTransformer._fit",
    "sklearn.preprocessing._data.PowerTransformer.inverse_transform",
    "sklearn.preprocessing._data.PowerTransformer.transform",
    "sklearn.preprocessing._data.QuantileTransformer._sparse_fit",
    "sklearn.preprocessing._data.QuantileTransformer._transform",
    "sklearn.preprocessing._data.QuantileTransformer._transform_col",
    "sklearn.preprocessing._data.RobustScaler.fit",
    "sklearn.preprocessing._data.normalize",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.inverse_transform",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.transform",
    "sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform",
    "sklearn.preprocessing._encoders.OneHotEncoder.transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.transform",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.preprocessing._encoders._BaseEncoder._identify_infrequent",
    "sklearn.preprocessing._encoders._BaseEncoder._map_infrequent_categories",
    "sklearn.preprocessing._encoders._BaseEncoder._transform",
    "sklearn.preprocessing._function_transformer.FunctionTransformer._check_inverse_transform",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit_transform",
    "sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform",
    "sklearn.preprocessing._label._inverse_binarize_multiclass",
    "sklearn.preprocessing._label._inverse_binarize_thresholding",
    "sklearn.preprocessing._label.label_binarize",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform",
    "sklearn.preprocessing._polynomial.SplineTransformer._get_base_knot_positions",
    "sklearn.preprocessing._polynomial.SplineTransformer.fit",
    "sklearn.preprocessing._polynomial.SplineTransformer.transform",
    "sklearn.preprocessing._target_encoder.TargetEncoder._transform_X_ordinal",
    "sklearn.preprocessing._target_encoder.TargetEncoder.fit_transform",
    "sklearn.preprocessing._target_encoder.TargetEncoder.transform",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.fit",
    "sklearn.semi_supervised._label_propagation.LabelPropagation._build_graph",
    "sklearn.semi_supervised._label_propagation.LabelSpreading._build_graph",
    "sklearn.semi_supervised._self_training.SelfTrainingClassifier.fit",
    "sklearn.svm._base._fit_liblinear",
    "sklearn.svm._base._one_vs_one_coef",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._classes.BaseDecisionTree.predict",
    "sklearn.tree._classes.DecisionTreeClassifier.predict_proba",
    "sklearn.tree._export._BaseTreeExporter.get_fill_color",
    "sklearn.tree._export._BaseTreeExporter.node_to_str",
    "sklearn.tree._export.export_text._add_leaf",
    "sklearn.tree._export.export_text.print_tree_recurse",
    "sklearn.tree._reingold_tilford.execute_shifts",
    "sklearn.utils._approximate_mode",
    "sklearn.utils._array_api._ArrayAPIWrapper.take",
    "sklearn.utils._array_indexing",
    "sklearn.utils._encode._unique_np",
    "sklearn.utils._metadata_requests._MetadataRequester._build_request_for_signature",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils._mocking.CheckingClassifier.decision_function",
    "sklearn.utils._mocking.CheckingClassifier.predict_proba",
    "sklearn.utils._pandas_indexing",
    "sklearn.utils._param_validation.HasMethods.__str__",
    "sklearn.utils._param_validation.MissingValues.__str__",
    "sklearn.utils._param_validation._Booleans.__str__",
    "sklearn.utils._param_validation._CVObjects.__str__",
    "sklearn.utils._param_validation._RandomStates.__str__",
    "sklearn.utils._param_validation._VerboseHelper.__str__",
    "sklearn.utils._param_validation.validate_parameter_constraints",
    "sklearn.utils._plotting._validate_score_name",
    "sklearn.utils._response._get_response_values",
    "sklearn.utils._safe_assign",
    "sklearn.utils._set_output._wrap_method_output.wrapped",
    "sklearn.utils._testing.MinimalClassifier.predict_proba",
    "sklearn.utils._testing._IgnoreWarnings.__enter__",
    "sklearn.utils._testing._IgnoreWarnings.__exit__",
    "sklearn.utils._testing._convert_container",
    "sklearn.utils._testing._create_memmap_backed_array",
    "sklearn.utils._testing._get_func_name",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils._to_object_array",
    "sklearn.utils.axis0_safe_slice",
    "sklearn.utils.class_weight.compute_sample_weight",
    "sklearn.utils.estimator_checks._check_transformer",
    "sklearn.utils.estimator_checks._enforce_estimator_tags_X",
    "sklearn.utils.estimator_checks.check_classifier_multioutput",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_decision_function",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_representation_invariance",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_decision_proba_consistency",
    "sklearn.utils.estimator_checks.check_dict_unchanged",
    "sklearn.utils.estimator_checks.check_dont_overwrite_parameters",
    "sklearn.utils.estimator_checks.check_dtype_object",
    "sklearn.utils.estimator_checks.check_estimators_dtypes",
    "sklearn.utils.estimator_checks.check_estimators_nan_inf",
    "sklearn.utils.estimator_checks.check_estimators_partial_fit_n_features",
    "sklearn.utils.estimator_checks.check_fit2d_1feature",
    "sklearn.utils.estimator_checks.check_fit2d_1sample",
    "sklearn.utils.estimator_checks.check_fit2d_predict1d",
    "sklearn.utils.estimator_checks.check_fit_score_takes_y",
    "sklearn.utils.estimator_checks.check_methods_sample_order_invariance",
    "sklearn.utils.estimator_checks.check_methods_subset_invariance",
    "sklearn.utils.estimator_checks.check_n_features_in_after_fitting",
    "sklearn.utils.estimator_checks.check_outlier_corruption",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.estimator_checks.check_regressors_int",
    "sklearn.utils.estimator_checks.check_regressors_no_decision_function",
    "sklearn.utils.estimator_checks.check_regressors_train",
    "sklearn.utils.estimator_checks.check_sample_weights_invariance",
    "sklearn.utils.estimator_checks.check_supervised_y_2d",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out_pandas",
    "sklearn.utils.extmath._deterministic_vector_sign_flip",
    "sklearn.utils.extmath._incremental_mean_and_var",
    "sklearn.utils.extmath._randomized_eigsh",
    "sklearn.utils.extmath.cartesian",
    "sklearn.utils.extmath.randomized_svd",
    "sklearn.utils.extmath.safe_sparse_dot",
    "sklearn.utils.extmath.svd_flip",
    "sklearn.utils.gen_batches",
    "sklearn.utils.gen_even_slices",
    "sklearn.utils.multiclass._ovr_decision_function",
    "sklearn.utils.multiclass.class_distribution",
    "sklearn.utils.resample",
    "sklearn.utils.sparsefuncs.csc_median_axis_0",
    "sklearn.utils.sparsefuncs.inplace_swap_row_csr",
    "sklearn.utils.stats._weighted_percentile",
    "sklearn.utils.tests.test_estimator_checks.NotInvariantSampleOrder.predict",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_decision_function",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_predict",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.tests.test_pprint.test_basic",
    "sklearn.utils.tests.test_pprint.test_bruteforce_ellipsis",
    "sklearn.utils.tests.test_pprint.test_changed_only",
    "sklearn.utils.tests.test_pprint.test_deeply_nested",
    "sklearn.utils.tests.test_pprint.test_gridsearch",
    "sklearn.utils.tests.test_pprint.test_gridsearch_pipeline",
    "sklearn.utils.tests.test_pprint.test_n_max_elements_to_show",
    "sklearn.utils.tests.test_pprint.test_pipeline",
    "sklearn.utils.tests.test_shortest_path.floyd_warshall_slow",
    "sklearn.utils.tests.test_shortest_path.generate_graph",
    "sklearn.utils.validation._check_monotonic_cst",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f",
    "traitlets.traitlets.HasDescriptors.__new__",
    "traitlets.traitlets.HasTraits.hold_trait_notifications",
    "traitlets.utils.getargspec.getargspec"
  ],
  "slice.indices": [
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__delitem__"
  ],
  "slice.start": [
    "sklearn.utils._determine_key_type",
    "sklearn.utils._get_column_indices"
  ],
  "slice.step": [
    "sklearn.pipeline.Pipeline.__getitem__"
  ],
  "slice.stop": [
    "sklearn.utils._determine_key_type",
    "sklearn.utils._get_column_indices"
  ],
  "sqlalchemy.engine.result.RMKeyView.__iter__": [
    "Ovr{sqlalchemy.engine.result.RMKeyView.__iter__}"
  ],
  "sqlalchemy.engine.row.ROMappingView.__iter__": [
    "Ovr{sqlalchemy.engine.row.ROMappingView.__iter__}"
  ],
  "sqlalchemy.engine.row.Row.__eq__": [
    "click.parser.Argument.process"
  ],
  "sqlalchemy.engine.row.Row.__ne__": [
    "click.parser.Argument.process"
  ],
  "sqlalchemy.engine.row.Row.index": [
    "Ovr{sqlalchemy.engine.row.Row.index}"
  ],
  "sqlalchemy.engine.row.RowMapping.items": [
    "Ovr{sqlalchemy.engine.row.RowMapping.items}"
  ],
  "sqlalchemy.engine.row.RowMapping.values": [
    "Ovr{sqlalchemy.engine.row.RowMapping.values}"
  ],
  "sqlalchemy.engine.url.URL.__eq__": [
    "click.parser.Argument.process"
  ],
  "sqlalchemy.engine.url.URL.__ne__": [
    "click.parser.Argument.process"
  ],
  "sqlalchemy.ext.mutable.MutableDict.__setitem__": [
    "Ovr{sqlalchemy.ext.mutable.MutableDict.__setitem__}"
  ],
  "sqlalchemy.ext.mutable.MutableDict.pop": [
    "Ovr{sqlalchemy.ext.mutable.MutableDict.pop}"
  ],
  "sqlalchemy.ext.mutable.MutableDict.setdefault": [
    "click.globals.push_context",
    "click.parser.Option.process",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.linear_model._quantile.QuantileRegressor.fit"
  ],
  "sqlalchemy.ext.mutable.MutableDict.update": [
    "benchmarks.bench_text_vectorizers.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "importlib_metadata.DistributionFinder.Context.__init__",
    "importlib_metadata.EntryPoint.__init__",
    "jinja2.nodes.args_as_const",
    "pip._vendor.requests.cookies.create_cookie",
    "sklearn.base.BaseEstimator.__setstate__",
    "sklearn.base.BaseEstimator._get_tags",
    "sklearn.base.BaseEstimator.get_params",
    "sklearn.calibration.CalibrationDisplay.plot",
    "sklearn.externals._arff.$toplevel",
    "sklearn.gaussian_process.kernels.Exponentiation.get_params",
    "sklearn.gaussian_process.kernels.KernelOperator.get_params",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.plot",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.plot",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.metrics.pairwise.pairwise_distances_chunked",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f"
  ],
  "sqlalchemy.ext.mutable.MutableList.__iadd__": [
    "Ovr{sqlalchemy.ext.mutable.MutableList.__iadd__}"
  ],
  "sqlalchemy.ext.mutable.MutableList.__setitem__": [
    "Ovr{sqlalchemy.ext.mutable.MutableList.__setitem__}"
  ],
  "sqlalchemy.ext.mutable.MutableList.append": [
    "Ovr{sqlalchemy.ext.mutable.MutableList.append}"
  ],
  "sqlalchemy.ext.mutable.MutableList.extend": [
    "Ovr{sqlalchemy.ext.mutable.MutableList.extend}"
  ],
  "sqlalchemy.ext.mutable.MutableList.insert": [
    "Ovr{sqlalchemy.ext.mutable.MutableList.insert}"
  ],
  "sqlalchemy.ext.mutable.MutableList.pop": [
    "Ovr{sqlalchemy.ext.mutable.MutableList.pop}"
  ],
  "sqlalchemy.ext.mutable.MutableList.remove": [
    "Ovr{sqlalchemy.ext.mutable.MutableList.remove}"
  ],
  "sqlalchemy.ext.mutable.MutableList.reverse": [
    "click.parser._unpack_args",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__delitem__",
    "sklearn.cluster._optics._xi_cluster"
  ],
  "sqlalchemy.ext.mutable.MutableList.sort": [
    "Ovr{sqlalchemy.ext.mutable.MutableList.sort}"
  ],
  "sqlalchemy.ext.mutable.MutableSet.__ior__": [
    "Ovr{sqlalchemy.ext.mutable.MutableSet.__ior__}"
  ],
  "sqlalchemy.ext.mutable.MutableSet.__isub__": [
    "Ovr{sqlalchemy.ext.mutable.MutableSet.__isub__}"
  ],
  "sqlalchemy.ext.mutable.MutableSet.add": [
    "Ovr{sqlalchemy.ext.mutable.MutableSet.add}"
  ],
  "sqlalchemy.ext.mutable.MutableSet.difference_update": [
    "Ovr{sqlalchemy.ext.mutable.MutableSet.difference_update}"
  ],
  "sqlalchemy.ext.mutable.MutableSet.pop": [
    "sklearn.metrics._classification._check_targets",
    "sklearn.utils._determine_key_type",
    "sklearn.utils.multiclass.unique_labels"
  ],
  "sqlalchemy.ext.mutable.MutableSet.update": [
    "Ovr{sqlalchemy.ext.mutable.MutableSet.update}"
  ],
  "sqlalchemy.ext.orderinglist.OrderingList.__setitem__": [
    "Ovr{sqlalchemy.ext.orderinglist.OrderingList.__setitem__}"
  ],
  "sqlalchemy.ext.orderinglist.OrderingList.append": [
    "Ovr{sqlalchemy.ext.orderinglist.OrderingList.append}"
  ],
  "sqlalchemy.ext.orderinglist.OrderingList.insert": [
    "Ovr{sqlalchemy.ext.orderinglist.OrderingList.insert}"
  ],
  "sqlalchemy.ext.orderinglist.OrderingList.pop": [
    "Ovr{sqlalchemy.ext.orderinglist.OrderingList.pop}"
  ],
  "sqlalchemy.ext.orderinglist.OrderingList.remove": [
    "Ovr{sqlalchemy.ext.orderinglist.OrderingList.remove}"
  ],
  "sqlalchemy.orm.instrumentation.ClassManager.__eq__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__eq__"
  ],
  "sqlalchemy.sql.base.ColumnSet.__eq__": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.metrics._classification._check_targets",
    "sklearn.metrics._classification.classification_report",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier._validate_input",
    "sklearn.utils.estimator_checks.check_estimator_get_tags_default_keys",
    "sklearn.utils.estimator_checks.check_set_params",
    "sklearn.utils.multiclass.unique_labels"
  ],
  "sqlalchemy.sql.base._DialectArgDict.__iter__": [
    "Ovr{sqlalchemy.sql.base._DialectArgDict.__iter__}"
  ],
  "sqlalchemy.sql.base._DialectArgDict.__setitem__": [
    "Ovr{sqlalchemy.sql.base._DialectArgDict.__setitem__}"
  ],
  "sqlalchemy.sql.base._DialectArgView.__iter__": [
    "Ovr{sqlalchemy.sql.base._DialectArgView.__iter__}"
  ],
  "sqlalchemy.sql.base._DialectArgView.__setitem__": [
    "Ovr{sqlalchemy.sql.base._DialectArgView.__setitem__}"
  ],
  "sqlalchemy.sql.elements._anonymous_label.__add__": [
    "Ovr{sqlalchemy.sql.elements._anonymous_label.__add__}"
  ],
  "sqlalchemy.testing.util.RandomSet.__iter__": [
    "Ovr{sqlalchemy.testing.util.RandomSet.__iter__}"
  ],
  "sqlalchemy.testing.util.RandomSet.intersection": [
    "Ovr{sqlalchemy.testing.util.RandomSet.intersection}"
  ],
  "sqlalchemy.testing.util.RandomSet.pop": [
    "sklearn.metrics._classification._check_targets",
    "sklearn.utils._determine_key_type",
    "sklearn.utils.multiclass.unique_labels"
  ],
  "sqlalchemy.testing.util.RandomSet.union": [
    "Ovr{sqlalchemy.testing.util.RandomSet.union}"
  ],
  "sqlalchemy.util._collections.FacadeDict.copy": [
    "Ovr{sqlalchemy.util._collections.FacadeDict.copy}"
  ],
  "sqlalchemy.util._collections.LRUCache.__getitem__": [
    "Ovr{sqlalchemy.util._collections.LRUCache.__getitem__}"
  ],
  "sqlalchemy.util._collections.LRUCache.__setitem__": [
    "Ovr{sqlalchemy.util._collections.LRUCache.__setitem__}"
  ],
  "sqlalchemy.util._collections.LRUCache.get": [
    "Ovr{sqlalchemy.util._collections.LRUCache.get}"
  ],
  "sqlalchemy.util._collections.LRUCache.setdefault": [
    "click.globals.push_context",
    "click.parser.Option.process",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.linear_model._quantile.QuantileRegressor.fit"
  ],
  "sqlalchemy.util._collections.LRUCache.values": [
    "Ovr{sqlalchemy.util._collections.LRUCache.values}"
  ],
  "sqlalchemy.util._collections.OrderedSet.__iter__": [
    "Ovr{sqlalchemy.util._collections.OrderedSet.__iter__}"
  ],
  "sqlalchemy.util._collections.OrderedSet.add": [
    "Ovr{sqlalchemy.util._collections.OrderedSet.add}"
  ],
  "sqlalchemy.util._collections.OrderedSet.difference_update": [
    "Ovr{sqlalchemy.util._collections.OrderedSet.difference_update}"
  ],
  "sqlalchemy.util._collections.OrderedSet.intersection": [
    "Ovr{sqlalchemy.util._collections.OrderedSet.intersection}"
  ],
  "sqlalchemy.util._collections.OrderedSet.union": [
    "Ovr{sqlalchemy.util._collections.OrderedSet.union}"
  ],
  "sqlalchemy.util._collections.OrderedSet.update": [
    "Ovr{sqlalchemy.util._collections.OrderedSet.update}"
  ],
  "sqlalchemy.util.langhelpers._hash_limit_string.__eq__": [
    "Ovr{sqlalchemy.util.langhelpers._hash_limit_string.__eq__}"
  ],
  "sqlite3.dbapi2.Cursor.__iter__": [
    "Ovr{sqlite3.dbapi2.Cursor.__iter__}"
  ],
  "sqlite3.dbapi2.Cursor.__next__": [
    "Ovr{sqlite3.dbapi2.Cursor.__next__}"
  ],
  "staticmethod.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel",
    "sklearn.covariance._robust_covariance.MinCovDet.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.ElasticNet.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.ElasticNetCV.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.Lasso.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.LassoCV.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNetCV.$class_toplevel",
    "sklearn.linear_model._coordinate_descent.MultiTaskLassoCV.$class_toplevel"
  ],
  "str.__add__": [
    "Ovr{str.__add__}",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "markupsafe.Markup.__add__",
    "sklearn.externals._arff.BadLayout.__init__"
  ],
  "str.__eq__": [
    "Ovr{str.__eq__}",
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_glm.$toplevel",
    "benchmarks.bench_glmnet.$toplevel",
    "benchmarks.bench_isotonic.$toplevel",
    "benchmarks.bench_lasso.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_multilabel_metrics.$toplevel",
    "benchmarks.bench_plot_fastkmeans.$toplevel",
    "benchmarks.bench_plot_hierarchical.$toplevel",
    "benchmarks.bench_plot_lasso_path.$toplevel",
    "benchmarks.bench_plot_neighbors.$toplevel",
    "benchmarks.bench_plot_nmf.$toplevel",
    "benchmarks.bench_plot_omp_lars.$toplevel",
    "benchmarks.bench_plot_randomized_svd.$toplevel",
    "benchmarks.bench_plot_svd.$toplevel",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_saga.$toplevel",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "benchmarks.bench_sgd_regression.$toplevel",
    "benchmarks.bench_tree.$toplevel",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "benchmarks.plot_tsne_mnist.$toplevel",
    "build_tools.azure.get_commit_message.$toplevel",
    "build_tools.azure.get_selected_tests.$toplevel",
    "build_tools.generate_authors_table.$toplevel",
    "build_tools.get_comment.$toplevel",
    "build_tools.github.vendor.$toplevel",
    "build_tools.update_environments_and_lock_files.$toplevel",
    "click._compat.open_stream",
    "click.core.BaseCommand.main",
    "click.utils._detect_program_name",
    "doc.tutorial.machine_learning_map.parse_path.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.text_analytics.skeletons.exercise_02_sentiment.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_02_sentiment.$toplevel",
    "examples.applications.svm_gui.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "setup.$toplevel",
    "setup.configure_extension_modules",
    "sklearn._build_utils.openmp_helpers.get_openmp_flag",
    "sklearn._min_dependencies.$toplevel",
    "sklearn.utils._testing.$toplevel",
    "sklearn.utils.tests.test_estimator_checks.$toplevel"
  ],
  "str.__ge__": [
    "sklearn.externals._packaging.version._legacy_cmpkey"
  ],
  "str.__getitem__": [
    "Ovr{str.__getitem__}",
    "asv_benchmarks.benchmarks.common.get_from_config",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_plot_nmf.plot_results",
    "build_tools.circle.list_versions.$toplevel",
    "click.core.Command.shell_complete",
    "click.core.Option._parse_decls",
    "click.parser.Option.__init__",
    "click.parser.OptionParser._get_value_from_state",
    "click.parser.OptionParser._match_short_opt",
    "click.parser.OptionParser._process_args_for_options",
    "click.parser.OptionParser._process_opts",
    "click.parser.split_opt",
    "click.shell_completion._start_of_option",
    "click.utils.make_default_short_help",
    "doc.conf.make_carousel_thumbs",
    "doc.tutorial.machine_learning_map.pyparsing._ustr",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_20newsgroups.$toplevel",
    "graphql.pyutils.default_ordered_dict.DefaultOrderedDict.__repr__",
    "jinja2.debug.fake_traceback",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.lexer.Lexer.wrap",
    "pip._vendor.pyparsing._ustr",
    "sklearn.base.BaseEstimator.__repr__",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.externals._arff.ArffDecoder._decode",
    "sklearn.feature_extraction.text._VectorizerMixin._char_wb_ngrams",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.model_selection._split._pprint",
    "sklearn.tree._export.export_text._add_leaf",
    "sklearn.tree._export.export_text.print_tree_recurse",
    "sklearn.utils.tests.test_pprint.test_basic",
    "sklearn.utils.tests.test_pprint.test_bruteforce_ellipsis",
    "sklearn.utils.tests.test_pprint.test_changed_only",
    "sklearn.utils.tests.test_pprint.test_deeply_nested",
    "sklearn.utils.tests.test_pprint.test_gridsearch",
    "sklearn.utils.tests.test_pprint.test_gridsearch_pipeline",
    "sklearn.utils.tests.test_pprint.test_n_max_elements_to_show",
    "sklearn.utils.tests.test_pprint.test_pipeline"
  ],
  "str.__iter__": [
    "Ovr{str.__iter__}",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "build_tools.circle.list_versions.human_readable_data_quantity",
    "click.core.Option.get_help_record",
    "click.parser.Argument.process",
    "click.parser.OptionParser._match_short_opt",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing._escapeRegexRangeChars",
    "examples.linear_model.plot_sparse_logistic_regression_20newsgroups.$toplevel",
    "sklearn.externals._arff.ArffEncoder._encode_attribute",
    "sklearn.externals._arff.ArffEncoder._encode_relation",
    "sklearn.feature_extraction.text.strip_accents_unicode"
  ],
  "str.__lt__": [
    "Ovr{str.__lt__}"
  ],
  "str.__mod__": [
    "Ovr{str.__mod__}",
    "markupsafe.Markup.__mod__"
  ],
  "str.__mul__": [
    "Ovr{str.__mul__}",
    "markupsafe.Markup.__mul__"
  ],
  "str.__ne__": [
    "Ovr{str.__ne__}",
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_glm.$toplevel",
    "benchmarks.bench_glmnet.$toplevel",
    "benchmarks.bench_isotonic.$toplevel",
    "benchmarks.bench_lasso.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_multilabel_metrics.$toplevel",
    "benchmarks.bench_plot_fastkmeans.$toplevel",
    "benchmarks.bench_plot_hierarchical.$toplevel",
    "benchmarks.bench_plot_lasso_path.$toplevel",
    "benchmarks.bench_plot_neighbors.$toplevel",
    "benchmarks.bench_plot_nmf.$toplevel",
    "benchmarks.bench_plot_omp_lars.$toplevel",
    "benchmarks.bench_plot_randomized_svd.$toplevel",
    "benchmarks.bench_plot_svd.$toplevel",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_saga.$toplevel",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "benchmarks.bench_sgd_regression.$toplevel",
    "benchmarks.bench_tree.$toplevel",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "benchmarks.plot_tsne_mnist.$toplevel",
    "build_tools.azure.get_commit_message.$toplevel",
    "build_tools.azure.get_selected_tests.$toplevel",
    "build_tools.generate_authors_table.$toplevel",
    "build_tools.get_comment.$toplevel",
    "build_tools.github.vendor.$toplevel",
    "build_tools.update_environments_and_lock_files.$toplevel",
    "click._compat.open_stream",
    "click.core.BaseCommand.main",
    "click.utils._detect_program_name",
    "doc.tutorial.machine_learning_map.parse_path.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.text_analytics.skeletons.exercise_02_sentiment.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_02_sentiment.$toplevel",
    "examples.applications.svm_gui.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "setup.$toplevel",
    "setup.configure_extension_modules",
    "sklearn._build_utils.openmp_helpers.get_openmp_flag",
    "sklearn._min_dependencies.$toplevel",
    "sklearn.utils.tests.test_estimator_checks.$toplevel"
  ],
  "str.__new__": [
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "markupsafe.Markup.__new__",
    "sklearn.datasets._lfw._fetch_lfw_pairs"
  ],
  "str.capitalize": [
    "benchmarks.bench_plot_hierarchical.compute_bench",
    "doc.conf.generate_min_dependency_substitutions"
  ],
  "str.center": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_random_projections.print_row",
    "benchmarks.bench_sample_without_replacement.$toplevel"
  ],
  "str.count": [
    "jinja2.lexer.Lexer.tokeniter"
  ],
  "str.encode": [
    "Ovr{str.encode}"
  ],
  "str.endswith": [
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel",
    "sklearn.externals._arff.ArffDecoder._decode",
    "sklearn.utils.discovery._is_checked_function",
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.validation._is_fitted"
  ],
  "str.expandtabs": [
    "click.formatting.wrap_text"
  ],
  "str.find": [
    "click.utils.make_default_short_help"
  ],
  "str.format": [
    "Ovr{str.format}"
  ],
  "str.index": [
    "Ovr{str.index}"
  ],
  "str.isalnum": [
    "click.core.Command.shell_complete",
    "click.parser.split_opt"
  ],
  "str.isdigit": [
    "build_tools.circle.list_versions.$toplevel"
  ],
  "str.isidentifier": [
    "click.core.Option._parse_decls"
  ],
  "str.isupper": [
    "sklearn.feature_extraction.text.CountVectorizer.fit_transform"
  ],
  "str.join": [
    "Ovr{str.join}",
    "markupsafe.Markup.join",
    "sklearn.utils._testing.assert_run_python_script"
  ],
  "str.ljust": [
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "sklearn.__check_build.raise_build_error"
  ],
  "str.lower": [
    "Ovr{str.lower}",
    "importlib_metadata._text.FoldedCase.lower"
  ],
  "str.lstrip": [
    "Ovr{str.lstrip}"
  ],
  "str.partition": [
    "Ovr{str.partition}",
    "markupsafe.Markup.partition"
  ],
  "str.replace": [
    "build_tools.azure.get_commit_message.get_commit_message",
    "click.core.Argument._parse_decls",
    "click.core.BaseCommand._main_shell_completion",
    "click.core.Context.__init__",
    "click.shell_completion.ShellComplete.func_name",
    "doc.tutorial.machine_learning_map.pyparsing.LineEnd.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.parseImpl",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "jinja2.ext.InternationalizationExtension._make_node",
    "jinja2.lexer.Lexer.wrap",
    "maint_tools.check_pxd_in_installation.$toplevel",
    "setup.CleanCommand.run",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.externals._arff.ArffDecoder._decode",
    "sklearn.externals._arff._build_re_values",
    "sklearn.utils._estimator_html_repr.$toplevel",
    "sklearn.utils._show_versions._get_sys_info",
    "werkzeug.utils.ImportStringError.__init__",
    "werkzeug.utils.import_string"
  ],
  "str.rpartition": [
    "Ovr{str.rpartition}",
    "markupsafe.Markup.rpartition"
  ],
  "str.rsplit": [
    "Ovr{str.rsplit}",
    "markupsafe.Markup.rsplit"
  ],
  "str.rstrip": [
    "Ovr{str.rstrip}"
  ],
  "str.split": [
    "Ovr{str.split}",
    "markupsafe.Markup.split"
  ],
  "str.splitlines": [
    "Ovr{str.splitlines}",
    "markupsafe.Markup.splitlines"
  ],
  "str.startswith": [
    "click._compat._is_jupyter_kernel_output",
    "click.core._complete_visible_commands",
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "jinja2.debug.fake_traceback",
    "jinja2.debug.get_template_locals",
    "jinja2.sandbox.SandboxedEnvironment.is_safe_attribute",
    "jinja2.sandbox.is_internal_attribute",
    "maint_tools.sort_whats_new.$toplevel",
    "pip._vendor.tenacity._utils.visible_attrs",
    "setup.setup_package",
    "sklearn._build_utils.openmp_helpers.check_openmp_support",
    "sklearn.base.BaseEstimator.__getstate__",
    "sklearn.base.BaseEstimator.__setstate__",
    "sklearn.base.BaseEstimator.set_params",
    "sklearn.base._UnstableArchMixin._more_tags",
    "sklearn.conftest.pytest_collection_modifyitems",
    "sklearn.externals._packaging.version._legacy_cmpkey",
    "sklearn.gaussian_process.kernels.Kernel.hyperparameters",
    "sklearn.metrics._classification._check_targets",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._scorer.check_scoring",
    "sklearn.utils.discovery._is_checked_function",
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.discovery.all_functions",
    "sklearn.utils.estimator_checks._set_checking_parameters",
    "sklearn.utils.estimator_checks.check_no_attributes_set_in_init",
    "sklearn.utils.multiclass.is_multilabel",
    "sklearn.utils.multiclass.type_of_target",
    "sklearn.utils.tests.test_estimator_checks.run_tests_without_pytest",
    "sklearn.utils.tests.test_estimator_checks.test_all_estimators_all_public",
    "sklearn.utils.validation._is_fitted"
  ],
  "str.strip": [
    "build_tools.azure.get_commit_message.get_commit_message",
    "build_tools.get_comment.get_versions",
    "build_tools.update_environments_and_lock_files.get_conda_environment_content",
    "build_tools.update_environments_and_lock_files.get_pip_requirements_content",
    "click.core.Command.get_short_help_str",
    "click.formatting.wrap_text._flush_par",
    "click.termui.confirm",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.runTests",
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel",
    "jinja2.ext.InternationalizationExtension._trim_whitespace",
    "jinja2.lexer.Lexer.wrap",
    "maint_tools.sort_whats_new.$toplevel",
    "sklearn.__check_build.raise_build_error",
    "sklearn._build_utils.openmp_helpers.check_openmp_support",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.externals._arff.ArffDecoder._decode",
    "sklearn.feature_selection._from_model._calculate_threshold",
    "sklearn.utils._testing.check_docstring_parameters"
  ],
  "str.title": [
    "examples.preprocessing.plot_target_encoder.$toplevel"
  ],
  "str.upper": [
    "click.core.BaseCommand._main_shell_completion",
    "click.core.Context.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel"
  ],
  "string.Formatter.vformat": [
    "markupsafe.Markup.format"
  ],
  "string.Template.__init__": [
    "sklearn.utils._estimator_html_repr.estimator_html_repr"
  ],
  "string.Template.substitute": [
    "sklearn.utils._estimator_html_repr.estimator_html_repr"
  ],
  "stripe.api_resources.list_object.ListObject.__getitem__": [
    "Ovr{stripe.api_resources.list_object.ListObject.__getitem__}"
  ],
  "stripe.api_resources.list_object.ListObject.__iter__": [
    "Ovr{stripe.api_resources.list_object.ListObject.__iter__}"
  ],
  "stripe.api_resources.search_result_object.SearchResultObject.__getitem__": [
    "Ovr{stripe.api_resources.search_result_object.SearchResultObject.__getitem__}"
  ],
  "stripe.api_resources.search_result_object.SearchResultObject.__iter__": [
    "Ovr{stripe.api_resources.search_result_object.SearchResultObject.__iter__}"
  ],
  "stripe.stripe_object.StripeObject.__getitem__": [
    "Ovr{stripe.stripe_object.StripeObject.__getitem__}"
  ],
  "stripe.stripe_object.StripeObject.__setitem__": [
    "Ovr{stripe.stripe_object.StripeObject.__setitem__}"
  ],
  "stripe.stripe_object.StripeObject.update": [
    "benchmarks.bench_text_vectorizers.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "importlib_metadata.DistributionFinder.Context.__init__",
    "importlib_metadata.EntryPoint.__init__",
    "jinja2.nodes.args_as_const",
    "pip._vendor.requests.cookies.create_cookie",
    "sklearn.base.BaseEstimator.__setstate__",
    "sklearn.base.BaseEstimator._get_tags",
    "sklearn.base.BaseEstimator.get_params",
    "sklearn.calibration.CalibrationDisplay.plot",
    "sklearn.externals._arff.$toplevel",
    "sklearn.gaussian_process.kernels.Exponentiation.get_params",
    "sklearn.gaussian_process.kernels.KernelOperator.get_params",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.plot",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.plot",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.metrics.pairwise.pairwise_distances_chunked",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f"
  ],
  "subprocess.Popen.__init__": [
    "build_tools.update_environments_and_lock_files.execute_command"
  ],
  "subprocess.Popen.communicate": [
    "build_tools.update_environments_and_lock_files.execute_command"
  ],
  "super.__init__": [
    "asv_benchmarks.benchmarks.cluster.KMeansBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.cluster.MiniBatchKMeansBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.decomposition.DictionaryLearningBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.decomposition.MiniBatchDictionaryLearningBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.decomposition.PCABenchmark.setup_cache",
    "asv_benchmarks.benchmarks.ensemble.GradientBoostingClassifierBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.ensemble.HistGradientBoostingClassifierBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.ensemble.RandomForestClassifierBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.linear_model.ElasticNetBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.linear_model.LassoBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.linear_model.LinearRegressionBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.linear_model.LogisticRegressionBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.linear_model.RidgeBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.linear_model.SGDRegressorBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.manifold.TSNEBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.model_selection.GridSearchBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.neighbors.KNeighborsClassifierBenchmark.setup_cache",
    "asv_benchmarks.benchmarks.svm.SVCBenchmark.setup_cache",
    "benchmarks.bench_plot_nmf._PGNMF.__init__",
    "click._compat._NonClosingTextIOWrapper.__init__",
    "click.core.Command.shell_complete",
    "click.core.MultiCommand.collect_usage_pieces",
    "click.core.MultiCommand.format_options",
    "click.core.MultiCommand.invoke",
    "click.core.MultiCommand.parse_args",
    "click.core.MultiCommand.shell_complete",
    "click.core.Option.__init__",
    "click.core.Option.consume_value",
    "click.core.Option.get_default",
    "click.core.Option.resolve_envvar_value",
    "click.exceptions.BadOptionUsage.__init__",
    "click.exceptions.BadParameter.__init__",
    "click.exceptions.ClickException.__init__",
    "click.exceptions.MissingParameter.__init__",
    "click.exceptions.NoSuchOption.__init__",
    "click.exceptions.UsageError.__init__",
    "click.shell_completion.BashComplete.source",
    "click.types._NumberRangeBase.convert",
    "doc.conf.SKExampleTitleSortKey.__call__",
    "doc.tutorial.machine_learning_map.parse_path.CaselessPreservingLiteral.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.And._ErrorStop.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.And.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.CaselessKeyword.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.CaselessLiteral.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Combine.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Combine.ignore",
    "doc.tutorial.machine_learning_map.pyparsing.Dict.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Each.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Empty.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.FollowedBy.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Forward.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Forward.copy",
    "doc.tutorial.machine_learning_map.pyparsing.GoToColumn.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Group.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Keyword.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Keyword.copy",
    "doc.tutorial.machine_learning_map.pyparsing.LineEnd.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.LineStart.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Literal.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.NoMatch.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.NotAny.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Optional.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Or.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.ignore",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.streamline",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.copy",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.ignore",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.setResultsName",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.streamline",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__eq__",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.SkipTo.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.StringEnd.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.StringStart.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Token.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.TokenConverter.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.White.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.WordEnd.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.WordStart.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ZeroOrMore.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ZeroOrMore.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing._MultipleMatch.__init__",
    "doc.tutorial.machine_learning_map.pyparsing._PositionToken.__init__",
    "examples.bicluster.plot_bicluster_newsgroups.NumberNormalizingVectorizer.build_tokenizer",
    "examples.calibration.plot_calibration_curve.NaivelyCalibratedLinearSVC.fit",
    "examples.calibration.plot_compare_calibration.NaivelyCalibratedLinearSVC.fit",
    "flask.cli.FlaskGroup.get_command",
    "flask.cli.FlaskGroup.list_commands",
    "flask.cli.FlaskGroup.make_context",
    "flask.cli.FlaskGroup.parse_args",
    "flask.cli.SeparatedPathType.convert",
    "flask.sessions.SecureCookieSession.__getitem__",
    "flask.sessions.SecureCookieSession.get",
    "flask.sessions.SecureCookieSession.setdefault",
    "importlib_metadata._text.FoldedCase.lower",
    "jinja2.exceptions.TemplateError.__init__",
    "jinja2.exceptions.TemplateSyntaxError.__init__",
    "jinja2.lexer.OptionalLStrip.__new__",
    "jinja2.nodes.Filter.as_const",
    "jinja2.optimizer.Optimizer.generic_visit",
    "jinja2.sandbox.ImmutableSandboxedEnvironment.is_safe_attribute",
    "markupsafe.EscapeFormatter.__init__",
    "markupsafe.Markup.__add__",
    "markupsafe.Markup.__mod__",
    "markupsafe.Markup.__mul__",
    "markupsafe.Markup.__new__",
    "markupsafe.Markup.__repr__",
    "markupsafe.Markup.join",
    "markupsafe.Markup.partition",
    "markupsafe.Markup.rpartition",
    "markupsafe.Markup.rsplit",
    "markupsafe.Markup.split",
    "markupsafe.Markup.splitlines",
    "parso.utils.PythonVersionInfo.__eq__",
    "parso.utils.PythonVersionInfo.__gt__",
    "pip._vendor.pyparsing.And.streamline",
    "pip._vendor.pyparsing.Each.streamline",
    "pip._vendor.pyparsing.Forward.__init__",
    "pip._vendor.pyparsing.Forward._setResultsName",
    "pip._vendor.pyparsing.Forward.copy",
    "pip._vendor.pyparsing.Keyword.copy",
    "pip._vendor.pyparsing.Literal.__init__",
    "pip._vendor.pyparsing.MatchFirst._setResultsName",
    "pip._vendor.pyparsing.MatchFirst.streamline",
    "pip._vendor.pyparsing.Or._setResultsName",
    "pip._vendor.pyparsing.Or.streamline",
    "pip._vendor.pyparsing.ParseElementEnhance.__init__",
    "pip._vendor.pyparsing.ParseElementEnhance.streamline",
    "pip._vendor.pyparsing.ParseExpression._setResultsName",
    "pip._vendor.pyparsing.ParseExpression.copy",
    "pip._vendor.pyparsing.ParseExpression.streamline",
    "pip._vendor.pyparsing.Regex.__init__",
    "pip._vendor.pyparsing.Token.__init__",
    "pip._vendor.pyparsing._MultipleMatch._setResultsName",
    "pip._vendor.requests.cookies.RequestsCookieJar.set_cookie",
    "pip._vendor.tenacity.Future.__init__",
    "prompt_toolkit.formatted_text.base.FormattedText.__repr__",
    "prompt_toolkit.layout.utils._ExplodedList.__setitem__",
    "prompt_toolkit.layout.utils._ExplodedList.extend",
    "sklearn._loss.loss.AbsoluteError.__init__",
    "sklearn._loss.loss.ExponentialLoss.__init__",
    "sklearn._loss.loss.HalfBinomialLoss.__init__",
    "sklearn._loss.loss.HalfGammaLoss.__init__",
    "sklearn._loss.loss.HalfMultinomialLoss.__init__",
    "sklearn._loss.loss.HalfPoissonLoss.__init__",
    "sklearn._loss.loss.HalfSquaredError.__init__",
    "sklearn._loss.loss.HalfTweedieLoss.__init__",
    "sklearn._loss.loss.HalfTweedieLossIdentity.__init__",
    "sklearn._loss.loss.HuberLoss.__init__",
    "sklearn._loss.loss.PinballLoss.__init__",
    "sklearn.base.BaseEstimator.__getstate__",
    "sklearn.base.BaseEstimator.__setstate__",
    "sklearn.cluster._affinity_propagation.AffinityPropagation.fit_predict",
    "sklearn.cluster._agglomerative.AgglomerativeClustering.fit_predict",
    "sklearn.cluster._agglomerative.FeatureAgglomeration.__init__",
    "sklearn.cluster._agglomerative.FeatureAgglomeration.fit",
    "sklearn.cluster._bicluster.SpectralBiclustering.__init__",
    "sklearn.cluster._bicluster.SpectralCoclustering.__init__",
    "sklearn.cluster._bisect_k_means.BisectingKMeans.__init__",
    "sklearn.cluster._kmeans.KMeans.__init__",
    "sklearn.cluster._kmeans.KMeans._check_params_vs_input",
    "sklearn.cluster._kmeans.MiniBatchKMeans.__init__",
    "sklearn.cluster._kmeans.MiniBatchKMeans._check_params_vs_input",
    "sklearn.cluster._spectral.SpectralClustering.fit_predict",
    "sklearn.compose._column_transformer.ColumnTransformer.set_output",
    "sklearn.covariance._elliptic_envelope.EllipticEnvelope.__init__",
    "sklearn.covariance._elliptic_envelope.EllipticEnvelope.fit",
    "sklearn.covariance._graph_lasso.BaseGraphicalLasso.__init__",
    "sklearn.covariance._graph_lasso.GraphicalLasso.__init__",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.__init__",
    "sklearn.covariance._shrunk_covariance.LedoitWolf.__init__",
    "sklearn.covariance._shrunk_covariance.ShrunkCovariance.__init__",
    "sklearn.cross_decomposition._pls.CCA.__init__",
    "sklearn.cross_decomposition._pls.PLSCanonical.__init__",
    "sklearn.cross_decomposition._pls.PLSRegression.__init__",
    "sklearn.cross_decomposition._pls.PLSRegression.fit",
    "sklearn.decomposition._dict_learning.DictionaryLearning.__init__",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.__init__",
    "sklearn.decomposition._dict_learning.SparseCoder.__init__",
    "sklearn.decomposition._dict_learning.SparseCoder.transform",
    "sklearn.decomposition._fastica.FastICA.__init__",
    "sklearn.decomposition._incremental_pca.IncrementalPCA.transform",
    "sklearn.decomposition._nmf.MiniBatchNMF.__init__",
    "sklearn.decomposition._nmf.MiniBatchNMF._check_params",
    "sklearn.decomposition._nmf.NMF.__init__",
    "sklearn.decomposition._nmf.NMF._check_params",
    "sklearn.decomposition._sparse_pca.MiniBatchSparsePCA.__init__",
    "sklearn.decomposition._sparse_pca.SparsePCA.__init__",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function",
    "sklearn.dummy.DummyClassifier.score",
    "sklearn.dummy.DummyRegressor.score",
    "sklearn.ensemble._bagging.BaggingClassifier.__init__",
    "sklearn.ensemble._bagging.BaggingClassifier._validate_estimator",
    "sklearn.ensemble._bagging.BaggingRegressor.__init__",
    "sklearn.ensemble._bagging.BaggingRegressor._validate_estimator",
    "sklearn.ensemble._bagging.BaseBagging.__init__",
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble.get_params",
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble.set_params",
    "sklearn.ensemble._forest.BaseForest.__init__",
    "sklearn.ensemble._forest.ExtraTreesClassifier.__init__",
    "sklearn.ensemble._forest.ExtraTreesRegressor.__init__",
    "sklearn.ensemble._forest.ForestClassifier.__init__",
    "sklearn.ensemble._forest.ForestClassifier._set_oob_score_and_attributes",
    "sklearn.ensemble._forest.ForestRegressor.__init__",
    "sklearn.ensemble._forest.ForestRegressor._set_oob_score_and_attributes",
    "sklearn.ensemble._forest.RandomForestClassifier.__init__",
    "sklearn.ensemble._forest.RandomForestRegressor.__init__",
    "sklearn.ensemble._forest.RandomTreesEmbedding.__init__",
    "sklearn.ensemble._forest.RandomTreesEmbedding.fit_transform",
    "sklearn.ensemble._gb.GradientBoostingClassifier.__init__",
    "sklearn.ensemble._gb.GradientBoostingRegressor.__init__",
    "sklearn.ensemble._gb.GradientBoostingRegressor.apply",
    "sklearn.ensemble._gb_losses.BinomialDeviance.__init__",
    "sklearn.ensemble._gb_losses.ExponentialLoss.__init__",
    "sklearn.ensemble._gb_losses.HuberLossFunction.__init__",
    "sklearn.ensemble._gb_losses.MultinomialDeviance.__init__",
    "sklearn.ensemble._gb_losses.QuantileLossFunction.__init__",
    "sklearn.ensemble._gb_losses.RegressionLossFunction.__init__",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier.__init__",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor.__init__",
    "sklearn.ensemble._iforest.IsolationForest.__init__",
    "sklearn.ensemble._iforest.IsolationForest.fit",
    "sklearn.ensemble._stacking.StackingClassifier.__init__",
    "sklearn.ensemble._stacking.StackingClassifier._sk_visual_block_",
    "sklearn.ensemble._stacking.StackingClassifier.fit",
    "sklearn.ensemble._stacking.StackingClassifier.predict",
    "sklearn.ensemble._stacking.StackingRegressor.__init__",
    "sklearn.ensemble._stacking.StackingRegressor._sk_visual_block_",
    "sklearn.ensemble._stacking.StackingRegressor.fit",
    "sklearn.ensemble._stacking.StackingRegressor.fit_transform",
    "sklearn.ensemble._stacking._BaseStacking.__init__",
    "sklearn.ensemble._voting.VotingClassifier.__init__",
    "sklearn.ensemble._voting.VotingClassifier.fit",
    "sklearn.ensemble._voting.VotingRegressor.__init__",
    "sklearn.ensemble._voting.VotingRegressor.fit",
    "sklearn.ensemble._voting._BaseVoting.fit_transform",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.__init__",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._validate_estimator",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor.__init__",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor._validate_estimator",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.__init__",
    "sklearn.exceptions.UnsetMetadataPassedError.__init__",
    "sklearn.externals._arff.BadAttributeName.__init__",
    "sklearn.externals._arff.BadDataFormat.__init__",
    "sklearn.externals._arff.BadLayout.__init__",
    "sklearn.externals._arff.BadNominalFormatting.__init__",
    "sklearn.externals._arff.BadNominalValue.__init__",
    "sklearn.externals._arff._DataListMixin.decode_rows",
    "sklearn.feature_extraction.text.TfidfVectorizer.__init__",
    "sklearn.feature_extraction.text.TfidfVectorizer.fit",
    "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform",
    "sklearn.feature_extraction.text.TfidfVectorizer.transform",
    "sklearn.feature_selection._univariate_selection.GenericUnivariateSelect.__init__",
    "sklearn.feature_selection._univariate_selection.SelectFdr.__init__",
    "sklearn.feature_selection._univariate_selection.SelectFpr.__init__",
    "sklearn.feature_selection._univariate_selection.SelectFwe.__init__",
    "sklearn.feature_selection._univariate_selection.SelectKBest.__init__",
    "sklearn.feature_selection._univariate_selection.SelectPercentile.__init__",
    "sklearn.gaussian_process.kernels.Hyperparameter.__new__",
    "sklearn.gaussian_process.kernels.Matern.__init__",
    "sklearn.impute._base.SimpleImputer.__init__",
    "sklearn.impute._base.SimpleImputer._dense_fit",
    "sklearn.impute._base.SimpleImputer._sparse_fit",
    "sklearn.impute._base.SimpleImputer.transform",
    "sklearn.impute._iterative.IterativeImputer.__init__",
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.impute._iterative.IterativeImputer.transform",
    "sklearn.impute._knn.KNNImputer.__init__",
    "sklearn.impute._knn.KNNImputer.fit",
    "sklearn.impute._knn.KNNImputer.transform",
    "sklearn.isotonic.IsotonicRegression.__getstate__",
    "sklearn.isotonic.IsotonicRegression.__setstate__",
    "sklearn.linear_model._coordinate_descent.ElasticNet._decision_function",
    "sklearn.linear_model._coordinate_descent.Lasso.__init__",
    "sklearn.linear_model._coordinate_descent.LassoCV.__init__",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNetCV.fit",
    "sklearn.linear_model._coordinate_descent.MultiTaskLassoCV.__init__",
    "sklearn.linear_model._coordinate_descent.MultiTaskLassoCV.fit",
    "sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.setup",
    "sklearn.linear_model._glm.glm.GammaRegressor.__init__",
    "sklearn.linear_model._glm.glm.PoissonRegressor.__init__",
    "sklearn.linear_model._glm.glm.TweedieRegressor.__init__",
    "sklearn.linear_model._least_angle.LarsCV.__init__",
    "sklearn.linear_model._logistic.LogisticRegression.predict_proba",
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveClassifier.__init__",
    "sklearn.linear_model._passive_aggressive.PassiveAggressiveRegressor.__init__",
    "sklearn.linear_model._perceptron.Perceptron.__init__",
    "sklearn.linear_model._ridge.Ridge.__init__",
    "sklearn.linear_model._ridge.Ridge.fit",
    "sklearn.linear_model._ridge.RidgeCV.fit",
    "sklearn.linear_model._ridge.RidgeClassifier.__init__",
    "sklearn.linear_model._ridge.RidgeClassifier.fit",
    "sklearn.linear_model._ridge.RidgeClassifierCV.__init__",
    "sklearn.linear_model._ridge.RidgeClassifierCV.fit",
    "sklearn.linear_model._ridge._RidgeClassifierMixin.predict",
    "sklearn.linear_model._ridge._XT_CenterStackOp.__init__",
    "sklearn.linear_model._ridge._X_CenterStackOp.__init__",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.__init__",
    "sklearn.linear_model._stochastic_gradient.BaseSGDRegressor.__init__",
    "sklearn.linear_model._stochastic_gradient.SGDClassifier.__init__",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM.__init__",
    "sklearn.linear_model._stochastic_gradient.SGDRegressor.__init__",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture.__init__",
    "sklearn.mixture._gaussian_mixture.GaussianMixture.__init__",
    "sklearn.model_selection._search.GridSearchCV.__init__",
    "sklearn.model_selection._search.RandomizedSearchCV.__init__",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.__init__",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._more_tags",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving.fit",
    "sklearn.model_selection._search_successive_halving.HalvingGridSearchCV.__init__",
    "sklearn.model_selection._search_successive_halving.HalvingRandomSearchCV.__init__",
    "sklearn.model_selection._split.GroupKFold.__init__",
    "sklearn.model_selection._split.GroupKFold.split",
    "sklearn.model_selection._split.GroupShuffleSplit.__init__",
    "sklearn.model_selection._split.GroupShuffleSplit._iter_indices",
    "sklearn.model_selection._split.GroupShuffleSplit.split",
    "sklearn.model_selection._split.KFold.__init__",
    "sklearn.model_selection._split.LeaveOneGroupOut.split",
    "sklearn.model_selection._split.LeavePGroupsOut.split",
    "sklearn.model_selection._split.RepeatedKFold.__init__",
    "sklearn.model_selection._split.RepeatedStratifiedKFold.__init__",
    "sklearn.model_selection._split.ShuffleSplit.__init__",
    "sklearn.model_selection._split.StratifiedGroupKFold.__init__",
    "sklearn.model_selection._split.StratifiedKFold.__init__",
    "sklearn.model_selection._split.StratifiedKFold.split",
    "sklearn.model_selection._split.StratifiedShuffleSplit.__init__",
    "sklearn.model_selection._split.StratifiedShuffleSplit.split",
    "sklearn.model_selection._split.TimeSeriesSplit.__init__",
    "sklearn.model_selection._split._BaseKFold.split",
    "sklearn.multioutput.ClassifierChain.fit",
    "sklearn.multioutput.MultiOutputClassifier.__init__",
    "sklearn.multioutput.MultiOutputClassifier.fit",
    "sklearn.multioutput.MultiOutputRegressor.__init__",
    "sklearn.multioutput.MultiOutputRegressor.partial_fit",
    "sklearn.multioutput.RegressorChain.fit",
    "sklearn.naive_bayes.BernoulliNB.__init__",
    "sklearn.naive_bayes.BernoulliNB._check_X",
    "sklearn.naive_bayes.BernoulliNB._check_X_y",
    "sklearn.naive_bayes.CategoricalNB.__init__",
    "sklearn.naive_bayes.CategoricalNB.fit",
    "sklearn.naive_bayes.CategoricalNB.partial_fit",
    "sklearn.naive_bayes.ComplementNB.__init__",
    "sklearn.naive_bayes.MultinomialNB.__init__",
    "sklearn.neighbors._classification.KNeighborsClassifier.__init__",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.__init__",
    "sklearn.neighbors._graph.KNeighborsTransformer.__init__",
    "sklearn.neighbors._graph.RadiusNeighborsTransformer.__init__",
    "sklearn.neighbors._lof.LocalOutlierFactor.__init__",
    "sklearn.neighbors._regression.KNeighborsRegressor.__init__",
    "sklearn.neighbors._regression.RadiusNeighborsRegressor.__init__",
    "sklearn.neighbors._unsupervised.NearestNeighbors.__init__",
    "sklearn.neural_network._multilayer_perceptron.MLPClassifier.__init__",
    "sklearn.neural_network._multilayer_perceptron.MLPRegressor.__init__",
    "sklearn.neural_network._stochastic_optimizers.AdamOptimizer.__init__",
    "sklearn.neural_network._stochastic_optimizers.SGDOptimizer.__init__",
    "sklearn.pipeline.FeatureUnion.set_output",
    "sklearn.preprocessing._function_transformer.FunctionTransformer.set_output",
    "sklearn.random_projection.GaussianRandomProjection.__init__",
    "sklearn.random_projection.SparseRandomProjection.__init__",
    "sklearn.semi_supervised._label_propagation.LabelPropagation.__init__",
    "sklearn.semi_supervised._label_propagation.LabelPropagation.fit",
    "sklearn.semi_supervised._label_propagation.LabelSpreading.__init__",
    "sklearn.svm._base.BaseSVC.__init__",
    "sklearn.svm._base.BaseSVC.predict",
    "sklearn.svm._classes.NuSVC.__init__",
    "sklearn.svm._classes.NuSVR.__init__",
    "sklearn.svm._classes.OneClassSVM.__init__",
    "sklearn.svm._classes.OneClassSVM.fit",
    "sklearn.svm._classes.OneClassSVM.predict",
    "sklearn.svm._classes.SVC.__init__",
    "sklearn.svm._classes.SVR.__init__",
    "sklearn.tree._classes.DecisionTreeClassifier.__init__",
    "sklearn.tree._classes.DecisionTreeClassifier.fit",
    "sklearn.tree._classes.DecisionTreeRegressor.__init__",
    "sklearn.tree._classes.DecisionTreeRegressor.fit",
    "sklearn.tree._classes.ExtraTreeClassifier.__init__",
    "sklearn.tree._classes.ExtraTreeRegressor.__init__",
    "sklearn.tree._export._DOTTreeExporter.__init__",
    "sklearn.tree._export._MPLTreeExporter.__init__",
    "sklearn.utils._bunch.Bunch.__getitem__",
    "sklearn.utils._bunch.Bunch.__init__",
    "sklearn.utils._encode._NaNCounter.__init__",
    "sklearn.utils._encode._nandict.__init__",
    "sklearn.utils._metadata_requests._MetadataRequester.__init_subclass__",
    "sklearn.utils._param_validation.HasMethods.__init__",
    "sklearn.utils._param_validation.Interval.__init__",
    "sklearn.utils._param_validation.MissingValues.__init__",
    "sklearn.utils._param_validation.Options.__init__",
    "sklearn.utils._param_validation.StrOptions.__init__",
    "sklearn.utils._param_validation._Booleans.__init__",
    "sklearn.utils._param_validation._CVObjects.__init__",
    "sklearn.utils._param_validation._InstancesOf.__init__",
    "sklearn.utils._param_validation._RandomStates.__init__",
    "sklearn.utils._param_validation._VerboseHelper.__init__",
    "sklearn.utils._pprint.KeyValTuple.__repr__",
    "sklearn.utils._pprint._EstimatorPrettyPrinter.__init__",
    "sklearn.utils._set_output._SetOutputMixin.__init_subclass__",
    "sklearn.utils.metaestimators._BaseComposition._get_params",
    "sklearn.utils.metaestimators._BaseComposition._set_params",
    "sklearn.utils.parallel.Parallel.__call__",
    "sklearn.utils.tests.test_estimator_checks.EstimatorMissingDefaultTags._get_tags",
    "sklearn.utils.tests.test_estimator_checks.ModifiesAnotherValue.set_params",
    "sklearn.utils.tests.test_estimator_checks.ModifiesValueInsteadOfRaisingError.set_params",
    "sklearn.utils.tests.test_estimator_checks.PoorScoreLogisticRegression.decision_function",
    "sklearn.utils.tests.test_estimator_checks.RaisesErrorInSetParams.set_params",
    "sklearn.utils.tests.test_estimator_checks.RequiresPositiveXRegressor.fit",
    "sklearn.utils.tests.test_estimator_checks.RequiresPositiveYRegressor.fit",
    "sklearn.utils.tests.test_estimator_checks.UntaggedBinaryClassifier.fit",
    "sklearn.utils.tests.test_estimator_checks.UntaggedBinaryClassifier.partial_fit",
    "traitlets.config.loader.DeferredConfig._super_repr",
    "traitlets.config.loader._DefaultOptionDict.__getitem__",
    "traitlets.traitlets.HasDescriptors.__new__",
    "traitlets.traitlets.HasTraits.__init__",
    "werkzeug.utils.ImportStringError.__init__"
  ],
  "sys._float_info.max": [
    "examples.bicluster.plot_bicluster_newsgroups.bicluster_ncut"
  ],
  "tarfile.TarFile.__enter__": [
    "doc.tutorial.text_analytics.data.movie_reviews.fetch_data.$toplevel",
    "sklearn.datasets._california_housing.fetch_california_housing"
  ],
  "tarfile.TarFile.extractall": [
    "doc.tutorial.text_analytics.data.movie_reviews.fetch_data.$toplevel",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents",
    "sklearn.datasets._lfw._check_fetch_lfw",
    "sklearn.datasets._twenty_newsgroups._download_20newsgroups"
  ],
  "tarfile.TarFile.extractfile": [
    "sklearn.datasets._california_housing.fetch_california_housing"
  ],
  "tempfile.SpooledTemporaryFile.__iter__": [
    "Ovr{tempfile.SpooledTemporaryFile.__iter__}"
  ],
  "tempfile.SpooledTemporaryFile.__next__": [
    "Ovr{tempfile.SpooledTemporaryFile.__next__}"
  ],
  "tempfile.SpooledTemporaryFile.close": [
    "Ovr{tempfile.SpooledTemporaryFile.close}"
  ],
  "tempfile.SpooledTemporaryFile.flush": [
    "Ovr{tempfile.SpooledTemporaryFile.flush}"
  ],
  "tempfile.SpooledTemporaryFile.isatty": [
    "Ovr{tempfile.SpooledTemporaryFile.isatty}"
  ],
  "tempfile.SpooledTemporaryFile.read": [
    "Ovr{tempfile.SpooledTemporaryFile.read}"
  ],
  "tempfile.SpooledTemporaryFile.write": [
    "Ovr{tempfile.SpooledTemporaryFile.write}"
  ],
  "tempfile.TemporaryDirectory.__enter__": [
    "examples.neighbors.plot_caching_nearest_neighbors.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "maint_tools.check_pxd_in_installation.$toplevel",
    "sklearn._build_utils.pre_build_helpers.compile_test_program",
    "sklearn.datasets._covtype.fetch_covtype",
    "sklearn.datasets._openml._open_openml_url"
  ],
  "tempfile.TemporaryDirectory.__init__": [
    "examples.neighbors.plot_caching_nearest_neighbors.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "maint_tools.check_pxd_in_installation.$toplevel",
    "sklearn._build_utils.pre_build_helpers.compile_test_program",
    "sklearn.datasets._covtype.fetch_covtype",
    "sklearn.datasets._openml._open_openml_url"
  ],
  "tempfile._TemporaryFileWrapper.__iter__": [
    "Ovr{tempfile._TemporaryFileWrapper.__iter__}"
  ],
  "tempfile._TemporaryFileWrapper.__next__": [
    "Ovr{tempfile._TemporaryFileWrapper.__next__}"
  ],
  "tempfile._TemporaryFileWrapper.close": [
    "Ovr{tempfile._TemporaryFileWrapper.close}"
  ],
  "tempfile._TemporaryFileWrapper.flush": [
    "Ovr{tempfile._TemporaryFileWrapper.flush}"
  ],
  "tempfile._TemporaryFileWrapper.isatty": [
    "Ovr{tempfile._TemporaryFileWrapper.isatty}"
  ],
  "tempfile._TemporaryFileWrapper.read": [
    "Ovr{tempfile._TemporaryFileWrapper.read}"
  ],
  "tempfile._TemporaryFileWrapper.write": [
    "Ovr{tempfile._TemporaryFileWrapper.write}"
  ],
  "testslide.lib.CoroutineValueError.__str__": [
    "Ovr{testslide.lib.CoroutineValueError.__str__}"
  ],
  "testslide.strict_mock.NonAwaitableReturn.__str__": [
    "Ovr{testslide.strict_mock.NonAwaitableReturn.__str__}"
  ],
  "testslide.strict_mock.NonCallableValue.__str__": [
    "Ovr{testslide.strict_mock.NonCallableValue.__str__}"
  ],
  "testslide.strict_mock.NonExistentAttribute.__str__": [
    "Ovr{testslide.strict_mock.NonExistentAttribute.__str__}"
  ],
  "testslide.strict_mock.StrictMock.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs",
    "testslide.strict_mock.StrictMock.__str__",
    "testslide.strict_mock.UndefinedAttribute.__str__"
  ],
  "testslide.strict_mock.StrictMock.__str__": [
    "testslide.strict_mock.NonAwaitableReturn.__str__",
    "testslide.strict_mock.NonCallableValue.__str__",
    "testslide.strict_mock.NonExistentAttribute.__str__"
  ],
  "testslide.strict_mock.StrictMock._template": [
    "testslide.strict_mock.StrictMock.__repr__"
  ],
  "testslide.strict_mock.UndefinedAttribute.__str__": [
    "Ovr{testslide.strict_mock.UndefinedAttribute.__str__}"
  ],
  "testslide.strict_mock.UnsupportedMagic.__str__": [
    "Ovr{testslide.strict_mock.UnsupportedMagic.__str__}"
  ],
  "textwrap.TextWrapper.__init__": [
    "click.formatting.wrap_text"
  ],
  "textwrap.TextWrapper.fill": [
    "click.formatting.wrap_text"
  ],
  "tkinter.Button.__init__": [
    "examples.applications.svm_gui.ControllBar.__init__"
  ],
  "tkinter.Entry.__init__": [
    "examples.applications.svm_gui.ControllBar.__init__"
  ],
  "tkinter.Frame.__init__": [
    "examples.applications.svm_gui.ControllBar.__init__"
  ],
  "tkinter.IntVar.__init__": [
    "examples.applications.svm_gui.Controller.__init__"
  ],
  "tkinter.IntVar.get": [
    "examples.applications.svm_gui.Controller.fit"
  ],
  "tkinter.Label.__init__": [
    "examples.applications.svm_gui.ControllBar.__init__"
  ],
  "tkinter.Radiobutton.__init__": [
    "examples.applications.svm_gui.ControllBar.__init__"
  ],
  "tkinter.StringVar.__init__": [
    "examples.applications.svm_gui.ControllBar.__init__"
  ],
  "tkinter.Tk.__init__": [
    "examples.applications.svm_gui.main"
  ],
  "tkinter.Wm.wm_title": [
    "examples.applications.svm_gui.main"
  ],
  "tqdm.notebook.tqdm_notebook.__iter__": [
    "Ovr{tqdm.notebook.tqdm_notebook.__iter__}"
  ],
  "tqdm.std.tqdm.__iter__": [
    "Ovr{tqdm.std.tqdm.__iter__}"
  ],
  "traceback.FrameSummary.__getitem__": [
    "pip._vendor.pyparsing._trim_arity.extract_stack"
  ],
  "traceback.FrameSummary.__iter__": [
    "Ovr{traceback.FrameSummary.__iter__}"
  ],
  "tracemalloc.Traceback.__getitem__": [
    "Ovr{tracemalloc.Traceback.__getitem__}"
  ],
  "traitlets.config.loader.Config.__getitem__": [
    "Ovr{traitlets.config.loader.Config.__getitem__}",
    "traitlets.config.loader.Config._ensure_subconfig"
  ],
  "traitlets.config.loader.Config.__init__": [
    "traitlets.config.loader.Config.__getitem__",
    "traitlets.config.loader.Config._ensure_subconfig",
    "traitlets.config.loader.Config.copy"
  ],
  "traitlets.config.loader.Config.__setitem__": [
    "Ovr{traitlets.config.loader.Config.__setitem__}"
  ],
  "traitlets.config.loader.Config._ensure_subconfig": [
    "traitlets.config.loader.Config.__init__"
  ],
  "traitlets.config.loader.Config.copy": [
    "Ovr{traitlets.config.loader.Config.copy}"
  ],
  "traitlets.config.loader.DeferredConfig._super_repr": [
    "traitlets.config.loader.DeferredConfigList.__repr__",
    "traitlets.config.loader.DeferredConfigString.__repr__"
  ],
  "traitlets.config.loader.DeferredConfigList.__repr__": [
    "marshmallow.orderedset.OrderedSet.__repr__",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.preprocessing._encoders._BaseEncoder._transform",
    "sklearn.utils._encode._unique_python",
    "sklearn.utils._get_column_indices",
    "sklearn.utils._mocking.CheckingClassifier.fit",
    "sklearn.utils.class_weight.compute_class_weight",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.validation._check_monotonic_cst",
    "sklearn.utils.validation._get_feature_names"
  ],
  "traitlets.config.loader.DeferredConfigString.__repr__": [
    "benchmarks.bench_hist_gradient_boosting_higgsboson.load_data",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "build_tools.circle.list_versions.$toplevel",
    "build_tools.generate_authors_table.get_contributors",
    "build_tools.github.vendor.main",
    "build_tools.update_environments_and_lock_files.check_conda_lock_version",
    "build_tools.update_environments_and_lock_files.get_package_with_constraint",
    "click._textwrap.TextWrapper.indent_only",
    "click._winconsole.ConsoleStream.__repr__",
    "click.core.Argument.get_error_hint",
    "click.core.BaseCommand._main_shell_completion",
    "click.core.Context.__init__",
    "click.core.Context.command_path",
    "click.core.Option._parse_decls",
    "click.core.Option.add_to_parser",
    "click.core.Option.get_help_record",
    "click.core.Option.get_help_record._write_opts",
    "click.core.Option.resolve_envvar_value",
    "click.core._check_multicommand",
    "click.exceptions.MissingParameter.format_message",
    "click.exceptions.NoSuchOption.format_message",
    "click.exceptions.UsageError.show",
    "click.exceptions._join_param_hints",
    "click.formatting.HelpFormatter.write_dl",
    "click.formatting.HelpFormatter.write_heading",
    "click.formatting.HelpFormatter.write_usage",
    "click.parser.Option.__init__",
    "click.parser.Option.process",
    "click.parser.OptionParser._match_short_opt",
    "click.parser.normalize_opt",
    "click.shell_completion.BashComplete.format_completion",
    "click.shell_completion.FishComplete.format_completion",
    "click.shell_completion.ShellComplete.func_name",
    "click.shell_completion.ZshComplete.format_completion",
    "click.termui._build_prompt",
    "click.termui.style",
    "click.types.File.convert",
    "click.utils.LazyFile.__repr__",
    "click.utils._detect_program_name",
    "doc.conf.$toplevel",
    "doc.conf.generate_min_dependency_substitutions",
    "doc.conf.generate_min_dependency_table",
    "doc.sphinxext.add_toctree_functions.docutils_node_to_jinja",
    "doc.sphinxext.allow_nan_estimators.AllowNanEstimators.make_paragraph_for_estimator_type",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.cluster.plot_bisect_kmeans.$toplevel",
    "examples.cluster.plot_hdbscan.plot",
    "examples.decomposition.plot_varimax_fa.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.miscellaneous.plot_metadata_routing.check_metadata",
    "examples.model_selection.plot_learning_curve.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "flask.cli.FlaskGroup.get_command",
    "flask.cli.FlaskGroup.list_commands",
    "flask.config.Config.__repr__",
    "flask.ctx._AppCtxGlobals.__repr__",
    "jinja2.debug.fake_traceback",
    "jinja2.environment.Environment.getitem",
    "jinja2.environment.Environment.preprocess",
    "jinja2.ext.InternationalizationExtension._make_node",
    "jinja2.idtracking.RootVisitor.generic_visit",
    "jinja2.lexer.Lexer.__init__",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.nodes.Node.__init__",
    "jinja2.parser.Parser.parse_primary",
    "jinja2.parser.Parser.parse_tuple",
    "jinja2.runtime.LoopContext.__repr__",
    "jinja2.sandbox.SandboxedEnvironment.getitem",
    "jinja2.sandbox.SandboxedEnvironment.unsafe_undefined",
    "jinja2.utils.LRUCache.__repr__",
    "jinja2.visitor.NodeVisitor.get_visitor",
    "maint_tools.update_tracking_issue.close_issue_if_opened",
    "maint_tools.update_tracking_issue.create_or_update_issue",
    "maint_tools.update_tracking_issue.get_issue",
    "markupsafe.Markup.__repr__",
    "marshmallow.orderedset.OrderedSet.__repr__",
    "packaging.specifiers.SpecifierSet.__repr__",
    "packaging.version.Version.__init__",
    "packaging.version.Version.__str__",
    "pip._internal.cli.parser.ConfigOptionParser.error",
    "prompt_toolkit.contrib.regular_languages.compiler.Variables.__repr__",
    "sklearn.base.BaseEstimator._check_feature_names",
    "sklearn.base.BaseEstimator._check_n_features",
    "sklearn.base.BaseEstimator._validate_data",
    "sklearn.base.BaseEstimator.set_params",
    "sklearn.calibration.CalibrationDisplay.plot",
    "sklearn.cluster._kmeans.KMeans._check_params_vs_input",
    "sklearn.cluster._kmeans._BaseKMeans._check_params_vs_input",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.compose._target.TransformedTargetRegressor.fit",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._openml._load_arff_response",
    "sklearn.datasets._openml._retry_on_network_error.decorator.wrapper",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.ensemble._stacking._BaseStacking.get_feature_names_out",
    "sklearn.ensemble._stacking._BaseStacking.n_features_in_",
    "sklearn.ensemble._voting.VotingClassifier.get_feature_names_out",
    "sklearn.ensemble._voting.VotingRegressor.get_feature_names_out",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._validate_estimator",
    "sklearn.externals._packaging.version.LegacyVersion.__init__",
    "sklearn.externals._packaging.version.Version.__init__",
    "sklearn.externals._packaging.version.Version.__str__",
    "sklearn.feature_extraction.text.TfidfVectorizer.idf_",
    "sklearn.feature_extraction.text._make_int_array",
    "sklearn.feature_selection._base._get_feature_importances",
    "sklearn.impute._base.MissingIndicator.get_feature_names_out",
    "sklearn.inspection._pd_utils._get_feature_index",
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.from_estimator",
    "sklearn.inspection._plot.decision_boundary._check_boundary_response_method",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.isotonic.IsotonicRegression.get_feature_names_out",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out",
    "sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.inner_solve",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.line_search",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.score",
    "sklearn.linear_model._least_angle.LassoLarsIC._estimate_noise_variance",
    "sklearn.linear_model._quantile.QuantileRegressor.fit",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.from_estimator",
    "sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay.from_predictions",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_estimator",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_predictions",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.plot",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.model_selection.__getattr__",
    "sklearn.model_selection._plot.LearningCurveDisplay.from_estimator",
    "sklearn.model_selection._plot.ValidationCurveDisplay.from_estimator",
    "sklearn.model_selection._plot._BaseCurveDisplay._plot_curve",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._check_input_parameters",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._score",
    "sklearn.model_selection._validation._warn_or_raise_about_fit_failures",
    "sklearn.pipeline.Pipeline._sk_visual_block_._get_name",
    "sklearn.svm._base.BaseLibSVM._validate_for_predict",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.utils._array_api._check_array_api_dispatch",
    "sklearn.utils._array_api._isdtype_single",
    "sklearn.utils._encode._encode",
    "sklearn.utils._estimator_html_repr._get_visual_block",
    "sklearn.utils._estimator_html_repr._write_label_html",
    "sklearn.utils._estimator_html_repr.estimator_html_repr",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests.MethodMetadataRequest._route_params",
    "sklearn.utils._metadata_requests._MetadataRequester.__init_subclass__",
    "sklearn.utils._metadata_requests.process_routing",
    "sklearn.utils._mocking.CheckingClassifier.fit",
    "sklearn.utils._param_validation.HasMethods.__str__",
    "sklearn.utils._param_validation.Interval._check_params",
    "sklearn.utils._param_validation.MissingValues.__str__",
    "sklearn.utils._param_validation.Options.__str__",
    "sklearn.utils._param_validation.Options._mark_if_deprecated",
    "sklearn.utils._param_validation._Booleans.__str__",
    "sklearn.utils._param_validation._CVObjects.__str__",
    "sklearn.utils._param_validation._RandomStates.__str__",
    "sklearn.utils._param_validation._VerboseHelper.__str__",
    "sklearn.utils._param_validation.generate_invalid_param_val",
    "sklearn.utils._param_validation.validate_parameter_constraints",
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_and_get_response_values",
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_from_predictions_params",
    "sklearn.utils._plotting._BinaryClassifierCurveDisplayMixin._validate_plot_params",
    "sklearn.utils._response._get_response_values",
    "sklearn.utils._response._get_response_values_binary",
    "sklearn.utils._tags._safe_tags",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.estimator_checks._maybe_skip.wrapped",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_decision_function",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_fit_check_is_fitted",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator",
    "sklearn.utils.validation._assert_all_finite_element_wise",
    "sklearn.utils.validation._check_monotonic_cst",
    "sklearn.utils.validation._check_pos_label_consistency",
    "sklearn.utils.validation._check_response_method",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f",
    "sklearn.utils.validation._generate_get_feature_names_out",
    "sklearn.utils.validation._num_features",
    "sklearn.utils.validation.check_scalar",
    "testslide.strict_mock.NonAwaitableReturn.__str__",
    "testslide.strict_mock.NonCallableValue.__str__",
    "testslide.strict_mock.NonExistentAttribute.__str__",
    "testslide.strict_mock.UndefinedAttribute.__str__",
    "testslide.strict_mock.UnsupportedMagic.__str__",
    "traitlets.config.loader.DeferredConfigList.__repr__",
    "traitlets.config.loader.DeferredConfigString.__repr__",
    "traitlets.traitlets.HasTraits.set_trait",
    "werkzeug.utils.ImportStringError.__init__"
  ],
  "traitlets.config.loader._DefaultOptionDict.__getitem__": [
    "Ovr{traitlets.config.loader._DefaultOptionDict.__getitem__}",
    "traitlets.config.loader._DefaultOptionDict.get"
  ],
  "traitlets.config.loader._DefaultOptionDict.get": [
    "Ovr{traitlets.config.loader._DefaultOptionDict.get}"
  ],
  "traitlets.traitlets.HasDescriptors.__new__": [
    "traitlets.config.loader.Config.__getitem__"
  ],
  "traitlets.traitlets.HasTraits.__init__": [
    "traitlets.config.loader.Config.__getitem__"
  ],
  "traitlets.traitlets.HasTraits._notify_observers": [
    "traitlets.traitlets.HasTraits.notify_change"
  ],
  "traitlets.traitlets.HasTraits.has_trait": [
    "traitlets.traitlets.HasTraits.__init__",
    "traitlets.traitlets.HasTraits.set_trait"
  ],
  "traitlets.traitlets.HasTraits.hold_trait_notifications": [
    "traitlets.traitlets.HasTraits.__init__"
  ],
  "traitlets.traitlets.HasTraits.notify_change": [
    "traitlets.traitlets.HasTraits.hold_trait_notifications"
  ],
  "traitlets.traitlets.HasTraits.set_trait": [
    "traitlets.traitlets.HasTraits.hold_trait_notifications"
  ],
  "traitlets.traitlets._CallbackWrapper.__init__": [
    "traitlets.traitlets._callback_wrapper"
  ],
  "tuple.__add__": [
    "Ovr{tuple.__add__}"
  ],
  "tuple.__ge__": [
    "packaging.version._BaseVersion.__ge__",
    "setup.setup_package",
    "sklearn.externals._packaging.version._BaseVersion.__ge__"
  ],
  "tuple.__getitem__": [
    "Ovr{tuple.__getitem__}",
    "pip._vendor.distlib.compat.ConvertingTuple.__getitem__"
  ],
  "tuple.__gt__": [
    "Ovr{tuple.__gt__}",
    "parso.utils.PythonVersionInfo.__gt__"
  ],
  "tuple.__iter__": [
    "Ovr{tuple.__iter__}",
    "benchmarks.bench_hist_gradient_boosting.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel",
    "benchmarks.bench_plot_hierarchical.compute_bench",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "click.core.Option.get_help_record",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.addCondition",
    "doc.tutorial.machine_learning_map.pyparsing.withAttribute",
    "examples.cluster.plot_agglomerative_clustering.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_coin_segmentation.$toplevel",
    "examples.cluster.plot_digits_linkage.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.decomposition.plot_sparse_coding.$toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.ensemble.plot_gradient_boosting_categorical.$toplevel",
    "examples.ensemble.plot_monotonic_constraints.$toplevel",
    "examples.ensemble.plot_voting_probas.$toplevel",
    "examples.exercises.plot_iris_exercise.$toplevel",
    "examples.impute.plot_iterative_imputer_variants_comparison.$toplevel",
    "examples.linear_model.plot_logistic_multinomial.$toplevel",
    "examples.model_selection.plot_multi_metric_evaluation.$toplevel",
    "examples.preprocessing.plot_scaling_importance.$toplevel",
    "examples.svm.plot_iris_svc.$toplevel",
    "examples.svm.plot_svm_anova.$toplevel",
    "examples.svm.plot_svm_kernels.$toplevel",
    "examples.svm.plot_svm_margin.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "flask.cli.FlaskGroup._load_plugin_commands",
    "flask.cli.load_dotenv",
    "importlib_metadata.EntryPoints.__getitem__",
    "importlib_metadata.EntryPoints.select",
    "jinja2.lexer.TokenStream.close",
    "jinja2.nodes.Node.__init__",
    "jinja2.nodes.Node.iter_fields",
    "jinja2.sandbox.modifies_known_mutable",
    "markupsafe.Markup.__mod__",
    "packaging.version.Version.__str__",
    "packaging.version.Version.local",
    "packaging.version._cmpkey",
    "pip._vendor.distlib.compat.OrderedDict.update",
    "pip._vendor.packaging.version.Version.__str__",
    "pip._vendor.packaging.version._cmpkey",
    "pip._vendor.pyparsing.ParserElement.setParseAction",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_transformers",
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform",
    "sklearn.cross_decomposition._pls.CCA.$class_toplevel",
    "sklearn.cross_decomposition._pls.PLSCanonical.$class_toplevel",
    "sklearn.cross_decomposition._pls.PLSRegression.$class_toplevel",
    "sklearn.datasets._lfw._check_fetch_lfw",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.datasets.tests.test_olivetti_faces.test_olivetti_faces",
    "sklearn.datasets.tests.test_rcv1.test_fetch_rcv1",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._lda.LatentDirichletAllocation._e_step",
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble._validate_estimators",
    "sklearn.ensemble._forest.RandomTreesEmbedding.$class_toplevel",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._clear_state",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.split_next",
    "sklearn.ensemble._stacking.StackingClassifier._validate_estimators",
    "sklearn.externals._arff.ArffEncoder._encode_attribute",
    "sklearn.externals._arff._parse_values",
    "sklearn.externals._packaging.version.Version.__str__",
    "sklearn.externals._packaging.version.Version.base_version",
    "sklearn.externals._packaging.version._cmpkey",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.$class_toplevel",
    "sklearn.linear_model._coordinate_descent._path_residuals",
    "sklearn.linear_model._least_angle.Lars._fit",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._ridge.RidgeClassifierCV.$class_toplevel",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.model_selection._search.ParameterGrid.__getitem__",
    "sklearn.model_selection._search_successive_halving._top_k",
    "sklearn.model_selection._split._RepeatedSplits.__init__",
    "sklearn.pipeline.FeatureUnion._validate_transformers",
    "sklearn.pipeline.Pipeline._sk_visual_block_",
    "sklearn.pipeline.Pipeline._validate_steps",
    "sklearn.utils._array_api._isdtype_single",
    "sklearn.utils._array_api.isdtype",
    "sklearn.utils._testing.assert_raise_message",
    "sklearn.utils.estimator_checks._check_transformer",
    "sklearn.utils.estimator_checks.check_array_api_input",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_estimators_unfitted",
    "sklearn.utils.estimator_checks.check_requires_y_none",
    "sklearn.utils.multiclass.unique_labels",
    "sklearn.utils.resample",
    "sklearn.utils.tests.test_shortest_path.test_shortest_path",
    "sklearn.utils.validation._is_fitted",
    "sklearn.utils.validation.check_consistent_length",
    "sklearn.utils.validation.check_scalar",
    "sklearn.utils.validation.indexable",
    "traitlets.traitlets.HasTraits.__init__",
    "traitlets.traitlets._deprecated_method",
    "traitlets.utils.getargspec.getargspec"
  ],
  "tuple.__le__": [
    "packaging.version._BaseVersion.__le__",
    "sklearn.externals._packaging.version._BaseVersion.__le__"
  ],
  "tuple.__lt__": [
    "packaging.version._BaseVersion.__lt__",
    "setup.setup_package",
    "sklearn.externals._packaging.version._BaseVersion.__lt__"
  ],
  "tuple.__mul__": [
    "Ovr{tuple.__mul__}"
  ],
  "tuple.__new__": [
    "benchmarks.bench_multilabel_metrics.benchmark",
    "benchmarks.bench_saga.fit_single",
    "click.core.Parameter.type_cast_value",
    "click.core.Parameter.type_cast_value.convert",
    "click.formatting.measure_table",
    "click.parser.OptionParser._get_value_from_state",
    "click.parser._unpack_args",
    "click.types.Tuple.convert",
    "click.types.convert_type",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "examples.cluster.plot_color_quantization.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.cluster.plot_hdbscan.plot",
    "examples.decomposition.plot_sparse_coding.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "importlib_metadata.EntryPoints.__repr__",
    "importlib_metadata.EntryPoints.select",
    "importlib_metadata.entry_points",
    "jinja2.lexer.OptionalLStrip.__new__",
    "jinja2.nodes.Tuple.as_const",
    "markupsafe.Markup.__mod__",
    "packaging.version.Version.__init__",
    "packaging.version._cmpkey",
    "packaging.version._parse_local_version",
    "pip._vendor.packaging.version.Version.__init__",
    "pip._vendor.packaging.version._cmpkey",
    "pip._vendor.packaging.version._parse_local_version",
    "sklearn.base.BiclusterMixin.get_shape",
    "sklearn.base._clone_parametrized",
    "sklearn.cluster._mean_shift._mean_shift_single_seed",
    "sklearn.cluster._mean_shift.get_bin_seeds",
    "sklearn.covariance._graph_lasso.graphical_lasso",
    "sklearn.datasets._lfw._load_imgs",
    "sklearn.datasets._svmlight_format_io.load_svmlight_file",
    "sklearn.ensemble._base.BaseEnsemble.__init__",
    "sklearn.ensemble._forest.BaseForest.__init__",
    "sklearn.ensemble._forest.ForestClassifier.__init__",
    "sklearn.ensemble._forest.ForestRegressor.__init__",
    "sklearn.ensemble._gb.VerboseReporter.init",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.__init__",
    "sklearn.externals._packaging.version.Version.__init__",
    "sklearn.externals._packaging.version._cmpkey",
    "sklearn.externals._packaging.version._legacy_cmpkey",
    "sklearn.externals._packaging.version._parse_local_version",
    "sklearn.feature_extraction.image._extract_patches",
    "sklearn.gaussian_process.kernels.Hyperparameter.__new__",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.metrics.pairwise._check_chunk_size",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors",
    "sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform",
    "sklearn.tree._export._BaseTreeExporter.get_color",
    "sklearn.utils._determine_key_type",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._format_params_or_dict_items",
    "sklearn.utils._testing._convert_container",
    "traitlets.utils.getargspec.getargspec"
  ],
  "tuple.index": [
    "Ovr{tuple.index}"
  ],
  "turtle.Vec2D.__add__": [
    "Ovr{turtle.Vec2D.__add__}"
  ],
  "turtle.Vec2D.__mul__": [
    "Ovr{turtle.Vec2D.__mul__}"
  ],
  "type.__init__": [
    "benchmarks.bench_rcv1_logreg_convergence.bench",
    "click.core._check_multicommand",
    "click.types.convert_type",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.ParseBaseException.__dir__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__dir__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__add__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__and__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__or__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__radd__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rand__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__ror__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rsub__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rxor__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__sub__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__xor__",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.$class_toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.miscellaneous.plot_set_output.$toplevel",
    "examples.model_selection.plot_cv_indices.plot_cv_indices",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "flask.config.Config.__repr__",
    "graphql.pyutils.default_ordered_dict.DefaultOrderedDict.__copy__",
    "jinja2.compiler.has_safe_repr",
    "jinja2.idtracking.RootVisitor.generic_visit",
    "jinja2.nodes.Node.__init__",
    "jinja2.parser.Parser.parse_assign_target",
    "jinja2.runtime.LoopContext.__repr__",
    "jinja2.sandbox.SandboxedEnvironment.unsafe_undefined",
    "jinja2.utils.LRUCache.__repr__",
    "jinja2.visitor.NodeVisitor.get_visitor",
    "markupsafe.Markup.__mod__",
    "pip._vendor.distlib.compat.ConvertingDict.__getitem__",
    "pip._vendor.distlib.compat.ConvertingDict.get",
    "pip._vendor.distlib.compat.ConvertingList.__getitem__",
    "pip._vendor.distlib.compat.ConvertingList.pop",
    "pip._vendor.distlib.compat.ConvertingTuple.__getitem__",
    "pip._vendor.pyparsing.Forward._setResultsName",
    "pip._vendor.pyparsing.Literal.__init__",
    "pip._vendor.pyparsing.MatchFirst._setResultsName",
    "pip._vendor.pyparsing.Or._setResultsName",
    "pip._vendor.pyparsing.ParseExpression._setResultsName",
    "pip._vendor.pyparsing._MultipleMatch._setResultsName",
    "pip._vendor.resolvelib.structs._FactoryIterableView.__repr__",
    "pip._vendor.resolvelib.structs._SequenceIterableView.__repr__",
    "pip._vendor.urllib3._collections.HTTPHeaderDict.__repr__",
    "pip._vendor.urllib3.util.retry.Retry.__repr__",
    "prompt_toolkit.win32_types.COORD.__repr__",
    "sklearn.base.BaseEstimator.__getstate__",
    "sklearn.base.BaseEstimator.__setstate__",
    "sklearn.base._clone_parametrized",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.compose._column_transformer.ColumnTransformer._get_feature_name_out_for_transformer",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_transformers",
    "sklearn.covariance._robust_covariance.select_candidates",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._openml._verify_target_data_type",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._svmlight_format_io._gen_open",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._add_iterable_element",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._transform",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit",
    "sklearn.gaussian_process.kernels.CompoundKernel.__eq__",
    "sklearn.gaussian_process.kernels.Exponentiation.__eq__",
    "sklearn.gaussian_process.kernels.Kernel.__eq__",
    "sklearn.gaussian_process.kernels.KernelOperator.__eq__",
    "sklearn.impute._base._check_inputs_dtype",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.metrics._scorer._MultimetricScorer._use_cache",
    "sklearn.model_selection._search.ParameterGrid.__init__",
    "sklearn.model_selection._search.ParameterSampler.__init__",
    "sklearn.model_selection._search._check_refit",
    "sklearn.model_selection._split._BaseKFold.__init__",
    "sklearn.model_selection._split._pprint",
    "sklearn.model_selection._validation._score",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors",
    "sklearn.neural_network._rbm.BernoulliRBM.fit",
    "sklearn.pipeline.FeatureUnion._validate_transformers",
    "sklearn.pipeline.FeatureUnion.get_feature_names_out",
    "sklearn.pipeline.Pipeline._validate_steps",
    "sklearn.pipeline._name_estimators",
    "sklearn.preprocessing._encoders.OneHotEncoder._check_get_feature_name_combiner",
    "sklearn.preprocessing._encoders.OrdinalEncoder.$class_toplevel",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.svm._base.BaseLibSVM._validate_for_predict",
    "sklearn.utils._array_api._NumPyAPIWrapper.reshape",
    "sklearn.utils._determine_key_type",
    "sklearn.utils._encode._unique_python",
    "sklearn.utils._param_validation._PandasNAConstraint.is_satisfied_by",
    "sklearn.utils._param_validation.generate_invalid_param_val",
    "sklearn.utils._param_validation.generate_valid_param",
    "sklearn.utils._pprint._safe_repr",
    "sklearn.utils._safe_indexing",
    "sklearn.utils._set_output._wrap_method_output.wrapped",
    "sklearn.utils._testing._IgnoreWarnings.__repr__",
    "sklearn.utils.estimator_checks._apply_on_subsets",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_decision_function",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_representation_invariance",
    "sklearn.utils.estimator_checks.check_estimator",
    "sklearn.utils.estimator_checks.check_fit_score_takes_y",
    "sklearn.utils.estimator_checks.check_no_attributes_set_in_init",
    "sklearn.utils.estimator_checks.check_param_validation",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.estimator_checks.parametrize_with_checks.checks_generator",
    "sklearn.utils.extmath.randomized_svd",
    "sklearn.utils.sparsefuncs._minor_reduce",
    "sklearn.utils.sparsefuncs._raise_typeerror",
    "sklearn.utils.validation._get_feature_names",
    "sklearn.utils.validation._num_features",
    "sklearn.utils.validation._num_samples",
    "sklearn.utils.validation.check_is_fitted",
    "sklearn.utils.validation.check_scalar",
    "traitlets.config.loader.Config.copy",
    "traitlets.utils.getargspec.getargspec",
    "werkzeug.utils.ImportStringError.__init__"
  ],
  "type.__new__": [
    "benchmarks.bench_rcv1_logreg_convergence.bench",
    "click.core._check_multicommand",
    "click.types.convert_type",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.ParseBaseException.__dir__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__dir__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__add__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__and__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__or__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__radd__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rand__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__ror__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rsub__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rxor__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__sub__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__xor__",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.$class_toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.miscellaneous.plot_set_output.$toplevel",
    "examples.model_selection.plot_cv_indices.plot_cv_indices",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "flask.config.Config.__repr__",
    "graphql.pyutils.default_ordered_dict.DefaultOrderedDict.__copy__",
    "jinja2.compiler.has_safe_repr",
    "jinja2.idtracking.RootVisitor.generic_visit",
    "jinja2.nodes.Node.__init__",
    "jinja2.parser.Parser.parse_assign_target",
    "jinja2.runtime.LoopContext.__repr__",
    "jinja2.sandbox.SandboxedEnvironment.unsafe_undefined",
    "jinja2.utils.LRUCache.__repr__",
    "jinja2.visitor.NodeVisitor.get_visitor",
    "markupsafe.Markup.__mod__",
    "pip._vendor.distlib.compat.ConvertingDict.__getitem__",
    "pip._vendor.distlib.compat.ConvertingDict.get",
    "pip._vendor.distlib.compat.ConvertingList.__getitem__",
    "pip._vendor.distlib.compat.ConvertingList.pop",
    "pip._vendor.distlib.compat.ConvertingTuple.__getitem__",
    "pip._vendor.pyparsing.Forward._setResultsName",
    "pip._vendor.pyparsing.Literal.__init__",
    "pip._vendor.pyparsing.MatchFirst._setResultsName",
    "pip._vendor.pyparsing.Or._setResultsName",
    "pip._vendor.pyparsing.ParseExpression._setResultsName",
    "pip._vendor.pyparsing._MultipleMatch._setResultsName",
    "pip._vendor.resolvelib.structs._FactoryIterableView.__repr__",
    "pip._vendor.resolvelib.structs._SequenceIterableView.__repr__",
    "pip._vendor.urllib3._collections.HTTPHeaderDict.__repr__",
    "pip._vendor.urllib3.util.retry.Retry.__repr__",
    "prompt_toolkit.win32_types.COORD.__repr__",
    "sklearn.base.BaseEstimator.__getstate__",
    "sklearn.base.BaseEstimator.__setstate__",
    "sklearn.base._clone_parametrized",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.compose._column_transformer.ColumnTransformer._get_feature_name_out_for_transformer",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_transformers",
    "sklearn.covariance._robust_covariance.select_candidates",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._openml._verify_target_data_type",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._svmlight_format_io._gen_open",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._add_iterable_element",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._transform",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit",
    "sklearn.gaussian_process.kernels.CompoundKernel.__eq__",
    "sklearn.gaussian_process.kernels.Exponentiation.__eq__",
    "sklearn.gaussian_process.kernels.Kernel.__eq__",
    "sklearn.gaussian_process.kernels.KernelOperator.__eq__",
    "sklearn.impute._base._check_inputs_dtype",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.metrics._scorer._MultimetricScorer._use_cache",
    "sklearn.model_selection._search.ParameterGrid.__init__",
    "sklearn.model_selection._search.ParameterSampler.__init__",
    "sklearn.model_selection._search._check_refit",
    "sklearn.model_selection._split._BaseKFold.__init__",
    "sklearn.model_selection._split._pprint",
    "sklearn.model_selection._validation._score",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors",
    "sklearn.neural_network._rbm.BernoulliRBM.fit",
    "sklearn.pipeline.FeatureUnion._validate_transformers",
    "sklearn.pipeline.FeatureUnion.get_feature_names_out",
    "sklearn.pipeline.Pipeline._validate_steps",
    "sklearn.pipeline._name_estimators",
    "sklearn.preprocessing._encoders.OneHotEncoder._check_get_feature_name_combiner",
    "sklearn.preprocessing._encoders.OrdinalEncoder.$class_toplevel",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.svm._base.BaseLibSVM._validate_for_predict",
    "sklearn.utils._array_api._NumPyAPIWrapper.reshape",
    "sklearn.utils._determine_key_type",
    "sklearn.utils._encode._unique_python",
    "sklearn.utils._param_validation._PandasNAConstraint.is_satisfied_by",
    "sklearn.utils._param_validation.generate_invalid_param_val",
    "sklearn.utils._param_validation.generate_valid_param",
    "sklearn.utils._pprint._safe_repr",
    "sklearn.utils._safe_indexing",
    "sklearn.utils._set_output._wrap_method_output.wrapped",
    "sklearn.utils._testing._IgnoreWarnings.__repr__",
    "sklearn.utils.estimator_checks._apply_on_subsets",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_decision_function",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_representation_invariance",
    "sklearn.utils.estimator_checks.check_estimator",
    "sklearn.utils.estimator_checks.check_fit_score_takes_y",
    "sklearn.utils.estimator_checks.check_no_attributes_set_in_init",
    "sklearn.utils.estimator_checks.check_param_validation",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.estimator_checks.parametrize_with_checks.checks_generator",
    "sklearn.utils.extmath.randomized_svd",
    "sklearn.utils.sparsefuncs._minor_reduce",
    "sklearn.utils.sparsefuncs._raise_typeerror",
    "sklearn.utils.validation._get_feature_names",
    "sklearn.utils.validation._num_features",
    "sklearn.utils.validation._num_samples",
    "sklearn.utils.validation.check_is_fitted",
    "sklearn.utils.validation.check_scalar",
    "traitlets.config.loader.Config.copy",
    "traitlets.utils.getargspec.getargspec",
    "werkzeug.utils.ImportStringError.__init__"
  ],
  "types.AsyncGeneratorType.__aiter__": [
    "Ovr{types.AsyncGeneratorType.__aiter__}"
  ],
  "types.AsyncGeneratorType.__anext__": [
    "Ovr{types.AsyncGeneratorType.__anext__}"
  ],
  "types.CodeType.co_filename": [
    "jinja2.environment.Template.from_code"
  ],
  "types.CodeType.co_name": [
    "jinja2.debug.fake_traceback"
  ],
  "types.CodeType.replace": [
    "jinja2.debug.fake_traceback"
  ],
  "types.FrameType.f_code": [
    "jinja2.debug.fake_traceback",
    "jinja2.debug.rewrite_traceback_stack"
  ],
  "types.FrameType.f_globals": [
    "jinja2.debug.rewrite_traceback_stack"
  ],
  "types.FrameType.f_locals": [
    "jinja2.debug.fake_traceback"
  ],
  "types.FunctionType.__call__": [
    "traitlets.utils.getargspec.getargspec"
  ],
  "types.GeneratorType.__iter__": [
    "Ovr{types.GeneratorType.__iter__}"
  ],
  "types.GeneratorType.__next__": [
    "Ovr{types.GeneratorType.__next__}"
  ],
  "types.MappingProxyType.__getitem__": [
    "sklearn.metrics._scorer._BaseScorer._get_pos_label"
  ],
  "types.MappingProxyType.__iter__": [
    "Ovr{types.MappingProxyType.__iter__}",
    "sklearn.utils.validation._is_fitted"
  ],
  "types.MappingProxyType.items": [
    "Ovr{types.MappingProxyType.items}",
    "sklearn.utils._array_api._estimator_with_converted_arrays",
    "sklearn.utils._metadata_requests._MetadataRequester._build_request_for_signature",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils._pprint._changed_params",
    "sklearn.utils._testing._get_args",
    "sklearn.utils.estimator_checks.check_array_api_input",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args"
  ],
  "types.MappingProxyType.values": [
    "Ovr{types.MappingProxyType.values}",
    "sklearn.base.BaseEstimator._get_param_names",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.model_selection._split._build_repr",
    "sklearn.utils._param_validation.validate_params.decorator.wrapper",
    "sklearn.utils._testing._get_args",
    "sklearn.utils.estimator_checks.check_fit_score_takes_y",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible"
  ],
  "types.MethodType.__func__": [
    "traitlets.utils.getargspec.getargspec"
  ],
  "types.MethodType.__init__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._FifoCache.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._UnboundedCache.__init__",
    "sklearn.utils._available_if._AvailableIfDescriptor.__get__"
  ],
  "types.TracebackType.tb_frame": [
    "jinja2.debug.fake_traceback",
    "jinja2.debug.rewrite_traceback_stack"
  ],
  "types.TracebackType.tb_lineno": [
    "jinja2.debug.rewrite_traceback_stack"
  ],
  "typing.AsyncGenerator.__anext__": [
    "Ovr{typing.AsyncGenerator.__anext__}"
  ],
  "typing.AsyncIterator.__aiter__": [
    "Ovr{typing.AsyncIterator.__aiter__}"
  ],
  "typing.AsyncIterator.__anext__": [
    "Ovr{typing.AsyncIterator.__anext__}"
  ],
  "typing.Generator.__iter__": [
    "Ovr{typing.Generator.__iter__}"
  ],
  "typing.Generator.__next__": [
    "Ovr{typing.Generator.__next__}"
  ],
  "typing.GenericMeta.__getitem__": [
    "sklearn.externals._packaging.version.$toplevel",
    "sklearn.utils._metadata_requests.RequestMethod.__get__"
  ],
  "typing.IO.__iter__": [
    "Ovr{typing.IO.__iter__}",
    "maint_tools.sort_whats_new.$toplevel"
  ],
  "typing.IO.__next__": [
    "Ovr{typing.IO.__next__}"
  ],
  "typing.IO.close": [
    "Ovr{typing.IO.close}"
  ],
  "typing.IO.fileno": [
    "click._winconsole._get_windows_console_stream",
    "click._winconsole._is_console"
  ],
  "typing.IO.flush": [
    "Ovr{typing.IO.flush}",
    "benchmarks.bench_plot_lasso_path.compute_bench",
    "benchmarks.bench_plot_nmf.run_bench",
    "benchmarks.bench_plot_omp_lars.compute_bench",
    "click.utils.echo",
    "examples.linear_model.plot_sgd_early_stopping.$toplevel",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._initialize",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._loss_grad_lbfgs"
  ],
  "typing.IO.isatty": [
    "Ovr{typing.IO.isatty}"
  ],
  "typing.IO.name": [
    "click._winconsole.ConsoleStream.name",
    "sklearn.datasets._openml._open_openml_url"
  ],
  "typing.IO.read": [
    "Ovr{typing.IO.read}"
  ],
  "typing.IO.write": [
    "Ovr{typing.IO.write}",
    "click.utils.echo",
    "doc.tutorial.machine_learning_map.pyparsing.traceParseAction.z",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents.progress",
    "sklearn.$toplevel",
    "sklearn.covariance._graph_lasso.graphical_lasso_path",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.linear_model._coordinate_descent.enet_path",
    "sklearn.linear_model._least_angle._lars_path_solver"
  ],
  "typing.ItemsView.__iter__": [
    "Ovr{typing.ItemsView.__iter__}",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "build_tools.circle.list_versions.$toplevel",
    "click.core.BaseCommand.make_context",
    "click.types.Choice.convert",
    "doc.conf.generate_min_dependency_substitutions",
    "doc.conf.generate_min_dependency_table",
    "doc.conf.make_carousel_thumbs",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.pop",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.withAttribute",
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_species_distribution_modeling.create_species_bunch",
    "examples.ensemble.plot_ensemble_oob.$toplevel",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.linear_model.plot_ols_ridge_variance.$toplevel",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.linear_model.plot_sgd_early_stopping.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.miscellaneous.plot_kernel_ridge_regression.$toplevel",
    "examples.miscellaneous.plot_metadata_routing.check_metadata",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "examples.model_selection.plot_det.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.text.plot_document_clustering.fit_and_evaluate",
    "jinja2.compiler.has_safe_repr",
    "jinja2.debug.get_template_locals",
    "jinja2.ext.InternationalizationExtension._make_node",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.runtime.Context.__init__",
    "jinja2.runtime.new_context",
    "pip._vendor.distlib.compat.OrderedDict.update",
    "setup.configure_extension_modules",
    "sklearn._min_dependencies.$toplevel",
    "sklearn.base.BaseEstimator.set_params",
    "sklearn.cluster._mean_shift.get_bin_seeds",
    "sklearn.externals._arff.$toplevel",
    "sklearn.externals._arff.LODGeneratorData.decode_rows",
    "sklearn.gaussian_process.kernels.Kernel.set_params",
    "sklearn.impute._base._most_frequent",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._scorer._BaseScorer.set_score_request",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.model_selection._plot._BaseCurveDisplay._plot_curve",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.model_selection._search.ParameterGrid.__init__",
    "sklearn.model_selection._validation._score",
    "sklearn.model_selection._validation._warn_or_raise_about_fit_failures",
    "sklearn.pipeline.Pipeline._check_fit_params",
    "sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform",
    "sklearn.utils._array_api._estimator_with_converted_arrays",
    "sklearn.utils._metadata_requests.MetadataRouter.add",
    "sklearn.utils._metadata_requests.RequestMethod.__get__.func",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils._mocking.CheckingClassifier.fit",
    "sklearn.utils._param_validation.validate_params.decorator.wrapper",
    "sklearn.utils._pprint._changed_params",
    "sklearn.utils._set_output._SetOutputMixin.__init_subclass__",
    "sklearn.utils._testing.MinimalClassifier.set_params",
    "sklearn.utils._testing.MinimalRegressor.set_params",
    "sklearn.utils._testing.MinimalTransformer.set_params",
    "sklearn.utils._testing._get_args",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.estimator_checks._get_check_estimator_ids",
    "sklearn.utils.estimator_checks.check_array_api_input",
    "sklearn.utils.estimator_checks.check_set_output_transform",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args",
    "traitlets.traitlets.HasTraits.__init__",
    "traitlets.traitlets.HasTraits.hold_trait_notifications"
  ],
  "typing.Iterable.__iter__": [
    "Ovr{typing.Iterable.__iter__}",
    "pip._vendor.requests.cookies.RequestsCookieJar._find_no_duplicates",
    "pip._vendor.requests.cookies.RequestsCookieJar.iteritems",
    "pip._vendor.requests.cookies.RequestsCookieJar.itervalues"
  ],
  "typing.Iterator.__iter__": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "typing.Iterator.__next__": [
    "Ovr{typing.Iterator.__next__}",
    "markupsafe.Markup.rsplit",
    "markupsafe.Markup.split",
    "markupsafe.Markup.splitlines"
  ],
  "typing.KeysView.__iter__": [
    "Ovr{typing.KeysView.__iter__}",
    "benchmarks.bench_saga.exp",
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.neighbors._kde.KernelDensity.$class_toplevel"
  ],
  "typing.KeysView.__sub__": [
    "sklearn.neighbors._base.$toplevel"
  ],
  "typing.Mapping.__getitem__": [
    "jinja2.environment.Template._from_namespace"
  ],
  "typing.Mapping.get": [
    "Ovr{typing.Mapping.get}",
    "click._compat.auto_wrap_for_ansi",
    "click.core.BaseCommand._main_shell_completion",
    "click.core.Option.resolve_envvar_value",
    "click.core.Parameter.resolve_envvar_value",
    "doc.conf.$toplevel",
    "doc.conftest.setup_loading_other_datasets",
    "doc.conftest.setup_working_with_text_data",
    "flask.helpers.get_load_dotenv",
    "jinja2.lexer.get_lexer",
    "setup.build_ext_subclass.finalize_options",
    "setup.configure_extension_modules",
    "sklearn._build_utils.cythonize_extensions",
    "sklearn._config.$toplevel",
    "sklearn.conftest.$toplevel",
    "sklearn.conftest._fetch_fixture",
    "sklearn.conftest.pytest_collection_modifyitems",
    "sklearn.conftest.pytest_configure",
    "sklearn.conftest.raccoon_face_or_skip",
    "sklearn.datasets._base.get_data_home",
    "sklearn.setup_module",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.tests.random_seed.pytest_report_header",
    "sklearn.utils._testing.assert_run_python_script",
    "sklearn.utils._testing.check_skip_network",
    "traitlets.traitlets._should_warn"
  ],
  "typing.Mapping.items": [
    "Ovr{typing.Mapping.items}",
    "pip._vendor.requests.structures.CaseInsensitiveDict.__repr__"
  ],
  "typing.Mapping.values": [
    "Ovr{typing.Mapping.values}"
  ],
  "typing.MutableMapping.__setitem__": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "typing.MutableMapping.setdefault": [
    "click.globals.push_context",
    "click.parser.Option.process",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.linear_model._quantile.QuantileRegressor.fit"
  ],
  "typing.MutableMapping.update": [
    "benchmarks.bench_text_vectorizers.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "importlib_metadata.DistributionFinder.Context.__init__",
    "importlib_metadata.EntryPoint.__init__",
    "jinja2.nodes.args_as_const",
    "pip._vendor.requests.cookies.create_cookie",
    "sklearn.base.BaseEstimator.__setstate__",
    "sklearn.base.BaseEstimator._get_tags",
    "sklearn.base.BaseEstimator.get_params",
    "sklearn.calibration.CalibrationDisplay.plot",
    "sklearn.externals._arff.$toplevel",
    "sklearn.feature_extraction.text.TfidfVectorizer.$class_toplevel",
    "sklearn.gaussian_process.kernels.Exponentiation.get_params",
    "sklearn.gaussian_process.kernels.KernelOperator.get_params",
    "sklearn.linear_model._logistic.LogisticRegressionCV.$class_toplevel",
    "sklearn.linear_model._perceptron.Perceptron.$class_toplevel",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.plot",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.plot",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.metrics.pairwise.pairwise_distances_chunked",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.neighbors._classification.KNeighborsClassifier.$class_toplevel",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests.MetadataRouter._route_params",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils.tests.test_shortest_path.test_shortest_path",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f"
  ],
  "typing.MutableSequence.__getitem__": [
    "Ovr{typing.MutableSequence.__getitem__}"
  ],
  "typing.MutableSequence.reverse": [
    "click.parser._unpack_args",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__delitem__",
    "sklearn.cluster._optics._xi_cluster"
  ],
  "typing.MutableSet.pop": [
    "sklearn.metrics._classification._check_targets",
    "sklearn.utils._determine_key_type",
    "sklearn.utils.multiclass.unique_labels"
  ],
  "typing.NamedTuple.__init__": [
    "examples.gaussian_process.plot_gpr_on_structured_data.SequenceKernel.hyperparameter_baseline_similarity",
    "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameter_constant_value",
    "sklearn.gaussian_process.kernels.DotProduct.hyperparameter_sigma_0",
    "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale",
    "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_periodicity",
    "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters",
    "sklearn.gaussian_process.kernels.KernelOperator.hyperparameters",
    "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameter_gamma",
    "sklearn.gaussian_process.kernels.RBF.hyperparameter_length_scale",
    "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameter_alpha",
    "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameter_length_scale",
    "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameter_noise_level",
    "sklearn.gaussian_process.tests._mini_sequence_kernel.MiniSeqKernel.hyperparameter_baseline_similarity"
  ],
  "typing.NamedTuple._replace": [
    "libcst._parser.parso.python.tokenize.PythonToken.__repr__",
    "parso.python.tokenize.PythonToken.__repr__"
  ],
  "typing.Sequence.__getitem__": [
    "Ovr{typing.Sequence.__getitem__}"
  ],
  "typing.Sequence.__iter__": [
    "Ovr{typing.Sequence.__iter__}"
  ],
  "typing.Sequence.index": [
    "Ovr{typing.Sequence.index}"
  ],
  "typing.TextIO.buffer": [
    "Ovr{typing.TextIO.buffer}"
  ],
  "typing.TextIO.encoding": [
    "click._compat._get_argv_encoding",
    "click._compat._stream_is_misconfigured",
    "sklearn._build_utils.pre_build_helpers.compile_test_program"
  ],
  "typing.ValuesView.__iter__": [
    "Ovr{typing.ValuesView.__iter__}",
    "benchmarks.bench_saga.exp",
    "doc.conf.generate_min_dependency_table",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "sklearn.base.BaseEstimator._get_param_names",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.model_selection._split._build_repr",
    "sklearn.utils._param_validation.validate_params.decorator.wrapper",
    "sklearn.utils._testing._get_args",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_fit_score_takes_y",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "traitlets.traitlets.HasTraits.hold_trait_notifications"
  ],
  "typing._Alias.__getitem__": [
    "click.core.Parameter.shell_complete",
    "prompt_toolkit.layout.utils._ExplodedList.__setitem__",
    "sklearn.datasets._openml.$toplevel"
  ],
  "typing._SpecialForm.__getitem__": [
    "jinja2.environment.load_extensions",
    "sklearn.externals._arff.$toplevel",
    "sklearn.externals._packaging.version.$toplevel"
  ],
  "typing._TypedDict.items": [
    "Ovr{typing._TypedDict.items}"
  ],
  "typing._TypedDict.values": [
    "Ovr{typing._TypedDict.values}"
  ],
  "typing_extensions.SupportsIndex.__index__": [
    "prompt_toolkit.layout.utils._ExplodedList.__setitem__"
  ],
  "typing_extensions._TypedDict.items": [
    "Ovr{typing_extensions._TypedDict.items}"
  ],
  "typing_extensions._TypedDict.values": [
    "Ovr{typing_extensions._TypedDict.values}"
  ],
  "unittest.case.FunctionTestCase.__init__": [
    "sklearn.utils.tests.test_estimator_checks.run_tests_without_pytest"
  ],
  "unittest.case.SkipTest.__init__": [
    "doc.conftest.pytest_runtest_setup",
    "doc.conftest.setup_compose",
    "doc.conftest.setup_grid_search",
    "doc.conftest.setup_impute",
    "doc.conftest.setup_labeled_faces",
    "doc.conftest.setup_loading_other_datasets",
    "doc.conftest.setup_preprocessing",
    "doc.conftest.setup_rcv1",
    "doc.conftest.setup_twenty_newsgroups",
    "doc.conftest.setup_unsupervised_learning",
    "doc.conftest.setup_working_with_text_data",
    "doc.conftest.skip_if_cupy_not_installed",
    "doc.conftest.skip_if_matplotlib_not_installed",
    "sklearn.conftest.raccoon_face_or_skip",
    "sklearn.utils._testing.check_skip_network",
    "sklearn.utils.estimator_checks._check_transformer",
    "sklearn.utils.estimator_checks._construct_instance",
    "sklearn.utils.estimator_checks._maybe_skip.wrapped",
    "sklearn.utils.estimator_checks.check_array_api_input",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_decision_function",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_estimators_data_not_an_array",
    "sklearn.utils.estimator_checks.check_global_ouptut_transform_pandas",
    "sklearn.utils.estimator_checks.check_pipeline_consistency",
    "sklearn.utils.estimator_checks.check_sample_weights_pandas_series",
    "sklearn.utils.estimator_checks.check_set_output_transform_pandas",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out_pandas",
    "sklearn.utils.tests.test_estimator_checks.test_check_array_api_input"
  ],
  "unittest.case.TestCase.__init__": [
    "sklearn.utils._testing.$toplevel"
  ],
  "unittest.mock._Call.__eq__": [
    "click.parser.Argument.process"
  ],
  "unittest.mock._Call.__ne__": [
    "click.parser.Argument.process"
  ],
  "unittest.runner.TextTestRunner.__init__": [
    "sklearn.utils.tests.test_estimator_checks.run_tests_without_pytest"
  ],
  "unittest.runner.TextTestRunner.run": [
    "sklearn.utils.tests.test_estimator_checks.run_tests_without_pytest"
  ],
  "unittest.suite.BaseTestSuite.__call__": [
    "sklearn.utils.tests.test_estimator_checks.run_tests_without_pytest"
  ],
  "unittest.suite.BaseTestSuite.__init__": [
    "sklearn.utils.tests.test_estimator_checks.run_tests_without_pytest"
  ],
  "unittest.suite.BaseTestSuite.__iter__": [
    "Ovr{unittest.suite.BaseTestSuite.__iter__}"
  ],
  "unittest.suite.BaseTestSuite.addTests": [
    "sklearn.utils.tests.test_estimator_checks.run_tests_without_pytest"
  ],
  "urllib.request.OpenerDirector.open": [
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel"
  ],
  "urllib.request.Request.__init__": [
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "sklearn.datasets._openml._open_openml_url"
  ],
  "urllib.request.Request.add_header": [
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "sklearn.datasets._openml._open_openml_url"
  ],
  "urllib.request.Request.full_url": [
    "sklearn.datasets._openml._open_openml_url"
  ],
  "urllib.response.addbase.__iter__": [
    "Ovr{urllib.response.addbase.__iter__}"
  ],
  "urllib.response.addbase.__next__": [
    "Ovr{urllib.response.addbase.__next__}"
  ],
  "urllib.response.addbase.close": [
    "Ovr{urllib.response.addbase.close}"
  ],
  "urllib.response.addbase.flush": [
    "Ovr{urllib.response.addbase.flush}",
    "click.utils.echo"
  ],
  "urllib.response.addbase.isatty": [
    "Ovr{urllib.response.addbase.isatty}"
  ],
  "urllib.response.addbase.read": [
    "Ovr{urllib.response.addbase.read}"
  ],
  "urllib.response.addbase.write": [
    "Ovr{urllib.response.addbase.write}",
    "click.utils.echo"
  ],
  "urllib3._collections.HTTPHeaderDict.__iter__": [
    "Ovr{urllib3._collections.HTTPHeaderDict.__iter__}"
  ],
  "urllib3._collections.HTTPHeaderDict.__setitem__": [
    "Ovr{urllib3._collections.HTTPHeaderDict.__setitem__}"
  ],
  "urllib3._collections.HTTPHeaderDict.items": [
    "Ovr{urllib3._collections.HTTPHeaderDict.items}"
  ],
  "urllib3._collections.RecentlyUsedContainer.__iter__": [
    "Ovr{urllib3._collections.RecentlyUsedContainer.__iter__}"
  ],
  "urllib3._collections.RecentlyUsedContainer.__setitem__": [
    "Ovr{urllib3._collections.RecentlyUsedContainer.__setitem__}"
  ],
  "uuid.UUID.__init__": [
    "click.types.UUIDParameterType.convert"
  ],
  "warnings.catch_warnings.__enter__": [
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.miscellaneous.plot_metadata_routing.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.plot_on_dataset",
    "examples.neural_networks.plot_mnist_filters.$toplevel",
    "sklearn.cluster._dbscan.DBSCAN.fit",
    "sklearn.cluster._optics.OPTICS.fit",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.ensemble._forest._parallel_build_trees",
    "sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.inner_solve",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.fit",
    "sklearn.model_selection._split._build_repr",
    "sklearn.naive_bayes._BaseDiscreteNB._update_class_log_prior",
    "sklearn.preprocessing._data.PowerTransformer._check_input",
    "sklearn.utils._joblib.$toplevel",
    "sklearn.utils._safe_assign",
    "sklearn.utils._testing._IgnoreWarnings.__call__.wrapper",
    "sklearn.utils._testing.assert_no_warnings",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.estimator_checks.check_clustering",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_supervised_y_2d",
    "sklearn.utils.multiclass.is_multilabel",
    "sklearn.utils.multiclass.type_of_target",
    "sklearn.utils.tests.test_estimator_checks.test_all_estimators_all_public",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator",
    "sklearn.utils.tests.test_estimator_checks.test_check_requires_y_none",
    "sklearn.utils.tests.test_estimator_checks.test_xfail_ignored_in_check_estimator",
    "sklearn.utils.validation.check_array"
  ],
  "warnings.catch_warnings.__init__": [
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.miscellaneous.plot_metadata_routing.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.plot_on_dataset",
    "examples.neural_networks.plot_mnist_filters.$toplevel",
    "sklearn.cluster._dbscan.DBSCAN.fit",
    "sklearn.cluster._optics.OPTICS.fit",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.ensemble._forest._parallel_build_trees",
    "sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.inner_solve",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.fit",
    "sklearn.model_selection._split._build_repr",
    "sklearn.naive_bayes._BaseDiscreteNB._update_class_log_prior",
    "sklearn.preprocessing._data.PowerTransformer._check_input",
    "sklearn.utils._joblib.$toplevel",
    "sklearn.utils._safe_assign",
    "sklearn.utils._testing._IgnoreWarnings.__call__.wrapper",
    "sklearn.utils._testing.assert_no_warnings",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.estimator_checks.check_clustering",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_supervised_y_2d",
    "sklearn.utils.multiclass.is_multilabel",
    "sklearn.utils.multiclass.type_of_target",
    "sklearn.utils.tests.test_estimator_checks.test_all_estimators_all_public",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator",
    "sklearn.utils.tests.test_estimator_checks.test_check_requires_y_none",
    "sklearn.utils.tests.test_estimator_checks.test_xfail_ignored_in_check_estimator",
    "sklearn.utils.validation.check_array"
  ],
  "weakref.WeakKeyDictionary.__iter__": [
    "Ovr{weakref.WeakKeyDictionary.__iter__}"
  ],
  "weakref.WeakKeyDictionary.__setitem__": [
    "Ovr{weakref.WeakKeyDictionary.__setitem__}"
  ],
  "weakref.WeakKeyDictionary.items": [
    "Ovr{weakref.WeakKeyDictionary.items}"
  ],
  "weakref.WeakKeyDictionary.values": [
    "Ovr{weakref.WeakKeyDictionary.values}"
  ],
  "weakref.WeakValueDictionary.__iter__": [
    "Ovr{weakref.WeakValueDictionary.__iter__}"
  ],
  "weakref.WeakValueDictionary.__setitem__": [
    "Ovr{weakref.WeakValueDictionary.__setitem__}"
  ],
  "weakref.WeakValueDictionary.items": [
    "Ovr{weakref.WeakValueDictionary.items}"
  ],
  "weakref.WeakValueDictionary.values": [
    "Ovr{weakref.WeakValueDictionary.values}"
  ],
  "werkzeug.datastructures.accept.Accept.__getitem__": [
    "Ovr{werkzeug.datastructures.accept.Accept.__getitem__}"
  ],
  "werkzeug.datastructures.accept.Accept.index": [
    "Ovr{werkzeug.datastructures.accept.Accept.index}"
  ],
  "werkzeug.datastructures.etag.ETags.__iter__": [
    "Ovr{werkzeug.datastructures.etag.ETags.__iter__}"
  ],
  "werkzeug.datastructures.file_storage.FileStorage.__repr__": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "werkzeug.datastructures.headers.EnvironHeaders.__eq__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__eq__"
  ],
  "werkzeug.datastructures.headers.EnvironHeaders.__getitem__": [
    "Ovr{werkzeug.datastructures.headers.EnvironHeaders.__getitem__}"
  ],
  "werkzeug.datastructures.headers.EnvironHeaders.__iter__": [
    "Ovr{werkzeug.datastructures.headers.EnvironHeaders.__iter__}"
  ],
  "werkzeug.datastructures.headers.EnvironHeaders.copy": [
    "Ovr{werkzeug.datastructures.headers.EnvironHeaders.copy}"
  ],
  "werkzeug.datastructures.headers.Headers.__eq__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__eq__"
  ],
  "werkzeug.datastructures.headers.Headers.__getitem__": [
    "Ovr{werkzeug.datastructures.headers.Headers.__getitem__}"
  ],
  "werkzeug.datastructures.headers.Headers.__iter__": [
    "Ovr{werkzeug.datastructures.headers.Headers.__iter__}"
  ],
  "werkzeug.datastructures.headers.Headers.__setitem__": [
    "Ovr{werkzeug.datastructures.headers.Headers.__setitem__}"
  ],
  "werkzeug.datastructures.headers.Headers.copy": [
    "Ovr{werkzeug.datastructures.headers.Headers.copy}"
  ],
  "werkzeug.datastructures.headers.Headers.get": [
    "Ovr{werkzeug.datastructures.headers.Headers.get}"
  ],
  "werkzeug.datastructures.headers.Headers.items": [
    "Ovr{werkzeug.datastructures.headers.Headers.items}"
  ],
  "werkzeug.datastructures.headers.Headers.keys": [
    "Ovr{werkzeug.datastructures.headers.Headers.keys}"
  ],
  "werkzeug.datastructures.headers.Headers.pop": [
    "Ovr{werkzeug.datastructures.headers.Headers.pop}"
  ],
  "werkzeug.datastructures.headers.Headers.setdefault": [
    "Ovr{werkzeug.datastructures.headers.Headers.setdefault}"
  ],
  "werkzeug.datastructures.headers.Headers.update": [
    "Ovr{werkzeug.datastructures.headers.Headers.update}"
  ],
  "werkzeug.datastructures.headers.Headers.values": [
    "Ovr{werkzeug.datastructures.headers.Headers.values}"
  ],
  "werkzeug.datastructures.mixins.ImmutableDictMixin.__setitem__": [
    "Ovr{werkzeug.datastructures.mixins.ImmutableDictMixin.__setitem__}"
  ],
  "werkzeug.datastructures.mixins.ImmutableDictMixin.pop": [
    "Ovr{werkzeug.datastructures.mixins.ImmutableDictMixin.pop}"
  ],
  "werkzeug.datastructures.mixins.ImmutableDictMixin.setdefault": [
    "click.globals.push_context",
    "click.parser.Option.process",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.linear_model._quantile.QuantileRegressor.fit"
  ],
  "werkzeug.datastructures.mixins.ImmutableDictMixin.update": [
    "benchmarks.bench_text_vectorizers.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "importlib_metadata.DistributionFinder.Context.__init__",
    "importlib_metadata.EntryPoint.__init__",
    "jinja2.nodes.args_as_const",
    "pip._vendor.requests.cookies.create_cookie",
    "sklearn.base.BaseEstimator.__setstate__",
    "sklearn.base.BaseEstimator._get_tags",
    "sklearn.base.BaseEstimator.get_params",
    "sklearn.calibration.CalibrationDisplay.plot",
    "sklearn.externals._arff.$toplevel",
    "sklearn.gaussian_process.kernels.Exponentiation.get_params",
    "sklearn.gaussian_process.kernels.KernelOperator.get_params",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.plot",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.plot",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.metrics.pairwise.pairwise_distances_chunked",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f"
  ],
  "werkzeug.datastructures.mixins.ImmutableHeadersMixin.__setitem__": [
    "Ovr{werkzeug.datastructures.mixins.ImmutableHeadersMixin.__setitem__}"
  ],
  "werkzeug.datastructures.mixins.ImmutableHeadersMixin.pop": [
    "Ovr{werkzeug.datastructures.mixins.ImmutableHeadersMixin.pop}"
  ],
  "werkzeug.datastructures.mixins.ImmutableHeadersMixin.setdefault": [
    "Ovr{werkzeug.datastructures.mixins.ImmutableHeadersMixin.setdefault}"
  ],
  "werkzeug.datastructures.mixins.ImmutableHeadersMixin.update": [
    "Ovr{werkzeug.datastructures.mixins.ImmutableHeadersMixin.update}"
  ],
  "werkzeug.datastructures.mixins.ImmutableListMixin.__iadd__": [
    "Ovr{werkzeug.datastructures.mixins.ImmutableListMixin.__iadd__}"
  ],
  "werkzeug.datastructures.mixins.ImmutableListMixin.__setitem__": [
    "Ovr{werkzeug.datastructures.mixins.ImmutableListMixin.__setitem__}"
  ],
  "werkzeug.datastructures.mixins.ImmutableListMixin.append": [
    "Ovr{werkzeug.datastructures.mixins.ImmutableListMixin.append}"
  ],
  "werkzeug.datastructures.mixins.ImmutableListMixin.extend": [
    "Ovr{werkzeug.datastructures.mixins.ImmutableListMixin.extend}"
  ],
  "werkzeug.datastructures.mixins.ImmutableListMixin.insert": [
    "Ovr{werkzeug.datastructures.mixins.ImmutableListMixin.insert}"
  ],
  "werkzeug.datastructures.mixins.ImmutableListMixin.pop": [
    "Ovr{werkzeug.datastructures.mixins.ImmutableListMixin.pop}"
  ],
  "werkzeug.datastructures.mixins.ImmutableListMixin.remove": [
    "Ovr{werkzeug.datastructures.mixins.ImmutableListMixin.remove}"
  ],
  "werkzeug.datastructures.mixins.ImmutableListMixin.reverse": [
    "click.parser._unpack_args",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__delitem__",
    "sklearn.cluster._optics._xi_cluster"
  ],
  "werkzeug.datastructures.mixins.ImmutableListMixin.sort": [
    "Ovr{werkzeug.datastructures.mixins.ImmutableListMixin.sort}"
  ],
  "werkzeug.datastructures.mixins.UpdateDictMixin.__setitem__": [
    "Ovr{werkzeug.datastructures.mixins.UpdateDictMixin.__setitem__}"
  ],
  "werkzeug.datastructures.mixins.UpdateDictMixin.pop": [
    "Ovr{werkzeug.datastructures.mixins.UpdateDictMixin.pop}"
  ],
  "werkzeug.datastructures.mixins.UpdateDictMixin.setdefault": [
    "Ovr{werkzeug.datastructures.mixins.UpdateDictMixin.setdefault}",
    "flask.sessions.SecureCookieSession.setdefault"
  ],
  "werkzeug.datastructures.mixins.UpdateDictMixin.update": [
    "benchmarks.bench_text_vectorizers.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "importlib_metadata.DistributionFinder.Context.__init__",
    "importlib_metadata.EntryPoint.__init__",
    "jinja2.nodes.args_as_const",
    "pip._vendor.requests.cookies.create_cookie",
    "sklearn.base.BaseEstimator.__setstate__",
    "sklearn.base.BaseEstimator._get_tags",
    "sklearn.base.BaseEstimator.get_params",
    "sklearn.calibration.CalibrationDisplay.plot",
    "sklearn.externals._arff.$toplevel",
    "sklearn.gaussian_process.kernels.Exponentiation.get_params",
    "sklearn.gaussian_process.kernels.KernelOperator.get_params",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.plot",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.plot",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.metrics.pairwise.pairwise_distances_chunked",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f"
  ],
  "werkzeug.datastructures.structures.CombinedMultiDict.__getitem__": [
    "Ovr{werkzeug.datastructures.structures.CombinedMultiDict.__getitem__}"
  ],
  "werkzeug.datastructures.structures.CombinedMultiDict.__iter__": [
    "Ovr{werkzeug.datastructures.structures.CombinedMultiDict.__iter__}"
  ],
  "werkzeug.datastructures.structures.CombinedMultiDict.copy": [
    "Ovr{werkzeug.datastructures.structures.CombinedMultiDict.copy}"
  ],
  "werkzeug.datastructures.structures.CombinedMultiDict.get": [
    "Ovr{werkzeug.datastructures.structures.CombinedMultiDict.get}"
  ],
  "werkzeug.datastructures.structures.CombinedMultiDict.items": [
    "Ovr{werkzeug.datastructures.structures.CombinedMultiDict.items}"
  ],
  "werkzeug.datastructures.structures.CombinedMultiDict.keys": [
    "Ovr{werkzeug.datastructures.structures.CombinedMultiDict.keys}"
  ],
  "werkzeug.datastructures.structures.CombinedMultiDict.values": [
    "Ovr{werkzeug.datastructures.structures.CombinedMultiDict.values}"
  ],
  "werkzeug.datastructures.structures.HeaderSet.__iter__": [
    "Ovr{werkzeug.datastructures.structures.HeaderSet.__iter__}"
  ],
  "werkzeug.datastructures.structures.HeaderSet.add": [
    "Ovr{werkzeug.datastructures.structures.HeaderSet.add}"
  ],
  "werkzeug.datastructures.structures.HeaderSet.update": [
    "Ovr{werkzeug.datastructures.structures.HeaderSet.update}"
  ],
  "werkzeug.datastructures.structures.ImmutableDict.copy": [
    "Ovr{werkzeug.datastructures.structures.ImmutableDict.copy}"
  ],
  "werkzeug.datastructures.structures.ImmutableMultiDict.copy": [
    "Ovr{werkzeug.datastructures.structures.ImmutableMultiDict.copy}"
  ],
  "werkzeug.datastructures.structures.ImmutableOrderedMultiDict.copy": [
    "Ovr{werkzeug.datastructures.structures.ImmutableOrderedMultiDict.copy}"
  ],
  "werkzeug.datastructures.structures.ImmutableTypeConversionDict.copy": [
    "Ovr{werkzeug.datastructures.structures.ImmutableTypeConversionDict.copy}"
  ],
  "werkzeug.datastructures.structures.MultiDict.__getitem__": [
    "Ovr{werkzeug.datastructures.structures.MultiDict.__getitem__}"
  ],
  "werkzeug.datastructures.structures.MultiDict.__setitem__": [
    "Ovr{werkzeug.datastructures.structures.MultiDict.__setitem__}"
  ],
  "werkzeug.datastructures.structures.MultiDict.copy": [
    "Ovr{werkzeug.datastructures.structures.MultiDict.copy}"
  ],
  "werkzeug.datastructures.structures.MultiDict.items": [
    "Ovr{werkzeug.datastructures.structures.MultiDict.items}"
  ],
  "werkzeug.datastructures.structures.MultiDict.pop": [
    "Ovr{werkzeug.datastructures.structures.MultiDict.pop}"
  ],
  "werkzeug.datastructures.structures.MultiDict.setdefault": [
    "click.globals.push_context",
    "click.parser.Option.process",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.linear_model._quantile.QuantileRegressor.fit"
  ],
  "werkzeug.datastructures.structures.MultiDict.update": [
    "Ovr{werkzeug.datastructures.structures.MultiDict.update}"
  ],
  "werkzeug.datastructures.structures.MultiDict.values": [
    "Ovr{werkzeug.datastructures.structures.MultiDict.values}"
  ],
  "werkzeug.datastructures.structures.OrderedMultiDict.__eq__": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__eq__"
  ],
  "werkzeug.datastructures.structures.OrderedMultiDict.__getitem__": [
    "Ovr{werkzeug.datastructures.structures.OrderedMultiDict.__getitem__}"
  ],
  "werkzeug.datastructures.structures.OrderedMultiDict.__iter__": [
    "Ovr{werkzeug.datastructures.structures.OrderedMultiDict.__iter__}"
  ],
  "werkzeug.datastructures.structures.OrderedMultiDict.__setitem__": [
    "Ovr{werkzeug.datastructures.structures.OrderedMultiDict.__setitem__}"
  ],
  "werkzeug.datastructures.structures.OrderedMultiDict.items": [
    "Ovr{werkzeug.datastructures.structures.OrderedMultiDict.items}"
  ],
  "werkzeug.datastructures.structures.OrderedMultiDict.keys": [
    "Ovr{werkzeug.datastructures.structures.OrderedMultiDict.keys}"
  ],
  "werkzeug.datastructures.structures.OrderedMultiDict.pop": [
    "Ovr{werkzeug.datastructures.structures.OrderedMultiDict.pop}"
  ],
  "werkzeug.datastructures.structures.OrderedMultiDict.update": [
    "Ovr{werkzeug.datastructures.structures.OrderedMultiDict.update}"
  ],
  "werkzeug.datastructures.structures.OrderedMultiDict.values": [
    "Ovr{werkzeug.datastructures.structures.OrderedMultiDict.values}"
  ],
  "werkzeug.datastructures.structures.TypeConversionDict.get": [
    "Ovr{werkzeug.datastructures.structures.TypeConversionDict.get}"
  ],
  "werkzeug.utils.ImportStringError.__init__": [
    "werkzeug.utils.import_string"
  ],
  "win32.lib.win32timezone.RangeMap.__getitem__": [
    "Ovr{win32.lib.win32timezone.RangeMap.__getitem__}"
  ],
  "win32.lib.win32timezone.RangeMap.get": [
    "Ovr{win32.lib.win32timezone.RangeMap.get}"
  ],
  "xml.dom.minicompat.EmptyNodeList.__add__": [
    "Ovr{xml.dom.minicompat.EmptyNodeList.__add__}"
  ],
  "zip.__iter__": [
    "Ovr{zip.__iter__}",
    "benchmarks.bench_feature_expansions.$toplevel",
    "benchmarks.bench_isolation_forest.print_outlier_ratio",
    "benchmarks.bench_multilabel_metrics._tabulate",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_online_ocsvm.print_outlier_ratio",
    "benchmarks.bench_plot_fastkmeans.$toplevel",
    "benchmarks.bench_plot_hierarchical.$toplevel",
    "benchmarks.bench_plot_lasso_path.$toplevel",
    "benchmarks.bench_plot_randomized_svd.plot_time_vs_s",
    "benchmarks.bench_plot_randomized_svd.scatter_time_vs_s",
    "benchmarks.bench_plot_svd.$toplevel",
    "benchmarks.bench_saga.plot",
    "build_tools.generate_authors_table.get_contributors",
    "click.types.Tuple.convert",
    "doc.tutorial.machine_learning_map.pyparsing._xml_escape",
    "doc.tutorial.text_analytics.skeletons.exercise_01_language_train_model.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_01_language_train_model.$toplevel",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.applications.plot_digits_denoising.plot_digits",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.calibration.plot_calibration.$toplevel",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.classification.plot_digits_classification.$toplevel",
    "examples.cluster.plot_adjusted_for_chance_measures.$toplevel",
    "examples.cluster.plot_affinity_propagation.$toplevel",
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel",
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.cluster.plot_hdbscan.plot",
    "examples.cluster.plot_mean_shift.$toplevel",
    "examples.cluster.plot_mini_batch_kmeans.$toplevel",
    "examples.cluster.plot_optics.$toplevel",
    "examples.compose.plot_transformed_target.$toplevel",
    "examples.datasets.plot_random_multilabel_dataset.$toplevel",
    "examples.decomposition.plot_faces_decomposition.plot_gallery",
    "examples.decomposition.plot_ica_blind_source_separation.$toplevel",
    "examples.decomposition.plot_incremental_pca.$toplevel",
    "examples.decomposition.plot_pca_vs_lda.$toplevel",
    "examples.decomposition.plot_varimax_fa.$toplevel",
    "examples.ensemble.plot_adaboost_multiclass.$toplevel",
    "examples.ensemble.plot_adaboost_twoclass.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.ensemble.plot_voting_decision_regions.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy.$toplevel",
    "examples.impute.plot_iterative_imputer_variants_comparison.$toplevel",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.linear_model.plot_lasso_coordinate_descent_path.$toplevel",
    "examples.linear_model.plot_logistic_l1_l2_sparsity.$toplevel",
    "examples.linear_model.plot_logistic_multinomial.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_sgd_early_stopping.$toplevel",
    "examples.linear_model.plot_sgd_iris.$toplevel",
    "examples.manifold.plot_compare_methods.$toplevel",
    "examples.miscellaneous.plot_johnson_lindenstrauss_bound.$toplevel",
    "examples.mixture.plot_gmm_sin.plot_samples",
    "examples.model_selection.plot_grid_search_digits.print_dataframe",
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.model_selection.plot_multi_metric_evaluation.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.neighbors.plot_kde_1d.$toplevel",
    "examples.neighbors.plot_nca_classification.$toplevel",
    "examples.neural_networks.plot_mlp_alpha.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.plot_on_dataset",
    "examples.neural_networks.plot_mnist_filters.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_map_data_to_normal.$toplevel",
    "examples.preprocessing.plot_scaling_importance.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "examples.svm.plot_iris_svc.$toplevel",
    "examples.svm.plot_svm_scale_c.$toplevel",
    "examples.svm.plot_svm_tie_breaking.$toplevel",
    "examples.tree.plot_iris_dtc.$toplevel",
    "jinja2.nodes.Node.__init__",
    "sklearn.calibration._CalibratedClassifier.predict_proba",
    "sklearn.calibration._fit_calibrator",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.compose._column_transformer.ColumnTransformer._iter",
    "sklearn.compose._column_transformer.ColumnTransformer._transformers@setter",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_output",
    "sklearn.datasets._arff_parser._sparse_data_to_array",
    "sklearn.datasets._arff_parser._split_sparse_columns",
    "sklearn.datasets._lfw._load_imgs",
    "sklearn.datasets._samples_generator.make_biclusters",
    "sklearn.datasets._samples_generator.make_checkerboard",
    "sklearn.datasets.tests.test_rcv1.test_fetch_rcv1",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning._sparse_encode",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform",
    "sklearn.ensemble._bagging.BaggingClassifier._set_oob_score",
    "sklearn.ensemble._bagging.BaggingRegressor._set_oob_score",
    "sklearn.ensemble._bagging._parallel_decision_function",
    "sklearn.ensemble._bagging._parallel_predict_log_proba",
    "sklearn.ensemble._bagging._parallel_predict_proba",
    "sklearn.ensemble._bagging._parallel_predict_regression",
    "sklearn.ensemble._stacking._BaseStacking._transform",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.ensemble._stacking._BaseStacking.get_feature_names_out",
    "sklearn.ensemble._voting._BaseVoting._weights_not_none",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.decision_function",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_decision_function",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.feature_importances_",
    "sklearn.externals._arff.COOData.decode_rows",
    "sklearn.externals._arff.COOData.encode_data",
    "sklearn.externals._arff.DenseGeneratorData._decode_values",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.inverse_transform",
    "sklearn.feature_extraction.image.reconstruct_from_patches_2d",
    "sklearn.feature_selection._mutual_info._estimate_mi",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._ridge._solve_cholesky",
    "sklearn.linear_model._ridge._solve_cholesky_kernel",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._ranking._dcg_sample_scores",
    "sklearn.mixture._base.BaseMixture.sample",
    "sklearn.model_selection._search.ParameterGrid.__getitem__",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.model_selection._validation._incremental_fit_estimator",
    "sklearn.multiclass.OneVsOneClassifier.decision_function",
    "sklearn.multiclass.OneVsOneClassifier.partial_fit",
    "sklearn.multiclass.OneVsRestClassifier.partial_fit",
    "sklearn.neighbors._base.sort_graph_by_row_values",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.fit",
    "sklearn.neighbors._graph._check_params",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit",
    "sklearn.neural_network._stochastic_optimizers.AdamOptimizer._get_updates",
    "sklearn.neural_network._stochastic_optimizers.BaseOptimizer.update_params",
    "sklearn.neural_network._stochastic_optimizers.SGDOptimizer._get_updates",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_adam_optimizer",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_nesterovs_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_no_momentum",
    "sklearn.pipeline._name_estimators",
    "sklearn.preprocessing._encoders._BaseEncoder.infrequent_categories_",
    "sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.get_feature_names_out",
    "sklearn.utils._estimator_html_repr._write_estimator_html",
    "sklearn.utils.estimator_checks._check_transformer",
    "sklearn.utils.estimator_checks.check_transformer_preserve_dtypes",
    "sklearn.utils.tests.test_fast_dict.test_int_float_dict",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f"
  ],
  "zip.__new__": [
    "benchmarks.bench_feature_expansions.$toplevel",
    "benchmarks.bench_isolation_forest.print_outlier_ratio",
    "benchmarks.bench_isotonic.$toplevel",
    "benchmarks.bench_multilabel_metrics._tabulate",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_online_ocsvm.print_outlier_ratio",
    "benchmarks.bench_plot_fastkmeans.$toplevel",
    "benchmarks.bench_plot_hierarchical.$toplevel",
    "benchmarks.bench_plot_lasso_path.$toplevel",
    "benchmarks.bench_plot_randomized_svd.plot_time_vs_s",
    "benchmarks.bench_plot_randomized_svd.scatter_time_vs_s",
    "benchmarks.bench_plot_svd.$toplevel",
    "benchmarks.bench_saga.plot",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "build_tools.generate_authors_table.get_contributors",
    "click.core.batch",
    "click.types.Tuple.convert",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing._xml_escape",
    "doc.tutorial.text_analytics.skeletons.exercise_01_language_train_model.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_01_language_train_model.$toplevel",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.applications.plot_digits_denoising.plot_digits",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_out_of_core_classification.get_minibatch",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.calibration.plot_calibration.$toplevel",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.classification.plot_digits_classification.$toplevel",
    "examples.cluster.plot_adjusted_for_chance_measures.$toplevel",
    "examples.cluster.plot_affinity_propagation.$toplevel",
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel",
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel",
    "examples.cluster.plot_cluster_iris.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.cluster.plot_hdbscan.plot",
    "examples.cluster.plot_mean_shift.$toplevel",
    "examples.cluster.plot_mini_batch_kmeans.$toplevel",
    "examples.cluster.plot_optics.$toplevel",
    "examples.compose.plot_transformed_target.$toplevel",
    "examples.cross_decomposition.plot_pcr_vs_pls.$toplevel",
    "examples.datasets.plot_random_multilabel_dataset.$toplevel",
    "examples.decomposition.plot_faces_decomposition.plot_gallery",
    "examples.decomposition.plot_ica_blind_source_separation.$toplevel",
    "examples.decomposition.plot_incremental_pca.$toplevel",
    "examples.decomposition.plot_pca_vs_lda.$toplevel",
    "examples.decomposition.plot_sparse_coding.$toplevel",
    "examples.decomposition.plot_varimax_fa.$toplevel",
    "examples.ensemble.plot_adaboost_multiclass.$toplevel",
    "examples.ensemble.plot_adaboost_twoclass.$toplevel",
    "examples.ensemble.plot_ensemble_oob.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.ensemble.plot_voting_decision_regions.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy.$toplevel",
    "examples.impute.plot_iterative_imputer_variants_comparison.$toplevel",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.linear_model.plot_lasso_coordinate_descent_path.$toplevel",
    "examples.linear_model.plot_logistic_l1_l2_sparsity.$toplevel",
    "examples.linear_model.plot_logistic_multinomial.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_sgd_early_stopping.$toplevel",
    "examples.linear_model.plot_sgd_iris.$toplevel",
    "examples.manifold.plot_compare_methods.$toplevel",
    "examples.miscellaneous.plot_johnson_lindenstrauss_bound.$toplevel",
    "examples.mixture.plot_gmm.plot_results",
    "examples.mixture.plot_gmm_selection.$toplevel",
    "examples.mixture.plot_gmm_sin.plot_results",
    "examples.mixture.plot_gmm_sin.plot_samples",
    "examples.model_selection.plot_grid_search_digits.print_dataframe",
    "examples.model_selection.plot_learning_curve.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.model_selection.plot_multi_metric_evaluation.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.NMSlibTransformer.transform",
    "examples.neighbors.plot_kde_1d.$toplevel",
    "examples.neighbors.plot_nca_classification.$toplevel",
    "examples.neural_networks.plot_mlp_alpha.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.plot_on_dataset",
    "examples.neural_networks.plot_mnist_filters.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_map_data_to_normal.$toplevel",
    "examples.preprocessing.plot_scaling_importance.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "examples.svm.plot_iris_svc.$toplevel",
    "examples.svm.plot_svm_scale_c.$toplevel",
    "examples.svm.plot_svm_tie_breaking.$toplevel",
    "examples.tree.plot_iris_dtc.$toplevel",
    "jinja2.nodes.Node.__init__",
    "sklearn.calibration._CalibratedClassifier.predict_proba",
    "sklearn.calibration._fit_calibrator",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.compose._column_transformer.ColumnTransformer._hstack",
    "sklearn.compose._column_transformer.ColumnTransformer._iter",
    "sklearn.compose._column_transformer.ColumnTransformer._sk_visual_block_",
    "sklearn.compose._column_transformer.ColumnTransformer._transformers@setter",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_output",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_transformers",
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform",
    "sklearn.compose._column_transformer._get_transformer_list",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._robust_covariance.select_candidates",
    "sklearn.datasets._arff_parser._sparse_data_to_array",
    "sklearn.datasets._arff_parser._split_sparse_columns",
    "sklearn.datasets._lfw._load_imgs",
    "sklearn.datasets._samples_generator.make_biclusters",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_checkerboard",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.datasets.tests.test_rcv1.test_fetch_rcv1",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning._sparse_encode",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._lda.LatentDirichletAllocation._e_step",
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform",
    "sklearn.ensemble._bagging.BaggingClassifier._set_oob_score",
    "sklearn.ensemble._bagging.BaggingRegressor._set_oob_score",
    "sklearn.ensemble._bagging._parallel_decision_function",
    "sklearn.ensemble._bagging._parallel_predict_log_proba",
    "sklearn.ensemble._bagging._parallel_predict_proba",
    "sklearn.ensemble._bagging._parallel_predict_regression",
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble._validate_estimators",
    "sklearn.ensemble._iforest.IsolationForest._compute_score_samples",
    "sklearn.ensemble._iforest.IsolationForest.fit",
    "sklearn.ensemble._stacking.StackingClassifier._validate_estimators",
    "sklearn.ensemble._stacking._BaseStacking._sk_visual_block_with_final_estimator",
    "sklearn.ensemble._stacking._BaseStacking._transform",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.ensemble._stacking._BaseStacking.get_feature_names_out",
    "sklearn.ensemble._voting._BaseVoting._sk_visual_block_",
    "sklearn.ensemble._voting._BaseVoting._weights_not_none",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.decision_function",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_decision_function",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.feature_importances_",
    "sklearn.externals._arff.COOData.decode_rows",
    "sklearn.externals._arff.COOData.encode_data",
    "sklearn.externals._arff.DenseGeneratorData._decode_values",
    "sklearn.externals._arff._parse_values",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.inverse_transform",
    "sklearn.feature_extraction.image.reconstruct_from_patches_2d",
    "sklearn.feature_selection._mutual_info._estimate_mi",
    "sklearn.impute._base.SimpleImputer._dense_fit",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.linear_model._ridge._solve_cholesky",
    "sklearn.linear_model._ridge._solve_cholesky_kernel",
    "sklearn.manifold._mds.smacof",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._ranking._dcg_sample_scores",
    "sklearn.metrics._ranking.label_ranking_average_precision_score",
    "sklearn.metrics._ranking.label_ranking_loss",
    "sklearn.metrics.cluster._unsupervised.silhouette_samples",
    "sklearn.metrics.pairwise.pairwise_distances_argmin_min",
    "sklearn.mixture._base.BaseMixture.sample",
    "sklearn.mixture._gaussian_mixture._estimate_log_gaussian_prob",
    "sklearn.model_selection._search.ParameterGrid.__getitem__",
    "sklearn.model_selection._search.ParameterGrid.__iter__",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.model_selection._validation._incremental_fit_estimator",
    "sklearn.model_selection._validation.cross_validate",
    "sklearn.multiclass.OneVsOneClassifier.decision_function",
    "sklearn.multiclass.OneVsOneClassifier.fit",
    "sklearn.multiclass.OneVsOneClassifier.partial_fit",
    "sklearn.multiclass.OneVsRestClassifier.partial_fit",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors",
    "sklearn.neighbors._base.sort_graph_by_row_values",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.fit",
    "sklearn.neighbors._graph._check_params",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit",
    "sklearn.neural_network._stochastic_optimizers.AdamOptimizer._get_updates",
    "sklearn.neural_network._stochastic_optimizers.BaseOptimizer.update_params",
    "sklearn.neural_network._stochastic_optimizers.SGDOptimizer._get_updates",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_adam_optimizer",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_nesterovs_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_no_momentum",
    "sklearn.pipeline.FeatureUnion._sk_visual_block_",
    "sklearn.pipeline.FeatureUnion._validate_transformers",
    "sklearn.pipeline.FeatureUnion.fit_transform",
    "sklearn.pipeline.Pipeline._sk_visual_block_",
    "sklearn.pipeline.Pipeline._validate_steps",
    "sklearn.pipeline._name_estimators",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._encoders._BaseEncoder.infrequent_categories_",
    "sklearn.preprocessing._label.MultiLabelBinarizer._build_cache",
    "sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.get_feature_names_out",
    "sklearn.utils._estimator_html_repr._write_estimator_html",
    "sklearn.utils.estimator_checks._check_transformer",
    "sklearn.utils.estimator_checks.check_transformer_preserve_dtypes",
    "sklearn.utils.metaestimators._BaseComposition._set_params",
    "sklearn.utils.sparsefuncs.csc_median_axis_0",
    "sklearn.utils.tests.test_fast_dict.test_int_float_dict",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f"
  ],
  "zip.__next__": [
    "Ovr{zip.__next__}",
    "benchmarks.bench_feature_expansions.$toplevel",
    "benchmarks.bench_isolation_forest.print_outlier_ratio",
    "benchmarks.bench_multilabel_metrics._tabulate",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_online_ocsvm.print_outlier_ratio",
    "benchmarks.bench_plot_fastkmeans.$toplevel",
    "benchmarks.bench_plot_hierarchical.$toplevel",
    "benchmarks.bench_plot_lasso_path.$toplevel",
    "benchmarks.bench_plot_randomized_svd.plot_time_vs_s",
    "benchmarks.bench_plot_randomized_svd.scatter_time_vs_s",
    "benchmarks.bench_plot_svd.$toplevel",
    "benchmarks.bench_saga.plot",
    "build_tools.generate_authors_table.get_contributors",
    "click.types.Tuple.convert",
    "doc.tutorial.machine_learning_map.pyparsing._xml_escape",
    "doc.tutorial.text_analytics.skeletons.exercise_01_language_train_model.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_01_language_train_model.$toplevel",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.applications.plot_digits_denoising.plot_digits",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.calibration.plot_calibration.$toplevel",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.classification.plot_digits_classification.$toplevel",
    "examples.cluster.plot_adjusted_for_chance_measures.$toplevel",
    "examples.cluster.plot_affinity_propagation.$toplevel",
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel",
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.cluster.plot_hdbscan.plot",
    "examples.cluster.plot_mean_shift.$toplevel",
    "examples.cluster.plot_mini_batch_kmeans.$toplevel",
    "examples.cluster.plot_optics.$toplevel",
    "examples.compose.plot_transformed_target.$toplevel",
    "examples.datasets.plot_random_multilabel_dataset.$toplevel",
    "examples.decomposition.plot_faces_decomposition.plot_gallery",
    "examples.decomposition.plot_ica_blind_source_separation.$toplevel",
    "examples.decomposition.plot_incremental_pca.$toplevel",
    "examples.decomposition.plot_pca_vs_lda.$toplevel",
    "examples.decomposition.plot_varimax_fa.$toplevel",
    "examples.ensemble.plot_adaboost_multiclass.$toplevel",
    "examples.ensemble.plot_adaboost_twoclass.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.ensemble.plot_voting_decision_regions.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy.$toplevel",
    "examples.impute.plot_iterative_imputer_variants_comparison.$toplevel",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.inspection.plot_permutation_importance.$toplevel",
    "examples.linear_model.plot_lasso_coordinate_descent_path.$toplevel",
    "examples.linear_model.plot_logistic_l1_l2_sparsity.$toplevel",
    "examples.linear_model.plot_logistic_multinomial.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_sgd_early_stopping.$toplevel",
    "examples.linear_model.plot_sgd_iris.$toplevel",
    "examples.manifold.plot_compare_methods.$toplevel",
    "examples.miscellaneous.plot_johnson_lindenstrauss_bound.$toplevel",
    "examples.mixture.plot_gmm_sin.plot_samples",
    "examples.model_selection.plot_grid_search_digits.print_dataframe",
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.model_selection.plot_multi_metric_evaluation.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.neighbors.plot_kde_1d.$toplevel",
    "examples.neighbors.plot_nca_classification.$toplevel",
    "examples.neural_networks.plot_mlp_alpha.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.plot_on_dataset",
    "examples.neural_networks.plot_mnist_filters.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_map_data_to_normal.$toplevel",
    "examples.preprocessing.plot_scaling_importance.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "examples.svm.plot_iris_svc.$toplevel",
    "examples.svm.plot_svm_scale_c.$toplevel",
    "examples.svm.plot_svm_tie_breaking.$toplevel",
    "examples.tree.plot_iris_dtc.$toplevel",
    "jinja2.nodes.Node.__init__",
    "sklearn.calibration._CalibratedClassifier.predict_proba",
    "sklearn.calibration._fit_calibrator",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.compose._column_transformer.ColumnTransformer._iter",
    "sklearn.compose._column_transformer.ColumnTransformer._transformers@setter",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_output",
    "sklearn.datasets._arff_parser._sparse_data_to_array",
    "sklearn.datasets._arff_parser._split_sparse_columns",
    "sklearn.datasets._lfw._load_imgs",
    "sklearn.datasets._samples_generator.make_biclusters",
    "sklearn.datasets._samples_generator.make_checkerboard",
    "sklearn.datasets.tests.test_rcv1.test_fetch_rcv1",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning._sparse_encode",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._nmf.MiniBatchNMF._fit_transform",
    "sklearn.ensemble._bagging.BaggingClassifier._set_oob_score",
    "sklearn.ensemble._bagging.BaggingRegressor._set_oob_score",
    "sklearn.ensemble._bagging._parallel_decision_function",
    "sklearn.ensemble._bagging._parallel_predict_log_proba",
    "sklearn.ensemble._bagging._parallel_predict_proba",
    "sklearn.ensemble._bagging._parallel_predict_regression",
    "sklearn.ensemble._stacking._BaseStacking._transform",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.ensemble._stacking._BaseStacking.get_feature_names_out",
    "sklearn.ensemble._voting._BaseVoting._weights_not_none",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.decision_function",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_decision_function",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.feature_importances_",
    "sklearn.externals._arff.COOData.decode_rows",
    "sklearn.externals._arff.COOData.encode_data",
    "sklearn.externals._arff.DenseGeneratorData._decode_values",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.inverse_transform",
    "sklearn.feature_extraction.image.reconstruct_from_patches_2d",
    "sklearn.feature_selection._mutual_info._estimate_mi",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._ridge._solve_cholesky",
    "sklearn.linear_model._ridge._solve_cholesky_kernel",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._ranking._dcg_sample_scores",
    "sklearn.mixture._base.BaseMixture.sample",
    "sklearn.model_selection._search.ParameterGrid.__getitem__",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.model_selection._validation._incremental_fit_estimator",
    "sklearn.multiclass.OneVsOneClassifier.decision_function",
    "sklearn.multiclass.OneVsOneClassifier.partial_fit",
    "sklearn.multiclass.OneVsRestClassifier.partial_fit",
    "sklearn.neighbors._base.sort_graph_by_row_values",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.fit",
    "sklearn.neighbors._graph._check_params",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit",
    "sklearn.neural_network._stochastic_optimizers.AdamOptimizer._get_updates",
    "sklearn.neural_network._stochastic_optimizers.BaseOptimizer.update_params",
    "sklearn.neural_network._stochastic_optimizers.SGDOptimizer._get_updates",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_adam_optimizer",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_nesterovs_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_no_momentum",
    "sklearn.pipeline._name_estimators",
    "sklearn.preprocessing._encoders._BaseEncoder.infrequent_categories_",
    "sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.get_feature_names_out",
    "sklearn.utils._estimator_html_repr._write_estimator_html",
    "sklearn.utils.estimator_checks._check_transformer",
    "sklearn.utils.estimator_checks.check_transformer_preserve_dtypes",
    "sklearn.utils.tests.test_fast_dict.test_int_float_dict",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f"
  ],
  "zstandard.ZstdCompressionReader.__iter__": [
    "Ovr{zstandard.ZstdCompressionReader.__iter__}"
  ],
  "zstandard.ZstdCompressionReader.__next__": [
    "Ovr{zstandard.ZstdCompressionReader.__next__}"
  ],
  "zstandard.ZstdCompressionReader.close": [
    "Ovr{zstandard.ZstdCompressionReader.close}"
  ],
  "zstandard.ZstdCompressionReader.flush": [
    "Ovr{zstandard.ZstdCompressionReader.flush}",
    "click.utils.echo"
  ],
  "zstandard.ZstdCompressionReader.isatty": [
    "Ovr{zstandard.ZstdCompressionReader.isatty}"
  ],
  "zstandard.ZstdCompressionReader.read": [
    "Ovr{zstandard.ZstdCompressionReader.read}"
  ],
  "zstandard.ZstdCompressionReader.write": [
    "Ovr{zstandard.ZstdCompressionReader.write}",
    "click.utils.echo"
  ],
  "zstandard.ZstdCompressionWriter.close": [
    "Ovr{zstandard.ZstdCompressionWriter.close}"
  ],
  "zstandard.ZstdCompressionWriter.flush": [
    "Ovr{zstandard.ZstdCompressionWriter.flush}",
    "click.utils.echo"
  ],
  "zstandard.ZstdCompressionWriter.isatty": [
    "Ovr{zstandard.ZstdCompressionWriter.isatty}"
  ],
  "zstandard.ZstdCompressionWriter.read": [
    "Ovr{zstandard.ZstdCompressionWriter.read}"
  ],
  "zstandard.ZstdCompressionWriter.write": [
    "Ovr{zstandard.ZstdCompressionWriter.write}",
    "click.utils.echo"
  ],
  "zstandard.ZstdDecompressionReader.__iter__": [
    "Ovr{zstandard.ZstdDecompressionReader.__iter__}"
  ],
  "zstandard.ZstdDecompressionReader.__next__": [
    "Ovr{zstandard.ZstdDecompressionReader.__next__}"
  ],
  "zstandard.ZstdDecompressionReader.close": [
    "Ovr{zstandard.ZstdDecompressionReader.close}"
  ],
  "zstandard.ZstdDecompressionReader.flush": [
    "Ovr{zstandard.ZstdDecompressionReader.flush}",
    "click.utils.echo"
  ],
  "zstandard.ZstdDecompressionReader.isatty": [
    "Ovr{zstandard.ZstdDecompressionReader.isatty}"
  ],
  "zstandard.ZstdDecompressionReader.read": [
    "Ovr{zstandard.ZstdDecompressionReader.read}"
  ],
  "zstandard.ZstdDecompressionReader.write": [
    "Ovr{zstandard.ZstdDecompressionReader.write}",
    "click.utils.echo"
  ],
  "zstandard.ZstdDecompressionWriter.close": [
    "Ovr{zstandard.ZstdDecompressionWriter.close}"
  ],
  "zstandard.ZstdDecompressionWriter.flush": [
    "Ovr{zstandard.ZstdDecompressionWriter.flush}",
    "click.utils.echo"
  ],
  "zstandard.ZstdDecompressionWriter.isatty": [
    "Ovr{zstandard.ZstdDecompressionWriter.isatty}"
  ],
  "zstandard.ZstdDecompressionWriter.read": [
    "Ovr{zstandard.ZstdDecompressionWriter.read}"
  ],
  "zstandard.ZstdDecompressionWriter.write": [
    "Ovr{zstandard.ZstdDecompressionWriter.write}",
    "click.utils.echo"
  ],
  "Ovr{BaseException.__str__}": [
    "werkzeug.utils.ImportStringError.__init__"
  ],
  "Ovr{PIL.Image.Exif.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{PIL.Image.Exif.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{PIL.TiffImagePlugin.ImageFileDirectory_v1.__iter__}": [
    "Ovr{PIL.TiffImagePlugin.ImageFileDirectory_v2.__iter__}"
  ],
  "Ovr{PIL.TiffImagePlugin.ImageFileDirectory_v1.__setitem__}": [
    "Ovr{PIL.TiffImagePlugin.ImageFileDirectory_v2.__setitem__}"
  ],
  "Ovr{PIL.TiffImagePlugin.ImageFileDirectory_v2.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{PIL.TiffImagePlugin.ImageFileDirectory_v2.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{PyInstaller.building.datastruct.TOC.append}": [
    "Ovr{list.append}"
  ],
  "Ovr{PyInstaller.building.datastruct.TOC.extend}": [
    "Ovr{list.extend}"
  ],
  "Ovr{PyInstaller.building.datastruct.TOC.insert}": [
    "Ovr{list.insert}"
  ],
  "Ovr{_csv._reader.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{_weakrefset.WeakSet.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{array.array.__getitem__}": [
    "Ovr{typing.MutableSequence.__getitem__}"
  ],
  "Ovr{array.array.index}": [
    "Ovr{typing.Sequence.index}"
  ],
  "Ovr{asv_benchmarks.benchmarks.cluster.KMeansBenchmark.make_data}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_data}"
  ],
  "Ovr{asv_benchmarks.benchmarks.cluster.KMeansBenchmark.make_estimator}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_estimator}"
  ],
  "Ovr{asv_benchmarks.benchmarks.cluster.MiniBatchKMeansBenchmark.make_data}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_data}"
  ],
  "Ovr{asv_benchmarks.benchmarks.cluster.MiniBatchKMeansBenchmark.make_estimator}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_estimator}"
  ],
  "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_data}": [
    "asv_benchmarks.benchmarks.common.Estimator.setup",
    "asv_benchmarks.benchmarks.common.Estimator.setup_cache"
  ],
  "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_estimator}": [
    "asv_benchmarks.benchmarks.common.Estimator.setup_cache"
  ],
  "Ovr{asv_benchmarks.benchmarks.common.Estimator.skip}": [
    "asv_benchmarks.benchmarks.common.Estimator.setup",
    "asv_benchmarks.benchmarks.common.Estimator.setup_cache"
  ],
  "Ovr{asv_benchmarks.benchmarks.decomposition.DictionaryLearningBenchmark.make_data}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_data}"
  ],
  "Ovr{asv_benchmarks.benchmarks.decomposition.DictionaryLearningBenchmark.make_estimator}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_estimator}"
  ],
  "Ovr{asv_benchmarks.benchmarks.decomposition.MiniBatchDictionaryLearningBenchmark.make_data}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_data}"
  ],
  "Ovr{asv_benchmarks.benchmarks.decomposition.MiniBatchDictionaryLearningBenchmark.make_estimator}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_estimator}"
  ],
  "Ovr{asv_benchmarks.benchmarks.decomposition.PCABenchmark.make_data}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_data}"
  ],
  "Ovr{asv_benchmarks.benchmarks.decomposition.PCABenchmark.make_estimator}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_estimator}"
  ],
  "Ovr{asv_benchmarks.benchmarks.ensemble.GradientBoostingClassifierBenchmark.make_data}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_data}"
  ],
  "Ovr{asv_benchmarks.benchmarks.ensemble.GradientBoostingClassifierBenchmark.make_estimator}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_estimator}"
  ],
  "Ovr{asv_benchmarks.benchmarks.ensemble.HistGradientBoostingClassifierBenchmark.make_data}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_data}"
  ],
  "Ovr{asv_benchmarks.benchmarks.ensemble.HistGradientBoostingClassifierBenchmark.make_estimator}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_estimator}"
  ],
  "Ovr{asv_benchmarks.benchmarks.ensemble.RandomForestClassifierBenchmark.make_data}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_data}"
  ],
  "Ovr{asv_benchmarks.benchmarks.ensemble.RandomForestClassifierBenchmark.make_estimator}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_estimator}"
  ],
  "Ovr{asv_benchmarks.benchmarks.linear_model.ElasticNetBenchmark.make_data}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_data}"
  ],
  "Ovr{asv_benchmarks.benchmarks.linear_model.ElasticNetBenchmark.make_estimator}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_estimator}"
  ],
  "Ovr{asv_benchmarks.benchmarks.linear_model.ElasticNetBenchmark.skip}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.skip}"
  ],
  "Ovr{asv_benchmarks.benchmarks.linear_model.LassoBenchmark.make_data}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_data}"
  ],
  "Ovr{asv_benchmarks.benchmarks.linear_model.LassoBenchmark.make_estimator}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_estimator}"
  ],
  "Ovr{asv_benchmarks.benchmarks.linear_model.LassoBenchmark.skip}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.skip}"
  ],
  "Ovr{asv_benchmarks.benchmarks.linear_model.LinearRegressionBenchmark.make_data}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_data}"
  ],
  "Ovr{asv_benchmarks.benchmarks.linear_model.LinearRegressionBenchmark.make_estimator}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_estimator}"
  ],
  "Ovr{asv_benchmarks.benchmarks.linear_model.LogisticRegressionBenchmark.make_data}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_data}"
  ],
  "Ovr{asv_benchmarks.benchmarks.linear_model.LogisticRegressionBenchmark.make_estimator}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_estimator}"
  ],
  "Ovr{asv_benchmarks.benchmarks.linear_model.RidgeBenchmark.make_data}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_data}"
  ],
  "Ovr{asv_benchmarks.benchmarks.linear_model.RidgeBenchmark.make_estimator}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_estimator}"
  ],
  "Ovr{asv_benchmarks.benchmarks.linear_model.RidgeBenchmark.skip}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.skip}"
  ],
  "Ovr{asv_benchmarks.benchmarks.linear_model.SGDRegressorBenchmark.make_data}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_data}"
  ],
  "Ovr{asv_benchmarks.benchmarks.linear_model.SGDRegressorBenchmark.make_estimator}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_estimator}"
  ],
  "Ovr{asv_benchmarks.benchmarks.manifold.TSNEBenchmark.make_data}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_data}"
  ],
  "Ovr{asv_benchmarks.benchmarks.manifold.TSNEBenchmark.make_estimator}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_estimator}"
  ],
  "Ovr{asv_benchmarks.benchmarks.model_selection.GridSearchBenchmark.make_data}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_data}"
  ],
  "Ovr{asv_benchmarks.benchmarks.model_selection.GridSearchBenchmark.make_estimator}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_estimator}"
  ],
  "Ovr{asv_benchmarks.benchmarks.neighbors.KNeighborsClassifierBenchmark.make_data}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_data}"
  ],
  "Ovr{asv_benchmarks.benchmarks.neighbors.KNeighborsClassifierBenchmark.make_estimator}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_estimator}"
  ],
  "Ovr{asv_benchmarks.benchmarks.svm.SVCBenchmark.make_data}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_data}"
  ],
  "Ovr{asv_benchmarks.benchmarks.svm.SVCBenchmark.make_estimator}": [
    "Ovr{asv_benchmarks.benchmarks.common.Estimator.make_estimator}"
  ],
  "Ovr{asyncio.base_events.BaseEventLoop.close}": [
    "Ovr{asyncio.events.AbstractEventLoop.close}"
  ],
  "Ovr{asyncio.base_events.BaseEventLoop.run_until_complete}": [
    "Ovr{asyncio.events.AbstractEventLoop.run_until_complete}"
  ],
  "Ovr{asyncio.events.AbstractEventLoop.close}": [
    "jinja2.environment.Template.render"
  ],
  "Ovr{asyncio.events.AbstractEventLoop.run_until_complete}": [
    "jinja2.environment.Template.render"
  ],
  "Ovr{asyncio.futures.Future.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{asyncio.streams.StreamReader.__aiter__}": [
    "Ovr{typing.AsyncIterator.__aiter__}"
  ],
  "Ovr{asyncio.streams.StreamReader.__anext__}": [
    "Ovr{typing.AsyncIterator.__anext__}"
  ],
  "Ovr{babel.localedata.LocaleDataDict.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{babel.localedata.LocaleDataDict.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{benchmarks.bench_plot_nmf._PGNMF._fit_transform}": [
    "Ovr{sklearn.decomposition._nmf.NMF._fit_transform}"
  ],
  "Ovr{benchmarks.bench_plot_nmf._PGNMF.fit_transform}": [
    "Ovr{sklearn.decomposition._nmf.NMF.fit_transform}"
  ],
  "Ovr{bool.__or__}": [
    "Ovr{int.__or__}"
  ],
  "Ovr{boto.s3.bucketlistresultset.BucketListResultSet.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{bs4.element.CharsetMetaAttributeValue.encode}": [
    "Ovr{str.encode}"
  ],
  "Ovr{bs4.element.ContentMetaAttributeValue.encode}": [
    "Ovr{str.encode}"
  ],
  "Ovr{bytearray.__getitem__}": [
    "Ovr{typing.MutableSequence.__getitem__}"
  ],
  "Ovr{bytearray.__iter__}": [
    "Ovr{typing.Sequence.__iter__}"
  ],
  "Ovr{bytearray.index}": [
    "Ovr{typing.Sequence.index}"
  ],
  "Ovr{bytes.__getitem__}": [
    "Ovr{typing.Sequence.__getitem__}"
  ],
  "Ovr{bytes.__iter__}": [
    "Ovr{typing.Sequence.__iter__}"
  ],
  "Ovr{bytes.index}": [
    "Ovr{typing.Sequence.index}"
  ],
  "Ovr{cachetools.Cache.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{cachetools.Cache.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{click.core.Argument._parse_decls}": [
    "Ovr{click.core.Parameter._parse_decls}"
  ],
  "Ovr{click.core.Argument.add_to_parser}": [
    "Ovr{click.core.Parameter.add_to_parser}"
  ],
  "Ovr{click.core.Argument.get_error_hint}": [
    "Ovr{click.core.Parameter.get_error_hint}"
  ],
  "Ovr{click.core.Argument.get_usage_pieces}": [
    "Ovr{click.core.Parameter.get_usage_pieces}"
  ],
  "Ovr{click.core.Argument.human_readable_name}": [
    "Ovr{click.core.Parameter.human_readable_name}"
  ],
  "Ovr{click.core.BaseCommand.invoke}": [
    "click.core.BaseCommand.main"
  ],
  "Ovr{click.core.BaseCommand.make_context}": [
    "click.core.BaseCommand.main",
    "click.shell_completion._resolve_context"
  ],
  "Ovr{click.core.BaseCommand.parse_args}": [
    "click.core.BaseCommand.make_context"
  ],
  "Ovr{click.core.BaseCommand.shell_complete}": [
    "click.shell_completion.ShellComplete.get_completions"
  ],
  "Ovr{click.core.Command.collect_usage_pieces}": [
    "click.core.Command.format_usage"
  ],
  "Ovr{click.core.Command.format_options}": [
    "click.core.Command.format_help"
  ],
  "Ovr{click.core.Command.invoke}": [
    "Ovr{click.core.BaseCommand.invoke}",
    "click.core.MultiCommand.invoke"
  ],
  "Ovr{click.core.Command.parse_args}": [
    "Ovr{click.core.BaseCommand.parse_args}"
  ],
  "Ovr{click.core.Command.shell_complete}": [
    "Ovr{click.core.BaseCommand.shell_complete}"
  ],
  "Ovr{click.core.CommandCollection.get_command}": [
    "Ovr{click.core.MultiCommand.get_command}"
  ],
  "Ovr{click.core.CommandCollection.list_commands}": [
    "Ovr{click.core.MultiCommand.list_commands}"
  ],
  "Ovr{click.core.Group.get_command}": [
    "Ovr{click.core.MultiCommand.get_command}"
  ],
  "Ovr{click.core.Group.list_commands}": [
    "Ovr{click.core.MultiCommand.list_commands}"
  ],
  "Ovr{click.core.MultiCommand.collect_usage_pieces}": [
    "Ovr{click.core.Command.collect_usage_pieces}"
  ],
  "Ovr{click.core.MultiCommand.format_options}": [
    "Ovr{click.core.Command.format_options}"
  ],
  "Ovr{click.core.MultiCommand.get_command}": [
    "click.core.CommandCollection.get_command",
    "click.core.MultiCommand.format_commands",
    "click.core.MultiCommand.resolve_command",
    "click.core._complete_visible_commands"
  ],
  "Ovr{click.core.MultiCommand.invoke}": [
    "Ovr{click.core.Command.invoke}"
  ],
  "Ovr{click.core.MultiCommand.list_commands}": [
    "click.core.CommandCollection.list_commands",
    "click.core.MultiCommand.format_commands",
    "click.core._complete_visible_commands"
  ],
  "Ovr{click.core.MultiCommand.parse_args}": [
    "Ovr{click.core.Command.parse_args}",
    "click.core.MultiCommand.resolve_command"
  ],
  "Ovr{click.core.MultiCommand.shell_complete}": [
    "Ovr{click.core.Command.shell_complete}"
  ],
  "Ovr{click.core.Option._parse_decls}": [
    "Ovr{click.core.Parameter._parse_decls}"
  ],
  "Ovr{click.core.Option.add_to_parser}": [
    "Ovr{click.core.Parameter.add_to_parser}"
  ],
  "Ovr{click.core.Option.consume_value}": [
    "Ovr{click.core.Parameter.consume_value}"
  ],
  "Ovr{click.core.Option.get_default}": [
    "Ovr{click.core.Parameter.get_default}"
  ],
  "Ovr{click.core.Option.get_help_record}": [
    "Ovr{click.core.Parameter.get_help_record}"
  ],
  "Ovr{click.core.Option.resolve_envvar_value}": [
    "Ovr{click.core.Parameter.resolve_envvar_value}"
  ],
  "Ovr{click.core.Option.value_from_envvar}": [
    "Ovr{click.core.Parameter.value_from_envvar}"
  ],
  "Ovr{click.core.Parameter._parse_decls}": [
    "click.core.Parameter.__init__"
  ],
  "Ovr{click.core.Parameter.add_to_parser}": [
    "click.core.Command.make_parser"
  ],
  "Ovr{click.core.Parameter.consume_value}": [
    "click.core.Parameter.handle_parse_result"
  ],
  "Ovr{click.core.Parameter.get_default}": [
    "click.core.Parameter.consume_value"
  ],
  "Ovr{click.core.Parameter.get_error_hint}": [
    "click.exceptions.BadParameter.format_message",
    "click.exceptions.MissingParameter.format_message"
  ],
  "Ovr{click.core.Parameter.get_help_record}": [
    "click.core.Command.format_options"
  ],
  "Ovr{click.core.Parameter.get_usage_pieces}": [
    "click.core.Command.collect_usage_pieces"
  ],
  "Ovr{click.core.Parameter.human_readable_name}": [
    "click.core.Parameter.get_error_hint"
  ],
  "Ovr{click.core.Parameter.resolve_envvar_value}": [
    "click.core.Parameter.value_from_envvar"
  ],
  "Ovr{click.core.Parameter.value_from_envvar}": [
    "click.core.Parameter.consume_value"
  ],
  "Ovr{click.exceptions.BadParameter.format_message}": [
    "Ovr{click.exceptions.ClickException.format_message}",
    "click.exceptions.UsageError.show"
  ],
  "Ovr{click.exceptions.ClickException.format_message}": [
    "click.exceptions.ClickException.show"
  ],
  "Ovr{click.exceptions.ClickException.show}": [
    "click.core.BaseCommand.main"
  ],
  "Ovr{click.exceptions.FileError.format_message}": [
    "Ovr{click.exceptions.ClickException.format_message}"
  ],
  "Ovr{click.exceptions.MissingParameter.format_message}": [
    "Ovr{click.exceptions.BadParameter.format_message}"
  ],
  "Ovr{click.exceptions.NoSuchOption.format_message}": [
    "Ovr{click.exceptions.ClickException.format_message}"
  ],
  "Ovr{click.exceptions.UsageError.show}": [
    "Ovr{click.exceptions.ClickException.show}"
  ],
  "Ovr{click.shell_completion.BashComplete.format_completion}": [
    "Ovr{click.shell_completion.ShellComplete.format_completion}"
  ],
  "Ovr{click.shell_completion.BashComplete.get_completion_args}": [
    "Ovr{click.shell_completion.ShellComplete.get_completion_args}"
  ],
  "Ovr{click.shell_completion.BashComplete.source}": [
    "Ovr{click.shell_completion.ShellComplete.source}"
  ],
  "Ovr{click.shell_completion.FishComplete.format_completion}": [
    "Ovr{click.shell_completion.ShellComplete.format_completion}"
  ],
  "Ovr{click.shell_completion.FishComplete.get_completion_args}": [
    "Ovr{click.shell_completion.ShellComplete.get_completion_args}"
  ],
  "Ovr{click.shell_completion.ShellComplete.format_completion}": [
    "click.shell_completion.ShellComplete.complete"
  ],
  "Ovr{click.shell_completion.ShellComplete.get_completion_args}": [
    "click.shell_completion.ShellComplete.complete"
  ],
  "Ovr{click.shell_completion.ShellComplete.source}": [
    "click.shell_completion.shell_complete"
  ],
  "Ovr{click.shell_completion.ZshComplete.format_completion}": [
    "Ovr{click.shell_completion.ShellComplete.format_completion}"
  ],
  "Ovr{click.shell_completion.ZshComplete.get_completion_args}": [
    "Ovr{click.shell_completion.ShellComplete.get_completion_args}"
  ],
  "Ovr{click.types.BoolParamType.convert}": [
    "Ovr{click.types.ParamType.convert}"
  ],
  "Ovr{click.types.Choice.convert}": [
    "Ovr{click.types.ParamType.convert}"
  ],
  "Ovr{click.types.DateTime.convert}": [
    "Ovr{click.types.ParamType.convert}"
  ],
  "Ovr{click.types.File.convert}": [
    "Ovr{click.types.ParamType.convert}"
  ],
  "Ovr{click.types.FloatRange._clamp}": [
    "Ovr{click.types._NumberRangeBase._clamp}"
  ],
  "Ovr{click.types.FuncParamType.convert}": [
    "Ovr{click.types.ParamType.convert}"
  ],
  "Ovr{click.types.IntRange._clamp}": [
    "Ovr{click.types._NumberRangeBase._clamp}"
  ],
  "Ovr{click.types.ParamType.convert}": [
    "click.types.ParamType.__call__"
  ],
  "Ovr{click.types.Path.convert}": [
    "Ovr{click.types.ParamType.convert}",
    "flask.cli.SeparatedPathType.convert"
  ],
  "Ovr{click.types.StringParamType.convert}": [
    "Ovr{click.types.ParamType.convert}"
  ],
  "Ovr{click.types.Tuple.convert}": [
    "Ovr{click.types.ParamType.convert}"
  ],
  "Ovr{click.types.UUIDParameterType.convert}": [
    "Ovr{click.types.ParamType.convert}"
  ],
  "Ovr{click.types.UnprocessedParamType.convert}": [
    "Ovr{click.types.ParamType.convert}"
  ],
  "Ovr{click.types._NumberParamTypeBase.convert}": [
    "Ovr{click.types.ParamType.convert}"
  ],
  "Ovr{click.types._NumberRangeBase._clamp}": [
    "click.types._NumberRangeBase.convert"
  ],
  "Ovr{click.types._NumberRangeBase.convert}": [
    "Ovr{click.types._NumberParamTypeBase.convert}"
  ],
  "Ovr{codecs.StreamReaderWriter.__iter__}": [
    "Ovr{typing.IO.__iter__}"
  ],
  "Ovr{codecs.StreamReaderWriter.__next__}": [
    "Ovr{typing.IO.__next__}"
  ],
  "Ovr{codecs.StreamReaderWriter.close}": [
    "Ovr{typing.IO.close}"
  ],
  "Ovr{codecs.StreamReaderWriter.flush}": [
    "Ovr{typing.IO.flush}"
  ],
  "Ovr{codecs.StreamReaderWriter.isatty}": [
    "Ovr{typing.IO.isatty}"
  ],
  "Ovr{codecs.StreamReaderWriter.read}": [
    "Ovr{typing.IO.read}"
  ],
  "Ovr{codecs.StreamReaderWriter.write}": [
    "Ovr{typing.IO.write}"
  ],
  "Ovr{codecs.StreamRecoder.__iter__}": [
    "Ovr{typing.IO.__iter__}"
  ],
  "Ovr{codecs.StreamRecoder.__next__}": [
    "Ovr{typing.IO.__next__}"
  ],
  "Ovr{codecs.StreamRecoder.close}": [
    "Ovr{typing.IO.close}"
  ],
  "Ovr{codecs.StreamRecoder.flush}": [
    "Ovr{typing.IO.flush}"
  ],
  "Ovr{codecs.StreamRecoder.isatty}": [
    "Ovr{typing.IO.isatty}"
  ],
  "Ovr{codecs.StreamRecoder.read}": [
    "Ovr{typing.IO.read}"
  ],
  "Ovr{codecs.StreamRecoder.write}": [
    "Ovr{typing.IO.write}"
  ],
  "Ovr{collections.ChainMap.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{collections.ChainMap.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{collections.Counter.copy}": [
    "Ovr{dict.copy}"
  ],
  "Ovr{collections.OrderedDict.copy}": [
    "Ovr{dict.copy}"
  ],
  "Ovr{collections.OrderedDict.items}": [
    "Ovr{dict.items}"
  ],
  "Ovr{collections.OrderedDict.keys}": [
    "Ovr{dict.keys}"
  ],
  "Ovr{collections.OrderedDict.setdefault}": [
    "click.globals.push_context",
    "click.parser.Option.process",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.linear_model._quantile.QuantileRegressor.fit"
  ],
  "Ovr{collections.OrderedDict.values}": [
    "Ovr{dict.values}"
  ],
  "Ovr{collections.UserDict.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{collections.UserDict.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{collections.UserList.__getitem__}": [
    "Ovr{typing.MutableSequence.__getitem__}"
  ],
  "Ovr{collections.UserList.index}": [
    "Ovr{typing.Sequence.index}"
  ],
  "Ovr{collections.UserString.__getitem__}": [
    "Ovr{typing.Sequence.__getitem__}"
  ],
  "Ovr{collections.UserString.__iter__}": [
    "Ovr{typing.Sequence.__iter__}"
  ],
  "Ovr{collections.UserString.index}": [
    "Ovr{typing.Sequence.index}"
  ],
  "Ovr{collections.defaultdict.copy}": [
    "Ovr{dict.copy}"
  ],
  "Ovr{collections.deque.__getitem__}": [
    "Ovr{typing.MutableSequence.__getitem__}"
  ],
  "Ovr{collections.deque.index}": [
    "Ovr{typing.Sequence.index}"
  ],
  "Ovr{complex.__mul__}": [
    "sklearn.utils.estimator_checks.check_complex_data"
  ],
  "Ovr{configparser.ConfigParser.get}": [
    "Ovr{configparser.RawConfigParser.get}"
  ],
  "Ovr{configparser.ConverterMapping.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{configparser.ConverterMapping.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{configparser.RawConfigParser.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{configparser.RawConfigParser.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{configparser.RawConfigParser.get}": [
    "Ovr{typing.Mapping.get}"
  ],
  "Ovr{configparser.RawConfigParser.items}": [
    "Ovr{typing.Mapping.items}"
  ],
  "Ovr{configparser.SectionProxy.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{configparser.SectionProxy.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{configparser.SectionProxy.get}": [
    "Ovr{typing.Mapping.get}"
  ],
  "Ovr{contextvars.Context.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{contextvars.Context.get}": [
    "Ovr{typing.Mapping.get}"
  ],
  "Ovr{croniter.croniter.croniter.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{csv.DictReader.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{csv.DictReader.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{dbm._Database.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{dbm._Database.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{dbm.dumb._Database.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{dbm.dumb._Database.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{dict.__getitem__}": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_feature_expansions.$toplevel",
    "benchmarks.bench_isotonic.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_multilabel_metrics.$toplevel",
    "benchmarks.bench_plot_hierarchical.$toplevel",
    "benchmarks.bench_plot_incremental_pca.fixed_batch_size_comparison",
    "benchmarks.bench_plot_incremental_pca.variable_batch_size_comparison",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_saga.plot",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "build_tools.circle.list_versions.$toplevel",
    "build_tools.circle.list_versions.human_readable_data_quantity",
    "build_tools.generate_authors_table.get_profile",
    "build_tools.update_environments_and_lock_files.main",
    "click.parser.OptionParser._match_long_opt",
    "click.shell_completion._is_incomplete_argument",
    "click.termui._interpret_color",
    "click.types.Choice.convert",
    "doc.conf.notebook_modification_function",
    "doc.sphinxext.add_toctree_functions.docutils_node_to_jinja",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asXML",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_prediction_latency.$toplevel",
    "examples.applications.plot_prediction_latency.benchmark",
    "examples.applications.svm_gui.Controller.fit",
    "examples.applications.wikipedia_principal_eigenvector.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.calibration.plot_compare_calibration.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_hdbscan.plot",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "examples.ensemble.plot_feature_transformation.$toplevel",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_oob.$toplevel",
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regression.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.linear_model.plot_robust_fit.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_20newsgroups.$toplevel",
    "examples.linear_model.plot_theilsen.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "examples.mixture.plot_gmm_init.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.NMSlibTransformer.fit",
    "examples.preprocessing.plot_all_scaling.make_plot",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_versus_svm_iris.$toplevel",
    "jinja2.ext.InternationalizationExtension.parse",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.lexer.Lexer.wrap",
    "jinja2.nodes.BinExpr.as_const",
    "jinja2.nodes.Compare.as_const",
    "jinja2.nodes.UnaryExpr.as_const",
    "jinja2.parser.Parser.parse_math1",
    "jinja2.parser.Parser.parse_math2",
    "pip._vendor.requests.cookies.create_cookie",
    "setup.check_package_status",
    "sklearn._min_dependencies.$toplevel",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.dbscan_clustering",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.fit",
    "sklearn.conftest.pytest_collection_modifyitems",
    "sklearn.cross_decomposition._pls._pinv2_old",
    "sklearn.datasets.__getattr__",
    "sklearn.datasets._arff_parser._pandas_arff_parser",
    "sklearn.datasets._arff_parser._sparse_data_to_array",
    "sklearn.datasets._arff_parser._split_sparse_columns",
    "sklearn.datasets._lfw.fetch_lfw_pairs",
    "sklearn.datasets._openml._download_data_to_bunch",
    "sklearn.datasets._openml._get_data_description_by_id",
    "sklearn.datasets._openml._get_data_features",
    "sklearn.datasets._openml._get_data_info_by_name",
    "sklearn.datasets._openml._get_num_samples",
    "sklearn.datasets._openml._load_arff_response",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._species_distributions._load_coverage",
    "sklearn.decomposition._nmf._beta_loss_to_float",
    "sklearn.externals._arff.ArffDecoder._decode",
    "sklearn.externals._arff.DenseGeneratorData.decode_rows",
    "sklearn.externals._arff._escape_sub_callback",
    "sklearn.feature_extraction.text.CountVectorizer._count_vocab",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector._get_best_new_feature_score",
    "sklearn.feature_selection._univariate_selection.GenericUnivariateSelect._make_selector",
    "sklearn.inspection._permutation_importance.permutation_importance",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGD._get_learning_rate_type",
    "sklearn.linear_model._stochastic_gradient.BaseSGD._get_penalty_type",
    "sklearn.manifold._t_sne.TSNE._tsne",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics.pairwise.paired_distances",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.metrics.pairwise.pairwise_kernels",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._checkcovariance_prior_parameter",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_precisions",
    "sklearn.mixture._gaussian_mixture._check_precisions",
    "sklearn.mixture._gaussian_mixture._estimate_gaussian_parameters",
    "sklearn.model_selection._search.BaseSearchCV.fit",
    "sklearn.model_selection._search.ParameterSampler.__init__",
    "sklearn.model_selection._validation._enforce_prediction_order",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation.cross_validate",
    "sklearn.multiclass.OutputCodeClassifier.fit",
    "sklearn.neighbors._kde.KernelDensity._choose_algorithm",
    "sklearn.neighbors._kde.KernelDensity.fit",
    "sklearn.pipeline.Pipeline._check_fit_params",
    "sklearn.pipeline.Pipeline._fit",
    "sklearn.preprocessing._data.PowerTransformer._fit",
    "sklearn.preprocessing._data.PowerTransformer.inverse_transform",
    "sklearn.preprocessing._data.PowerTransformer.transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform",
    "sklearn.svm._base._get_liblinear_solver_type",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._export._MPLTreeExporter.recurse",
    "sklearn.utils._bunch.Bunch._set_deprecated",
    "sklearn.utils._determine_key_type",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests.MetadataRouter._route_params",
    "sklearn.utils._metadata_requests.MetadataRouter._serialize",
    "sklearn.utils._metadata_requests.MethodMetadataRequest._route_params",
    "sklearn.utils._testing.assert_run_python_script",
    "sklearn.utils.estimator_checks.check_estimators_pickle",
    "sklearn.utils.estimator_checks.check_fit_idempotent",
    "sklearn.utils.validation._check_fit_params",
    "sklearn.utils.validation._check_monotonic_cst",
    "testslide.strict_mock.StrictMock.__repr__",
    "testslide.strict_mock.StrictMock._template",
    "traitlets.utils.getargspec.getargspec"
  ],
  "Ovr{dict.__iter__}": [
    "Ovr{typing.Iterable.__iter__}",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "build_tools.circle.list_versions.$toplevel",
    "doc.conf.$toplevel",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_20newsgroups.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "importlib_metadata.EntryPoint.matches",
    "jinja2.nodes.Node.__init__",
    "sklearn.inspection._permutation_importance.permutation_importance",
    "sklearn.metrics.pairwise.pairwise_kernels",
    "sklearn.model_selection._search.ParameterSampler.__init__",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._insert_error_scores",
    "sklearn.utils._metadata_requests.MethodMetadataRequest._route_params",
    "sklearn.utils.estimator_checks.check_estimators_pickle",
    "traitlets.utils.getargspec.getargspec"
  ],
  "Ovr{dict.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}",
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_plot_omp_lars.compute_bench",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "benchmarks.bench_text_vectorizers.$toplevel",
    "build_tools.circle.list_versions.$toplevel",
    "click.core.BaseCommand.make_context",
    "click.core.Context.invoke",
    "click.core.Context.set_parameter_source",
    "click.core.Group.add_command",
    "click.core.Parameter.handle_parse_result",
    "click.formatting.measure_table",
    "click.parser.Argument.process",
    "click.parser.Option.process",
    "click.parser.OptionParser.add_option",
    "click.shell_completion._resolve_context",
    "doc.conf.$toplevel",
    "doc.conf.disable_plot_gallery_for_linkcheck",
    "doc.sphinxext.add_toctree_functions.docutils_node_to_jinja",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_outlier_detection_wine.$toplevel",
    "examples.applications.plot_prediction_latency.benchmark",
    "examples.applications.plot_prediction_latency.benchmark_throughputs",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.calibration.plot_compare_calibration.$toplevel",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "examples.ensemble.plot_feature_transformation.$toplevel",
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_20newsgroups.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.miscellaneous.plot_metadata_routing.RouterConsumerClassifier.fit",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "examples.mixture.plot_gmm_init.$toplevel",
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.svm.plot_svm_scale_c.$toplevel",
    "examples.text.plot_document_clustering.fit_and_evaluate",
    "flask.cli.FlaskGroup.make_context",
    "jinja2.debug.get_template_locals",
    "jinja2.environment.load_extensions",
    "jinja2.ext.InternationalizationExtension.parse",
    "jinja2.parser.Parser.__init__",
    "jinja2.runtime.new_context",
    "pip._vendor.requests.cookies.create_cookie",
    "setup.check_package_status",
    "setup.setup_package",
    "sklearn.base.BaseEstimator._repr_mimebundle_",
    "sklearn.base.BaseEstimator.get_params",
    "sklearn.base.BaseEstimator.set_params",
    "sklearn.calibration.CalibrationDisplay.plot",
    "sklearn.cluster._agglomerative.AgglomerativeClustering._fit",
    "sklearn.cluster._agglomerative._average_linkage",
    "sklearn.cluster._agglomerative._complete_linkage",
    "sklearn.cluster._agglomerative._single_linkage",
    "sklearn.cluster._bicluster.BaseSpectral._svd",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN.fit",
    "sklearn.cluster._mean_shift.MeanShift.fit",
    "sklearn.compose._column_transformer.ColumnTransformer._record_output_indices",
    "sklearn.compose._column_transformer.ColumnTransformer._update_fitted_transformers",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_column_callables",
    "sklearn.conftest.$toplevel",
    "sklearn.conftest._fetch_fixture.wrapped",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._arff_parser._pandas_arff_parser",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.ensemble._base._set_random_states",
    "sklearn.externals._arff.$toplevel",
    "sklearn.externals._arff.ArffDecoder._decode",
    "sklearn.externals._arff.EncodedNominalConversor.__init__",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.restrict",
    "sklearn.feature_extraction.text.CountVectorizer._count_vocab",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector._get_best_new_feature_score",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._ridge._solve_lbfgs",
    "sklearn.manifold._t_sne.TSNE._tsne",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.plot",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.plot",
    "sklearn.metrics._scorer.$toplevel",
    "sklearn.metrics._scorer._BaseScorer.__call__",
    "sklearn.metrics._scorer._MultimetricScorer.__call__",
    "sklearn.metrics.cluster._unsupervised.silhouette_samples",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.model_selection._search.ParameterGrid.__getitem__",
    "sklearn.model_selection._search.ParameterSampler.__iter__",
    "sklearn.model_selection._split._build_repr",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._score",
    "sklearn.model_selection._validation.cross_validate",
    "sklearn.pipeline.Pipeline._check_fit_params",
    "sklearn.pipeline.Pipeline._more_tags",
    "sklearn.pipeline.Pipeline.score",
    "sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.tree._export._MPLTreeExporter.__init__",
    "sklearn.tree._export._MPLTreeExporter.recurse",
    "sklearn.utils._bunch.Bunch.__init__",
    "sklearn.utils._metadata_requests.MetadataRequest._serialize",
    "sklearn.utils._metadata_requests.MetadataRouter._serialize",
    "sklearn.utils._metadata_requests.MethodMetadataRequest._route_params",
    "sklearn.utils._show_versions._get_deps_info",
    "sklearn.utils._testing.assert_run_python_script",
    "sklearn.utils.estimator_checks._output_from_fit_transform",
    "sklearn.utils.estimator_checks.check_estimators_pickle",
    "sklearn.utils.graph.single_source_shortest_path_length",
    "sklearn.utils.validation._check_fit_params",
    "traitlets.traitlets.HasTraits.__init__"
  ],
  "Ovr{dict.copy}": [
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "jinja2.debug.get_template_locals",
    "sklearn._config._get_threadlocal_config",
    "sklearn.base.BaseEstimator.__getstate__",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._insert_error_scores"
  ],
  "Ovr{dict.get}": [
    "Ovr{typing.Mapping.get}",
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "build_tools.update_environments_and_lock_files.get_package_with_constraint",
    "click._compat.auto_wrap_for_ansi",
    "click.core.Context.__init__",
    "click.core.Context.get_parameter_source",
    "click.core.Context.lookup_default",
    "click.core.Group.get_command",
    "click.formatting.measure_table",
    "click.parser.Option.process",
    "click.parser.OptionParser._match_short_opt",
    "click.shell_completion.get_completion_class",
    "doc.sphinxext.sphinx_issues.IssueRole.make_node",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.addCondition",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.addParseAction",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setParseAction",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects",
    "jinja2.debug.get_template_locals",
    "jinja2.debug.rewrite_traceback_stack",
    "jinja2.lexer._describe_token_type",
    "jinja2.lexer.get_lexer",
    "jinja2.parser.Parser.parse_statement",
    "pip._vendor.pyparsing.ParserElement.setParseAction",
    "pip._vendor.requests.cookies.RequestsCookieJar.set",
    "pip._vendor.requests.structures.LookupDict.__getitem__",
    "pip._vendor.requests.structures.LookupDict.get",
    "sklearn.base.BaseEstimator._validate_data",
    "sklearn.cluster._hdbscan.hdbscan._hdbscan_brute",
    "sklearn.datasets._base._pkl_filepath",
    "sklearn.datasets._openml._get_data_qualities",
    "sklearn.datasets._openml._get_num_samples",
    "sklearn.externals._packaging.version._parse_version_parts",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.metrics._classification.confusion_matrix",
    "sklearn.metrics.pairwise.pairwise_distances_chunked",
    "sklearn.svm._base._get_liblinear_solver_type",
    "sklearn.utils._bunch.Bunch.__getitem__",
    "sklearn.utils.multiclass.unique_labels",
    "testslide.mock_constructor._get_class_or_mock",
    "traitlets.traitlets.HasTraits._notify_observers"
  ],
  "Ovr{dict.items}": [
    "Ovr{typing.Mapping.items}",
    "benchmarks.bench_multilabel_metrics.benchmark",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "build_tools.circle.list_versions.$toplevel",
    "click.core.BaseCommand.make_context",
    "click.formatting.measure_table",
    "click.types.Choice.convert",
    "doc.conf.make_carousel_thumbs",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.pop",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.withAttribute",
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_outlier_detection_wine.$toplevel",
    "examples.applications.plot_species_distribution_modeling.create_species_bunch",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.cluster.plot_bisect_kmeans.$toplevel",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.linear_model.plot_ols_ridge_variance.$toplevel",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.linear_model.plot_sgd_early_stopping.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.miscellaneous.plot_kernel_ridge_regression.$toplevel",
    "examples.miscellaneous.plot_metadata_routing.check_metadata",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.model_selection.plot_det.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "jinja2.compiler.has_safe_repr",
    "jinja2.debug.get_template_locals",
    "jinja2.ext.InternationalizationExtension._make_node",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.runtime.Context.__init__",
    "pip._vendor.distlib.compat.OrderedDict.update",
    "setup.configure_extension_modules",
    "sklearn._min_dependencies.$toplevel",
    "sklearn.base.BaseEstimator.set_params",
    "sklearn.cluster._mean_shift.MeanShift.fit",
    "sklearn.externals._arff.$toplevel",
    "sklearn.externals._arff.COOData.decode_rows",
    "sklearn.externals._arff.LODGeneratorData.decode_rows",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.restrict",
    "sklearn.gaussian_process.kernels.Kernel.set_params",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._scorer._BaseScorer.set_score_request",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.model_selection._plot._BaseCurveDisplay._plot_curve",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.model_selection._search.ParameterGrid.__init__",
    "sklearn.model_selection._validation._score",
    "sklearn.pipeline.Pipeline._check_fit_params",
    "sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform",
    "sklearn.utils._metadata_requests.MetadataRouter.add",
    "sklearn.utils._metadata_requests.RequestMethod.__get__.func",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils._mocking.CheckingClassifier.fit",
    "sklearn.utils._set_output._SetOutputMixin.__init_subclass__",
    "sklearn.utils._testing.MinimalClassifier.set_params",
    "sklearn.utils._testing.MinimalRegressor.set_params",
    "sklearn.utils._testing.MinimalTransformer.set_params",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.estimator_checks._get_check_estimator_ids",
    "sklearn.utils.estimator_checks.check_array_api_input",
    "sklearn.utils.estimator_checks.check_set_output_transform",
    "traitlets.traitlets.HasTraits.__init__",
    "traitlets.traitlets.HasTraits.hold_trait_notifications"
  ],
  "Ovr{dict.keys}": [
    "benchmarks.bench_isotonic.$toplevel",
    "benchmarks.bench_plot_incremental_pca.fixed_batch_size_comparison",
    "benchmarks.bench_saga.exp",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_outlier_detection_wine.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.datasets._lfw.fetch_lfw_pairs",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.feature_extraction.text.CountVectorizer._count_vocab",
    "sklearn.linear_model._coordinate_descent.enet_path",
    "sklearn.metrics._classification.classification_report",
    "sklearn.neighbors._kde.KernelDensity.$class_toplevel",
    "sklearn.utils._determine_key_type",
    "sklearn.utils._metadata_requests.$toplevel",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests.MetadataRouter._route_params",
    "sklearn.utils.metaestimators._BaseComposition._set_params",
    "traitlets.traitlets.HasTraits.hold_trait_notifications"
  ],
  "Ovr{dict.pop}": [
    "jinja2.debug.fake_traceback",
    "jinja2.debug.get_template_locals",
    "jinja2.nodes.Node.__init__",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.linear_model._coordinate_descent.enet_path",
    "sklearn.utils._array_api._accept_device_cpu.wrapped_func",
    "sklearn.utils.metaestimators._BaseComposition._set_params",
    "sklearn.utils.tests.test_estimator_checks.ModifiesAnotherValue.set_params",
    "sklearn.utils.tests.test_estimator_checks.ModifiesValueInsteadOfRaisingError.set_params",
    "sklearn.utils.tests.test_estimator_checks.RaisesErrorInSetParams.set_params",
    "traitlets.traitlets.HasTraits.hold_trait_notifications"
  ],
  "Ovr{dict.values}": [
    "Ovr{typing.Mapping.values}",
    "benchmarks.bench_saga.exp",
    "examples.applications.plot_outlier_detection_wine.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "importlib_metadata.EntryPoint.matches",
    "sklearn.feature_extraction.text.CountVectorizer._count_vocab",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "traitlets.traitlets.HasTraits.hold_trait_notifications"
  ],
  "Ovr{django.contrib.sessions.backends.base.SessionBase.items}": [
    "Ovr{dict.items}"
  ],
  "Ovr{django.contrib.sessions.backends.base.SessionBase.keys}": [
    "Ovr{dict.keys}"
  ],
  "Ovr{django.contrib.sessions.backends.base.SessionBase.values}": [
    "Ovr{dict.values}"
  ],
  "Ovr{django.core.files.base.ContentFile.close}": [
    "Ovr{django.core.files.base.File.close}"
  ],
  "Ovr{django.core.files.base.File.__next__}": [
    "Ovr{typing.IO.__next__}"
  ],
  "Ovr{django.core.files.base.File.close}": [
    "Ovr{typing.IO.close}"
  ],
  "Ovr{django.core.paginator.Page.__getitem__}": [
    "Ovr{typing.Sequence.__getitem__}"
  ],
  "Ovr{django.db.models.query.RawQuerySet.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{django.db.models.query._QuerySet.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{django.http.request.QueryDict.__setitem__}": [
    "Ovr{django.utils.datastructures.MultiValueDict.__setitem__}"
  ],
  "Ovr{django.http.request.QueryDict.copy}": [
    "Ovr{django.utils.datastructures.MultiValueDict.copy}"
  ],
  "Ovr{django.http.request.QueryDict.pop}": [
    "Ovr{dict.pop}"
  ],
  "Ovr{django.http.request.QueryDict.setdefault}": [
    "Ovr{django.utils.datastructures.MultiValueDict.setdefault}"
  ],
  "Ovr{django.http.request._ImmutableQueryDict.__getitem__}": [
    "Ovr{django.utils.datastructures.MultiValueDict.__getitem__}"
  ],
  "Ovr{django.http.request._ImmutableQueryDict.__setitem__}": [
    "Ovr{django.http.request.QueryDict.__setitem__}"
  ],
  "Ovr{django.http.request._ImmutableQueryDict.copy}": [
    "Ovr{django.http.request.QueryDict.copy}"
  ],
  "Ovr{django.http.request._ImmutableQueryDict.pop}": [
    "Ovr{django.http.request.QueryDict.pop}"
  ],
  "Ovr{django.http.request._ImmutableQueryDict.setdefault}": [
    "Ovr{django.http.request.QueryDict.setdefault}"
  ],
  "Ovr{django.template.context.BaseContext.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{django.test.utils.ContextList.__getitem__}": [
    "Ovr{list.__getitem__}"
  ],
  "Ovr{django.utils.datastructures.CaseInsensitiveMapping.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{django.utils.datastructures.DictWrapper.__getitem__}": [
    "Ovr{dict.__getitem__}"
  ],
  "Ovr{django.utils.datastructures.MultiValueDict.__getitem__}": [
    "Ovr{dict.__getitem__}"
  ],
  "Ovr{django.utils.datastructures.MultiValueDict.__iter__}": [
    "Ovr{dict.__iter__}"
  ],
  "Ovr{django.utils.datastructures.MultiValueDict.__setitem__}": [
    "Ovr{dict.__setitem__}"
  ],
  "Ovr{django.utils.datastructures.MultiValueDict.copy}": [
    "Ovr{dict.copy}"
  ],
  "Ovr{django.utils.datastructures.MultiValueDict.get}": [
    "Ovr{dict.get}"
  ],
  "Ovr{django.utils.datastructures.MultiValueDict.items}": [
    "Ovr{dict.items}"
  ],
  "Ovr{django.utils.datastructures.MultiValueDict.setdefault}": [
    "click.globals.push_context",
    "click.parser.Option.process",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.linear_model._quantile.QuantileRegressor.fit"
  ],
  "Ovr{django.utils.datastructures.MultiValueDict.values}": [
    "Ovr{dict.values}"
  ],
  "Ovr{django.utils.datastructures.OrderedSet.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{django.utils.functional._StrPromise.__getitem__}": [
    "Ovr{typing.Sequence.__getitem__}"
  ],
  "Ovr{django.utils.safestring.SafeString.__add__}": [
    "Ovr{str.__add__}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.And.checkRecursion}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.checkRecursion}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.And.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.CaselessKeyword.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.Keyword.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.CaselessLiteral.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.Literal.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.CloseMatch.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.Combine.postParse}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.postParse}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.Dict.postParse}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.postParse}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.Each.checkRecursion}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.checkRecursion}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.FollowedBy.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.Forward.copy}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.copy}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.Forward.streamline}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.streamline}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.GoToColumn.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.GoToColumn.preParse}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.preParse}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.Group.postParse}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.postParse}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.Keyword.copy}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.copy}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.Keyword.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.LineEnd.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.LineStart.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.Literal.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.MatchFirst.checkRecursion}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.checkRecursion}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.MatchFirst.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.NoMatch.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.NotAny.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.Optional.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.Or.checkRecursion}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.checkRecursion}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.Or.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.checkRecursion}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.checkRecursion}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.streamline}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.streamline}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParseExpression.copy}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.copy}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParseExpression.setResultsName}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.setResultsName}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParseExpression.streamline}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.streamline}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.checkRecursion}": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.validate"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.copy}": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__call__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setResultsName"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._parseNoCache"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.postParse}": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._parseNoCache"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.preParse}": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement._parseNoCache",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseString",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.scanString"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.setResultsName}": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__call__"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.streamline}": [
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseString",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.scanString"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.QuotedString.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.Regex.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.SkipTo.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.StringEnd.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.StringStart.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.Suppress.postParse}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.postParse}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.White.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.Word.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.WordEnd.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.WordStart.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParserElement.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing.ZeroOrMore.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing._MultipleMatch.parseImpl}"
  ],
  "Ovr{doc.tutorial.machine_learning_map.pyparsing._MultipleMatch.parseImpl}": [
    "Ovr{doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.parseImpl}"
  ],
  "Ovr{dockerfile_parse.parser.KeyValues.__setitem__}": [
    "Ovr{dict.__setitem__}"
  ],
  "Ovr{docutils.nodes.Text.lstrip}": [
    "Ovr{str.lstrip}"
  ],
  "Ovr{docutils.nodes.Text.rstrip}": [
    "Ovr{str.rstrip}"
  ],
  "Ovr{enum.IntFlag.__or__}": [
    "Ovr{int.__or__}"
  ],
  "Ovr{enum._EnumDict.__setitem__}": [
    "Ovr{dict.__setitem__}"
  ],
  "Ovr{enumerate.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{enumerate.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{examples.bicluster.plot_bicluster_newsgroups.NumberNormalizingVectorizer.build_tokenizer}": [
    "Ovr{sklearn.feature_extraction.text._VectorizerMixin.build_tokenizer}"
  ],
  "Ovr{fileinput.FileInput.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{fileinput.FileInput.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{filter.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{filter.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{flask.cli.CertParamType.convert}": [
    "Ovr{click.types.ParamType.convert}"
  ],
  "Ovr{flask.cli.FlaskGroup.get_command}": [
    "Ovr{click.core.Group.get_command}"
  ],
  "Ovr{flask.cli.FlaskGroup.list_commands}": [
    "Ovr{click.core.Group.list_commands}"
  ],
  "Ovr{flask.cli.FlaskGroup.make_context}": [
    "Ovr{click.core.BaseCommand.make_context}"
  ],
  "Ovr{flask.cli.FlaskGroup.parse_args}": [
    "Ovr{click.core.MultiCommand.parse_args}"
  ],
  "Ovr{flask.cli.SeparatedPathType.convert}": [
    "Ovr{click.types.Path.convert}"
  ],
  "Ovr{flask.sessions.SecureCookieSession.__getitem__}": [
    "Ovr{dict.__getitem__}"
  ],
  "Ovr{flask.sessions.SecureCookieSession.get}": [
    "Ovr{dict.get}"
  ],
  "Ovr{flask.sessions.SecureCookieSession.setdefault}": [
    "Ovr{werkzeug.datastructures.mixins.UpdateDictMixin.setdefault}"
  ],
  "Ovr{float.__abs__}": [
    "sklearn.cluster._spectral.discretize",
    "sklearn.linear_model._ransac._dynamic_max_trials"
  ],
  "Ovr{float.__add__}": [
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_plot_randomized_svd.scalable_frobenius_norm_discrepancy",
    "benchmarks.bench_random_projections.compute_time",
    "benchmarks.bench_rcv1_logreg_convergence.get_loss",
    "benchmarks.bench_saga.fit_single",
    "benchmarks.bench_sample_without_replacement.compute_time",
    "benchmarks.bench_tree.$toplevel",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.covariance.plot_lw_vs_oas.$toplevel",
    "examples.decomposition.plot_pca_vs_fa_model_selection.$toplevel",
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.ensemble.plot_isolation_forest.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy.target_generator",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.linear_model.plot_multi_task_lasso_support.$toplevel",
    "examples.linear_model.plot_ols_ridge_variance.$toplevel",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.linear_model.plot_sgd_penalties.$toplevel",
    "examples.linear_model.plot_sgdocsvm_vs_ocsvm.$toplevel",
    "examples.linear_model.plot_theilsen.$toplevel",
    "examples.mixture.plot_gmm.$toplevel",
    "examples.mixture.plot_gmm.plot_results",
    "examples.mixture.plot_gmm_selection.$toplevel",
    "examples.mixture.plot_gmm_sin.$toplevel",
    "examples.mixture.plot_gmm_sin.plot_results",
    "examples.model_selection.plot_grid_search_stats.corrected_std",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.neighbors.plot_kde_1d.$toplevel",
    "examples.neighbors.plot_lof_novelty_detection.$toplevel",
    "examples.neighbors.plot_lof_outlier_detection.$toplevel",
    "examples.preprocessing.plot_all_scaling.create_axes",
    "examples.svm.plot_oneclass.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.plot_feature_effects",
    "pip._vendor.requests.cookies.morsel_to_cookie",
    "sklearn.calibration._CalibratedClassifier.predict_proba",
    "sklearn.cluster._kmeans.MiniBatchKMeans._mini_batch_convergence",
    "sklearn.cluster._mean_shift.estimate_bandwidth",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.covariance._graph_lasso._objective",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf_shrinkage",
    "sklearn.datasets._samples_generator.make_spd_matrix",
    "sklearn.datasets._samples_generator.make_swiss_roll",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._minibatch_step",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._nmf._fit_coordinate_descent",
    "sklearn.decomposition._pca._assess_dimension",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_eigen",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_lstsq",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_svd",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis._decision_function",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.split_next",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier.staged_decision_function",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.log_marginal_likelihood",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.predict_proba",
    "sklearn.gaussian_process.kernels.Matern.__call__",
    "sklearn.isotonic.check_increasing",
    "sklearn.linear_model._bayes.ARDRegression.fit",
    "sklearn.linear_model._bayes.BayesianRidge._log_marginal_likelihood",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._ridge._solve_lbfgs.func",
    "sklearn.linear_model._sag.get_auto_step_size",
    "sklearn.linear_model._theil_sen._modified_weiszfeld_step",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.metrics._ranking.label_ranking_average_precision_score",
    "sklearn.metrics.cluster._unsupervised.calinski_harabasz_score",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_weights",
    "sklearn.mixture._gaussian_mixture._estimate_log_gaussian_prob",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_tsne",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.tree._export._color_brew",
    "sklearn.utils._array_api._expit"
  ],
  "Ovr{float.__eq__}": [
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf_shrinkage",
    "sklearn.decomposition._nmf._fit_coordinate_descent",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.metrics.cluster._unsupervised.calinski_harabasz_score",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_trigger_stopping"
  ],
  "Ovr{float.__ge__}": [
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "examples.applications.plot_prediction_latency.benchmark_throughputs",
    "sklearn._build_utils.gen_from_templates",
    "sklearn.cluster._spectral.discretize",
    "sklearn.feature_selection._rfe.RFE._fit",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace._posterior_mode"
  ],
  "Ovr{float.__gt__}": [
    "sklearn._loss.link.Interval.__post_init__",
    "sklearn.decomposition._nmf._fit_coordinate_descent",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.check_convergence",
    "sklearn.neural_network._stochastic_optimizers.SGDOptimizer.trigger_stopping"
  ],
  "Ovr{float.__le__}": [
    "Ovr{numbers.Real.__le__}",
    "sklearn._loss.link.Interval.__post_init__",
    "sklearn.decomposition._nmf._fit_coordinate_descent",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.check_convergence",
    "sklearn.neural_network._stochastic_optimizers.SGDOptimizer.trigger_stopping"
  ],
  "Ovr{float.__lt__}": [
    "Ovr{numbers.Real.__lt__}",
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "examples.applications.plot_prediction_latency.benchmark_throughputs",
    "sklearn._build_utils.gen_from_templates",
    "sklearn.calibration._CalibratedClassifier.predict_proba",
    "sklearn.cluster._spectral.discretize",
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost_real",
    "sklearn.feature_selection._rfe.RFE._fit",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace._posterior_mode"
  ],
  "Ovr{float.__mul__}": [
    "Ovr{complex.__mul__}",
    "asv_benchmarks.benchmarks.datasets._synth_regression_sparse_dataset",
    "benchmarks.bench_isotonic.generate_perturbed_logarithm_dataset",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "benchmarks.bench_online_ocsvm.autolabel_auc",
    "benchmarks.bench_online_ocsvm.autolabel_time",
    "benchmarks.bench_plot_fastkmeans.compute_bench_2",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_plot_nmf._fit_projected_gradient",
    "benchmarks.bench_plot_nmf._nls_subproblem",
    "benchmarks.bench_saga.fit_single",
    "benchmarks.bench_sparsify.$toplevel",
    "examples.applications.plot_face_recognition.plot_gallery",
    "examples.applications.plot_out_of_core_classification.autolabel",
    "examples.applications.plot_prediction_latency.benchmark",
    "examples.applications.plot_prediction_latency.n_feature_influence",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.applications.plot_tomography_l1_reconstruction.$toplevel",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.cluster.plot_agglomerative_clustering.$toplevel",
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.cluster.plot_optics.$toplevel",
    "examples.cluster.plot_segmentation_toy.$toplevel",
    "examples.covariance.plot_covariance_estimation.$toplevel",
    "examples.covariance.plot_robust_vs_empirical_covariance.$toplevel",
    "examples.covariance.plot_sparse_cov.$toplevel",
    "examples.decomposition.plot_faces_decomposition.plot_gallery",
    "examples.decomposition.plot_ica_blind_source_separation.$toplevel",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "examples.decomposition.plot_pca_3d.pdf",
    "examples.decomposition.plot_pca_vs_fa_model_selection.$toplevel",
    "examples.decomposition.plot_sparse_coding.ricker_function",
    "examples.ensemble.plot_bias_variance.f",
    "examples.ensemble.plot_gradient_boosting_early_stopping.$toplevel",
    "examples.ensemble.plot_gradient_boosting_early_stopping.autolabel",
    "examples.ensemble.plot_isolation_forest.$toplevel",
    "examples.exercises.plot_digits_classification_exercise.$toplevel",
    "examples.exercises.plot_iris_exercise.$toplevel",
    "examples.feature_selection.plot_f_test_vs_mi.$toplevel",
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.gaussian_process.plot_gpc.$toplevel",
    "examples.gaussian_process.plot_gpc_iris.$toplevel",
    "examples.gaussian_process.plot_gpc_isoprobability.g",
    "examples.gaussian_process.plot_gpc_xor.$toplevel",
    "examples.gaussian_process.plot_gpr_co2.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy_targets.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.$toplevel",
    "examples.inspection.plot_causal_interpretation.$toplevel",
    "examples.linear_model.plot_lasso_and_elasticnet.$toplevel",
    "examples.linear_model.plot_lasso_dense_vs_sparse_data.$toplevel",
    "examples.linear_model.plot_logistic.$toplevel",
    "examples.linear_model.plot_multi_task_lasso_support.$toplevel",
    "examples.linear_model.plot_ols_ridge_variance.$toplevel",
    "examples.linear_model.plot_omp.$toplevel",
    "examples.linear_model.plot_polynomial_interpolation.g",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.linear_model.plot_ransac.$toplevel",
    "examples.linear_model.plot_sgd_penalties.$toplevel",
    "examples.linear_model.plot_sgdocsvm_vs_ocsvm.$toplevel",
    "examples.linear_model.plot_theilsen.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_isotonic_regression.$toplevel",
    "examples.miscellaneous.plot_multilabel.plot_subfigure",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "examples.mixture.plot_concentration_prior.$toplevel",
    "examples.mixture.plot_gmm.$toplevel",
    "examples.mixture.plot_gmm.plot_results",
    "examples.mixture.plot_gmm_covariances.make_ellipses",
    "examples.mixture.plot_gmm_selection.$toplevel",
    "examples.mixture.plot_gmm_sin.$toplevel",
    "examples.mixture.plot_gmm_sin.plot_results",
    "examples.mixture.plot_gmm_sin.plot_samples",
    "examples.model_selection.plot_underfitting_overfitting.true_fun",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.neighbors.plot_kde_1d.$toplevel",
    "examples.neighbors.plot_lof_novelty_detection.$toplevel",
    "examples.neighbors.plot_lof_outlier_detection.$toplevel",
    "examples.neural_networks.plot_mnist_filters.$toplevel",
    "examples.preprocessing.plot_target_encoder_cross_val.$toplevel",
    "examples.svm.plot_oneclass.$toplevel",
    "sklearn.cluster._agglomerative.AgglomerativeClustering._fit",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.cluster._birch._CFSubcluster.merge_subcluster",
    "sklearn.cluster._kmeans._mini_batch_step",
    "sklearn.cluster._mean_shift._mean_shift_single_seed",
    "sklearn.cluster._spectral.SpectralClustering.fit",
    "sklearn.cluster._spectral.discretize",
    "sklearn.covariance._elliptic_envelope.EllipticEnvelope.fit",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.covariance._graph_lasso._objective",
    "sklearn.covariance._robust_covariance.fast_mcd",
    "sklearn.covariance._shrunk_covariance._ledoit_wolf",
    "sklearn.covariance._shrunk_covariance._oas",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf_shrinkage",
    "sklearn.covariance._shrunk_covariance.shrunk_covariance",
    "sklearn.datasets._lfw._load_imgs",
    "sklearn.datasets._samples_generator.make_low_rank_matrix",
    "sklearn.datasets._samples_generator.make_s_curve",
    "sklearn.datasets._samples_generator.make_sparse_uncorrelated",
    "sklearn.datasets._samples_generator.make_swiss_roll",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._minibatch_step",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning._update_dict",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.score_samples",
    "sklearn.decomposition._lda.LatentDirichletAllocation._em_step",
    "sklearn.decomposition._lda.LatentDirichletAllocation._perplexity_precomp_distr",
    "sklearn.decomposition._nmf._beta_divergence",
    "sklearn.decomposition._pca.PCA._fit",
    "sklearn.decomposition._pca.PCA.score_samples",
    "sklearn.decomposition._pca._assess_dimension",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_eigen",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_lstsq",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_svd",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis._decision_function",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._gb_losses.BinomialDeviance.__call__",
    "sklearn.ensemble._gb_losses.ExponentialLoss.__call__",
    "sklearn.ensemble._gb_losses.ExponentialLoss._raw_prediction_to_proba",
    "sklearn.ensemble._gb_losses.ExponentialLoss._update_terminal_region",
    "sklearn.ensemble._gb_losses.ExponentialLoss.get_init_raw_predictions",
    "sklearn.ensemble._gb_losses.ExponentialLoss.negative_gradient",
    "sklearn.ensemble._gb_losses.HuberLossFunction.__call__",
    "sklearn.ensemble._gb_losses.LeastAbsoluteError.__call__",
    "sklearn.ensemble._gb_losses.LeastSquaresError.__call__",
    "sklearn.ensemble._iforest.IsolationForest.fit",
    "sklearn.ensemble._iforest._average_path_length",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost_real",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor._boost",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor._get_median_predict",
    "sklearn.ensemble._weight_boosting._samme_proba",
    "sklearn.feature_selection._from_model._calculate_threshold",
    "sklearn.feature_selection._mutual_info._estimate_mi",
    "sklearn.feature_selection._univariate_selection.SelectFdr._get_support_mask",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace._posterior_mode",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.log_marginal_likelihood",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.predict_proba",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.log_marginal_likelihood",
    "sklearn.gaussian_process.kernels.ExpSineSquared.__call__",
    "sklearn.gaussian_process.kernels.Matern.__call__",
    "sklearn.gaussian_process.kernels.RBF.__call__",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.isotonic.check_increasing",
    "sklearn.kernel_approximation.RBFSampler.fit",
    "sklearn.kernel_approximation.SkewedChi2Sampler.fit",
    "sklearn.linear_model._bayes.ARDRegression.fit",
    "sklearn.linear_model._bayes.BayesianRidge._log_marginal_likelihood",
    "sklearn.linear_model._bayes.BayesianRidge.fit",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.check_convergence",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.line_search",
    "sklearn.linear_model._huber._huber_loss_and_gradient",
    "sklearn.linear_model._least_angle.LassoLarsIC.fit",
    "sklearn.linear_model._linear_loss.LinearModelLoss.l2_penalty",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuit.fit",
    "sklearn.linear_model._omp.OrthogonalMatchingPursuitCV.fit",
    "sklearn.linear_model._omp.orthogonal_mp",
    "sklearn.linear_model._omp.orthogonal_mp_gram",
    "sklearn.linear_model._ridge._solve_lbfgs.func",
    "sklearn.linear_model._sag.get_auto_step_size",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._fit_multiclass",
    "sklearn.linear_model._theil_sen._modified_weiszfeld_step",
    "sklearn.linear_model.tests.test_huber.make_regression_with_outliers",
    "sklearn.linear_model.tests.test_huber.test_huber_scaling_invariant",
    "sklearn.manifold._isomap.Isomap.reconstruction_error",
    "sklearn.manifold._locally_linear.locally_linear_embedding",
    "sklearn.manifold._mds._smacof_single",
    "sklearn.manifold._spectral_embedding.SpectralEmbedding._get_affinity_matrix",
    "sklearn.manifold._spectral_embedding.spectral_embedding",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.manifold._t_sne._kl_divergence",
    "sklearn.manifold._t_sne._kl_divergence_bh",
    "sklearn.manifold._t_sne.trustworthiness",
    "sklearn.metrics._ranking._binary_roc_auc_score",
    "sklearn.metrics.cluster._supervised.adjusted_rand_score",
    "sklearn.metrics.cluster._unsupervised.calinski_harabasz_score",
    "sklearn.metrics.pairwise.paired_cosine_distances",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._compute_lower_bound",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_log_prob",
    "sklearn.mixture._bayesian_mixture._log_wishart_norm",
    "sklearn.mixture._gaussian_mixture._estimate_log_gaussian_prob",
    "sklearn.naive_bayes.GaussianNB._joint_log_likelihood",
    "sklearn.neighbors._kde.KernelDensity.sample",
    "sklearn.neighbors._lof.LocalOutlierFactor.fit",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_kneighbors_regressor",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_tsne",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._backprop",
    "sklearn.neural_network._rbm.BernoulliRBM._fit",
    "sklearn.neural_network._stochastic_optimizers.AdamOptimizer._get_updates",
    "sklearn.neural_network._stochastic_optimizers.SGDOptimizer._get_updates",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_adam_optimizer",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_nesterovs_momentum",
    "sklearn.preprocessing._data.QuantileTransformer._transform_col",
    "sklearn.random_projection._sparse_random_matrix",
    "sklearn.tree._export._BaseTreeExporter.node_to_str",
    "sklearn.tree._export._DOTTreeExporter.recurse",
    "sklearn.tree._export._color_brew",
    "sklearn.utils.extmath.randomized_svd",
    "sklearn.utils.tests.test_optimize.test_newton_cg.func",
    "sklearn.utils.validation._check_psd_eigenvalues",
    "sklearn.utils.validation.check_symmetric"
  ],
  "Ovr{float.__ne__}": [
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "sklearn.decomposition._nmf._fit_coordinate_descent"
  ],
  "Ovr{float.__pow__}": [
    "examples.applications.plot_stock_market.$toplevel",
    "examples.applications.plot_tomography_l1_reconstruction.generate_synthetic_data",
    "examples.covariance.plot_lw_vs_oas.$toplevel",
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.gaussian_process.plot_gpr_co2.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy_targets.$toplevel",
    "sklearn.gaussian_process.kernels.Matern.__call__",
    "sklearn.kernel_approximation.RBFSampler.fit",
    "sklearn.kernel_approximation.RBFSampler.transform",
    "sklearn.linear_model._theil_sen._breakdown_point",
    "sklearn.manifold._mds._smacof_single"
  ],
  "Ovr{float.__sub__}": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_feature_expansions.$toplevel",
    "benchmarks.bench_glmnet.bench",
    "benchmarks.bench_hist_gradient_boosting.one_run",
    "benchmarks.bench_hist_gradient_boosting_adult.fit",
    "benchmarks.bench_hist_gradient_boosting_adult.predict",
    "benchmarks.bench_hist_gradient_boosting_categorical_only.fit",
    "benchmarks.bench_hist_gradient_boosting_categorical_only.predict",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.fit",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.load_data",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.predict",
    "benchmarks.bench_hist_gradient_boosting_threading.one_run",
    "benchmarks.bench_isolation_forest.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "benchmarks.bench_lasso.compute_bench",
    "benchmarks.bench_lof.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_plot_fastkmeans.compute_bench",
    "benchmarks.bench_plot_fastkmeans.compute_bench_2",
    "benchmarks.bench_plot_hierarchical.compute_bench",
    "benchmarks.bench_plot_incremental_pca.benchmark",
    "benchmarks.bench_plot_lasso_path.compute_bench",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_plot_nmf.bench_one",
    "benchmarks.bench_plot_nmf.run_bench",
    "benchmarks.bench_plot_omp_lars.compute_bench",
    "benchmarks.bench_plot_parallel_pairwise.plot",
    "benchmarks.bench_plot_polynomial_kernel_approximation.$toplevel",
    "benchmarks.bench_plot_randomized_svd.svd_timing",
    "benchmarks.bench_plot_svd.compute_bench",
    "benchmarks.bench_plot_ward.$toplevel",
    "benchmarks.bench_rcv1_logreg_convergence.bench_one",
    "benchmarks.bench_sgd_regression.$toplevel",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "examples.applications.plot_face_recognition.$toplevel",
    "examples.applications.plot_model_complexity_influence.benchmark_influence",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_out_of_core_classification.progress",
    "examples.applications.plot_prediction_latency.atomic_benchmark_estimator",
    "examples.applications.plot_prediction_latency.benchmark_throughputs",
    "examples.applications.plot_prediction_latency.bulk_benchmark_estimator",
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution",
    "examples.applications.plot_tomography_l1_reconstruction._generate_center_coordinates",
    "examples.applications.plot_topics_extraction_with_nmf_lda.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.$toplevel",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.cluster.plot_agglomerative_clustering.$toplevel",
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_coin_segmentation.$toplevel",
    "examples.cluster.plot_coin_ward_segmentation.$toplevel",
    "examples.cluster.plot_color_quantization.$toplevel",
    "examples.cluster.plot_dict_face_patches.$toplevel",
    "examples.cluster.plot_digits_linkage.$toplevel",
    "examples.cluster.plot_kmeans_digits.bench_k_means",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.cluster.plot_mini_batch_kmeans.$toplevel",
    "examples.cluster.plot_ward_structured_vs_unstructured.$toplevel",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "examples.ensemble.plot_adaboost_hastie_10_2.$toplevel",
    "examples.ensemble.plot_adaboost_multiclass.$toplevel",
    "examples.ensemble.plot_forest_importances.$toplevel",
    "examples.ensemble.plot_forest_importances_faces.$toplevel",
    "examples.ensemble.plot_gradient_boosting_early_stopping.$toplevel",
    "examples.ensemble.plot_random_forest_regression_multioutput.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.feature_selection.plot_select_from_model_diabetes.$toplevel",
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.gaussian_process.plot_gpc_isoprobability.g",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.linear_model.plot_lasso_and_elasticnet.$toplevel",
    "examples.linear_model.plot_lasso_dense_vs_sparse_data.$toplevel",
    "examples.linear_model.plot_lasso_model_selection.$toplevel",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.linear_model.plot_sgd_comparison.$toplevel",
    "examples.linear_model.plot_sgd_early_stopping.fit_and_score",
    "examples.linear_model.plot_sgdocsvm_vs_ocsvm.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_20newsgroups.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_mnist.$toplevel",
    "examples.linear_model.plot_theilsen.$toplevel",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.manifold.plot_manifold_sphere.$toplevel",
    "examples.manifold.plot_t_sne_perplexity.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_johnson_lindenstrauss_bound.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.miscellaneous.plot_kernel_ridge_regression.$toplevel",
    "examples.mixture.plot_gmm_init.$toplevel",
    "examples.mixture.plot_gmm_sin.$toplevel",
    "examples.mixture.plot_gmm_sin.plot_results",
    "examples.mixture.plot_gmm_sin.plot_samples",
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel",
    "examples.model_selection.plot_randomized_search.$toplevel",
    "examples.model_selection.plot_successive_halving_heatmap.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.neighbors.plot_kde_1d.$toplevel",
    "examples.neighbors.plot_lof_novelty_detection.$toplevel",
    "examples.neighbors.plot_lof_outlier_detection.$toplevel",
    "examples.neighbors.plot_regression.$toplevel",
    "examples.svm.plot_oneclass.$toplevel",
    "examples.svm.plot_svm_regression.$toplevel",
    "examples.svm.plot_svm_scale_c.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.benchmark",
    "examples.text.plot_document_classification_20newsgroups.load_dataset",
    "examples.text.plot_document_classification_20newsgroups.plot_feature_effects",
    "examples.text.plot_document_clustering.$toplevel",
    "examples.text.plot_document_clustering.fit_and_evaluate",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "examples.tree.plot_tree_regression.$toplevel",
    "examples.tree.plot_tree_regression_multioutput.$toplevel",
    "sklearn.calibration._CalibratedClassifier.predict_proba",
    "sklearn.calibration._sigmoid_calibration",
    "sklearn.calibration._sigmoid_calibration.objective",
    "sklearn.cluster._spectral.discretize",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._shrunk_covariance._ledoit_wolf",
    "sklearn.covariance._shrunk_covariance._oas",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf_shrinkage",
    "sklearn.covariance._shrunk_covariance.shrunk_covariance",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.score_samples",
    "sklearn.decomposition._nmf.MiniBatchNMF._check_params",
    "sklearn.decomposition._nmf._BaseNMF._compute_regularization",
    "sklearn.decomposition._nmf._fit_multiplicative_update",
    "sklearn.decomposition._pca.PCA.score_samples",
    "sklearn.decomposition._pca._assess_dimension",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_svd",
    "sklearn.ensemble._gb.VerboseReporter.update",
    "sklearn.ensemble._gb_losses.ExponentialLoss.__call__",
    "sklearn.ensemble._gb_losses.ExponentialLoss._update_terminal_region",
    "sklearn.ensemble._gb_losses.ExponentialLoss.negative_gradient",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._bin_data",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._print_iteration_stats",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._intilialize_root",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.split_next",
    "sklearn.ensemble._iforest._average_path_length",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost_discrete",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor._boost",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace._posterior_mode",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.log_marginal_likelihood",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.log_marginal_likelihood",
    "sklearn.gaussian_process.kernels.Matern.__call__",
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.impute._iterative.IterativeImputer.transform",
    "sklearn.isotonic.check_increasing",
    "sklearn.linear_model._bayes.ARDRegression.fit",
    "sklearn.linear_model._bayes.BayesianRidge._log_marginal_likelihood",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit",
    "sklearn.linear_model._coordinate_descent.enet_path",
    "sklearn.linear_model._huber._huber_loss_and_gradient",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._theil_sen._modified_weiszfeld_step",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.manifold._t_sne._gradient_descent",
    "sklearn.manifold._t_sne._joint_probabilities_nn",
    "sklearn.manifold._t_sne.trustworthiness",
    "sklearn.metrics.cluster._bicluster.consensus_score",
    "sklearn.mixture._base.BaseMixture._print_verbose_msg_init_end",
    "sklearn.mixture._base.BaseMixture._print_verbose_msg_iter_end",
    "sklearn.mixture._gaussian_mixture._check_weights",
    "sklearn.model_selection._search.BaseSearchCV.fit",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._incremental_fit_estimator",
    "sklearn.naive_bayes.GaussianNB._joint_log_likelihood",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._initialize",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._loss_grad_lbfgs",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.fit",
    "sklearn.neural_network._rbm.BernoulliRBM.fit",
    "sklearn.preprocessing._data.QuantileTransformer._transform_col",
    "sklearn.tree._export._color_brew",
    "sklearn.utils._print_elapsed_time"
  ],
  "Ovr{float.__truediv__}": [
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_rcv1_logreg_convergence.$toplevel",
    "benchmarks.bench_rcv1_logreg_convergence.bench_one",
    "benchmarks.bench_saga.fit_single",
    "benchmarks.bench_sgd_regression.$toplevel",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "examples.applications.plot_model_complexity_influence.benchmark_influence",
    "examples.applications.wikipedia_principal_eigenvector.centrality_scores",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.cluster.plot_feature_agglomeration_vs_univariate_selection.$toplevel",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.$toplevel",
    "examples.cluster.plot_ward_structured_vs_unstructured.$toplevel",
    "examples.decomposition.plot_pca_3d.pdf",
    "examples.decomposition.plot_pca_vs_fa_model_selection.$toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss._mean_frequency_by_risk_group",
    "examples.linear_model.plot_ridge_path.$toplevel",
    "examples.linear_model.plot_sgd_comparison.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_mnist.$toplevel",
    "examples.mixture.plot_gmm.plot_results",
    "examples.mixture.plot_gmm_selection.$toplevel",
    "examples.mixture.plot_gmm_sin.$toplevel",
    "examples.mixture.plot_gmm_sin.plot_results",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "sklearn.calibration._sigmoid_calibration",
    "sklearn.cluster._bicluster._scale_normalize",
    "sklearn.cluster._kmeans.MiniBatchKMeans._mini_batch_convergence",
    "sklearn.cluster._mean_shift.estimate_bandwidth",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf_shrinkage",
    "sklearn.datasets._samples_generator.make_biclusters",
    "sklearn.datasets._samples_generator.make_checkerboard",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.datasets._samples_generator.make_low_rank_matrix",
    "sklearn.datasets._samples_generator.make_sparse_spd_matrix",
    "sklearn.decomposition._base._BasePCA.get_precision",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._minibatch_step",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning.fit",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning._sparse_encode_precomputed",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.get_precision",
    "sklearn.decomposition._fastica._sym_decorrelation",
    "sklearn.decomposition._lda.LatentDirichletAllocation._approx_bound",
    "sklearn.decomposition._lda.LatentDirichletAllocation._em_step",
    "sklearn.decomposition._lda.LatentDirichletAllocation._init_latent_vars",
    "sklearn.decomposition._lda.LatentDirichletAllocation._perplexity_precomp_distr",
    "sklearn.decomposition._nmf.MiniBatchNMF._check_params",
    "sklearn.decomposition._nmf._fit_coordinate_descent",
    "sklearn.decomposition._nmf._fit_multiplicative_update",
    "sklearn.decomposition._pca._assess_dimension",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_svd",
    "sklearn.ensemble._gb_losses.ExponentialLoss.__call__",
    "sklearn.ensemble._iforest._average_path_length",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost_discrete",
    "sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost_real",
    "sklearn.ensemble._weight_boosting.AdaBoostRegressor._boost",
    "sklearn.ensemble._weight_boosting._samme_proba",
    "sklearn.feature_selection._univariate_selection.SelectFdr._get_support_mask",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.predict_proba",
    "sklearn.gaussian_process.kernels.Matern.__call__",
    "sklearn.isotonic.check_increasing",
    "sklearn.kernel_approximation.RBFSampler.fit",
    "sklearn.kernel_approximation.RBFSampler.transform",
    "sklearn.kernel_approximation.SkewedChi2Sampler.fit",
    "sklearn.linear_model._base._preprocess_data",
    "sklearn.linear_model._bayes.ARDRegression._update_sigma_woodbury",
    "sklearn.linear_model._bayes.ARDRegression.fit",
    "sklearn.linear_model._bayes.ARDRegression.predict",
    "sklearn.linear_model._bayes.BayesianRidge.fit",
    "sklearn.linear_model._bayes.BayesianRidge.predict",
    "sklearn.linear_model._huber._huber_loss_and_gradient",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._ridge._RidgeGCV._solve_eigen_gram",
    "sklearn.linear_model._sag.get_auto_step_size",
    "sklearn.linear_model._sag.sag_solver",
    "sklearn.manifold._locally_linear.locally_linear_embedding",
    "sklearn.manifold._mds._smacof_single",
    "sklearn.manifold._spectral_embedding.SpectralEmbedding._get_affinity_matrix",
    "sklearn.manifold._t_sne._kl_divergence",
    "sklearn.manifold._t_sne._kl_divergence_bh",
    "sklearn.manifold._t_sne.trustworthiness",
    "sklearn.metrics._ranking.label_ranking_average_precision_score",
    "sklearn.metrics.cluster._supervised.adjusted_rand_score",
    "sklearn.metrics.cluster._unsupervised.calinski_harabasz_score",
    "sklearn.metrics.cluster.tests.test_bicluster.test_consensus_score_issue2445",
    "sklearn.metrics.cluster.tests.test_bicluster.test_jaccard",
    "sklearn.metrics.pairwise.laplacian_kernel",
    "sklearn.metrics.pairwise.polynomial_kernel",
    "sklearn.metrics.pairwise.rbf_kernel",
    "sklearn.metrics.pairwise.sigmoid_kernel",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._check_weights_parameters",
    "sklearn.mixture._gaussian_mixture._compute_precision_cholesky",
    "sklearn.neighbors._base._get_weights",
    "sklearn.neighbors._kde.KernelDensity.sample",
    "sklearn.neighbors._lof.LocalOutlierFactor._local_reachability_density",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.fit",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._backprop",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._init_coef",
    "sklearn.neural_network._rbm.BernoulliRBM._fit",
    "sklearn.neural_network._rbm.BernoulliRBM.fit",
    "sklearn.neural_network._stochastic_optimizers.AdamOptimizer._get_updates",
    "sklearn.neural_network._stochastic_optimizers.SGDOptimizer.iteration_ends",
    "sklearn.neural_network._stochastic_optimizers.SGDOptimizer.trigger_stopping",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_adam_optimizer",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_trigger_stopping",
    "sklearn.preprocessing._data.MaxAbsScaler.transform",
    "sklearn.preprocessing._data.RobustScaler.transform",
    "sklearn.random_projection._gaussian_random_matrix",
    "sklearn.svm._base.BaseLibSVM.fit",
    "sklearn.svm._bounds.l1_min_c",
    "sklearn.tree._export._BaseTreeExporter.node_to_str",
    "sklearn.tree._export._MPLTreeExporter.recurse",
    "sklearn.tree._export._color_brew",
    "sklearn.utils._array_api._expit",
    "sklearn.utils.estimator_checks.check_outliers_fit_predict",
    "sklearn.utils.extmath.density",
    "sklearn.utils.tests.test_murmurhash.test_uniform_distribution"
  ],
  "Ovr{fpdf.drawing.Point.__add__}": [
    "Ovr{tuple.__add__}"
  ],
  "Ovr{fpdf.drawing.Point.__mul__}": [
    "Ovr{tuple.__mul__}"
  ],
  "Ovr{fpdf.drawing.Transform.__mul__}": [
    "Ovr{tuple.__mul__}"
  ],
  "Ovr{fractions.Fraction.__le__}": [
    "Ovr{numbers.Real.__le__}"
  ],
  "Ovr{fractions.Fraction.__lt__}": [
    "Ovr{numbers.Real.__lt__}"
  ],
  "Ovr{frozenset.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{gdb.LineTable.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{gdb.LineTable.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{gdb.RegisterDescriptorIterator.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{gdb.RegisterGroupsIterator.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{google.protobuf.internal.containers.BaseContainer.__getitem__}": [
    "Ovr{typing.Sequence.__getitem__}"
  ],
  "Ovr{google.protobuf.internal.containers.MessageMap.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{google.protobuf.internal.containers.MessageMap.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{google.protobuf.internal.containers.MessageMap.get}": [
    "Ovr{typing.Mapping.get}"
  ],
  "Ovr{google.protobuf.internal.containers.ScalarMap.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{google.protobuf.internal.containers.ScalarMap.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{google.protobuf.internal.containers.ScalarMap.get}": [
    "Ovr{typing.Mapping.get}"
  ],
  "Ovr{graphql.pyutils.default_ordered_dict.DefaultOrderedDict.copy}": [
    "Ovr{collections.OrderedDict.copy}"
  ],
  "Ovr{html5lib._inputstream.EncodingBytes.__iter__}": [
    "Ovr{bytes.__iter__}"
  ],
  "Ovr{html5lib._trie.py.Trie.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{html5lib._utils.BoundMethodDispatcher.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{html5lib._utils.BoundMethodDispatcher.get}": [
    "Ovr{typing.Mapping.get}"
  ],
  "Ovr{html5lib._utils.MethodDispatcher.__getitem__}": [
    "Ovr{dict.__getitem__}"
  ],
  "Ovr{html5lib.treebuilders.base.ActiveFormattingElements.append}": [
    "Ovr{list.append}"
  ],
  "Ovr{http.cookiejar.CookieJar.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{http.cookies.BaseCookie.__setitem__}": [
    "Ovr{dict.__setitem__}"
  ],
  "Ovr{http.cookies.Morsel.__setitem__}": [
    "Ovr{dict.__setitem__}"
  ],
  "Ovr{humanfriendly.case.CaseInsensitiveDict.__setitem__}": [
    "Ovr{dict.__setitem__}"
  ],
  "Ovr{humanfriendly.case.CaseInsensitiveDict.get}": [
    "Ovr{dict.get}"
  ],
  "Ovr{humanfriendly.case.CaseInsensitiveDict.pop}": [
    "Ovr{dict.pop}"
  ],
  "Ovr{humanfriendly.case.CaseInsensitiveDict.setdefault}": [
    "Ovr{collections.OrderedDict.setdefault}"
  ],
  "Ovr{humanfriendly.case.CaseInsensitiveKey.__eq__}": [
    "Ovr{str.__eq__}"
  ],
  "Ovr{importlib_metadata.EntryPoints.__getitem__}": [
    "Ovr{tuple.__getitem__}"
  ],
  "Ovr{importlib_metadata._text.FoldedCase.__eq__}": [
    "Ovr{str.__eq__}"
  ],
  "Ovr{importlib_metadata._text.FoldedCase.__lt__}": [
    "Ovr{str.__lt__}"
  ],
  "Ovr{importlib_metadata._text.FoldedCase.__ne__}": [
    "Ovr{str.__ne__}"
  ],
  "Ovr{importlib_metadata._text.FoldedCase.index}": [
    "Ovr{str.index}"
  ],
  "Ovr{importlib_metadata._text.FoldedCase.lower}": [
    "Ovr{str.lower}"
  ],
  "Ovr{importlib_metadata._text.FoldedCase.split}": [
    "Ovr{str.split}"
  ],
  "Ovr{influxdb_client.client.flux_table.CSVIterator.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{influxdb_client.client.flux_table.CSVIterator.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{int.__abs__}": [
    "Ovr{float.__abs__}"
  ],
  "Ovr{int.__add__}": [
    "Ovr{float.__add__}"
  ],
  "Ovr{int.__eq__}": [
    "Ovr{float.__eq__}"
  ],
  "Ovr{int.__ge__}": [
    "Ovr{float.__ge__}"
  ],
  "Ovr{int.__gt__}": [
    "Ovr{float.__gt__}"
  ],
  "Ovr{int.__le__}": [
    "Ovr{float.__le__}"
  ],
  "Ovr{int.__lt__}": [
    "Ovr{float.__lt__}"
  ],
  "Ovr{int.__mul__}": [
    "Ovr{float.__mul__}"
  ],
  "Ovr{int.__ne__}": [
    "Ovr{float.__ne__}"
  ],
  "Ovr{int.__or__}": [
    "click._compat.open_stream"
  ],
  "Ovr{int.__pow__}": [
    "Ovr{float.__pow__}"
  ],
  "Ovr{int.__sub__}": [
    "Ovr{float.__sub__}"
  ],
  "Ovr{int.__truediv__}": [
    "Ovr{float.__truediv__}"
  ],
  "Ovr{io.BufferedRandom.__enter__}": [
    "Ovr{io.BufferedReader.__enter__}"
  ],
  "Ovr{io.BufferedReader.__enter__}": [
    "benchmarks.bench_plot_randomized_svd.unpickle",
    "sklearn.datasets._base._sha256",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.feature_extraction.text._VectorizerMixin.decode"
  ],
  "Ovr{io.TextIOWrapper.buffer}": [
    "Ovr{typing.TextIO.buffer}"
  ],
  "Ovr{ipaddress._BaseNetwork.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{itertools.accumulate.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{itertools.accumulate.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{itertools.chain.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{itertools.chain.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{itertools.combinations.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{itertools.combinations.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{itertools.combinations_with_replacement.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{itertools.combinations_with_replacement.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{itertools.compress.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{itertools.compress.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{itertools.count.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{itertools.count.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{itertools.cycle.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{itertools.cycle.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{itertools.dropwhile.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{itertools.dropwhile.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{itertools.filterfalse.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{itertools.filterfalse.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{itertools.groupby.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{itertools.groupby.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{itertools.islice.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{itertools.islice.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{itertools.permutations.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{itertools.permutations.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{itertools.product.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{itertools.product.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{itertools.repeat.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{itertools.repeat.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{itertools.starmap.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{itertools.starmap.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{itertools.takewhile.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{itertools.takewhile.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{itertools.zip_longest.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{itertools.zip_longest.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{jinja2.environment.Environment.getattr}": [
    "jinja2.nodes.Getattr.as_const"
  ],
  "Ovr{jinja2.environment.Environment.getitem}": [
    "jinja2.nodes.Getitem.as_const"
  ],
  "Ovr{jinja2.environment.Template.render}": [
    "build_tools.update_environments_and_lock_files.get_conda_environment_content",
    "build_tools.update_environments_and_lock_files.get_pip_requirements_content"
  ],
  "Ovr{jinja2.environment.Template.render_async}": [
    "jinja2.environment.Template.render"
  ],
  "Ovr{jinja2.ext.DebugExtension.parse}": [
    "Ovr{jinja2.ext.Extension.parse}"
  ],
  "Ovr{jinja2.ext.ExprStmtExtension.parse}": [
    "Ovr{jinja2.ext.Extension.parse}"
  ],
  "Ovr{jinja2.ext.Extension.parse}": [
    "jinja2.parser.Parser.__init__"
  ],
  "Ovr{jinja2.ext.InternationalizationExtension.parse}": [
    "Ovr{jinja2.ext.Extension.parse}"
  ],
  "Ovr{jinja2.ext.LoopControlExtension.parse}": [
    "Ovr{jinja2.ext.Extension.parse}"
  ],
  "Ovr{jinja2.idtracking.RootVisitor.generic_visit}": [
    "Ovr{jinja2.visitor.NodeVisitor.generic_visit}"
  ],
  "Ovr{jinja2.nativetypes.NativeTemplate.render}": [
    "Ovr{jinja2.environment.Template.render}"
  ],
  "Ovr{jinja2.nativetypes.NativeTemplate.render_async}": [
    "Ovr{jinja2.environment.Template.render_async}"
  ],
  "Ovr{jinja2.nodes.And.as_const}": [
    "Ovr{jinja2.nodes.BinExpr.as_const}"
  ],
  "Ovr{jinja2.nodes.BinExpr.as_const}": [
    "Ovr{jinja2.nodes.Expr.as_const}"
  ],
  "Ovr{jinja2.nodes.Compare.as_const}": [
    "Ovr{jinja2.nodes.Expr.as_const}"
  ],
  "Ovr{jinja2.nodes.Concat.as_const}": [
    "Ovr{jinja2.nodes.Expr.as_const}"
  ],
  "Ovr{jinja2.nodes.CondExpr.as_const}": [
    "Ovr{jinja2.nodes.Expr.as_const}"
  ],
  "Ovr{jinja2.nodes.Const.as_const}": [
    "Ovr{jinja2.nodes.Expr.as_const}"
  ],
  "Ovr{jinja2.nodes.Dict.as_const}": [
    "Ovr{jinja2.nodes.Expr.as_const}"
  ],
  "Ovr{jinja2.nodes.Expr.as_const}": [
    "jinja2.nodes.And.as_const",
    "jinja2.nodes.BinExpr.as_const",
    "jinja2.nodes.Compare.as_const",
    "jinja2.nodes.Concat.as_const",
    "jinja2.nodes.CondExpr.as_const",
    "jinja2.nodes.Getattr.as_const",
    "jinja2.nodes.Getitem.as_const",
    "jinja2.nodes.Keyword.as_const",
    "jinja2.nodes.List.as_const",
    "jinja2.nodes.MarkSafe.as_const",
    "jinja2.nodes.MarkSafeIfAutoescape.as_const",
    "jinja2.nodes.Or.as_const",
    "jinja2.nodes.Pair.as_const",
    "jinja2.nodes.Slice.as_const.const",
    "jinja2.nodes.Tuple.as_const",
    "jinja2.nodes.UnaryExpr.as_const",
    "jinja2.nodes._FilterTestCommon.as_const",
    "jinja2.nodes.args_as_const",
    "jinja2.optimizer.Optimizer.generic_visit"
  ],
  "Ovr{jinja2.nodes.Expr.can_assign}": [
    "jinja2.nodes.Tuple.can_assign",
    "jinja2.parser.Parser.parse_assign_target"
  ],
  "Ovr{jinja2.nodes.Filter.as_const}": [
    "Ovr{jinja2.nodes._FilterTestCommon.as_const}"
  ],
  "Ovr{jinja2.nodes.Getattr.as_const}": [
    "Ovr{jinja2.nodes.Expr.as_const}"
  ],
  "Ovr{jinja2.nodes.Getitem.as_const}": [
    "Ovr{jinja2.nodes.Expr.as_const}"
  ],
  "Ovr{jinja2.nodes.List.as_const}": [
    "Ovr{jinja2.nodes.Expr.as_const}"
  ],
  "Ovr{jinja2.nodes.MarkSafe.as_const}": [
    "Ovr{jinja2.nodes.Expr.as_const}"
  ],
  "Ovr{jinja2.nodes.MarkSafeIfAutoescape.as_const}": [
    "Ovr{jinja2.nodes.Expr.as_const}"
  ],
  "Ovr{jinja2.nodes.NSRef.can_assign}": [
    "Ovr{jinja2.nodes.Expr.can_assign}"
  ],
  "Ovr{jinja2.nodes.Name.can_assign}": [
    "Ovr{jinja2.nodes.Expr.can_assign}"
  ],
  "Ovr{jinja2.nodes.Or.as_const}": [
    "Ovr{jinja2.nodes.BinExpr.as_const}"
  ],
  "Ovr{jinja2.nodes.Slice.as_const}": [
    "Ovr{jinja2.nodes.Expr.as_const}"
  ],
  "Ovr{jinja2.nodes.TemplateData.as_const}": [
    "Ovr{jinja2.nodes.Expr.as_const}"
  ],
  "Ovr{jinja2.nodes.Tuple.as_const}": [
    "Ovr{jinja2.nodes.Expr.as_const}"
  ],
  "Ovr{jinja2.nodes.Tuple.can_assign}": [
    "Ovr{jinja2.nodes.Expr.can_assign}"
  ],
  "Ovr{jinja2.nodes.UnaryExpr.as_const}": [
    "Ovr{jinja2.nodes.Expr.as_const}"
  ],
  "Ovr{jinja2.nodes._FilterTestCommon.as_const}": [
    "Ovr{jinja2.nodes.Expr.as_const}"
  ],
  "Ovr{jinja2.optimizer.Optimizer.generic_visit}": [
    "Ovr{jinja2.visitor.NodeTransformer.generic_visit}"
  ],
  "Ovr{jinja2.runtime.AsyncLoopContext.length}": [
    "Ovr{jinja2.runtime.LoopContext.length}"
  ],
  "Ovr{jinja2.runtime.LoopContext.length}": [
    "jinja2.runtime.LoopContext.__repr__"
  ],
  "Ovr{jinja2.sandbox.ImmutableSandboxedEnvironment.is_safe_attribute}": [
    "Ovr{jinja2.sandbox.SandboxedEnvironment.is_safe_attribute}"
  ],
  "Ovr{jinja2.sandbox.SandboxedEnvironment.getattr}": [
    "Ovr{jinja2.environment.Environment.getattr}"
  ],
  "Ovr{jinja2.sandbox.SandboxedEnvironment.getitem}": [
    "Ovr{jinja2.environment.Environment.getitem}"
  ],
  "Ovr{jinja2.sandbox.SandboxedEnvironment.is_safe_attribute}": [
    "jinja2.sandbox.SandboxedEnvironment.getattr",
    "jinja2.sandbox.SandboxedEnvironment.getitem"
  ],
  "Ovr{jinja2.visitor.NodeTransformer.generic_visit}": [
    "Ovr{jinja2.visitor.NodeVisitor.generic_visit}"
  ],
  "Ovr{jinja2.visitor.NodeVisitor.generic_visit}": [
    "jinja2.visitor.NodeVisitor.visit"
  ],
  "Ovr{jsonschema._utils.URIDict.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{jsonschema._utils.URIDict.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{ldap3.utils.ciDict.CaseInsensitiveDict.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{ldap3.utils.ciDict.CaseInsensitiveDict.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{ldap3.utils.ciDict.CaseInsensitiveDict.items}": [
    "Ovr{typing.Mapping.items}"
  ],
  "Ovr{ldap3.utils.ciDict.CaseInsensitiveDict.values}": [
    "Ovr{typing.Mapping.values}"
  ],
  "Ovr{ldap3.utils.ciDict.CaseInsensitiveWithAliasDict.__setitem__}": [
    "Ovr{ldap3.utils.ciDict.CaseInsensitiveDict.__setitem__}"
  ],
  "Ovr{libcst._flatten_sentinel.FlattenSentinel.__getitem__}": [
    "Ovr{typing.Sequence.__getitem__}"
  ],
  "Ovr{list.__getitem__}": [
    "Ovr{typing.MutableSequence.__getitem__}",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.load_data",
    "benchmarks.bench_rcv1_logreg_convergence.plot_dloss",
    "benchmarks.bench_sgd_regression.$toplevel",
    "build_tools.azure.get_commit_message.get_commit_message",
    "build_tools.circle.list_versions.human_readable_data_quantity",
    "build_tools.get_comment.find_lint_bot_comments",
    "build_tools.update_environments_and_lock_files.write_pip_lock_file",
    "click.core.MultiCommand.parse_args",
    "click.core.MultiCommand.resolve_command",
    "click.core.Option._parse_decls",
    "click.core.Parameter.shell_complete",
    "click.exceptions.UsageError.show",
    "click.formatting.HelpFormatter.write_dl",
    "click.formatting.wrap_text._flush_par",
    "click.parser.OptionParser._get_value_from_state",
    "click.parser._unpack_args",
    "click.shell_completion.BashComplete.get_completion_args",
    "click.shell_completion.FishComplete.get_completion_args",
    "click.shell_completion.ZshComplete.get_completion_args",
    "click.types.convert_type",
    "click.utils.make_default_short_help",
    "doc.conf.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.pop",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "doc.tutorial.text_analytics.data.movie_reviews.fetch_data.$toplevel",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.applications.plot_outlier_detection_wine.$toplevel",
    "examples.applications.plot_prediction_latency.plot_n_features_influence",
    "examples.applications.wikipedia_principal_eigenvector.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.calibration.plot_compare_calibration.$toplevel",
    "examples.cluster.plot_mean_shift.$toplevel",
    "examples.ensemble.plot_bias_variance.$toplevel",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.ensemble.plot_voting_probas.$toplevel",
    "examples.gaussian_process.plot_gpc_iris.$toplevel",
    "examples.impute.plot_missing_values.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "examples.linear_model.plot_bayesian_ridge_curvefit.$toplevel",
    "examples.linear_model.plot_huber_vs_ridge.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_20newsgroups.$toplevel",
    "examples.manifold.plot_manifold_sphere.$toplevel",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.mixture.plot_gmm_init.$toplevel",
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.model_selection.plot_underfitting_overfitting.$toplevel",
    "examples.neighbors.plot_species_kde.$toplevel",
    "examples.preprocessing.plot_all_scaling.make_plot",
    "examples.svm.plot_svm_regression.$toplevel",
    "examples.svm.plot_svm_tie_breaking.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "examples.text.plot_document_clustering.$toplevel",
    "examples.tree.plot_cost_complexity_pruning.$toplevel",
    "examples.tree.plot_iris_dtc.$toplevel",
    "jinja2.ext.InternationalizationExtension.parse",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.lexer.Lexer.wrap",
    "jinja2.parser.Parser.parse_concat",
    "jinja2.parser.Parser.parse_subscript",
    "jinja2.parser.Parser.parse_tuple",
    "jinja2.parser.Parser.subparse.flush_data",
    "setup.configure_extension_modules",
    "sklearn.cluster._agglomerative._hc_cut",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._base.load_csv_data",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.datasets._svmlight_format_io._dump_svmlight",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.dummy.DummyClassifier.predict_proba",
    "sklearn.ensemble._forest.ForestClassifier.predict_proba",
    "sklearn.ensemble._stacking.StackingClassifier.fit",
    "sklearn.externals._arff.ArffEncoder.iter_encode",
    "sklearn.externals._packaging.version.Version.public",
    "sklearn.externals._packaging.version._legacy_cmpkey",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.inverse_transform",
    "sklearn.feature_extraction.text.CountVectorizer._count_vocab",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.impute._base._most_frequent",
    "sklearn.inspection._permutation_importance._calculate_permutation_scores",
    "sklearn.linear_model._coordinate_descent.ElasticNet.fit",
    "sklearn.linear_model._least_angle.Lars._fit",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._omp.orthogonal_mp",
    "sklearn.linear_model._omp.orthogonal_mp_gram",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics.cluster.tests.test_bicluster.test_consensus_score",
    "sklearn.model_selection._search.BaseSearchCV.fit",
    "sklearn.model_selection._search.ParameterGrid.__getitem__",
    "sklearn.model_selection._validation._fit_and_predict",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.multiclass.OneVsOneClassifier.fit",
    "sklearn.neighbors._base.NeighborsBase._fit",
    "sklearn.neighbors._base.RadiusNeighborsMixin._radius_neighbors_reduce_func",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict_proba",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit",
    "sklearn.pipeline._name_estimators",
    "sklearn.preprocessing._encoders.OneHotEncoder._compute_n_features_outs",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._encoders.OneHotEncoder.get_feature_names_out",
    "sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform",
    "sklearn.tree._export._BaseTreeExporter.get_color",
    "sklearn.tree._export._MPLTreeExporter.export",
    "sklearn.tree._export._color_brew",
    "sklearn.utils._metadata_requests._MetadataRequester._build_request_for_signature",
    "sklearn.utils._param_validation.MissingValues.__str__",
    "sklearn.utils._param_validation._Booleans.__str__",
    "sklearn.utils._param_validation._CVObjects.__str__",
    "sklearn.utils._param_validation._RandomStates.__str__",
    "sklearn.utils._param_validation._VerboseHelper.__str__",
    "sklearn.utils._param_validation.validate_parameter_constraints",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.estimator_checks.check_classifier_multioutput",
    "sklearn.utils.estimator_checks.check_fit_score_takes_y",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out",
    "sklearn.utils.extmath.cartesian",
    "sklearn.utils.resample",
    "sklearn.utils.validation._check_monotonic_cst",
    "sklearn.utils.validation._ensure_sparse_format",
    "sklearn.utils.validation._get_feature_names",
    "sklearn.utils.validation.check_array",
    "traitlets.utils.getargspec.getargspec"
  ],
  "Ovr{list.__iadd__}": [
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults._asStringList",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asXML",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.transformString",
    "examples.applications.plot_tomography_l1_reconstruction.build_projection_operator",
    "examples.classification.plot_digits_classification.$toplevel",
    "examples.cluster.plot_kmeans_digits.bench_k_means",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.score_estimator",
    "pip._vendor.pyparsing.ParserElement.transformString",
    "sklearn.datasets._covtype.$toplevel",
    "sklearn.datasets._svmlight_format_io.load_svmlight_files",
    "sklearn.metrics.pairwise.$toplevel",
    "sklearn.neighbors._base.$toplevel",
    "sklearn.utils._param_validation.validate_params.decorator.wrapper",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.estimator_checks.check_non_transformer_estimators_n_iter"
  ],
  "Ovr{list.__iter__}": [
    "Ovr{typing.Sequence.__iter__}"
  ],
  "Ovr{list.__setitem__}": [
    "click.parser._unpack_args",
    "jinja2.visitor.NodeTransformer.generic_visit",
    "pip._vendor.distlib.compat.OrderedDict.__init__",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.pipeline._name_estimators",
    "sklearn.preprocessing._encoders.OneHotEncoder._compute_n_features_outs",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.utils.extmath.weighted_mode",
    "sklearn.utils.metaestimators._BaseComposition._replace_estimator"
  ],
  "Ovr{list.append}": [
    "benchmarks.bench_glmnet.$toplevel",
    "benchmarks.bench_hist_gradient_boosting.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel",
    "benchmarks.bench_isotonic.$toplevel",
    "benchmarks.bench_lasso.compute_bench",
    "benchmarks.bench_plot_fastkmeans.compute_bench",
    "benchmarks.bench_plot_fastkmeans.compute_bench_2",
    "benchmarks.bench_plot_hierarchical.compute_bench",
    "benchmarks.bench_plot_incremental_pca.fixed_batch_size_comparison",
    "benchmarks.bench_plot_incremental_pca.variable_batch_size_comparison",
    "benchmarks.bench_plot_lasso_path.compute_bench",
    "benchmarks.bench_plot_nmf.run_bench",
    "benchmarks.bench_plot_parallel_pairwise.plot",
    "benchmarks.bench_plot_polynomial_kernel_approximation.$toplevel",
    "benchmarks.bench_plot_randomized_svd.bench_a",
    "benchmarks.bench_plot_randomized_svd.bench_b",
    "benchmarks.bench_plot_randomized_svd.bench_c",
    "benchmarks.bench_plot_svd.compute_bench",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_rcv1_logreg_convergence.$toplevel",
    "benchmarks.bench_rcv1_logreg_convergence.plot_dloss",
    "benchmarks.bench_saga.exp",
    "benchmarks.bench_saga.fit_single",
    "benchmarks.bench_text_vectorizers.$toplevel",
    "benchmarks.bench_tree.bench_scikit_tree_classifier",
    "benchmarks.bench_tree.bench_scikit_tree_regressor",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "build_tools.generate_authors_table.generate_list",
    "build_tools.generate_authors_table.generate_table",
    "click._textwrap.TextWrapper.indent_only",
    "click.core.Command.format_options",
    "click.core.MultiCommand.collect_usage_pieces",
    "click.core.MultiCommand.format_commands",
    "click.core.MultiCommand.invoke",
    "click.core.Option._parse_decls",
    "click.core.Option.get_help_record",
    "click.formatting.HelpFormatter.write",
    "click.formatting.join_options",
    "click.formatting.wrap_text",
    "click.formatting.wrap_text._flush_par",
    "click.parser.Argument.process",
    "click.parser.Option.process",
    "click.parser.OptionParser._match_short_opt",
    "click.parser.OptionParser._process_args_for_options",
    "click.parser.OptionParser._process_opts",
    "click.parser.OptionParser.add_argument",
    "click.parser._unpack_args",
    "click.parser.split_arg_string",
    "click.shell_completion._resolve_incomplete",
    "click.termui.style",
    "click.utils._expand_args",
    "doc.conf.$toplevel",
    "doc.conf.notebook_modification_function",
    "doc.sphinxext.sphinx_issues.IssueRole.__call__",
    "doc.tutorial.machine_learning_map.parse_path.get_points",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Or.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults._asStringList",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.dump",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.runTests",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.transformString",
    "doc.tutorial.machine_learning_map.pyparsing._flatten",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "examples.applications.plot_model_complexity_influence.benchmark_influence",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.classification.plot_lda.$toplevel",
    "examples.cluster.plot_adjusted_for_chance_measures.$toplevel",
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel",
    "examples.cluster.plot_dict_face_patches.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.$toplevel",
    "examples.decomposition.plot_pca_vs_fa_model_selection.compute_scores",
    "examples.ensemble.plot_adaboost_multiclass.$toplevel",
    "examples.ensemble.plot_bias_variance.$toplevel",
    "examples.ensemble.plot_ensemble_oob.$toplevel",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_early_stopping.$toplevel",
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.exercises.plot_cv_digits.$toplevel",
    "examples.impute.plot_missing_values.$toplevel",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "examples.linear_model.plot_logistic_path.$toplevel",
    "examples.linear_model.plot_ridge_coeffs.$toplevel",
    "examples.linear_model.plot_ridge_path.$toplevel",
    "examples.linear_model.plot_sgd_comparison.$toplevel",
    "examples.linear_model.plot_sgd_early_stopping.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_20newsgroups.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.score_estimator",
    "examples.miscellaneous.plot_kernel_approximation.$toplevel",
    "examples.miscellaneous.plot_kernel_ridge_regression.$toplevel",
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.scoring_on_bootstrap",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.model_selection.plot_roc_crossval.$toplevel",
    "examples.model_selection.plot_train_error_vs_test_error.$toplevel",
    "examples.multioutput.plot_classifier_chain_yeast.$toplevel",
    "examples.neural_networks.plot_mlp_alpha.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.plot_on_dataset",
    "examples.preprocessing.plot_target_encoder.evaluate_model_and_store",
    "examples.svm.plot_rbf_parameters.$toplevel",
    "examples.svm.plot_svm_anova.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "examples.text.plot_document_clustering.fit_and_evaluate",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "examples.tree.plot_cost_complexity_pruning.$toplevel",
    "examples.tree.plot_unveil_tree_structure.$toplevel",
    "jinja2.debug.rewrite_traceback_stack",
    "jinja2.ext.InternationalizationExtension._make_node",
    "jinja2.ext.InternationalizationExtension._parse_block",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.lexer.compile_rules",
    "jinja2.parser.Parser.parse_call_args",
    "jinja2.parser.Parser.parse_compare",
    "jinja2.parser.Parser.parse_concat",
    "jinja2.parser.Parser.parse_dict",
    "jinja2.parser.Parser.parse_list",
    "jinja2.parser.Parser.parse_primary",
    "jinja2.parser.Parser.parse_signature",
    "jinja2.parser.Parser.parse_statement",
    "jinja2.parser.Parser.parse_subscribed",
    "jinja2.parser.Parser.parse_subscript",
    "jinja2.parser.Parser.parse_tuple",
    "jinja2.parser.Parser.subparse",
    "jinja2.parser.Parser.subparse.flush_data",
    "jinja2.visitor.NodeTransformer.generic_visit",
    "maint_tools.sort_whats_new.$toplevel",
    "maint_tools.update_tracking_issue.$toplevel",
    "packaging.version.Version.__str__",
    "pip._vendor.packaging.version.Version.__str__",
    "pip._vendor.pyparsing.ParserElement.transformString",
    "pip._vendor.pyparsing._flatten",
    "pip._vendor.requests.cookies.remove_cookie_by_name",
    "prompt_toolkit.layout.utils.explode_text_fragments",
    "setup.configure_extension_modules",
    "sklearn.__check_build.raise_build_error",
    "sklearn.calibration.CalibratedClassifierCV.fit",
    "sklearn.calibration._fit_calibrator",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.cluster._birch.Birch._get_leaves",
    "sklearn.cluster._optics._xi_cluster",
    "sklearn.compose._column_transformer.ColumnTransformer._update_fitted_transformers",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_column_callables",
    "sklearn.compose._column_transformer.ColumnTransformer.get_feature_names_out",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.covariance._graph_lasso.graphical_lasso",
    "sklearn.covariance._graph_lasso.graphical_lasso_path",
    "sklearn.covariance._robust_covariance.select_candidates",
    "sklearn.cross_decomposition._pls._PLS.fit",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._arff_parser._split_sparse_columns",
    "sklearn.datasets._base.load_files",
    "sklearn.datasets._base.load_sample_images",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._openml._valid_data_column_names",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._samples_generator.make_multilabel_classification",
    "sklearn.datasets._species_distributions.fetch_species_distributions",
    "sklearn.datasets._svmlight_format_io.load_svmlight_files",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit",
    "sklearn.decomposition._fastica._ica_def",
    "sklearn.decomposition._fastica.fastica",
    "sklearn.decomposition._incremental_pca.IncrementalPCA.transform",
    "sklearn.discriminant_analysis.LinearDiscriminantAnalysis._solve_svd",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis._decision_function",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit",
    "sklearn.dummy.DummyClassifier.predict_proba",
    "sklearn.ensemble._bagging._parallel_build_estimators",
    "sklearn.ensemble._forest.ForestClassifier._validate_y_class_weight",
    "sklearn.ensemble._gb.VerboseReporter.init",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.fit",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_interaction_cst",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._compute_interactions",
    "sklearn.ensemble._stacking._BaseStacking._concatenate_predictions",
    "sklearn.ensemble._stacking._BaseStacking.fit",
    "sklearn.ensemble._stacking._BaseStacking.get_feature_names_out",
    "sklearn.externals._arff.ArffDecoder._decode",
    "sklearn.externals._arff.COOData.encode_data",
    "sklearn.externals._arff.DenseGeneratorData.encode_data",
    "sklearn.externals._arff.LODGeneratorData.encode_data",
    "sklearn.externals._packaging.version.Version.__str__",
    "sklearn.externals._packaging.version.Version.base_version",
    "sklearn.externals._packaging.version._legacy_cmpkey",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._transform",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit",
    "sklearn.feature_extraction.text.CountVectorizer._count_vocab",
    "sklearn.feature_extraction.text._VectorizerMixin._char_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin._char_wb_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin._word_ngrams",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.gaussian_process.kernels.CompoundKernel.__call__",
    "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.gaussian_process.kernels.Kernel.theta",
    "sklearn.gaussian_process.kernels.KernelOperator.hyperparameters",
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.inspection._partial_dependence._grid_from_X",
    "sklearn.inspection._partial_dependence._partial_dependence_brute",
    "sklearn.inspection._permutation_importance._calculate_permutation_scores",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.kernel_approximation.AdditiveChi2Sampler._transform_dense",
    "sklearn.kernel_approximation.AdditiveChi2Sampler._transform_sparse",
    "sklearn.linear_model._bayes.ARDRegression.fit",
    "sklearn.linear_model._bayes.BayesianRidge.fit",
    "sklearn.linear_model._coordinate_descent.ElasticNet.fit",
    "sklearn.linear_model._coordinate_descent.enet_path",
    "sklearn.linear_model._least_angle.Lars._fit",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._logistic._log_reg_scoring_path",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._omp.orthogonal_mp",
    "sklearn.linear_model._omp.orthogonal_mp_gram",
    "sklearn.model_selection._plot._BaseCurveDisplay._plot_curve",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.model_selection._split._pprint",
    "sklearn.model_selection._validation._incremental_fit_estimator",
    "sklearn.model_selection._validation._insert_error_scores",
    "sklearn.model_selection._validation._permutation_test_score",
    "sklearn.model_selection._validation.cross_val_predict",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.naive_bayes.CategoricalNB._update_feature_log_prob",
    "sklearn.naive_bayes.GaussianNB._joint_log_likelihood",
    "sklearn.neighbors._base.NeighborsBase._fit",
    "sklearn.neighbors._classification.KNeighborsClassifier.predict_proba",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.fit",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_lbfgs",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._initialize",
    "sklearn.preprocessing._data.QuantileTransformer._dense_fit",
    "sklearn.preprocessing._data.QuantileTransformer._sparse_fit",
    "sklearn.preprocessing._data.RobustScaler.fit",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._encoders._BaseEncoder._check_X",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.preprocessing._encoders._BaseEncoder._fit_infrequent_category_mapping",
    "sklearn.preprocessing._encoders._BaseEncoder._transform",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.get_feature_names_out",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform",
    "sklearn.preprocessing._polynomial.SplineTransformer.get_feature_names_out",
    "sklearn.preprocessing._polynomial.SplineTransformer.transform",
    "sklearn.random_projection._sparse_random_matrix",
    "sklearn.svm._base._one_vs_one_coef",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._classes.DecisionTreeClassifier.predict_proba",
    "sklearn.tree._export._DOTTreeExporter.head",
    "sklearn.tree._export._color_brew",
    "sklearn.tree._reingold_tilford.DrawTree.max_extents",
    "sklearn.utils._encode.MissingValues.to_list",
    "sklearn.utils._encode._check_unknown",
    "sklearn.utils._get_column_indices",
    "sklearn.utils._metadata_requests.MethodMapping._serialize",
    "sklearn.utils._pprint._safe_repr",
    "sklearn.utils._testing._IgnoreWarnings.__repr__",
    "sklearn.utils._testing._get_func_name",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.class_weight.compute_class_weight",
    "sklearn.utils.class_weight.compute_sample_weight",
    "sklearn.utils.estimator_checks.check_classifiers_classes",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.multiclass.class_distribution",
    "sklearn.utils.validation._check_monotonic_cst",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args",
    "traitlets.traitlets.HasTraits.__init__",
    "traitlets.traitlets.HasTraits._notify_observers",
    "werkzeug.utils.ImportStringError.__init__"
  ],
  "Ovr{list.copy}": [
    "click.shell_completion._resolve_context"
  ],
  "Ovr{list.extend}": [
    "benchmarks.bench_plot_incremental_pca.variable_batch_size_comparison",
    "build_tools.generate_authors_table.get_contributors",
    "click.core.BaseCommand.shell_complete",
    "click.core.Command.collect_usage_pieces",
    "click.core.Command.shell_complete",
    "click.core.Context.command_path",
    "click.core.MultiCommand.shell_complete",
    "click.utils._expand_args",
    "doc.conf.notebook_modification_function",
    "doc.tutorial.machine_learning_map.parse_path.get_points",
    "doc.tutorial.machine_learning_map.pyparsing._flatten",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "jinja2.ext.InternationalizationExtension._make_node",
    "jinja2.nodes.args_as_const",
    "jinja2.parser.Parser.subparse",
    "jinja2.visitor.NodeTransformer.generic_visit",
    "maint_tools.sort_whats_new.$toplevel",
    "pip._vendor.pyparsing._flatten",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.cluster._optics._xi_cluster",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.datasets._base.load_files",
    "sklearn.datasets._lfw._fetch_lfw_people",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.ensemble._forest.BaseForest.decision_path",
    "sklearn.ensemble._stacking._BaseStacking.get_feature_names_out",
    "sklearn.externals._arff.COOData.decode_rows",
    "sklearn.feature_extraction.text.CountVectorizer._count_vocab",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out",
    "sklearn.model_selection._split.StratifiedShuffleSplit._iter_indices",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.pipeline.FeatureUnion.get_feature_names_out",
    "sklearn.preprocessing._encoders.OneHotEncoder.get_feature_names_out",
    "sklearn.utils._encode._unique_python",
    "sklearn.utils._metadata_requests.RequestMethod.__get__",
    "sklearn.utils._param_validation.MissingValues.__init__",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.discovery.all_functions",
    "sklearn.utils.resample",
    "traitlets.traitlets.HasTraits._notify_observers"
  ],
  "Ovr{list.index}": [
    "Ovr{typing.Sequence.index}",
    "maint_tools.sort_whats_new.entry_sort_key",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.svm._base.BaseLibSVM._dense_decision_function",
    "sklearn.svm._base.BaseLibSVM._dense_predict",
    "sklearn.svm._base.BaseLibSVM._sparse_decision_function",
    "sklearn.svm._base.BaseLibSVM._sparse_fit",
    "sklearn.svm._base.BaseLibSVM._sparse_predict",
    "sklearn.svm._base.BaseLibSVM.fit",
    "sklearn.svm._base.BaseLibSVM.n_support_",
    "sklearn.svm._base.BaseSVC._dense_predict_proba",
    "sklearn.svm._base.BaseSVC._sparse_predict_proba",
    "traitlets.utils.getargspec.getargspec"
  ],
  "Ovr{list.insert}": [
    "click.parser.OptionParser._match_long_opt",
    "click.parser.OptionParser._match_short_opt",
    "click.parser.OptionParser._process_args_for_options",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "jinja2.ext.InternationalizationExtension._make_node",
    "jinja2.nodes._FilterTestCommon.as_const",
    "sklearn.datasets._lfw._fetch_lfw_pairs"
  ],
  "Ovr{list.pop}": [
    "benchmarks.bench_plot_randomized_svd.plot_time_vs_s",
    "click.parser.OptionParser._get_value_from_state",
    "click.parser.OptionParser._process_args_for_options",
    "click.shell_completion.FishComplete.get_completion_args",
    "examples.tree.plot_unveil_tree_structure.$toplevel",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.parser.Parser.parse_statement",
    "jinja2.parser.Parser.subparse",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.externals._packaging.version._legacy_cmpkey",
    "sklearn.linear_model._least_angle._lars_path_solver"
  ],
  "Ovr{list.remove}": [
    "sklearn.metrics._classification._check_set_wise_labels",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.discovery.all_estimators"
  ],
  "Ovr{list.sort}": [
    "click.core.Option._parse_decls",
    "click.formatting.join_options",
    "doc.tutorial.machine_learning_map.pyparsing.Or.parseImpl",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit",
    "sklearn.utils.validation._check_monotonic_cst"
  ],
  "Ovr{map.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{map.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{markupsafe.Markup.__add__}": [
    "Ovr{str.__add__}"
  ],
  "Ovr{markupsafe.Markup.__mod__}": [
    "Ovr{str.__mod__}"
  ],
  "Ovr{markupsafe.Markup.__mul__}": [
    "Ovr{str.__mul__}"
  ],
  "Ovr{markupsafe.Markup.format}": [
    "Ovr{str.format}"
  ],
  "Ovr{markupsafe.Markup.join}": [
    "Ovr{str.join}"
  ],
  "Ovr{markupsafe.Markup.partition}": [
    "Ovr{str.partition}"
  ],
  "Ovr{markupsafe.Markup.rpartition}": [
    "Ovr{str.rpartition}"
  ],
  "Ovr{markupsafe.Markup.rsplit}": [
    "Ovr{str.rsplit}"
  ],
  "Ovr{markupsafe.Markup.split}": [
    "Ovr{str.split}"
  ],
  "Ovr{markupsafe.Markup.splitlines}": [
    "Ovr{str.splitlines}"
  ],
  "Ovr{marshmallow.orderedset.OrderedSet.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{memoryview.__getitem__}": [
    "Ovr{typing.Sequence.__getitem__}"
  ],
  "Ovr{memoryview.__iter__}": [
    "Ovr{typing.Sequence.__iter__}"
  ],
  "Ovr{mmap.mmap.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{multiprocessing.managers.BaseListProxy.__getitem__}": [
    "Ovr{typing.MutableSequence.__getitem__}"
  ],
  "Ovr{multiprocessing.managers.BaseListProxy.index}": [
    "Ovr{typing.Sequence.index}"
  ],
  "Ovr{multiprocessing.managers.DictProxy.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{multiprocessing.managers.DictProxy.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{multiprocessing.managers.DictProxy.get}": [
    "Ovr{typing.Mapping.get}"
  ],
  "Ovr{multiprocessing.managers.DictProxy.items}": [
    "Ovr{typing.Mapping.items}"
  ],
  "Ovr{multiprocessing.managers.DictProxy.values}": [
    "Ovr{typing.Mapping.values}"
  ],
  "Ovr{multiprocessing.pool.IMapIterator.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{multiprocessing.pool.IMapIterator.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{mypy_extensions._TypedDict.items}": [
    "Ovr{typing.Mapping.items}"
  ],
  "Ovr{mypy_extensions._TypedDict.values}": [
    "Ovr{typing.Mapping.values}"
  ],
  "Ovr{numbers.Real.__le__}": [
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_predictions"
  ],
  "Ovr{numbers.Real.__lt__}": [
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.from_predictions"
  ],
  "Ovr{oauthlib.common.CaseInsensitiveDict.__getitem__}": [
    "Ovr{dict.__getitem__}"
  ],
  "Ovr{oauthlib.common.CaseInsensitiveDict.__setitem__}": [
    "Ovr{dict.__setitem__}"
  ],
  "Ovr{oauthlib.common.CaseInsensitiveDict.get}": [
    "Ovr{dict.get}"
  ],
  "Ovr{openpyxl.styles.named_styles.NamedStyleList.__getitem__}": [
    "Ovr{list.__getitem__}"
  ],
  "Ovr{openpyxl.styles.named_styles.NamedStyleList.append}": [
    "Ovr{list.append}"
  ],
  "Ovr{openpyxl.utils.indexed_list.IndexedList.append}": [
    "Ovr{list.append}"
  ],
  "Ovr{openpyxl.utils.indexed_list.IndexedList.index}": [
    "Ovr{list.index}"
  ],
  "Ovr{openpyxl.worksheet.table.TableList.get}": [
    "Ovr{dict.get}"
  ],
  "Ovr{openpyxl.worksheet.table.TableList.items}": [
    "Ovr{dict.items}"
  ],
  "Ovr{optparse.OptionParser.error}": [
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_sample_without_replacement.$toplevel"
  ],
  "Ovr{os._Environ.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{os._Environ.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{os._ScandirIterator.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{paramiko.hostkeys.HostKeys.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{paramiko.hostkeys.HostKeys.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{paramiko.hostkeys.HostKeys.values}": [
    "Ovr{typing.Mapping.values}"
  ],
  "Ovr{paramiko.hostkeys._SubDict.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{paramiko.hostkeys._SubDict.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{parso.python.tree.UsedNamesMapping.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{parso.utils.PythonVersionInfo.__gt__}": [
    "Ovr{tuple.__gt__}"
  ],
  "Ovr{passlib.pwd.WordsetDict.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{passlib.pwd.WordsetDict.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{passlib.utils.compat._ordered_dict.OrderedDict.__iter__}": [
    "Ovr{dict.__iter__}"
  ],
  "Ovr{passlib.utils.compat._ordered_dict.OrderedDict.__setitem__}": [
    "Ovr{dict.__setitem__}"
  ],
  "Ovr{passlib.utils.compat._ordered_dict.OrderedDict.copy}": [
    "Ovr{dict.copy}"
  ],
  "Ovr{passlib.utils.compat._ordered_dict.OrderedDict.items}": [
    "Ovr{dict.items}"
  ],
  "Ovr{passlib.utils.compat._ordered_dict.OrderedDict.keys}": [
    "Ovr{dict.keys}"
  ],
  "Ovr{passlib.utils.compat._ordered_dict.OrderedDict.pop}": [
    "Ovr{dict.pop}"
  ],
  "Ovr{passlib.utils.compat._ordered_dict.OrderedDict.values}": [
    "Ovr{dict.values}"
  ],
  "Ovr{pip._internal.cli.parser.ConfigOptionParser.error}": [
    "Ovr{optparse.OptionParser.error}"
  ],
  "Ovr{pip._vendor.distlib.compat.ChainMap.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{pip._vendor.distlib.compat.ChainMap.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{pip._vendor.distlib.compat.ChainMap.get}": [
    "Ovr{typing.Mapping.get}"
  ],
  "Ovr{pip._vendor.distlib.compat.ConvertingDict.__getitem__}": [
    "Ovr{dict.__getitem__}"
  ],
  "Ovr{pip._vendor.distlib.compat.ConvertingDict.get}": [
    "Ovr{dict.get}"
  ],
  "Ovr{pip._vendor.distlib.compat.ConvertingList.__getitem__}": [
    "Ovr{list.__getitem__}"
  ],
  "Ovr{pip._vendor.distlib.compat.ConvertingList.pop}": [
    "Ovr{list.pop}"
  ],
  "Ovr{pip._vendor.distlib.compat.ConvertingTuple.__getitem__}": [
    "Ovr{tuple.__getitem__}"
  ],
  "Ovr{pip._vendor.distlib.compat.OrderedDict.__iter__}": [
    "Ovr{dict.__iter__}"
  ],
  "Ovr{pip._vendor.distlib.compat.OrderedDict.__setitem__}": [
    "Ovr{dict.__setitem__}"
  ],
  "Ovr{pip._vendor.distlib.compat.OrderedDict.copy}": [
    "Ovr{dict.copy}"
  ],
  "Ovr{pip._vendor.distlib.compat.OrderedDict.items}": [
    "Ovr{dict.items}"
  ],
  "Ovr{pip._vendor.distlib.compat.OrderedDict.keys}": [
    "Ovr{dict.keys}"
  ],
  "Ovr{pip._vendor.distlib.compat.OrderedDict.pop}": [
    "Ovr{dict.pop}"
  ],
  "Ovr{pip._vendor.distlib.compat.OrderedDict.values}": [
    "Ovr{dict.values}"
  ],
  "Ovr{pip._vendor.html5lib._inputstream.EncodingBytes.__iter__}": [
    "Ovr{bytes.__iter__}"
  ],
  "Ovr{pip._vendor.html5lib._trie.py.Trie.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{pip._vendor.html5lib._utils.BoundMethodDispatcher.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{pip._vendor.html5lib._utils.BoundMethodDispatcher.get}": [
    "Ovr{typing.Mapping.get}"
  ],
  "Ovr{pip._vendor.html5lib._utils.MethodDispatcher.__getitem__}": [
    "Ovr{dict.__getitem__}"
  ],
  "Ovr{pip._vendor.html5lib.treebuilders.base.ActiveFormattingElements.append}": [
    "Ovr{list.append}"
  ],
  "Ovr{pip._vendor.html5lib.treebuilders.dom.getDomBuilder.AttrList.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{pip._vendor.html5lib.treebuilders.dom.getDomBuilder.AttrList.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{pip._vendor.html5lib.treebuilders.dom.getDomBuilder.AttrList.items}": [
    "Ovr{typing.Mapping.items}"
  ],
  "Ovr{pip._vendor.html5lib.treebuilders.dom.getDomBuilder.AttrList.values}": [
    "Ovr{typing.Mapping.values}"
  ],
  "Ovr{pip._vendor.html5lib.treebuilders.etree_lxml.TreeBuilder.__init__.Attributes.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{pip._vendor.html5lib.treebuilders.etree_lxml.TreeBuilder.__init__.Attributes.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{pip._vendor.pyparsing.And.streamline}": [
    "Ovr{pip._vendor.pyparsing.ParseExpression.streamline}"
  ],
  "Ovr{pip._vendor.pyparsing.Each.streamline}": [
    "Ovr{pip._vendor.pyparsing.ParseExpression.streamline}"
  ],
  "Ovr{pip._vendor.pyparsing.Forward._setResultsName}": [
    "Ovr{pip._vendor.pyparsing.ParserElement._setResultsName}"
  ],
  "Ovr{pip._vendor.pyparsing.Forward.copy}": [
    "Ovr{pip._vendor.pyparsing.ParserElement.copy}"
  ],
  "Ovr{pip._vendor.pyparsing.Forward.streamline}": [
    "Ovr{pip._vendor.pyparsing.ParseElementEnhance.streamline}"
  ],
  "Ovr{pip._vendor.pyparsing.GoToColumn.preParse}": [
    "Ovr{pip._vendor.pyparsing.ParserElement.preParse}"
  ],
  "Ovr{pip._vendor.pyparsing.Keyword.copy}": [
    "Ovr{pip._vendor.pyparsing.ParserElement.copy}"
  ],
  "Ovr{pip._vendor.pyparsing.MatchFirst._setResultsName}": [
    "Ovr{pip._vendor.pyparsing.ParseExpression._setResultsName}"
  ],
  "Ovr{pip._vendor.pyparsing.MatchFirst.streamline}": [
    "Ovr{pip._vendor.pyparsing.ParseExpression.streamline}"
  ],
  "Ovr{pip._vendor.pyparsing.Or._setResultsName}": [
    "Ovr{pip._vendor.pyparsing.ParseExpression._setResultsName}"
  ],
  "Ovr{pip._vendor.pyparsing.Or.streamline}": [
    "Ovr{pip._vendor.pyparsing.ParseExpression.streamline}"
  ],
  "Ovr{pip._vendor.pyparsing.ParseElementEnhance.streamline}": [
    "Ovr{pip._vendor.pyparsing.ParserElement.streamline}"
  ],
  "Ovr{pip._vendor.pyparsing.ParseExpression._setResultsName}": [
    "Ovr{pip._vendor.pyparsing.ParserElement._setResultsName}"
  ],
  "Ovr{pip._vendor.pyparsing.ParseExpression.copy}": [
    "Ovr{pip._vendor.pyparsing.ParserElement.copy}"
  ],
  "Ovr{pip._vendor.pyparsing.ParseExpression.streamline}": [
    "Ovr{pip._vendor.pyparsing.ParserElement.streamline}"
  ],
  "Ovr{pip._vendor.pyparsing.ParserElement.__repr__}": [
    "sklearn.datasets._samples_generator.make_blobs"
  ],
  "Ovr{pip._vendor.pyparsing.ParserElement._setResultsName}": [
    "pip._vendor.pyparsing.ParserElement.__call__"
  ],
  "Ovr{pip._vendor.pyparsing.ParserElement.copy}": [
    "pip._vendor.pyparsing.ParserElement.__call__",
    "pip._vendor.pyparsing.ParserElement._setResultsName"
  ],
  "Ovr{pip._vendor.pyparsing.ParserElement.preParse}": [
    "pip._vendor.pyparsing.ParserElement.scanString"
  ],
  "Ovr{pip._vendor.pyparsing.ParserElement.streamline}": [
    "pip._vendor.pyparsing.ParserElement.scanString"
  ],
  "Ovr{pip._vendor.pyparsing._MultipleMatch._setResultsName}": [
    "Ovr{pip._vendor.pyparsing.ParserElement._setResultsName}"
  ],
  "Ovr{pip._vendor.pyparsing._PendingSkip.__repr__}": [
    "Ovr{pip._vendor.pyparsing.ParserElement.__repr__}"
  ],
  "Ovr{pip._vendor.requests.cookies.RequestsCookieJar.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{pip._vendor.requests.cookies.RequestsCookieJar.get}": [
    "Ovr{typing.Mapping.get}"
  ],
  "Ovr{pip._vendor.requests.cookies.RequestsCookieJar.items}": [
    "Ovr{typing.Mapping.items}"
  ],
  "Ovr{pip._vendor.requests.cookies.RequestsCookieJar.values}": [
    "Ovr{typing.Mapping.values}"
  ],
  "Ovr{pip._vendor.requests.structures.CaseInsensitiveDict.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{pip._vendor.requests.structures.CaseInsensitiveDict.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{pip._vendor.requests.structures.LookupDict.__getitem__}": [
    "Ovr{dict.__getitem__}"
  ],
  "Ovr{pip._vendor.requests.structures.LookupDict.get}": [
    "Ovr{dict.get}"
  ],
  "Ovr{pip._vendor.resolvelib.structs.IteratorMapping.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{pip._vendor.tenacity.BaseRetrying.__call__}": [
    "pip._vendor.tenacity.BaseRetrying.__repr__"
  ],
  "Ovr{pip._vendor.tenacity.Retrying.__call__}": [
    "Ovr{pip._vendor.tenacity.BaseRetrying.__call__}"
  ],
  "Ovr{pip._vendor.tenacity._asyncio.AsyncRetrying.__call__}": [
    "Ovr{pip._vendor.tenacity.BaseRetrying.__call__}"
  ],
  "Ovr{pip._vendor.tenacity.tornadoweb.TornadoRetrying.__call__}": [
    "Ovr{pip._vendor.tenacity.BaseRetrying.__call__}"
  ],
  "Ovr{pip._vendor.urllib3._collections.HTTPHeaderDict.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{pip._vendor.urllib3._collections.HTTPHeaderDict.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{pip._vendor.urllib3._collections.HTTPHeaderDict.items}": [
    "Ovr{typing.Mapping.items}"
  ],
  "Ovr{pip._vendor.urllib3._collections.RecentlyUsedContainer.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{pip._vendor.urllib3._collections.RecentlyUsedContainer.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{polib._BaseFile.append}": [
    "Ovr{list.append}"
  ],
  "Ovr{polib._BaseFile.insert}": [
    "Ovr{list.insert}"
  ],
  "Ovr{prompt_toolkit.layout.utils._ExplodedList.__setitem__}": [
    "Ovr{list.__setitem__}"
  ],
  "Ovr{prompt_toolkit.layout.utils._ExplodedList.append}": [
    "Ovr{list.append}"
  ],
  "Ovr{prompt_toolkit.layout.utils._ExplodedList.extend}": [
    "Ovr{list.extend}"
  ],
  "Ovr{prompt_toolkit.layout.utils._ExplodedList.insert}": [
    "Ovr{list.insert}"
  ],
  "Ovr{psycopg2.extras.DictRow.__getitem__}": [
    "Ovr{list.__getitem__}"
  ],
  "Ovr{psycopg2.extras.DictRow.__setitem__}": [
    "Ovr{list.__setitem__}"
  ],
  "Ovr{psycopg2.extras.DictRow.copy}": [
    "Ovr{list.copy}"
  ],
  "Ovr{psycopg2.extras.RealDictRow.__setitem__}": [
    "Ovr{dict.__setitem__}"
  ],
  "Ovr{pytz.lazy.LazyDict.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{range.__getitem__}": [
    "Ovr{typing.Sequence.__getitem__}"
  ],
  "Ovr{range.__iter__}": [
    "Ovr{typing.Sequence.__iter__}"
  ],
  "Ovr{range.index}": [
    "Ovr{typing.Sequence.index}"
  ],
  "Ovr{redis.client.CaseInsensitiveDict.get}": [
    "Ovr{dict.get}"
  ],
  "Ovr{requests.cookies.RequestsCookieJar.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{requests.cookies.RequestsCookieJar.get}": [
    "Ovr{typing.Mapping.get}"
  ],
  "Ovr{requests.cookies.RequestsCookieJar.items}": [
    "Ovr{typing.Mapping.items}"
  ],
  "Ovr{requests.cookies.RequestsCookieJar.values}": [
    "Ovr{typing.Mapping.values}"
  ],
  "Ovr{requests.structures.CaseInsensitiveDict.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{requests.structures.CaseInsensitiveDict.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{requests.structures.LookupDict.__getitem__}": [
    "Ovr{dict.__getitem__}"
  ],
  "Ovr{requests.structures.LookupDict.get}": [
    "Ovr{dict.get}"
  ],
  "Ovr{reversed.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{reversed.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{set.__ior__}": [
    "build_tools.generate_authors_table.get_contributors",
    "sklearn.conftest.pytest_collection_modifyitems"
  ],
  "Ovr{set.__isub__}": [
    "build_tools.generate_authors_table.get_contributors"
  ],
  "Ovr{set.__iter__}": [
    "Ovr{typing.Iterable.__iter__}",
    "build_tools.generate_authors_table.get_contributors",
    "jinja2.ext.InternationalizationExtension.parse",
    "jinja2.parser.Parser.__init__",
    "maint_tools.sort_whats_new.$toplevel",
    "pip._vendor.distlib.compat.ChainMap.__iter__",
    "sklearn.compose._column_transformer.ColumnTransformer.transform",
    "sklearn.conftest.pytest_collection_modifyitems",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_interaction_cst",
    "sklearn.gaussian_process.kernels.Kernel.__eq__",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.utils._determine_key_type",
    "sklearn.utils._encode._unique_python",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests.MetadataRouter._route_params",
    "sklearn.utils._metadata_requests.MethodMetadataRequest._check_warnings",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.estimator_checks.check_no_attributes_set_in_init",
    "sklearn.utils.graph.single_source_shortest_path_length",
    "sklearn.utils.multiclass.unique_labels",
    "sklearn.utils.validation._get_feature_names"
  ],
  "Ovr{set.add}": [
    "build_tools.circle.list_versions.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects",
    "sklearn.datasets._openml._verify_target_data_type",
    "sklearn.externals._arff.ArffEncoder.iter_encode",
    "sklearn.feature_extraction.text.CountVectorizer._limit_features",
    "sklearn.feature_extraction.text._VectorizerMixin._check_stop_words_consistency",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.preprocessing._label.MultiLabelBinarizer._transform",
    "sklearn.utils._array_api._isdtype_single"
  ],
  "Ovr{set.difference_update}": [
    "click.core.Command.get_help_option_names"
  ],
  "Ovr{set.intersection}": [
    "sklearn.metrics._scorer._BaseScorer._warn_overlap",
    "sklearn.utils._metadata_requests.MetadataRouter._route_params",
    "sklearn.utils.estimator_checks.check_estimator_get_tags_default_keys",
    "sklearn.utils.metaestimators._BaseComposition._validate_names"
  ],
  "Ovr{set.union}": [
    "pip._vendor.distlib.compat.ChainMap.__iter__",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_interaction_cst",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._intilialize_root",
    "sklearn.neighbors._base.$toplevel",
    "sklearn.utils._metadata_requests.MetadataRouter._get_param_names"
  ],
  "Ovr{set.update}": [
    "click.core.Command.parse_args",
    "click.core.CommandCollection.list_commands",
    "click.parser.OptionParser.add_option",
    "flask.cli.FlaskGroup.list_commands",
    "jinja2.ext.InternationalizationExtension.parse",
    "sklearn.datasets._samples_generator.make_multilabel_classification.sample_example",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._compute_interactions",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.graph.single_source_shortest_path_length"
  ],
  "Ovr{shelve.Shelf.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{shelve.Shelf.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{shelve.Shelf.get}": [
    "Ovr{typing.Mapping.get}"
  ],
  "Ovr{shlex.shlex.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{sklearn.base.BaseEstimator._get_tags}": [
    "sklearn.base.BaseEstimator._validate_data"
  ],
  "Ovr{sklearn.base.BaseEstimator.get_params}": [
    "sklearn.base.BaseEstimator._validate_params",
    "sklearn.base.BaseEstimator.set_params"
  ],
  "Ovr{sklearn.cluster._agglomerative.AgglomerativeClustering.fit_predict}": [
    "examples.cluster.plot_inductive_clustering.$toplevel"
  ],
  "Ovr{sklearn.cluster._agglomerative.FeatureAgglomeration.fit_predict}": [
    "Ovr{sklearn.cluster._agglomerative.AgglomerativeClustering.fit_predict}"
  ],
  "Ovr{sklearn.cluster._bicluster.BaseSpectral._check_parameters}": [
    "sklearn.cluster._bicluster.BaseSpectral.fit"
  ],
  "Ovr{sklearn.cluster._bicluster.SpectralBiclustering._check_parameters}": [
    "Ovr{sklearn.cluster._bicluster.BaseSpectral._check_parameters}"
  ],
  "Ovr{sklearn.cluster._bicluster.SpectralCoclustering._check_parameters}": [
    "Ovr{sklearn.cluster._bicluster.BaseSpectral._check_parameters}"
  ],
  "Ovr{sklearn.cluster._bisect_k_means.BisectingKMeans._warn_mkl_vcomp}": [
    "Ovr{sklearn.cluster._kmeans._BaseKMeans._warn_mkl_vcomp}"
  ],
  "Ovr{sklearn.cluster._kmeans.KMeans._warn_mkl_vcomp}": [
    "Ovr{sklearn.cluster._kmeans._BaseKMeans._warn_mkl_vcomp}"
  ],
  "Ovr{sklearn.cluster._kmeans.MiniBatchKMeans._warn_mkl_vcomp}": [
    "Ovr{sklearn.cluster._kmeans._BaseKMeans._warn_mkl_vcomp}"
  ],
  "Ovr{sklearn.cluster._kmeans._BaseKMeans._warn_mkl_vcomp}": [
    "sklearn.cluster._kmeans._BaseKMeans._check_mkl_vcomp"
  ],
  "Ovr{sklearn.compose._column_transformer.ColumnTransformer.get_params}": [
    "Ovr{sklearn.base.BaseEstimator.get_params}"
  ],
  "Ovr{sklearn.decomposition._nmf.NMF._fit_transform}": [
    "sklearn.decomposition._nmf.NMF.fit_transform",
    "sklearn.decomposition._nmf.NMF.transform",
    "sklearn.decomposition._nmf.non_negative_factorization"
  ],
  "Ovr{sklearn.decomposition._nmf.NMF.fit_transform}": [
    "sklearn.decomposition._nmf._BaseNMF.fit"
  ],
  "Ovr{sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function}": [
    "Ovr{sklearn.linear_model._base.LinearClassifierMixin.decision_function}"
  ],
  "Ovr{sklearn.ensemble._bagging.BaggingClassifier._set_oob_score}": [
    "Ovr{sklearn.ensemble._bagging.BaseBagging._set_oob_score}"
  ],
  "Ovr{sklearn.ensemble._bagging.BaggingClassifier._validate_y}": [
    "Ovr{sklearn.ensemble._bagging.BaseBagging._validate_y}"
  ],
  "Ovr{sklearn.ensemble._bagging.BaggingRegressor._set_oob_score}": [
    "Ovr{sklearn.ensemble._bagging.BaseBagging._set_oob_score}"
  ],
  "Ovr{sklearn.ensemble._bagging.BaseBagging._parallel_args}": [
    "sklearn.ensemble._bagging.BaseBagging._fit"
  ],
  "Ovr{sklearn.ensemble._bagging.BaseBagging._set_oob_score}": [
    "sklearn.ensemble._bagging.BaseBagging._fit"
  ],
  "Ovr{sklearn.ensemble._bagging.BaseBagging._validate_y}": [
    "sklearn.ensemble._bagging.BaseBagging._fit"
  ],
  "Ovr{sklearn.ensemble._base._BaseHeterogeneousEnsemble.get_params}": [
    "Ovr{sklearn.base.BaseEstimator.get_params}"
  ],
  "Ovr{sklearn.ensemble._forest.BaseForest._set_oob_score_and_attributes}": [
    "sklearn.ensemble._forest.BaseForest.fit"
  ],
  "Ovr{sklearn.ensemble._forest.BaseForest._validate_y_class_weight}": [
    "sklearn.ensemble._forest.BaseForest.fit"
  ],
  "Ovr{sklearn.ensemble._forest.ForestClassifier._set_oob_score_and_attributes}": [
    "Ovr{sklearn.ensemble._forest.BaseForest._set_oob_score_and_attributes}"
  ],
  "Ovr{sklearn.ensemble._forest.ForestClassifier._validate_y_class_weight}": [
    "Ovr{sklearn.ensemble._forest.BaseForest._validate_y_class_weight}"
  ],
  "Ovr{sklearn.ensemble._forest.ForestRegressor._set_oob_score_and_attributes}": [
    "Ovr{sklearn.ensemble._forest.BaseForest._set_oob_score_and_attributes}"
  ],
  "Ovr{sklearn.ensemble._forest.RandomTreesEmbedding._set_oob_score_and_attributes}": [
    "Ovr{sklearn.ensemble._forest.BaseForest._set_oob_score_and_attributes}"
  ],
  "Ovr{sklearn.ensemble._gb.BaseGradientBoosting._validate_y}": [
    "sklearn.ensemble._gb.BaseGradientBoosting.fit"
  ],
  "Ovr{sklearn.ensemble._gb.GradientBoostingClassifier._validate_y}": [
    "Ovr{sklearn.ensemble._gb.BaseGradientBoosting._validate_y}"
  ],
  "Ovr{sklearn.ensemble._gb.GradientBoostingRegressor._validate_y}": [
    "Ovr{sklearn.ensemble._gb.BaseGradientBoosting._validate_y}"
  ],
  "Ovr{sklearn.ensemble._gb_losses.BinomialDeviance._update_terminal_region}": [
    "Ovr{sklearn.ensemble._gb_losses.LossFunction._update_terminal_region}"
  ],
  "Ovr{sklearn.ensemble._gb_losses.ExponentialLoss._update_terminal_region}": [
    "Ovr{sklearn.ensemble._gb_losses.LossFunction._update_terminal_region}"
  ],
  "Ovr{sklearn.ensemble._gb_losses.HuberLossFunction._update_terminal_region}": [
    "Ovr{sklearn.ensemble._gb_losses.LossFunction._update_terminal_region}"
  ],
  "Ovr{sklearn.ensemble._gb_losses.LeastAbsoluteError._update_terminal_region}": [
    "Ovr{sklearn.ensemble._gb_losses.LossFunction._update_terminal_region}"
  ],
  "Ovr{sklearn.ensemble._gb_losses.LeastSquaresError._update_terminal_region}": [
    "Ovr{sklearn.ensemble._gb_losses.LossFunction._update_terminal_region}"
  ],
  "Ovr{sklearn.ensemble._gb_losses.LossFunction._update_terminal_region}": [
    "sklearn.ensemble._gb_losses.LossFunction.update_terminal_regions"
  ],
  "Ovr{sklearn.ensemble._gb_losses.MultinomialDeviance._update_terminal_region}": [
    "Ovr{sklearn.ensemble._gb_losses.LossFunction._update_terminal_region}"
  ],
  "Ovr{sklearn.ensemble._gb_losses.QuantileLossFunction._update_terminal_region}": [
    "Ovr{sklearn.ensemble._gb_losses.LossFunction._update_terminal_region}"
  ],
  "Ovr{sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._encode_y}": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit"
  ],
  "Ovr{sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._finalize_sample_weight}": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit"
  ],
  "Ovr{sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._get_loss}": [
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit"
  ],
  "Ovr{sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier._encode_y}": [
    "Ovr{sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._encode_y}"
  ],
  "Ovr{sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier._finalize_sample_weight}": [
    "Ovr{sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._finalize_sample_weight}"
  ],
  "Ovr{sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier._get_loss}": [
    "Ovr{sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._get_loss}"
  ],
  "Ovr{sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor._encode_y}": [
    "Ovr{sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._encode_y}"
  ],
  "Ovr{sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor._get_loss}": [
    "Ovr{sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._get_loss}"
  ],
  "Ovr{sklearn.ensemble._iforest.IsolationForest._parallel_args}": [
    "Ovr{sklearn.ensemble._bagging.BaseBagging._parallel_args}"
  ],
  "Ovr{sklearn.ensemble._iforest.IsolationForest._set_oob_score}": [
    "Ovr{sklearn.ensemble._bagging.BaseBagging._set_oob_score}"
  ],
  "Ovr{sklearn.ensemble._weight_boosting.AdaBoostClassifier._boost}": [
    "Ovr{sklearn.ensemble._weight_boosting.BaseWeightBoosting._boost}"
  ],
  "Ovr{sklearn.ensemble._weight_boosting.AdaBoostRegressor._boost}": [
    "Ovr{sklearn.ensemble._weight_boosting.BaseWeightBoosting._boost}"
  ],
  "Ovr{sklearn.ensemble._weight_boosting.BaseWeightBoosting._boost}": [
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.fit"
  ],
  "Ovr{sklearn.feature_extraction.text.CountVectorizer.transform}": [
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized"
  ],
  "Ovr{sklearn.feature_extraction.text.TfidfVectorizer.transform}": [
    "Ovr{sklearn.feature_extraction.text.CountVectorizer.transform}"
  ],
  "Ovr{sklearn.feature_extraction.text._VectorizerMixin.build_tokenizer}": [
    "sklearn.feature_extraction.text._VectorizerMixin.build_analyzer"
  ],
  "Ovr{sklearn.feature_selection._base.SelectorMixin._get_support_mask}": [
    "sklearn.feature_selection._base.SelectorMixin.get_support"
  ],
  "Ovr{sklearn.feature_selection._from_model.SelectFromModel._get_support_mask}": [
    "Ovr{sklearn.feature_selection._base.SelectorMixin._get_support_mask}"
  ],
  "Ovr{sklearn.feature_selection._rfe.RFE._get_support_mask}": [
    "Ovr{sklearn.feature_selection._base.SelectorMixin._get_support_mask}"
  ],
  "Ovr{sklearn.feature_selection._sequential.SequentialFeatureSelector._get_support_mask}": [
    "Ovr{sklearn.feature_selection._base.SelectorMixin._get_support_mask}"
  ],
  "Ovr{sklearn.feature_selection._univariate_selection.GenericUnivariateSelect._check_params}": [
    "Ovr{sklearn.feature_selection._univariate_selection._BaseFilter._check_params}"
  ],
  "Ovr{sklearn.feature_selection._univariate_selection.GenericUnivariateSelect._get_support_mask}": [
    "Ovr{sklearn.feature_selection._base.SelectorMixin._get_support_mask}"
  ],
  "Ovr{sklearn.feature_selection._univariate_selection.SelectFdr._get_support_mask}": [
    "Ovr{sklearn.feature_selection._base.SelectorMixin._get_support_mask}"
  ],
  "Ovr{sklearn.feature_selection._univariate_selection.SelectFpr._get_support_mask}": [
    "Ovr{sklearn.feature_selection._base.SelectorMixin._get_support_mask}"
  ],
  "Ovr{sklearn.feature_selection._univariate_selection.SelectFwe._get_support_mask}": [
    "Ovr{sklearn.feature_selection._base.SelectorMixin._get_support_mask}"
  ],
  "Ovr{sklearn.feature_selection._univariate_selection.SelectKBest._check_params}": [
    "Ovr{sklearn.feature_selection._univariate_selection._BaseFilter._check_params}"
  ],
  "Ovr{sklearn.feature_selection._univariate_selection.SelectKBest._get_support_mask}": [
    "Ovr{sklearn.feature_selection._base.SelectorMixin._get_support_mask}"
  ],
  "Ovr{sklearn.feature_selection._univariate_selection.SelectPercentile._get_support_mask}": [
    "Ovr{sklearn.feature_selection._base.SelectorMixin._get_support_mask}"
  ],
  "Ovr{sklearn.feature_selection._univariate_selection._BaseFilter._check_params}": [
    "sklearn.feature_selection._univariate_selection._BaseFilter.fit"
  ],
  "Ovr{sklearn.feature_selection._variance_threshold.VarianceThreshold._get_support_mask}": [
    "Ovr{sklearn.feature_selection._base.SelectorMixin._get_support_mask}"
  ],
  "Ovr{sklearn.gaussian_process.kernels.CompoundKernel.__call__}": [
    "Ovr{sklearn.gaussian_process.kernels.Kernel.__call__}"
  ],
  "Ovr{sklearn.gaussian_process.kernels.CompoundKernel.bounds}": [
    "Ovr{sklearn.gaussian_process.kernels.Kernel.bounds}"
  ],
  "Ovr{sklearn.gaussian_process.kernels.CompoundKernel.get_params}": [
    "Ovr{sklearn.gaussian_process.kernels.Kernel.get_params}"
  ],
  "Ovr{sklearn.gaussian_process.kernels.CompoundKernel.theta}": [
    "Ovr{sklearn.gaussian_process.kernels.Kernel.theta}"
  ],
  "Ovr{sklearn.gaussian_process.kernels.DotProduct.__call__}": [
    "Ovr{sklearn.gaussian_process.kernels.Kernel.__call__}"
  ],
  "Ovr{sklearn.gaussian_process.kernels.Exponentiation.__call__}": [
    "Ovr{sklearn.gaussian_process.kernels.Kernel.__call__}"
  ],
  "Ovr{sklearn.gaussian_process.kernels.Exponentiation.bounds}": [
    "Ovr{sklearn.gaussian_process.kernels.Kernel.bounds}"
  ],
  "Ovr{sklearn.gaussian_process.kernels.Exponentiation.get_params}": [
    "Ovr{sklearn.gaussian_process.kernels.Kernel.get_params}"
  ],
  "Ovr{sklearn.gaussian_process.kernels.Exponentiation.hyperparameters}": [
    "Ovr{sklearn.gaussian_process.kernels.Kernel.hyperparameters}"
  ],
  "Ovr{sklearn.gaussian_process.kernels.Exponentiation.theta}": [
    "Ovr{sklearn.gaussian_process.kernels.Kernel.theta}"
  ],
  "Ovr{sklearn.gaussian_process.kernels.Kernel.__call__}": [
    "sklearn.gaussian_process.kernels.Kernel.__add__",
    "sklearn.gaussian_process.kernels.Kernel.__eq__",
    "sklearn.gaussian_process.kernels.Kernel.__mul__",
    "sklearn.gaussian_process.kernels.Kernel.__pow__",
    "sklearn.gaussian_process.kernels.Kernel.__radd__",
    "sklearn.gaussian_process.kernels.Kernel.__rmul__",
    "sklearn.gaussian_process.kernels.Kernel.clone_with_theta",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.gaussian_process.kernels.Kernel.hyperparameters",
    "sklearn.gaussian_process.kernels.Kernel.set_params"
  ],
  "Ovr{sklearn.gaussian_process.kernels.Kernel.bounds}": [
    "sklearn.gaussian_process.kernels.Kernel._check_bounds_params"
  ],
  "Ovr{sklearn.gaussian_process.kernels.Kernel.get_params}": [
    "sklearn.gaussian_process.kernels.Kernel.__eq__",
    "sklearn.gaussian_process.kernels.Kernel.set_params",
    "sklearn.gaussian_process.kernels.Kernel.theta",
    "sklearn.gaussian_process.kernels.Kernel.theta@setter"
  ],
  "Ovr{sklearn.gaussian_process.kernels.Kernel.hyperparameters}": [
    "sklearn.gaussian_process.kernels.Kernel._check_bounds_params",
    "sklearn.gaussian_process.kernels.Kernel.bounds",
    "sklearn.gaussian_process.kernels.Kernel.theta",
    "sklearn.gaussian_process.kernels.Kernel.theta@setter"
  ],
  "Ovr{sklearn.gaussian_process.kernels.Kernel.theta}": [
    "sklearn.gaussian_process.kernels.Kernel.__repr__",
    "sklearn.gaussian_process.kernels.Kernel._check_bounds_params",
    "sklearn.gaussian_process.kernels.Kernel.n_dims"
  ],
  "Ovr{sklearn.gaussian_process.kernels.KernelOperator.bounds}": [
    "Ovr{sklearn.gaussian_process.kernels.Kernel.bounds}"
  ],
  "Ovr{sklearn.gaussian_process.kernels.KernelOperator.get_params}": [
    "Ovr{sklearn.gaussian_process.kernels.Kernel.get_params}"
  ],
  "Ovr{sklearn.gaussian_process.kernels.KernelOperator.hyperparameters}": [
    "Ovr{sklearn.gaussian_process.kernels.Kernel.hyperparameters}"
  ],
  "Ovr{sklearn.gaussian_process.kernels.KernelOperator.theta}": [
    "Ovr{sklearn.gaussian_process.kernels.Kernel.theta}"
  ],
  "Ovr{sklearn.gaussian_process.kernels.Matern.__call__}": [
    "Ovr{sklearn.gaussian_process.kernels.RBF.__call__}"
  ],
  "Ovr{sklearn.gaussian_process.kernels.PairwiseKernel.__call__}": [
    "Ovr{sklearn.gaussian_process.kernels.Kernel.__call__}"
  ],
  "Ovr{sklearn.gaussian_process.kernels.RBF.__call__}": [
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.gaussian_process.plot_compare_gpr_krr.$toplevel",
    "examples.gaussian_process.plot_gpc.$toplevel",
    "examples.gaussian_process.plot_gpc_iris.$toplevel",
    "examples.gaussian_process.plot_gpc_xor.$toplevel",
    "examples.gaussian_process.plot_gpr_co2.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy.$toplevel",
    "examples.gaussian_process.plot_gpr_noisy_targets.$toplevel",
    "examples.gaussian_process.plot_gpr_prior_posterior.$toplevel",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.predict"
  ],
  "Ovr{sklearn.linear_model._base.LinearClassifierMixin.decision_function}": [
    "sklearn.linear_model._base.LinearClassifierMixin._predict_proba_lr",
    "sklearn.linear_model._base.LinearClassifierMixin.predict"
  ],
  "Ovr{sklearn.linear_model._base.LinearModel._decision_function}": [
    "sklearn.linear_model._base.LinearModel.predict"
  ],
  "Ovr{sklearn.linear_model._coordinate_descent.ElasticNet._decision_function}": [
    "Ovr{sklearn.linear_model._base.LinearModel._decision_function}"
  ],
  "Ovr{sklearn.linear_model._coordinate_descent.ElasticNetCV._get_estimator}": [
    "Ovr{sklearn.linear_model._coordinate_descent.LinearModelCV._get_estimator}"
  ],
  "Ovr{sklearn.linear_model._coordinate_descent.ElasticNetCV._is_multitask}": [
    "Ovr{sklearn.linear_model._coordinate_descent.LinearModelCV._is_multitask}"
  ],
  "Ovr{sklearn.linear_model._coordinate_descent.LassoCV._get_estimator}": [
    "Ovr{sklearn.linear_model._coordinate_descent.LinearModelCV._get_estimator}"
  ],
  "Ovr{sklearn.linear_model._coordinate_descent.LassoCV._is_multitask}": [
    "Ovr{sklearn.linear_model._coordinate_descent.LinearModelCV._is_multitask}"
  ],
  "Ovr{sklearn.linear_model._coordinate_descent.LinearModelCV._get_estimator}": [
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit"
  ],
  "Ovr{sklearn.linear_model._coordinate_descent.LinearModelCV._is_multitask}": [
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit"
  ],
  "Ovr{sklearn.linear_model._coordinate_descent.MultiTaskElasticNetCV._get_estimator}": [
    "Ovr{sklearn.linear_model._coordinate_descent.LinearModelCV._get_estimator}"
  ],
  "Ovr{sklearn.linear_model._coordinate_descent.MultiTaskElasticNetCV._is_multitask}": [
    "Ovr{sklearn.linear_model._coordinate_descent.LinearModelCV._is_multitask}"
  ],
  "Ovr{sklearn.linear_model._coordinate_descent.MultiTaskLassoCV._get_estimator}": [
    "Ovr{sklearn.linear_model._coordinate_descent.LinearModelCV._get_estimator}"
  ],
  "Ovr{sklearn.linear_model._coordinate_descent.MultiTaskLassoCV._is_multitask}": [
    "Ovr{sklearn.linear_model._coordinate_descent.LinearModelCV._is_multitask}"
  ],
  "Ovr{sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.inner_solve}": [
    "Ovr{sklearn.linear_model._glm._newton_solver.NewtonSolver.inner_solve}"
  ],
  "Ovr{sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.setup}": [
    "Ovr{sklearn.linear_model._glm._newton_solver.NewtonSolver.setup}"
  ],
  "Ovr{sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.update_gradient_hessian}": [
    "Ovr{sklearn.linear_model._glm._newton_solver.NewtonSolver.update_gradient_hessian}"
  ],
  "Ovr{sklearn.linear_model._glm._newton_solver.NewtonSolver.inner_solve}": [
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.solve"
  ],
  "Ovr{sklearn.linear_model._glm._newton_solver.NewtonSolver.setup}": [
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.solve"
  ],
  "Ovr{sklearn.linear_model._glm._newton_solver.NewtonSolver.update_gradient_hessian}": [
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.solve"
  ],
  "Ovr{sklearn.linear_model._glm.glm.GammaRegressor._get_loss}": [
    "Ovr{sklearn.linear_model._glm.glm._GeneralizedLinearRegressor._get_loss}"
  ],
  "Ovr{sklearn.linear_model._glm.glm.PoissonRegressor._get_loss}": [
    "Ovr{sklearn.linear_model._glm.glm._GeneralizedLinearRegressor._get_loss}"
  ],
  "Ovr{sklearn.linear_model._glm.glm.TweedieRegressor._get_loss}": [
    "Ovr{sklearn.linear_model._glm.glm._GeneralizedLinearRegressor._get_loss}"
  ],
  "Ovr{sklearn.linear_model._glm.glm._GeneralizedLinearRegressor._get_loss}": [
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor._more_tags",
    "sklearn.linear_model._glm.glm._GeneralizedLinearRegressor.fit"
  ],
  "Ovr{sklearn.linear_model._ridge._IdentityClassifier.decision_function}": [
    "Ovr{sklearn.linear_model._base.LinearClassifierMixin.decision_function}"
  ],
  "Ovr{sklearn.metrics._scorer._BaseScorer._factory_args}": [
    "sklearn.metrics._scorer._BaseScorer.__repr__"
  ],
  "Ovr{sklearn.metrics._scorer._ProbaScorer._factory_args}": [
    "Ovr{sklearn.metrics._scorer._BaseScorer._factory_args}"
  ],
  "Ovr{sklearn.metrics._scorer._ThresholdScorer._factory_args}": [
    "Ovr{sklearn.metrics._scorer._BaseScorer._factory_args}"
  ],
  "Ovr{sklearn.mixture._base.BaseMixture._check_parameters}": [
    "sklearn.mixture._base.BaseMixture.fit_predict"
  ],
  "Ovr{sklearn.mixture._base.BaseMixture._estimate_log_prob}": [
    "sklearn.mixture._base.BaseMixture._estimate_weighted_log_prob"
  ],
  "Ovr{sklearn.mixture._base.BaseMixture._estimate_log_weights}": [
    "sklearn.mixture._base.BaseMixture._estimate_weighted_log_prob"
  ],
  "Ovr{sklearn.mixture._base.BaseMixture._get_parameters}": [
    "sklearn.mixture._base.BaseMixture.fit_predict"
  ],
  "Ovr{sklearn.mixture._base.BaseMixture._initialize}": [
    "sklearn.mixture._base.BaseMixture._initialize_parameters"
  ],
  "Ovr{sklearn.mixture._base.BaseMixture._m_step}": [
    "sklearn.mixture._base.BaseMixture.fit_predict"
  ],
  "Ovr{sklearn.mixture._base.BaseMixture._set_parameters}": [
    "sklearn.mixture._base.BaseMixture.fit_predict"
  ],
  "Ovr{sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._check_parameters}": [
    "Ovr{sklearn.mixture._base.BaseMixture._check_parameters}"
  ],
  "Ovr{sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_log_prob}": [
    "Ovr{sklearn.mixture._base.BaseMixture._estimate_log_prob}"
  ],
  "Ovr{sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_log_weights}": [
    "Ovr{sklearn.mixture._base.BaseMixture._estimate_log_weights}"
  ],
  "Ovr{sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._get_parameters}": [
    "Ovr{sklearn.mixture._base.BaseMixture._get_parameters}"
  ],
  "Ovr{sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._initialize}": [
    "Ovr{sklearn.mixture._base.BaseMixture._initialize}"
  ],
  "Ovr{sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._m_step}": [
    "Ovr{sklearn.mixture._base.BaseMixture._m_step}"
  ],
  "Ovr{sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._set_parameters}": [
    "Ovr{sklearn.mixture._base.BaseMixture._set_parameters}"
  ],
  "Ovr{sklearn.mixture._gaussian_mixture.GaussianMixture._check_parameters}": [
    "Ovr{sklearn.mixture._base.BaseMixture._check_parameters}"
  ],
  "Ovr{sklearn.mixture._gaussian_mixture.GaussianMixture._estimate_log_prob}": [
    "Ovr{sklearn.mixture._base.BaseMixture._estimate_log_prob}"
  ],
  "Ovr{sklearn.mixture._gaussian_mixture.GaussianMixture._estimate_log_weights}": [
    "Ovr{sklearn.mixture._base.BaseMixture._estimate_log_weights}"
  ],
  "Ovr{sklearn.mixture._gaussian_mixture.GaussianMixture._get_parameters}": [
    "Ovr{sklearn.mixture._base.BaseMixture._get_parameters}"
  ],
  "Ovr{sklearn.mixture._gaussian_mixture.GaussianMixture._initialize}": [
    "Ovr{sklearn.mixture._base.BaseMixture._initialize}"
  ],
  "Ovr{sklearn.mixture._gaussian_mixture.GaussianMixture._m_step}": [
    "Ovr{sklearn.mixture._base.BaseMixture._m_step}"
  ],
  "Ovr{sklearn.mixture._gaussian_mixture.GaussianMixture._set_parameters}": [
    "Ovr{sklearn.mixture._base.BaseMixture._set_parameters}"
  ],
  "Ovr{sklearn.model_selection._search.BaseSearchCV._run_search}": [
    "sklearn.model_selection._search.BaseSearchCV.fit"
  ],
  "Ovr{sklearn.model_selection._search.GridSearchCV._run_search}": [
    "Ovr{sklearn.model_selection._search.BaseSearchCV._run_search}"
  ],
  "Ovr{sklearn.model_selection._search.RandomizedSearchCV._run_search}": [
    "Ovr{sklearn.model_selection._search.BaseSearchCV._run_search}"
  ],
  "Ovr{sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._generate_candidate_params}": [
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search"
  ],
  "Ovr{sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search}": [
    "Ovr{sklearn.model_selection._search.BaseSearchCV._run_search}"
  ],
  "Ovr{sklearn.model_selection._search_successive_halving.HalvingGridSearchCV._generate_candidate_params}": [
    "Ovr{sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._generate_candidate_params}"
  ],
  "Ovr{sklearn.model_selection._search_successive_halving.HalvingRandomSearchCV._generate_candidate_params}": [
    "Ovr{sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._generate_candidate_params}"
  ],
  "Ovr{sklearn.model_selection._split.BaseCrossValidator._iter_test_indices}": [
    "sklearn.model_selection._split.BaseCrossValidator._iter_test_masks"
  ],
  "Ovr{sklearn.model_selection._split.BaseCrossValidator._iter_test_masks}": [
    "sklearn.model_selection._split.BaseCrossValidator.split"
  ],
  "Ovr{sklearn.model_selection._split.BaseShuffleSplit._iter_indices}": [
    "sklearn.model_selection._split.BaseShuffleSplit.split"
  ],
  "Ovr{sklearn.model_selection._split.GroupKFold._iter_test_indices}": [
    "Ovr{sklearn.model_selection._split.BaseCrossValidator._iter_test_indices}"
  ],
  "Ovr{sklearn.model_selection._split.GroupShuffleSplit._iter_indices}": [
    "Ovr{sklearn.model_selection._split.ShuffleSplit._iter_indices}"
  ],
  "Ovr{sklearn.model_selection._split.KFold._iter_test_indices}": [
    "Ovr{sklearn.model_selection._split.BaseCrossValidator._iter_test_indices}"
  ],
  "Ovr{sklearn.model_selection._split.LeaveOneGroupOut._iter_test_masks}": [
    "Ovr{sklearn.model_selection._split.BaseCrossValidator._iter_test_masks}"
  ],
  "Ovr{sklearn.model_selection._split.LeaveOneOut._iter_test_indices}": [
    "Ovr{sklearn.model_selection._split.BaseCrossValidator._iter_test_indices}"
  ],
  "Ovr{sklearn.model_selection._split.LeavePGroupsOut._iter_test_masks}": [
    "Ovr{sklearn.model_selection._split.BaseCrossValidator._iter_test_masks}"
  ],
  "Ovr{sklearn.model_selection._split.LeavePOut._iter_test_indices}": [
    "Ovr{sklearn.model_selection._split.BaseCrossValidator._iter_test_indices}"
  ],
  "Ovr{sklearn.model_selection._split.PredefinedSplit._iter_test_masks}": [
    "Ovr{sklearn.model_selection._split.BaseCrossValidator._iter_test_masks}"
  ],
  "Ovr{sklearn.model_selection._split.ShuffleSplit._iter_indices}": [
    "Ovr{sklearn.model_selection._split.BaseShuffleSplit._iter_indices}"
  ],
  "Ovr{sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices}": [
    "Ovr{sklearn.model_selection._split.BaseCrossValidator._iter_test_indices}"
  ],
  "Ovr{sklearn.model_selection._split.StratifiedKFold._iter_test_masks}": [
    "Ovr{sklearn.model_selection._split.BaseCrossValidator._iter_test_masks}"
  ],
  "Ovr{sklearn.model_selection._split.StratifiedShuffleSplit._iter_indices}": [
    "Ovr{sklearn.model_selection._split.BaseShuffleSplit._iter_indices}"
  ],
  "Ovr{sklearn.naive_bayes.BernoulliNB._check_X}": [
    "Ovr{sklearn.naive_bayes._BaseDiscreteNB._check_X}"
  ],
  "Ovr{sklearn.naive_bayes.BernoulliNB._check_X_y}": [
    "Ovr{sklearn.naive_bayes._BaseDiscreteNB._check_X_y}"
  ],
  "Ovr{sklearn.naive_bayes.BernoulliNB._count}": [
    "Ovr{sklearn.naive_bayes._BaseDiscreteNB._count}"
  ],
  "Ovr{sklearn.naive_bayes.BernoulliNB._joint_log_likelihood}": [
    "Ovr{sklearn.naive_bayes._BaseNB._joint_log_likelihood}"
  ],
  "Ovr{sklearn.naive_bayes.BernoulliNB._update_feature_log_prob}": [
    "Ovr{sklearn.naive_bayes._BaseDiscreteNB._update_feature_log_prob}"
  ],
  "Ovr{sklearn.naive_bayes.CategoricalNB._check_X}": [
    "Ovr{sklearn.naive_bayes._BaseDiscreteNB._check_X}"
  ],
  "Ovr{sklearn.naive_bayes.CategoricalNB._check_X_y}": [
    "Ovr{sklearn.naive_bayes._BaseDiscreteNB._check_X_y}"
  ],
  "Ovr{sklearn.naive_bayes.CategoricalNB._count}": [
    "Ovr{sklearn.naive_bayes._BaseDiscreteNB._count}"
  ],
  "Ovr{sklearn.naive_bayes.CategoricalNB._init_counters}": [
    "Ovr{sklearn.naive_bayes._BaseDiscreteNB._init_counters}"
  ],
  "Ovr{sklearn.naive_bayes.CategoricalNB._joint_log_likelihood}": [
    "Ovr{sklearn.naive_bayes._BaseNB._joint_log_likelihood}"
  ],
  "Ovr{sklearn.naive_bayes.CategoricalNB._update_feature_log_prob}": [
    "Ovr{sklearn.naive_bayes._BaseDiscreteNB._update_feature_log_prob}"
  ],
  "Ovr{sklearn.naive_bayes.ComplementNB._count}": [
    "Ovr{sklearn.naive_bayes._BaseDiscreteNB._count}"
  ],
  "Ovr{sklearn.naive_bayes.ComplementNB._joint_log_likelihood}": [
    "Ovr{sklearn.naive_bayes._BaseNB._joint_log_likelihood}"
  ],
  "Ovr{sklearn.naive_bayes.ComplementNB._update_feature_log_prob}": [
    "Ovr{sklearn.naive_bayes._BaseDiscreteNB._update_feature_log_prob}"
  ],
  "Ovr{sklearn.naive_bayes.GaussianNB._check_X}": [
    "Ovr{sklearn.naive_bayes._BaseNB._check_X}"
  ],
  "Ovr{sklearn.naive_bayes.GaussianNB._joint_log_likelihood}": [
    "Ovr{sklearn.naive_bayes._BaseNB._joint_log_likelihood}"
  ],
  "Ovr{sklearn.naive_bayes.MultinomialNB._count}": [
    "Ovr{sklearn.naive_bayes._BaseDiscreteNB._count}"
  ],
  "Ovr{sklearn.naive_bayes.MultinomialNB._joint_log_likelihood}": [
    "Ovr{sklearn.naive_bayes._BaseNB._joint_log_likelihood}"
  ],
  "Ovr{sklearn.naive_bayes.MultinomialNB._update_feature_log_prob}": [
    "Ovr{sklearn.naive_bayes._BaseDiscreteNB._update_feature_log_prob}"
  ],
  "Ovr{sklearn.naive_bayes._BaseDiscreteNB._check_X}": [
    "Ovr{sklearn.naive_bayes._BaseNB._check_X}"
  ],
  "Ovr{sklearn.naive_bayes._BaseDiscreteNB._check_X_y}": [
    "sklearn.naive_bayes._BaseDiscreteNB.fit",
    "sklearn.naive_bayes._BaseDiscreteNB.partial_fit"
  ],
  "Ovr{sklearn.naive_bayes._BaseDiscreteNB._count}": [
    "sklearn.naive_bayes._BaseDiscreteNB.fit",
    "sklearn.naive_bayes._BaseDiscreteNB.partial_fit"
  ],
  "Ovr{sklearn.naive_bayes._BaseDiscreteNB._init_counters}": [
    "sklearn.naive_bayes._BaseDiscreteNB.fit",
    "sklearn.naive_bayes._BaseDiscreteNB.partial_fit"
  ],
  "Ovr{sklearn.naive_bayes._BaseDiscreteNB._update_feature_log_prob}": [
    "sklearn.naive_bayes._BaseDiscreteNB.fit",
    "sklearn.naive_bayes._BaseDiscreteNB.partial_fit"
  ],
  "Ovr{sklearn.naive_bayes._BaseNB._check_X}": [
    "sklearn.naive_bayes._BaseNB.predict",
    "sklearn.naive_bayes._BaseNB.predict_joint_log_proba",
    "sklearn.naive_bayes._BaseNB.predict_log_proba"
  ],
  "Ovr{sklearn.naive_bayes._BaseNB._joint_log_likelihood}": [
    "sklearn.naive_bayes._BaseNB.predict",
    "sklearn.naive_bayes._BaseNB.predict_joint_log_proba",
    "sklearn.naive_bayes._BaseNB.predict_log_proba"
  ],
  "Ovr{sklearn.neural_network._stochastic_optimizers.BaseOptimizer.trigger_stopping}": [
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_base_optimizer"
  ],
  "Ovr{sklearn.neural_network._stochastic_optimizers.SGDOptimizer.trigger_stopping}": [
    "Ovr{sklearn.neural_network._stochastic_optimizers.BaseOptimizer.trigger_stopping}"
  ],
  "Ovr{sklearn.pipeline.FeatureUnion.get_params}": [
    "Ovr{sklearn.base.BaseEstimator.get_params}"
  ],
  "Ovr{sklearn.pipeline.Pipeline.get_params}": [
    "Ovr{sklearn.base.BaseEstimator.get_params}"
  ],
  "Ovr{sklearn.random_projection.BaseRandomProjection._make_random_matrix}": [
    "sklearn.random_projection.BaseRandomProjection.fit"
  ],
  "Ovr{sklearn.random_projection.GaussianRandomProjection._make_random_matrix}": [
    "Ovr{sklearn.random_projection.BaseRandomProjection._make_random_matrix}"
  ],
  "Ovr{sklearn.random_projection.SparseRandomProjection._make_random_matrix}": [
    "Ovr{sklearn.random_projection.BaseRandomProjection._make_random_matrix}"
  ],
  "Ovr{sklearn.semi_supervised._label_propagation.BaseLabelPropagation._build_graph}": [
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.fit"
  ],
  "Ovr{sklearn.semi_supervised._label_propagation.LabelPropagation._build_graph}": [
    "Ovr{sklearn.semi_supervised._label_propagation.BaseLabelPropagation._build_graph}"
  ],
  "Ovr{sklearn.semi_supervised._label_propagation.LabelSpreading._build_graph}": [
    "Ovr{sklearn.semi_supervised._label_propagation.BaseLabelPropagation._build_graph}"
  ],
  "Ovr{sklearn.svm._base.BaseLibSVM._get_coef}": [
    "sklearn.svm._base.BaseLibSVM.coef_"
  ],
  "Ovr{sklearn.svm._base.BaseLibSVM._validate_targets}": [
    "sklearn.svm._base.BaseLibSVM.fit"
  ],
  "Ovr{sklearn.svm._base.BaseSVC._get_coef}": [
    "Ovr{sklearn.svm._base.BaseLibSVM._get_coef}"
  ],
  "Ovr{sklearn.svm._base.BaseSVC._validate_targets}": [
    "Ovr{sklearn.svm._base.BaseLibSVM._validate_targets}"
  ],
  "Ovr{sklearn.utils._bunch.Bunch.__getitem__}": [
    "Ovr{dict.__getitem__}"
  ],
  "Ovr{sklearn.utils.tests.test_estimator_checks.EstimatorMissingDefaultTags._get_tags}": [
    "Ovr{sklearn.base.BaseEstimator._get_tags}"
  ],
  "Ovr{sklearn.utils.tests.test_estimator_checks.PoorScoreLogisticRegression.decision_function}": [
    "Ovr{sklearn.linear_model._base.LinearClassifierMixin.decision_function}"
  ],
  "Ovr{sklearn.utils.tests.test_pprint.test_kwargs_in_init.WithKWargs.get_params}": [
    "Ovr{sklearn.base.BaseEstimator.get_params}"
  ],
  "Ovr{sqlalchemy.engine.result.RMKeyView.__iter__}": [
    "Ovr{typing.KeysView.__iter__}"
  ],
  "Ovr{sqlalchemy.engine.row.ROMappingView.__iter__}": [
    "Ovr{typing.KeysView.__iter__}"
  ],
  "Ovr{sqlalchemy.engine.row.Row.index}": [
    "Ovr{typing.Sequence.index}"
  ],
  "Ovr{sqlalchemy.engine.row.RowMapping.items}": [
    "Ovr{typing.Mapping.items}"
  ],
  "Ovr{sqlalchemy.engine.row.RowMapping.values}": [
    "Ovr{typing.Mapping.values}"
  ],
  "Ovr{sqlalchemy.ext.mutable.MutableDict.__setitem__}": [
    "Ovr{dict.__setitem__}"
  ],
  "Ovr{sqlalchemy.ext.mutable.MutableDict.pop}": [
    "Ovr{dict.pop}"
  ],
  "Ovr{sqlalchemy.ext.mutable.MutableList.__iadd__}": [
    "Ovr{list.__iadd__}"
  ],
  "Ovr{sqlalchemy.ext.mutable.MutableList.__setitem__}": [
    "Ovr{list.__setitem__}"
  ],
  "Ovr{sqlalchemy.ext.mutable.MutableList.append}": [
    "Ovr{list.append}"
  ],
  "Ovr{sqlalchemy.ext.mutable.MutableList.extend}": [
    "Ovr{list.extend}"
  ],
  "Ovr{sqlalchemy.ext.mutable.MutableList.insert}": [
    "Ovr{list.insert}"
  ],
  "Ovr{sqlalchemy.ext.mutable.MutableList.pop}": [
    "Ovr{list.pop}"
  ],
  "Ovr{sqlalchemy.ext.mutable.MutableList.remove}": [
    "Ovr{list.remove}"
  ],
  "Ovr{sqlalchemy.ext.mutable.MutableList.sort}": [
    "Ovr{list.sort}"
  ],
  "Ovr{sqlalchemy.ext.mutable.MutableSet.__ior__}": [
    "Ovr{set.__ior__}"
  ],
  "Ovr{sqlalchemy.ext.mutable.MutableSet.__isub__}": [
    "Ovr{set.__isub__}"
  ],
  "Ovr{sqlalchemy.ext.mutable.MutableSet.add}": [
    "Ovr{set.add}"
  ],
  "Ovr{sqlalchemy.ext.mutable.MutableSet.difference_update}": [
    "Ovr{set.difference_update}"
  ],
  "Ovr{sqlalchemy.ext.mutable.MutableSet.update}": [
    "Ovr{set.update}"
  ],
  "Ovr{sqlalchemy.ext.orderinglist.OrderingList.__setitem__}": [
    "Ovr{list.__setitem__}"
  ],
  "Ovr{sqlalchemy.ext.orderinglist.OrderingList.append}": [
    "Ovr{list.append}"
  ],
  "Ovr{sqlalchemy.ext.orderinglist.OrderingList.insert}": [
    "Ovr{list.insert}"
  ],
  "Ovr{sqlalchemy.ext.orderinglist.OrderingList.pop}": [
    "Ovr{list.pop}"
  ],
  "Ovr{sqlalchemy.ext.orderinglist.OrderingList.remove}": [
    "Ovr{list.remove}"
  ],
  "Ovr{sqlalchemy.sql.base._DialectArgDict.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{sqlalchemy.sql.base._DialectArgDict.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{sqlalchemy.sql.base._DialectArgView.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{sqlalchemy.sql.base._DialectArgView.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{sqlalchemy.sql.elements._anonymous_label.__add__}": [
    "Ovr{str.__add__}"
  ],
  "Ovr{sqlalchemy.testing.util.RandomSet.__iter__}": [
    "Ovr{set.__iter__}"
  ],
  "Ovr{sqlalchemy.testing.util.RandomSet.intersection}": [
    "Ovr{set.intersection}"
  ],
  "Ovr{sqlalchemy.testing.util.RandomSet.union}": [
    "Ovr{set.union}"
  ],
  "Ovr{sqlalchemy.util._collections.FacadeDict.copy}": [
    "Ovr{dict.copy}"
  ],
  "Ovr{sqlalchemy.util._collections.LRUCache.__getitem__}": [
    "Ovr{dict.__getitem__}"
  ],
  "Ovr{sqlalchemy.util._collections.LRUCache.__setitem__}": [
    "Ovr{dict.__setitem__}"
  ],
  "Ovr{sqlalchemy.util._collections.LRUCache.get}": [
    "Ovr{dict.get}"
  ],
  "Ovr{sqlalchemy.util._collections.LRUCache.values}": [
    "Ovr{dict.values}"
  ],
  "Ovr{sqlalchemy.util._collections.OrderedSet.__iter__}": [
    "Ovr{set.__iter__}"
  ],
  "Ovr{sqlalchemy.util._collections.OrderedSet.add}": [
    "Ovr{set.add}"
  ],
  "Ovr{sqlalchemy.util._collections.OrderedSet.difference_update}": [
    "Ovr{set.difference_update}"
  ],
  "Ovr{sqlalchemy.util._collections.OrderedSet.intersection}": [
    "Ovr{set.intersection}"
  ],
  "Ovr{sqlalchemy.util._collections.OrderedSet.union}": [
    "Ovr{set.union}"
  ],
  "Ovr{sqlalchemy.util._collections.OrderedSet.update}": [
    "Ovr{set.update}"
  ],
  "Ovr{sqlalchemy.util.langhelpers._hash_limit_string.__eq__}": [
    "Ovr{str.__eq__}"
  ],
  "Ovr{sqlite3.dbapi2.Cursor.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{sqlite3.dbapi2.Cursor.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{str.__add__}": [
    "asv_benchmarks.benchmarks.common.get_estimator_path",
    "benchmarks.bench_multilabel_metrics._tabulate",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_saga.plot",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "benchmarks.bench_text_vectorizers.$toplevel",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "build_tools.circle.list_versions.$toplevel",
    "build_tools.circle.list_versions.human_readable_data_quantity",
    "build_tools.generate_authors_table.generate_list",
    "build_tools.generate_authors_table.generate_table",
    "build_tools.get_comment.get_message",
    "build_tools.get_comment.get_step_message",
    "build_tools.update_environments_and_lock_files.get_package_with_constraint",
    "click._textwrap.TextWrapper.extra_indent",
    "click.core.Option.get_help_record._write_opts",
    "click.exceptions.MissingParameter.format_message",
    "click.termui._build_prompt",
    "click.utils.echo",
    "click.utils.make_default_short_help",
    "doc.conf.make_carousel_thumbs",
    "doc.sphinxext.doi_role.reference_role",
    "doc.tutorial.machine_learning_map.parse_path.CaselessPreservingLiteral.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.And.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.CaselessLiteral.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Each.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Forward.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Keyword.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Literal.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.NotAny.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.NotAny.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.OneOrMore.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Optional.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Or.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.streamline",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.runTests",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.setName",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.SkipTo.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.White.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ZeroOrMore.__str__",
    "doc.tutorial.machine_learning_map.pyparsing._defaultExceptionDebugAction",
    "doc.tutorial.machine_learning_map.pyparsing._defaultStartDebugAction",
    "doc.tutorial.machine_learning_map.pyparsing._defaultSuccessDebugAction",
    "doc.tutorial.machine_learning_map.pyparsing._makeTags",
    "doc.tutorial.machine_learning_map.pyparsing._ustr",
    "doc.tutorial.machine_learning_map.pyparsing._xml_escape",
    "doc.tutorial.machine_learning_map.pyparsing.countedArray",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousExpr",
    "doc.tutorial.machine_learning_map.pyparsing.matchPreviousLiteral",
    "doc.tutorial.machine_learning_map.pyparsing.nestedExpr",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.withAttribute.pa",
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "examples.applications.plot_out_of_core_classification.ReutersParser.handle_endtag",
    "examples.applications.plot_out_of_core_classification.ReutersParser.handle_starttag",
    "examples.applications.plot_out_of_core_classification.progress",
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects",
    "examples.classification.plot_lda.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_hdbscan.plot",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "examples.decomposition.plot_incremental_pca.$toplevel",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.linear_model.plot_bayesian_ridge_curvefit.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_sgd_early_stopping.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.preprocessing.plot_map_data_to_normal.$toplevel",
    "examples.svm.plot_linearsvc_support_vectors.$toplevel",
    "examples.text.plot_hashing_vs_dict_vectorizer.$toplevel",
    "jinja2.debug.fake_traceback",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.lexer.compile_rules",
    "jinja2.parser.Parser.parse_filter",
    "jinja2.parser.Parser.parse_test",
    "maint_tools.check_pxd_in_installation.$toplevel",
    "pip._vendor.pyparsing.Literal.__init__",
    "pip._vendor.pyparsing.ParseExpression.streamline",
    "pip._vendor.pyparsing.Regex.__init__",
    "pip._vendor.pyparsing._ustr",
    "sklearn.__check_build.raise_build_error",
    "sklearn._build_utils._check_cython_version",
    "sklearn._build_utils.pre_build_helpers.compile_test_program",
    "sklearn.base.BaseEstimator.__repr__",
    "sklearn.base.BaseEstimator._check_feature_names",
    "sklearn.base.BaseEstimator._check_feature_names.add_names",
    "sklearn.base._clone_parametrized",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._openml._get_data_info_by_name",
    "sklearn.datasets._openml._get_local_path",
    "sklearn.datasets._openml._open_openml_url",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized",
    "sklearn.decomposition._dict_learning.DictionaryLearning.fit_transform",
    "sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning._check_params",
    "sklearn.decomposition._dict_learning._check_warn_deprecated",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit",
    "sklearn.decomposition._sparse_pca.MiniBatchSparsePCA._fit",
    "sklearn.ensemble._gb.VerboseReporter.init",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._print_iteration_stats",
    "sklearn.externals._arff.ArffDecoder._decode",
    "sklearn.externals._arff.BadAttributeName.__init__",
    "sklearn.externals._arff.BadDataFormat.__init__",
    "sklearn.externals._arff.BadLayout.__init__",
    "sklearn.externals._arff.BadNominalFormatting.__init__",
    "sklearn.externals._arff.BadNominalValue.__init__",
    "sklearn.externals._arff._parse_values",
    "sklearn.externals._packaging.version.Version.$class_toplevel",
    "sklearn.externals._packaging.version._parse_version_parts",
    "sklearn.feature_extraction.text._VectorizerMixin._char_wb_ngrams",
    "sklearn.feature_selection._base._get_feature_importances",
    "sklearn.feature_selection._from_model._calculate_threshold",
    "sklearn.feature_selection._variance_threshold.VarianceThreshold.fit",
    "sklearn.gaussian_process.kernels.Exponentiation.get_params",
    "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters",
    "sklearn.gaussian_process.kernels.KernelOperator.get_params",
    "sklearn.gaussian_process.kernels.KernelOperator.hyperparameters",
    "sklearn.linear_model._base._deprecate_normalize",
    "sklearn.linear_model._glm._newton_solver.NewtonCholeskySolver.inner_solve",
    "sklearn.linear_model._quantile.QuantileRegressor.fit",
    "sklearn.metrics._classification._check_set_wise_labels",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.plot",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.plot",
    "sklearn.metrics._regression.mean_tweedie_deviance",
    "sklearn.model_selection._split._pprint",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._warn_or_raise_about_fit_failures",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.multiclass.OneVsRestClassifier.partial_fit",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.fit",
    "sklearn.svm._base.BaseLibSVM.fit",
    "sklearn.tree._export._BaseTreeExporter.node_to_str",
    "sklearn.tree._export._DOTTreeExporter.tail",
    "sklearn.tree._export.export_text._add_leaf",
    "sklearn.tree._export.export_text.print_tree_recurse",
    "sklearn.utils._metadata_requests.RequestMethod.__get__",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._format_items",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._format_params_or_dict_items",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._pprint_estimator",
    "sklearn.utils._response._get_response_values_binary",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.deprecation.deprecated._decorate_class",
    "sklearn.utils.deprecation.deprecated._decorate_fun",
    "sklearn.utils.estimator_checks._generate_sparse_matrix",
    "sklearn.utils.multiclass.type_of_target",
    "sklearn.utils.optimize._check_optimize_result",
    "sklearn.utils.validation._assert_all_finite_element_wise",
    "sklearn.utils.validation._num_features",
    "sklearn.utils.validation.check_symmetric",
    "testslide.strict_mock.UndefinedAttribute.__str__",
    "traitlets.traitlets._deprecated_method"
  ],
  "Ovr{str.__eq__}": [
    "benchmarks.bench_isolation_forest.$toplevel",
    "benchmarks.bench_lof.$toplevel",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "build_tools.azure.get_commit_message.get_commit_message",
    "build_tools.circle.list_versions.human_readable_data_quantity",
    "build_tools.update_environments_and_lock_files.check_conda_lock_version",
    "click._compat.is_ascii_encoding",
    "click._compat.open_stream",
    "click.core.Option._parse_decls",
    "click.exceptions.MissingParameter.format_message",
    "click.formatting.join_options",
    "click.formatting.wrap_text._flush_par",
    "click.parser.Argument.process",
    "click.parser.Option.process",
    "click.parser.OptionParser._process_args_for_options",
    "click.parser.split_opt",
    "click.shell_completion.FishComplete.get_completion_args",
    "click.shell_completion._resolve_incomplete",
    "click.shell_completion.shell_complete",
    "click.termui.confirm",
    "click.types.StringParamType.convert",
    "click.utils.LazyFile.__init__",
    "click.utils._detect_program_name",
    "click.utils.make_default_short_help",
    "doc.conf.SubSectionTitleOrder.__call__",
    "doc.conftest.setup_loading_other_datasets",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.pop",
    "doc.tutorial.text_analytics.data.movie_reviews.fetch_data.$toplevel",
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_kernel_ridge_regression.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.preprocess_dataset",
    "examples.model_selection.plot_multi_metric_evaluation.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.preprocessing.plot_discretization_classification.get_name",
    "jinja2.debug.fake_traceback",
    "jinja2.ext.InternationalizationExtension._make_node",
    "jinja2.ext.InternationalizationExtension.parse",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.lexer.Lexer.wrap",
    "jinja2.lexer.describe_token",
    "jinja2.nodes.Getattr.as_const",
    "jinja2.nodes.Getitem.as_const",
    "jinja2.sandbox.is_internal_attribute",
    "packaging.version._parse_letter_version",
    "pip._vendor.packaging.version._parse_letter_version",
    "setup.CleanCommand.run",
    "setup.configure_extension_modules",
    "sklearn.__check_build.raise_build_error",
    "sklearn._min_dependencies.$toplevel",
    "sklearn.conftest._fetch_fixture",
    "sklearn.conftest._fetch_fixture.wrapped",
    "sklearn.conftest.pytest_collection_modifyitems",
    "sklearn.conftest.raccoon_face_or_skip",
    "sklearn.cross_decomposition._pls._PLS.fit",
    "sklearn.datasets._openml._download_data_to_bunch",
    "sklearn.datasets._openml._get_data_info_by_name",
    "sklearn.datasets._openml._load_arff_response",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._samples_generator.make_multilabel_classification",
    "sklearn.discriminant_analysis._cov",
    "sklearn.ensemble._gb.BaseGradientBoosting._check_params",
    "sklearn.externals._arff.ArffDecoder._decode",
    "sklearn.externals._packaging.version._legacy_cmpkey",
    "sklearn.externals._packaging.version._parse_letter_version",
    "sklearn.feature_selection._base._get_feature_importances",
    "sklearn.feature_selection._from_model._calculate_threshold",
    "sklearn.feature_selection._mutual_info._estimate_mi",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_one_way_partial_dependence",
    "sklearn.linear_model._base._deprecate_normalize",
    "sklearn.linear_model._coordinate_descent._set_order",
    "sklearn.linear_model._coordinate_descent.enet_path",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._ridge._BaseRidge.fit",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.manifold._locally_linear.locally_linear_embedding",
    "sklearn.manifold._spectral_embedding.spectral_embedding",
    "sklearn.metrics._base._average_binary_score",
    "sklearn.metrics._classification._check_targets",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.plot",
    "sklearn.metrics._ranking._multiclass_roc_auc_score",
    "sklearn.metrics._ranking.top_k_accuracy_score",
    "sklearn.metrics._regression._assemble_r2_explained_variance",
    "sklearn.metrics._regression.d2_pinball_score",
    "sklearn.metrics._regression.mean_absolute_error",
    "sklearn.metrics._regression.mean_absolute_percentage_error",
    "sklearn.metrics._regression.mean_squared_error",
    "sklearn.metrics._regression.median_absolute_error",
    "sklearn.model_selection._plot._BaseCurveDisplay._plot_curve",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.neighbors._kde.KernelDensity.fit",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._initialize",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._polynomial.SplineTransformer.transform",
    "sklearn.svm._base.BaseLibSVM.fit",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.tests.random_seed.pytest_report_header",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.utils.$toplevel",
    "sklearn.utils._array_api._ArrayAPIWrapper.take",
    "sklearn.utils._array_api._isdtype_single",
    "sklearn.utils._response._get_response_values",
    "sklearn.utils._testing.assert_run_python_script",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.estimator_checks._enforce_estimator_tags_X",
    "sklearn.utils.estimator_checks._set_checking_parameters",
    "sklearn.utils.estimator_checks._yield_checks",
    "sklearn.utils.estimator_checks._yield_regressor_checks",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_estimators_data_not_an_array",
    "sklearn.utils.estimator_checks.check_fit_score_takes_y",
    "sklearn.utils.estimator_checks.check_global_ouptut_transform_pandas",
    "sklearn.utils.estimator_checks.check_n_features_in_after_fitting",
    "sklearn.utils.estimator_checks.check_set_output_transform_pandas",
    "sklearn.utils.tests.test_pprint.test_bruteforce_ellipsis",
    "sklearn.utils.tests.test_pprint.test_gridsearch_pipeline",
    "sklearn.utils.tests.test_pprint.test_kwargs_in_init",
    "sklearn.utils.tests.test_pprint.test_n_max_elements_to_show",
    "sklearn.utils.validation.check_array",
    "sklearn.utils.validation.check_scalar",
    "traitlets.traitlets._should_warn"
  ],
  "Ovr{str.__getitem__}": [
    "Ovr{typing.Sequence.__getitem__}"
  ],
  "Ovr{str.__iter__}": [
    "Ovr{typing.Sequence.__iter__}"
  ],
  "Ovr{str.__lt__}": [
    "sklearn.externals._packaging.version._legacy_cmpkey"
  ],
  "Ovr{str.__mod__}": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_feature_expansions.$toplevel",
    "benchmarks.bench_glm.$toplevel",
    "benchmarks.bench_glmnet.$toplevel",
    "benchmarks.bench_glmnet.bench",
    "benchmarks.bench_hist_gradient_boosting.one_run",
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel",
    "benchmarks.bench_isolation_forest.$toplevel",
    "benchmarks.bench_isolation_forest.print_outlier_ratio",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "benchmarks.bench_lasso.$toplevel",
    "benchmarks.bench_lasso.compute_bench",
    "benchmarks.bench_lof.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_multilabel_metrics.$toplevel",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_online_ocsvm.autolabel_auc",
    "benchmarks.bench_online_ocsvm.autolabel_time",
    "benchmarks.bench_online_ocsvm.print_outlier_ratio",
    "benchmarks.bench_plot_fastkmeans.compute_bench",
    "benchmarks.bench_plot_fastkmeans.compute_bench_2",
    "benchmarks.bench_plot_hierarchical.$toplevel",
    "benchmarks.bench_plot_hierarchical.compute_bench",
    "benchmarks.bench_plot_incremental_pca.benchmark",
    "benchmarks.bench_plot_incremental_pca.plot_batch_errors",
    "benchmarks.bench_plot_incremental_pca.plot_batch_times",
    "benchmarks.bench_plot_incremental_pca.plot_feature_errors",
    "benchmarks.bench_plot_incremental_pca.plot_feature_times",
    "benchmarks.bench_plot_lasso_path.compute_bench",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_plot_neighbors.get_data",
    "benchmarks.bench_plot_nmf._PGNMF._fit_transform",
    "benchmarks.bench_plot_nmf.plot_results",
    "benchmarks.bench_plot_nmf.run_bench",
    "benchmarks.bench_plot_omp_lars.compute_bench",
    "benchmarks.bench_plot_parallel_pairwise.plot",
    "benchmarks.bench_plot_randomized_svd.$toplevel",
    "benchmarks.bench_plot_randomized_svd.bench_a",
    "benchmarks.bench_plot_randomized_svd.bench_b",
    "benchmarks.bench_plot_randomized_svd.bench_c",
    "benchmarks.bench_plot_randomized_svd.get_data",
    "benchmarks.bench_plot_randomized_svd.handle_missing_dataset",
    "benchmarks.bench_plot_randomized_svd.norm_diff",
    "benchmarks.bench_plot_svd.compute_bench",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_random_projections.print_row",
    "benchmarks.bench_rcv1_logreg_convergence.$toplevel",
    "benchmarks.bench_rcv1_logreg_convergence.bench",
    "benchmarks.bench_rcv1_logreg_convergence.get_loss",
    "benchmarks.bench_saga.$toplevel",
    "benchmarks.bench_saga.fit_single",
    "benchmarks.bench_saga.plot",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "benchmarks.bench_sgd_regression.$toplevel",
    "benchmarks.bench_sparsify.$toplevel",
    "benchmarks.bench_sparsify.score",
    "benchmarks.bench_tree.$toplevel",
    "build_tools.circle.list_versions.$toplevel",
    "build_tools.circle.list_versions.get_file_size",
    "build_tools.circle.list_versions.human_readable_data_quantity",
    "build_tools.generate_authors_table.generate_list",
    "build_tools.generate_authors_table.generate_table",
    "build_tools.generate_authors_table.get_profile",
    "click.shell_completion.ShellComplete.source",
    "doc.conf.SubSectionTitleOrder.__repr__",
    "doc.tutorial.machine_learning_map.parse_path.CaselessPreservingLiteral.__init__",
    "doc.tutorial.machine_learning_map.parse_path.convertToFloat",
    "doc.tutorial.machine_learning_map.pyparsing.CaselessLiteral.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.CharsNotIn.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.CloseMatch.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Keyword.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Literal.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseBaseException.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseElementEnhance.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__repr__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.dump",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.pop",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__add__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__and__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__or__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__radd__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rand__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__ror__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rsub__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__rxor__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__sub__",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__xor__",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.RecursiveGrammarException.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Regex.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__str__",
    "doc.tutorial.machine_learning_map.pyparsing._defaultStartDebugAction",
    "doc.tutorial.machine_learning_map.pyparsing._makeTags",
    "doc.tutorial.machine_learning_map.pyparsing.infixNotation",
    "doc.tutorial.machine_learning_map.pyparsing.matchOnlyAtCol.verifyCol",
    "doc.tutorial.machine_learning_map.pyparsing.nestedExpr",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "doc.tutorial.machine_learning_map.pyparsing.traceParseAction.z",
    "doc.tutorial.machine_learning_map.pyparsing.withAttribute.pa",
    "doc.tutorial.machine_learning_map.pyparsing.withClass",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "doc.tutorial.text_analytics.data.movie_reviews.fetch_data.$toplevel",
    "doc.tutorial.text_analytics.skeletons.exercise_01_language_train_model.$toplevel",
    "doc.tutorial.text_analytics.skeletons.exercise_02_sentiment.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_01_language_train_model.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_02_sentiment.$toplevel",
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel",
    "examples.applications.plot_face_recognition.$toplevel",
    "examples.applications.plot_face_recognition.title",
    "examples.applications.plot_model_complexity_influence.benchmark_influence",
    "examples.applications.plot_model_complexity_influence.plot_influence",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_out_of_core_classification.autolabel",
    "examples.applications.plot_out_of_core_classification.plot_accuracy",
    "examples.applications.plot_out_of_core_classification.progress",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents.progress",
    "examples.applications.plot_prediction_latency.benchmark",
    "examples.applications.plot_prediction_latency.boxplot_runtimes",
    "examples.applications.plot_prediction_latency.n_feature_influence",
    "examples.applications.plot_prediction_latency.plot_benchmark_throughput",
    "examples.applications.plot_prediction_latency.plot_n_features_influence",
    "examples.applications.plot_species_distribution_modeling.create_species_bunch",
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.applications.plot_topics_extraction_with_nmf_lda.$toplevel",
    "examples.applications.svm_gui.View.update_example",
    "examples.applications.wikipedia_principal_eigenvector.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.centrality_scores",
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.applications.wikipedia_principal_eigenvector.get_redirects",
    "examples.calibration.plot_calibration.$toplevel",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.classification.plot_digits_classification.$toplevel",
    "examples.cluster.plot_affinity_propagation.$toplevel",
    "examples.cluster.plot_agglomerative_clustering.$toplevel",
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel",
    "examples.cluster.plot_birch_vs_minibatchkmeans.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_coin_segmentation.$toplevel",
    "examples.cluster.plot_dbscan.$toplevel",
    "examples.cluster.plot_dict_face_patches.$toplevel",
    "examples.cluster.plot_digits_linkage.$toplevel",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.cluster.plot_mean_shift.$toplevel",
    "examples.cluster.plot_mini_batch_kmeans.$toplevel",
    "examples.compose.plot_column_transformer_mixed_types.$toplevel",
    "examples.compose.plot_digits_pipe.$toplevel",
    "examples.covariance.plot_sparse_cov.$toplevel",
    "examples.cross_decomposition.plot_compare_cross_decomposition.$toplevel",
    "examples.datasets.plot_random_multilabel_dataset.$toplevel",
    "examples.decomposition.plot_faces_decomposition.$toplevel",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "examples.decomposition.plot_image_denoising.show_with_diff",
    "examples.decomposition.plot_incremental_pca.$toplevel",
    "examples.decomposition.plot_pca_vs_fa_model_selection.$toplevel",
    "examples.decomposition.plot_pca_vs_lda.$toplevel",
    "examples.decomposition.plot_sparse_coding.$toplevel",
    "examples.decomposition.plot_varimax_fa.$toplevel",
    "examples.ensemble.plot_adaboost_twoclass.$toplevel",
    "examples.ensemble.plot_gradient_boosting_early_stopping.autolabel",
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.ensemble.plot_random_forest_embedding.$toplevel",
    "examples.ensemble.plot_random_forest_regression_multioutput.$toplevel",
    "examples.exercises.plot_cv_digits.$toplevel",
    "examples.exercises.plot_digits_classification_exercise.$toplevel",
    "examples.gaussian_process.plot_gpc.$toplevel",
    "examples.gaussian_process.plot_gpc_iris.$toplevel",
    "examples.gaussian_process.plot_gpc_isoprobability.$toplevel",
    "examples.gaussian_process.plot_gpc_xor.$toplevel",
    "examples.linear_model.plot_huber_vs_ridge.$toplevel",
    "examples.linear_model.plot_logistic_l1_l2_sparsity.$toplevel",
    "examples.linear_model.plot_logistic_multinomial.$toplevel",
    "examples.linear_model.plot_ols.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.score_estimator",
    "examples.linear_model.plot_robust_fit.$toplevel",
    "examples.linear_model.plot_sgd_comparison.$toplevel",
    "examples.linear_model.plot_sgdocsvm_vs_ocsvm.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_20newsgroups.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_mnist.$toplevel",
    "examples.linear_model.plot_theilsen.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.manifold.plot_manifold_sphere.$toplevel",
    "examples.manifold.plot_t_sne_perplexity.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_isotonic_regression.$toplevel",
    "examples.miscellaneous.plot_johnson_lindenstrauss_bound.$toplevel",
    "examples.miscellaneous.plot_kernel_ridge_regression.$toplevel",
    "examples.mixture.plot_concentration_prior.$toplevel",
    "examples.mixture.plot_concentration_prior.plot_results",
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.mixture.plot_gmm_init.$toplevel",
    "examples.model_selection.plot_grid_search_refit_callable.$toplevel",
    "examples.model_selection.plot_multi_metric_evaluation.$toplevel",
    "examples.model_selection.plot_randomized_search.$toplevel",
    "examples.model_selection.plot_roc_crossval.$toplevel",
    "examples.model_selection.plot_train_error_vs_test_error.$toplevel",
    "examples.neighbors.plot_classification.$toplevel",
    "examples.neighbors.plot_kde_1d.format_func",
    "examples.neighbors.plot_lof_novelty_detection.$toplevel",
    "examples.neighbors.plot_lof_outlier_detection.$toplevel",
    "examples.neighbors.plot_nearest_centroid.$toplevel",
    "examples.neighbors.plot_regression.$toplevel",
    "examples.neural_networks.plot_mlp_training_curves.plot_on_dataset",
    "examples.neural_networks.plot_mnist_filters.$toplevel",
    "examples.neural_networks.plot_rbm_logistic_classification.$toplevel",
    "examples.preprocessing.plot_discretization_strategies.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.eval_and_print_metrics",
    "examples.svm.plot_oneclass.$toplevel",
    "examples.svm.plot_rbf_parameters.$toplevel",
    "graphql.pyutils.enum.EnumMeta.__repr__",
    "importlib_metadata.EntryPoints.__repr__",
    "libcst._parser.parso.python.tokenize.PythonToken.__repr__",
    "maint_tools.sort_whats_new.$toplevel",
    "parso.python.tokenize.PythonToken.__repr__",
    "pip._vendor.distlib.compat.OrderedDict.__init__",
    "pip._vendor.distlib.compat.OrderedDict.__repr__",
    "pip._vendor.distlib.compat.OrderedDict.update",
    "pip._vendor.distlib.metadata.LegacyMetadata.__repr__",
    "pip._vendor.pkg_resources.Distribution.__repr__",
    "pip._vendor.pkg_resources.Distribution.__str__",
    "pip._vendor.pyparsing.Literal.__init__",
    "pip._vendor.pyparsing.ParseResults.__repr__",
    "pip._vendor.pyparsing.Regex.__init__",
    "pip._vendor.requests.cookies.RequestsCookieJar._find_no_duplicates",
    "pip._vendor.requests.cookies.create_cookie",
    "pip._vendor.requests.cookies.morsel_to_cookie",
    "pip._vendor.requests.models.Response.__repr__",
    "pip._vendor.requests.structures.LookupDict.__repr__",
    "pip._vendor.tenacity.BaseRetrying.__repr__",
    "pip._vendor.urllib3._collections.HTTPHeaderDict.__repr__",
    "prompt_toolkit.formatted_text.base.FormattedText.__repr__",
    "setup.build_ext_subclass.finalize_options",
    "setup.setup_package",
    "sklearn.__check_build.raise_build_error",
    "sklearn.base.BaseEstimator.__repr__",
    "sklearn.base.BaseEstimator._get_param_names",
    "sklearn.base._clone_parametrized",
    "sklearn.cluster._affinity_propagation._affinity_propagation",
    "sklearn.cluster._agglomerative._fix_connectivity",
    "sklearn.cluster._agglomerative._hc_cut",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.cluster._birch.Birch._global_clustering",
    "sklearn.cluster._mean_shift.MeanShift.fit",
    "sklearn.cluster._mean_shift.get_bin_seeds",
    "sklearn.cluster._optics.OPTICS.fit",
    "sklearn.cluster._optics._validate_size",
    "sklearn.compose._column_transformer.ColumnTransformer._log_message",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_transformers",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.covariance._graph_lasso.graphical_lasso_path",
    "sklearn.covariance._robust_covariance._c_step",
    "sklearn.covariance._robust_covariance.select_candidates",
    "sklearn.datasets._base.load_sample_image",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._lfw._check_fetch_lfw",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._lfw._fetch_lfw_people",
    "sklearn.datasets._lfw._load_imgs",
    "sklearn.datasets._lfw.fetch_lfw_pairs",
    "sklearn.datasets._olivetti_faces.fetch_olivetti_faces",
    "sklearn.datasets._openml._verify_target_data_type",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._species_distributions.fetch_species_distributions",
    "sklearn.datasets._svmlight_format_io._dump_svmlight",
    "sklearn.datasets._svmlight_format_io._gen_open",
    "sklearn.datasets._svmlight_format_io.dump_svmlight_file",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit",
    "sklearn.decomposition._fastica.FastICA._fit_transform",
    "sklearn.decomposition._incremental_pca.IncrementalPCA.partial_fit",
    "sklearn.decomposition._lda.LatentDirichletAllocation.fit",
    "sklearn.decomposition._lda.LatentDirichletAllocation.partial_fit",
    "sklearn.decomposition._nmf.NMF._fit_transform",
    "sklearn.decomposition._nmf._fit_multiplicative_update",
    "sklearn.decomposition._nmf._initialize_nmf",
    "sklearn.decomposition._pca.PCA._fit_full",
    "sklearn.decomposition._pca.PCA._fit_truncated",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit",
    "sklearn.discriminant_analysis._cov",
    "sklearn.dummy.DummyClassifier.fit",
    "sklearn.dummy.DummyRegressor.fit",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._bagging._parallel_build_estimators",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._forest.ForestClassifier._validate_y_class_weight",
    "sklearn.ensemble._forest._parallel_build_trees",
    "sklearn.ensemble._gb.BaseGradientBoosting._compute_partial_dependence_recursion",
    "sklearn.ensemble._gb.BaseGradientBoosting._resize_state",
    "sklearn.ensemble._gb.BaseGradientBoosting.fit",
    "sklearn.ensemble._gb.GradientBoostingClassifier._validate_y",
    "sklearn.ensemble._gb.GradientBoostingClassifier.predict_proba",
    "sklearn.ensemble._gb.GradientBoostingClassifier.staged_predict_proba",
    "sklearn.ensemble._gb.VerboseReporter.init",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._iforest.IsolationForest.fit",
    "sklearn.externals._arff.$toplevel",
    "sklearn.externals._arff.ArffEncoder._encode_attribute",
    "sklearn.externals._arff.ArffEncoder._encode_comment",
    "sklearn.externals._arff.ArffEncoder._encode_relation",
    "sklearn.externals._arff.ArffEncoder.iter_encode",
    "sklearn.externals._arff.ArffException.__str__",
    "sklearn.externals._arff.BadAttributeName.__init__",
    "sklearn.externals._arff.BadDataFormat.__init__",
    "sklearn.externals._arff.BadNominalFormatting.__init__",
    "sklearn.externals._arff.BadNominalValue.__init__",
    "sklearn.externals._arff.BadObject.__str__",
    "sklearn.externals._arff.COOData.encode_data",
    "sklearn.externals._arff.DenseGeneratorData.encode_data",
    "sklearn.externals._arff.LODGeneratorData.encode_data",
    "sklearn.externals._arff._build_re_values",
    "sklearn.externals._arff._escape_sub_callback",
    "sklearn.externals._arff._get_data_object_for_decoding",
    "sklearn.externals._arff._parse_values",
    "sklearn.externals._arff.encode_string",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._add_iterable_element",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer._transform",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.fit",
    "sklearn.feature_extraction.image._compute_n_patches",
    "sklearn.feature_extraction.text.TfidfVectorizer.idf_@setter",
    "sklearn.feature_extraction.text._VectorizerMixin._check_stop_words_consistency",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_ngram_range",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.feature_extraction.text._VectorizerMixin.build_analyzer",
    "sklearn.feature_extraction.text._VectorizerMixin.build_preprocessor",
    "sklearn.feature_extraction.text._check_stop_list",
    "sklearn.feature_selection._from_model._calculate_threshold",
    "sklearn.feature_selection._rfe.RFE._fit",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.fit",
    "sklearn.gaussian_process._gpc.GaussianProcessClassifier.log_marginal_likelihood",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace._constrained_optimization",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process.kernels.Hyperparameter.__new__",
    "sklearn.gaussian_process.kernels.Kernel._check_bounds_params",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.gaussian_process.kernels.Kernel.set_params",
    "sklearn.gaussian_process.kernels.Kernel.theta@setter",
    "sklearn.gaussian_process.kernels._check_length_scale",
    "sklearn.impute._base.SimpleImputer.transform",
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.impute._iterative.IterativeImputer.transform",
    "sklearn.linear_model._bayes.ARDRegression.fit",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.fit",
    "sklearn.linear_model._coordinate_descent.enet_path",
    "sklearn.linear_model._huber.HuberRegressor.fit",
    "sklearn.linear_model._least_angle.LarsCV.fit",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._logistic._check_multi_class",
    "sklearn.linear_model._logistic._check_solver",
    "sklearn.linear_model._logistic._log_reg_scoring_path",
    "sklearn.linear_model._logistic._logistic_regression_path",
    "sklearn.linear_model._ransac.RANSACRegressor.fit",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.linear_model._ridge._solve_sparse_cg",
    "sklearn.linear_model._sag.get_auto_step_size",
    "sklearn.linear_model._stochastic_gradient.BaseSGD._make_validation_split",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier._partial_fit",
    "sklearn.linear_model._stochastic_gradient.SGDClassifier._check_proba",
    "sklearn.linear_model._stochastic_gradient.SGDClassifier.predict_proba",
    "sklearn.linear_model._stochastic_gradient.SGDOneClassSVM._partial_fit",
    "sklearn.manifold._locally_linear.locally_linear_embedding",
    "sklearn.manifold._locally_linear.null_space",
    "sklearn.manifold._mds._smacof_single",
    "sklearn.manifold._mds.smacof",
    "sklearn.manifold._spectral_embedding.spectral_embedding",
    "sklearn.manifold._t_sne.TSNE._tsne",
    "sklearn.manifold._t_sne._gradient_descent",
    "sklearn.metrics._classification._check_set_wise_labels",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._classification.confusion_matrix",
    "sklearn.metrics._classification.matthews_corrcoef",
    "sklearn.metrics._classification.multilabel_confusion_matrix",
    "sklearn.metrics._ranking._binary_roc_auc_score",
    "sklearn.metrics._ranking.auc",
    "sklearn.metrics._regression._check_reg_targets",
    "sklearn.metrics._scorer._BaseScorer.__repr__",
    "sklearn.metrics._scorer.check_scoring",
    "sklearn.metrics._scorer.get_scorer",
    "sklearn.metrics.cluster._supervised.check_clusterings",
    "sklearn.metrics.cluster._unsupervised.check_number_of_labels",
    "sklearn.metrics.pairwise._check_chunk_size",
    "sklearn.metrics.pairwise.check_paired_arrays",
    "sklearn.metrics.pairwise.check_pairwise_arrays",
    "sklearn.metrics.pairwise.manhattan_distances",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.mixture._base.BaseMixture._print_verbose_msg_init_beg",
    "sklearn.mixture._base.BaseMixture._print_verbose_msg_init_end",
    "sklearn.mixture._base.BaseMixture._print_verbose_msg_iter_end",
    "sklearn.mixture._base.BaseMixture.fit_predict",
    "sklearn.mixture._base.BaseMixture.sample",
    "sklearn.mixture._base._check_shape",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._check_precision_parameters",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._checkcovariance_prior_parameter",
    "sklearn.mixture._gaussian_mixture._check_precision_matrix",
    "sklearn.mixture._gaussian_mixture._check_precision_positivity",
    "sklearn.mixture._gaussian_mixture._check_precisions",
    "sklearn.mixture._gaussian_mixture._check_weights",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.model_selection._search.BaseSearchCV._format_results._store",
    "sklearn.model_selection._search.BaseSearchCV.score",
    "sklearn.model_selection._search.ParameterSampler.__iter__",
    "sklearn.model_selection._split.GroupKFold._iter_test_indices",
    "sklearn.model_selection._split.LeaveOneGroupOut._iter_test_masks",
    "sklearn.model_selection._split.LeavePGroupsOut._iter_test_masks",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.model_selection._split.StratifiedKFold._make_test_folds",
    "sklearn.model_selection._split.StratifiedShuffleSplit._iter_indices",
    "sklearn.model_selection._split._BaseKFold.__init__",
    "sklearn.model_selection._split._build_repr",
    "sklearn.model_selection._split._pprint",
    "sklearn.model_selection._split._validate_shuffle_split",
    "sklearn.model_selection._split.check_cv",
    "sklearn.model_selection._validation._score",
    "sklearn.model_selection._validation._translate_train_sizes",
    "sklearn.model_selection._validation.cross_validate",
    "sklearn.multiclass.OneVsRestClassifier.fit",
    "sklearn.multiclass._fit_binary",
    "sklearn.naive_bayes.BernoulliNB._joint_log_likelihood",
    "sklearn.naive_bayes.GaussianNB._partial_fit",
    "sklearn.naive_bayes._BaseDiscreteNB.partial_fit",
    "sklearn.neighbors._base.KNeighborsMixin.kneighbors",
    "sklearn.neighbors._base.NeighborsBase._check_algorithm_metric",
    "sklearn.neighbors._base.NeighborsBase._fit",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors",
    "sklearn.neighbors._base._kneighbors_from_graph",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba",
    "sklearn.neighbors._graph._check_params",
    "sklearn.neighbors._lof.LocalOutlierFactor.fit",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.fit",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._check_solver",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._update_no_improvement_count",
    "sklearn.neural_network._rbm.BernoulliRBM.fit",
    "sklearn.neural_network._stochastic_optimizers.SGDOptimizer.trigger_stopping",
    "sklearn.pipeline.FeatureUnion._log_message",
    "sklearn.pipeline.FeatureUnion._validate_transformers",
    "sklearn.pipeline.FeatureUnion.get_feature_names_out",
    "sklearn.pipeline.Pipeline._log_message",
    "sklearn.pipeline.Pipeline._validate_steps",
    "sklearn.pipeline._name_estimators",
    "sklearn.preprocessing._data.MinMaxScaler.partial_fit",
    "sklearn.preprocessing._data.QuantileTransformer.fit",
    "sklearn.preprocessing._data.RobustScaler.fit",
    "sklearn.preprocessing._data.scale",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit",
    "sklearn.preprocessing._label.LabelBinarizer.fit",
    "sklearn.preprocessing._label.LabelEncoder.inverse_transform",
    "sklearn.preprocessing._label.label_binarize",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.get_feature_names_out",
    "sklearn.random_projection.BaseRandomProjection.fit",
    "sklearn.random_projection._check_density",
    "sklearn.random_projection._check_input_size",
    "sklearn.random_projection.johnson_lindenstrauss_min_dim",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.fit",
    "sklearn.setup_module",
    "sklearn.svm._base.BaseLibSVM.__init__",
    "sklearn.svm._base.BaseLibSVM._dense_predict",
    "sklearn.svm._base.BaseLibSVM._validate_for_predict",
    "sklearn.svm._base.BaseLibSVM._warn_from_fit_status",
    "sklearn.svm._base.BaseLibSVM.fit",
    "sklearn.svm._base.BaseSVC._validate_targets",
    "sklearn.svm._base._fit_liblinear",
    "sklearn.svm._base._get_liblinear_solver_type",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._export._BaseTreeExporter.get_color",
    "sklearn.tree._export._BaseTreeExporter.node_to_str",
    "sklearn.tree._export._DOTTreeExporter.export",
    "sklearn.tree._export._DOTTreeExporter.head",
    "sklearn.tree._export._DOTTreeExporter.recurse",
    "sklearn.tree._export.export_text",
    "sklearn.tree._export.export_text.print_tree_recurse",
    "sklearn.tree._reingold_tilford.DrawTree.__str__",
    "sklearn.utils._message_with_time",
    "sklearn.utils._pprint._safe_repr",
    "sklearn.utils._testing._IgnoreWarnings.__enter__",
    "sklearn.utils._testing._IgnoreWarnings.__exit__",
    "sklearn.utils._testing._IgnoreWarnings.__repr__",
    "sklearn.utils._testing._delete_folder",
    "sklearn.utils._testing.assert_no_warnings",
    "sklearn.utils._testing.assert_raise_message",
    "sklearn.utils._testing.assert_run_python_script",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.deprecation.deprecated._decorate_class",
    "sklearn.utils.deprecation.deprecated._decorate_fun",
    "sklearn.utils.estimator_checks._check_transformer",
    "sklearn.utils.estimator_checks.check_class_weight_balanced_linear_classifier",
    "sklearn.utils.estimator_checks.check_classifiers_predictions",
    "sklearn.utils.estimator_checks.check_dict_unchanged",
    "sklearn.utils.estimator_checks.check_dont_overwrite_parameters",
    "sklearn.utils.estimator_checks.check_estimators_overwrite_params",
    "sklearn.utils.estimator_checks.check_fit_score_takes_y",
    "sklearn.utils.estimator_checks.check_no_attributes_set_in_init",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.estimator_checks.check_supervised_y_2d",
    "sklearn.utils.extmath._randomized_eigsh",
    "sklearn.utils.get_chunk_n_rows",
    "sklearn.utils.graph._fix_connected_components",
    "sklearn.utils.metaestimators._BaseComposition._get_params",
    "sklearn.utils.multiclass._check_partial_fit_first_call",
    "sklearn.utils.multiclass.type_of_target",
    "sklearn.utils.multiclass.unique_labels",
    "sklearn.utils.random._random_choice_csc",
    "sklearn.utils.resample",
    "sklearn.utils.sparsefuncs._raise_error_wrong_axis",
    "sklearn.utils.sparsefuncs._raise_typeerror",
    "sklearn.utils.sparsefuncs.csc_median_axis_0",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator",
    "sklearn.utils.validation._check_psd_eigenvalues",
    "sklearn.utils.validation._ensure_sparse_format",
    "sklearn.utils.validation._num_samples",
    "sklearn.utils.validation.check_array",
    "sklearn.utils.validation.check_consistent_length",
    "sklearn.utils.validation.check_is_fitted",
    "sklearn.utils.validation.check_non_negative",
    "sklearn.utils.validation.check_random_state",
    "traitlets.config.loader.Config.__setitem__",
    "traitlets.traitlets.HasTraits._notify_observers",
    "traitlets.traitlets._deprecated_method",
    "traitlets.utils.getargspec.getargspec"
  ],
  "Ovr{str.__mul__}": [
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_multilabel_metrics._tabulate",
    "benchmarks.bench_plot_nmf.run_bench",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "benchmarks.bench_text_vectorizers.$toplevel",
    "build_tools.circle.list_versions.$toplevel",
    "click.formatting.HelpFormatter.write_dl",
    "click.formatting.HelpFormatter.write_text",
    "click.formatting.HelpFormatter.write_usage",
    "click.formatting.wrap_text",
    "doc.conf.generate_min_dependency_table",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.dump",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.runTests",
    "doc.tutorial.machine_learning_map.pyparsing.pyparsing_common.$class_toplevel",
    "examples.applications.plot_species_distribution_modeling.plot_species_distribution",
    "examples.applications.plot_topics_extraction_with_nmf_lda.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.semi_supervised.plot_semi_supervised_newsgroups.eval_and_print_metrics",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.benchmark",
    "jinja2.debug.fake_traceback",
    "maint_tools.sort_whats_new.$toplevel",
    "sklearn.ensemble._gb.VerboseReporter.init",
    "sklearn.metrics._classification.classification_report",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._warn_or_raise_about_fit_failures",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._loss_grad_lbfgs",
    "sklearn.tree._export.export_text.print_tree_recurse",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._format_items",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._format_params_or_dict_items",
    "sklearn.utils.tests.test_murmurhash.test_no_collision_on_byte_range"
  ],
  "Ovr{str.__ne__}": [
    "benchmarks.bench_isolation_forest.$toplevel",
    "benchmarks.bench_lof.$toplevel",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "build_tools.azure.get_commit_message.get_commit_message",
    "build_tools.circle.list_versions.human_readable_data_quantity",
    "build_tools.update_environments_and_lock_files.check_conda_lock_version",
    "click._compat.open_stream",
    "click.core.Option._parse_decls",
    "click.exceptions.MissingParameter.format_message",
    "click.formatting.join_options",
    "click.formatting.wrap_text._flush_par",
    "click.parser.Argument.process",
    "click.parser.Option.process",
    "click.parser.OptionParser._process_args_for_options",
    "click.parser.split_opt",
    "click.shell_completion.FishComplete.get_completion_args",
    "click.shell_completion._resolve_incomplete",
    "click.shell_completion.shell_complete",
    "click.termui.confirm",
    "click.types.StringParamType.convert",
    "click.utils.LazyFile.__init__",
    "click.utils._detect_program_name",
    "click.utils.make_default_short_help",
    "doc.conf.SubSectionTitleOrder.__call__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.pop",
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_outlier_detection_bench.preprocess_dataset",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.preprocessing.plot_discretization_classification.get_name",
    "jinja2.debug.fake_traceback",
    "jinja2.environment._environment_config_check",
    "jinja2.ext.InternationalizationExtension._make_node",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.lexer.Lexer.wrap",
    "jinja2.lexer.describe_token",
    "jinja2.nodes.Getattr.as_const",
    "jinja2.nodes.Getitem.as_const",
    "jinja2.sandbox.is_internal_attribute",
    "packaging.version._parse_letter_version",
    "pip._vendor.packaging.version._parse_letter_version",
    "setup.CleanCommand.run",
    "setup.configure_extension_modules",
    "sklearn.__check_build.raise_build_error",
    "sklearn._build_utils.cythonize_extensions",
    "sklearn._min_dependencies.$toplevel",
    "sklearn.base.BaseEstimator._get_param_names",
    "sklearn.conftest.$toplevel",
    "sklearn.conftest._fetch_fixture.wrapped",
    "sklearn.conftest.pytest_collection_modifyitems",
    "sklearn.cross_decomposition._pls._PLS.fit",
    "sklearn.datasets._openml._download_data_to_bunch",
    "sklearn.datasets._openml._get_data_info_by_name",
    "sklearn.datasets._openml._load_arff_response",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.discriminant_analysis._cov",
    "sklearn.ensemble._gb.BaseGradientBoosting._check_params",
    "sklearn.externals._arff.ArffDecoder._decode",
    "sklearn.externals._packaging.version._legacy_cmpkey",
    "sklearn.externals._packaging.version._parse_letter_version",
    "sklearn.feature_selection._base._get_feature_importances",
    "sklearn.feature_selection._from_model._calculate_threshold",
    "sklearn.feature_selection._mutual_info._estimate_mi",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_one_way_partial_dependence",
    "sklearn.linear_model._base._deprecate_normalize",
    "sklearn.linear_model._ridge._BaseRidge.fit",
    "sklearn.linear_model._ridge._ridge_regression",
    "sklearn.manifold._locally_linear.locally_linear_embedding",
    "sklearn.manifold._spectral_embedding.spectral_embedding",
    "sklearn.metrics._base._average_binary_score",
    "sklearn.metrics._classification._check_targets",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.plot",
    "sklearn.metrics._ranking._multiclass_roc_auc_score",
    "sklearn.metrics._ranking.top_k_accuracy_score",
    "sklearn.metrics._regression._assemble_r2_explained_variance",
    "sklearn.metrics._regression.d2_pinball_score",
    "sklearn.metrics._regression.mean_absolute_error",
    "sklearn.metrics._regression.mean_absolute_percentage_error",
    "sklearn.metrics._regression.mean_squared_error",
    "sklearn.metrics._regression.median_absolute_error",
    "sklearn.model_selection._plot._BaseCurveDisplay._plot_curve",
    "sklearn.model_selection._split._build_repr",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.neighbors._kde.KernelDensity.fit",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._initialize",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._polynomial.SplineTransformer.transform",
    "sklearn.svm._base.BaseLibSVM.fit",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.tests.random_seed.pytest_report_header",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.utils._array_api._ArrayAPIWrapper.take",
    "sklearn.utils._array_api._isdtype_single",
    "sklearn.utils._response._get_response_values",
    "sklearn.utils._testing.assert_run_python_script",
    "sklearn.utils.estimator_checks._enforce_estimator_tags_X",
    "sklearn.utils.estimator_checks._set_checking_parameters",
    "sklearn.utils.estimator_checks._yield_checks",
    "sklearn.utils.estimator_checks._yield_regressor_checks",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_estimators_data_not_an_array",
    "sklearn.utils.estimator_checks.check_fit_score_takes_y",
    "sklearn.utils.estimator_checks.check_n_features_in_after_fitting",
    "sklearn.utils.validation.check_scalar",
    "traitlets.traitlets._should_warn"
  ],
  "Ovr{str.encode}": [
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "jinja2.lexer.Lexer.wrap",
    "sklearn.datasets._svmlight_format_io._dump_svmlight",
    "sklearn.feature_extraction.text.strip_accents_ascii"
  ],
  "Ovr{str.format}": [
    "benchmarks.bench_hist_gradient_boosting.$toplevel",
    "benchmarks.bench_hist_gradient_boosting.one_run",
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_threading.one_run",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_multilabel_metrics.$toplevel",
    "benchmarks.bench_multilabel_metrics._plot",
    "benchmarks.bench_multilabel_metrics._tabulate",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_text_vectorizers.$toplevel",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "build_tools.github.vendor.make_distributor_init_64_bits",
    "build_tools.update_environments_and_lock_files.execute_command",
    "click.core.Command.format_help_text",
    "click.core.Command.get_short_help_str",
    "click.core.Command.invoke",
    "click.core.Command.parse_args",
    "click.core.MultiCommand.resolve_command",
    "click.core.Option.get_help_record",
    "click.core.Parameter.type_cast_value.convert",
    "click.exceptions.BadParameter.format_message",
    "click.exceptions.ClickException.show",
    "click.exceptions.FileError.format_message",
    "click.exceptions.MissingParameter.format_message",
    "click.exceptions.NoSuchOption.__init__",
    "click.exceptions.NoSuchOption.format_message",
    "click.exceptions.UsageError.show",
    "click.parser.Argument.process",
    "click.parser.OptionParser._get_value_from_state",
    "click.parser.OptionParser._match_long_opt",
    "click.termui.prompt",
    "click.types.BoolParamType.convert",
    "click.types.Choice.convert",
    "click.types.DateTime.convert",
    "click.types.Path.convert",
    "click.types.Tuple.convert",
    "click.types.UUIDParameterType.convert",
    "click.types._NumberParamTypeBase.convert",
    "click.types._NumberRangeBase.convert",
    "doc.conf.$toplevel",
    "doc.conf.notebook_modification_function",
    "doc.sphinxext.sphinx_issues.IssueRole.default_format_text",
    "doc.sphinxext.sphinx_issues.IssueRole.make_node",
    "doc.sphinxext.sphinx_issues.cve_role",
    "doc.sphinxext.sphinx_issues.user_role",
    "examples.applications.plot_out_of_core_classification.get_minibatch",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.bicluster.plot_spectral_coclustering.$toplevel",
    "examples.cluster.plot_kmeans_digits.bench_k_means",
    "examples.compose.plot_column_transformer.$toplevel",
    "examples.covariance.plot_mahalanobis_distances.$toplevel",
    "examples.ensemble.plot_bias_variance.$toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.ensemble.plot_gradient_boosting_oob.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regression.$toplevel",
    "examples.exercises.plot_cv_diabetes.$toplevel",
    "examples.feature_selection.plot_f_test_vs_mi.$toplevel",
    "examples.feature_selection.plot_feature_selection.$toplevel",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "examples.linear_model.plot_bayesian_ridge_curvefit.$toplevel",
    "examples.linear_model.plot_logistic_l1_l2_sparsity.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.plot_obs_pred",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.score_estimator",
    "examples.model_selection.plot_cv_indices.plot_cv_indices",
    "examples.model_selection.plot_nested_cross_validation_iris.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.model_selection.plot_randomized_search.report",
    "examples.model_selection.plot_successive_halving_heatmap.$toplevel",
    "examples.model_selection.plot_successive_halving_heatmap.make_heatmap",
    "examples.model_selection.plot_underfitting_overfitting.$toplevel",
    "examples.neighbors.plot_digits_kde_sampling.$toplevel",
    "examples.neighbors.plot_kde_1d.$toplevel",
    "examples.neighbors.plot_nca_classification.$toplevel",
    "examples.neighbors.plot_nca_dim_reduction.$toplevel",
    "examples.preprocessing.plot_map_data_to_normal.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "examples.svm.plot_svm_regression.$toplevel",
    "examples.tree.plot_cost_complexity_pruning.$toplevel",
    "examples.tree.plot_unveil_tree_structure.$toplevel",
    "graphql.pyutils.default_ordered_dict.DefaultOrderedDict.__repr__",
    "pip._vendor.distlib.compat.ChainMap.__repr__",
    "pip._vendor.packaging.specifiers.SpecifierSet.__repr__",
    "pip._vendor.packaging.version.Version.__init__",
    "pip._vendor.packaging.version.Version.__str__",
    "pip._vendor.pkg_resources.Distribution.version",
    "pip._vendor.pyparsing.Forward._setResultsName",
    "pip._vendor.pyparsing.MatchFirst._setResultsName",
    "pip._vendor.pyparsing.Or._setResultsName",
    "pip._vendor.pyparsing.ParseExpression._setResultsName",
    "pip._vendor.pyparsing._MultipleMatch._setResultsName",
    "pip._vendor.resolvelib.structs._FactoryIterableView.__repr__",
    "pip._vendor.resolvelib.structs._SequenceIterableView.__repr__",
    "pip._vendor.urllib3.util.retry.Retry.__repr__",
    "prompt_toolkit.contrib.regular_languages.compiler.Variables.__repr__",
    "prompt_toolkit.win32_types.CONSOLE_SCREEN_BUFFER_INFO.__repr__",
    "prompt_toolkit.win32_types.COORD.__repr__",
    "setup.check_package_status",
    "sklearn._build_utils._check_cython_version",
    "sklearn._min_dependencies.$toplevel",
    "sklearn.cluster._kmeans.KMeans.fit",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_output",
    "sklearn.compose._target.TransformedTargetRegressor.n_features_in_",
    "sklearn.datasets._base._convert_data_dataframe",
    "sklearn.datasets._base._fetch_remote",
    "sklearn.datasets._base.load_digits",
    "sklearn.datasets._california_housing.fetch_california_housing",
    "sklearn.datasets._openml._get_data_description_by_id",
    "sklearn.datasets._openml._get_data_features",
    "sklearn.datasets._openml._get_data_info_by_name",
    "sklearn.datasets._openml._get_data_qualities",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.datasets._species_distributions.fetch_species_distributions",
    "sklearn.datasets._svmlight_format_io.load_svmlight_files",
    "sklearn.decomposition._dict_learning._check_positive_coding",
    "sklearn.decomposition._dict_learning.sparse_encode",
    "sklearn.decomposition._nmf._BaseNMF._check_w_h",
    "sklearn.decomposition._nmf._initialize_nmf",
    "sklearn.dummy.DummyClassifier.fit",
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble._validate_estimators",
    "sklearn.ensemble._base._fit_single_estimator",
    "sklearn.ensemble._forest._get_n_samples_bootstrap",
    "sklearn.ensemble._gb.BaseGradientBoosting.fit",
    "sklearn.ensemble._gb.VerboseReporter.update",
    "sklearn.ensemble._gb_losses.BinomialDeviance.__init__",
    "sklearn.ensemble._gb_losses.ExponentialLoss.__init__",
    "sklearn.ensemble._gb_losses.MultinomialDeviance.__init__",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.fit",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.transform",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._bin_data",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._compute_partial_dependence_recursion",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._print_iteration_stats",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._raw_predict",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._staged_raw_predict",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower._validate_parameters",
    "sklearn.ensemble._stacking.StackingClassifier._validate_final_estimator",
    "sklearn.ensemble._stacking.StackingRegressor._validate_final_estimator",
    "sklearn.ensemble._voting._BaseVoting.n_features_in_",
    "sklearn.externals._arff._build_re_values",
    "sklearn.feature_extraction.text.CountVectorizer._count_vocab",
    "sklearn.feature_extraction.text.TfidfVectorizer._check_params",
    "sklearn.feature_selection._from_model.SelectFromModel.n_features_in_",
    "sklearn.feature_selection._variance_threshold.VarianceThreshold.fit",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process.kernels.ConstantKernel.__repr__",
    "sklearn.gaussian_process.kernels.DotProduct.__repr__",
    "sklearn.gaussian_process.kernels.ExpSineSquared.__repr__",
    "sklearn.gaussian_process.kernels.Exponentiation.__repr__",
    "sklearn.gaussian_process.kernels.Kernel.__repr__",
    "sklearn.gaussian_process.kernels.Matern.__repr__",
    "sklearn.gaussian_process.kernels.PairwiseKernel.__repr__",
    "sklearn.gaussian_process.kernels.Product.__repr__",
    "sklearn.gaussian_process.kernels.RBF.__repr__",
    "sklearn.gaussian_process.kernels.RationalQuadratic.__repr__",
    "sklearn.gaussian_process.kernels.Sum.__repr__",
    "sklearn.gaussian_process.kernels.WhiteKernel.__repr__",
    "sklearn.impute._base.MissingIndicator._validate_input",
    "sklearn.impute._base.MissingIndicator.transform",
    "sklearn.impute._base.SimpleImputer._validate_input",
    "sklearn.impute._base.SimpleImputer.fit",
    "sklearn.impute._base._check_inputs_dtype",
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.inspection._partial_dependence.partial_dependence",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.plot",
    "sklearn.linear_model._coordinate_descent._set_order",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._logistic._check_solver",
    "sklearn.linear_model._ridge._BaseRidge.fit",
    "sklearn.linear_model._stochastic_gradient.BaseSGDClassifier.partial_fit",
    "sklearn.linear_model._theil_sen.TheilSenRegressor._check_subparams",
    "sklearn.linear_model._theil_sen.TheilSenRegressor.fit",
    "sklearn.linear_model._theil_sen._spatial_median",
    "sklearn.manifold._t_sne.TSNE._fit",
    "sklearn.manifold._t_sne._joint_probabilities_nn",
    "sklearn.metrics._base._average_binary_score",
    "sklearn.metrics._classification._check_targets",
    "sklearn.metrics._classification._prf_divide",
    "sklearn.metrics._classification._warn_prf",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._classification.hamming_loss",
    "sklearn.metrics._classification.log_loss",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot",
    "sklearn.metrics._ranking._binary_clf_curve",
    "sklearn.metrics._ranking._check_dcg_target_type",
    "sklearn.metrics._ranking._multiclass_roc_auc_score",
    "sklearn.metrics._ranking.auc",
    "sklearn.metrics._ranking.coverage_error",
    "sklearn.metrics._ranking.label_ranking_average_precision_score",
    "sklearn.metrics._ranking.label_ranking_loss",
    "sklearn.metrics._ranking.roc_auc_score",
    "sklearn.metrics._regression._check_reg_targets",
    "sklearn.metrics._scorer.$toplevel",
    "sklearn.metrics._scorer._ThresholdScorer._score",
    "sklearn.model_selection._search.BaseSearchCV.fit.evaluate_candidates",
    "sklearn.model_selection._search.BaseSearchCV.n_features_in_",
    "sklearn.model_selection._search.ParameterSampler.__init__",
    "sklearn.model_selection._split.LeaveOneOut._iter_test_indices",
    "sklearn.model_selection._split.LeavePOut._iter_test_indices",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.model_selection._split.StratifiedKFold._make_test_folds",
    "sklearn.model_selection._split._BaseKFold.__init__",
    "sklearn.model_selection._split._BaseKFold.split",
    "sklearn.model_selection._split._validate_shuffle_split",
    "sklearn.model_selection._validation._enforce_prediction_order",
    "sklearn.multiclass.OneVsOneClassifier.partial_fit",
    "sklearn.multiclass.OneVsRestClassifier.partial_fit",
    "sklearn.multioutput.MultiOutputClassifier.score",
    "sklearn.neighbors._base.NeighborsBase._fit",
    "sklearn.neighbors._base._check_precomputed",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.fit",
    "sklearn.neighbors._classification.RadiusNeighborsClassifier.predict_proba",
    "sklearn.neighbors._kde.KernelDensity._choose_algorithm",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._initialize",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis._loss_grad_lbfgs",
    "sklearn.neighbors._nca.NeighborhoodComponentsAnalysis.fit",
    "sklearn.pipeline.Pipeline._check_fit_params",
    "sklearn.pipeline.Pipeline.get_feature_names_out",
    "sklearn.preprocessing._data.KernelCenterer.fit",
    "sklearn.preprocessing._data.PowerTransformer._check_input",
    "sklearn.preprocessing._data.QuantileTransformer.fit",
    "sklearn.preprocessing._discretization.KBinsDiscretizer._validate_n_bins",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.inverse_transform",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.preprocessing._encoders._BaseEncoder._transform",
    "sklearn.preprocessing._label.MultiLabelBinarizer._transform",
    "sklearn.preprocessing._label.MultiLabelBinarizer.inverse_transform",
    "sklearn.preprocessing._label._inverse_binarize_thresholding",
    "sklearn.preprocessing._label.label_binarize",
    "sklearn.svm._base.BaseLibSVM.fit",
    "sklearn.tree._export.export_text",
    "sklearn.tree._export.export_text._add_leaf",
    "sklearn.tree._export.export_text.print_tree_recurse",
    "sklearn.utils._get_column_indices",
    "sklearn.utils._metadata_requests.RequestMethod.__get__",
    "sklearn.utils._safe_indexing",
    "sklearn.utils._show_versions.show_versions",
    "sklearn.utils._testing._Raises.__exit__",
    "sklearn.utils._testing.ignore_warnings",
    "sklearn.utils.check_matplotlib_support",
    "sklearn.utils.check_pandas_support",
    "sklearn.utils.estimator_checks._NotAnArray.__array_function__",
    "sklearn.utils.estimator_checks._get_check_estimator_ids",
    "sklearn.utils.estimator_checks._yield_all_checks",
    "sklearn.utils.estimator_checks.check_classifier_multioutput",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.estimator_checks.check_estimators_data_not_an_array",
    "sklearn.utils.estimator_checks.check_fit_idempotent",
    "sklearn.utils.estimator_checks.check_methods_sample_order_invariance",
    "sklearn.utils.estimator_checks.check_methods_subset_invariance",
    "sklearn.utils.estimator_checks.check_regressor_multioutput",
    "sklearn.utils.estimator_checks.check_sample_weights_pandas_series",
    "sklearn.utils.estimator_checks.check_set_params",
    "sklearn.utils.extmath.randomized_svd",
    "sklearn.utils.metaestimators._BaseComposition._validate_names",
    "sklearn.utils.optimize._check_optimize_result",
    "sklearn.utils.random._random_choice_csc",
    "sklearn.utils.sparsefuncs.count_nonzero",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator",
    "sklearn.utils.validation._check_sample_weight",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f",
    "sklearn.utils.validation._ensure_no_complex_data",
    "sklearn.utils.validation._ensure_sparse_format",
    "sklearn.utils.validation.check_array",
    "sklearn.utils.validation.check_is_fitted",
    "sklearn.utils.validation.check_memory",
    "sklearn.utils.validation.check_symmetric",
    "sklearn.utils.validation.column_or_1d",
    "testslide.strict_mock.StrictMock.__repr__",
    "traitlets.traitlets.HasTraits.__init__",
    "traitlets.traitlets._deprecated_method"
  ],
  "Ovr{str.index}": [
    "Ovr{typing.Sequence.index}"
  ],
  "Ovr{str.join}": [
    "asv_benchmarks.benchmarks.common.get_estimator_path",
    "asv_benchmarks.benchmarks.common.get_from_config",
    "benchmarks.bench_multilabel_metrics.$toplevel",
    "build_tools.generate_authors_table.generate_list",
    "build_tools.generate_authors_table.generate_table",
    "build_tools.generate_authors_table.key",
    "build_tools.github.check_wheels.$toplevel",
    "build_tools.update_environments_and_lock_files.execute_command",
    "click._textwrap.TextWrapper.indent_only",
    "click.core.Command.format_usage",
    "click.core.Command.parse_args",
    "click.core.Context.command_path",
    "click.core.Option.get_help_record",
    "click.core.Parameter.get_error_hint",
    "click.exceptions.NoSuchOption.format_message",
    "click.exceptions._join_param_hints",
    "click.formatting.HelpFormatter.getvalue",
    "click.formatting.join_options",
    "click.formatting.wrap_text",
    "click.formatting.wrap_text._flush_par",
    "click.parser.OptionParser._match_short_opt",
    "click.shell_completion.ShellComplete.complete",
    "click.termui._build_prompt",
    "click.termui.style",
    "click.types.Choice.convert",
    "click.types.DateTime.convert",
    "click.utils.make_default_short_help",
    "doc.conf.$toplevel",
    "doc.conf.SKExampleTitleSortKey.__call__",
    "doc.conf.generate_min_dependency_table",
    "doc.conf.notebook_modification_function",
    "doc.sphinxext.add_toctree_functions.docutils_node_to_jinja",
    "doc.sphinxext.allow_nan_estimators.AllowNanEstimators.make_paragraph_for_estimator_type",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.And.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Combine.postParse",
    "doc.tutorial.machine_learning_map.pyparsing.Each.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.MatchFirst.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.Or.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseBaseException.markInputline",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__str__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.asXML",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.dump",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.runTests",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.transformString",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.White.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.Word.__init__",
    "doc.tutorial.machine_learning_map.pyparsing._makeTags",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "doc.tutorial.machine_learning_map.pyparsing.srange",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "examples.applications.plot_species_distribution_modeling.create_species_bunch",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.cluster.plot_hdbscan.plot",
    "examples.impute.plot_iterative_imputer_variants_comparison.$toplevel",
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "examples.preprocessing.plot_discretization_classification.get_name",
    "jinja2.lexer.Lexer.__init__",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.nodes.Concat.as_const",
    "jinja2.parser.Parser.parse_primary",
    "maint_tools.sort_whats_new.$toplevel",
    "maint_tools.update_tracking_issue.$toplevel",
    "packaging.specifiers.SpecifierSet.__str__",
    "packaging.version.Version.__str__",
    "packaging.version.Version.local",
    "pip._vendor.distlib.compat.ChainMap.__repr__",
    "pip._vendor.packaging.specifiers.SpecifierSet.__str__",
    "pip._vendor.packaging.version.Version.__str__",
    "pip._vendor.packaging.version.Version.local",
    "pip._vendor.pyparsing.ParserElement.transformString",
    "pip._vendor.urllib3._collections.HTTPHeaderDict.itermerged",
    "prompt_toolkit.contrib.regular_languages.compiler.Variables.__repr__",
    "setup.configure_extension_modules",
    "sklearn.__check_build.raise_build_error",
    "sklearn.base.BaseEstimator.__repr__",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups_vectorized",
    "sklearn.datasets._twenty_newsgroups.strip_newsgroup_footer",
    "sklearn.datasets._twenty_newsgroups.strip_newsgroup_quoting",
    "sklearn.ensemble._gb.VerboseReporter.init",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.externals._arff.ArffEncoder._encode_attribute",
    "sklearn.externals._arff.ArffEncoder.encode",
    "sklearn.externals._arff.COOData.encode_data",
    "sklearn.externals._arff.DenseGeneratorData.encode_data",
    "sklearn.externals._arff.LODGeneratorData.encode_data",
    "sklearn.externals._packaging.version.Version.__str__",
    "sklearn.externals._packaging.version.Version.base_version",
    "sklearn.externals._packaging.version.Version.local",
    "sklearn.feature_extraction.text._VectorizerMixin._word_ngrams",
    "sklearn.feature_extraction.text.strip_accents_unicode",
    "sklearn.gaussian_process.kernels.Kernel.__repr__",
    "sklearn.gaussian_process.kernels.Matern.__repr__",
    "sklearn.gaussian_process.kernels.RBF.__repr__",
    "sklearn.inspection._partial_dependence.partial_dependence",
    "sklearn.inspection._plot.decision_boundary.DecisionBoundaryDisplay.from_estimator",
    "sklearn.inspection._plot.decision_boundary._check_boundary_response_method",
    "sklearn.metrics._plot.regression.PredictionErrorDisplay.plot",
    "sklearn.metrics._scorer._BaseScorer.__repr__",
    "sklearn.model_selection._split.StratifiedShuffleSplit._iter_indices",
    "sklearn.model_selection._split._pprint",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._warn_or_raise_about_fit_failures",
    "sklearn.preprocessing._discretization.KBinsDiscretizer._validate_n_bins",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.get_feature_names_out",
    "sklearn.tree._export._DOTTreeExporter.head",
    "sklearn.tree._export._DOTTreeExporter.tail",
    "sklearn.tree._export.export_text._add_leaf",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests.MethodMetadataRequest._route_params",
    "sklearn.utils._param_validation.HasMethods.__str__",
    "sklearn.utils._param_validation.MissingValues.__str__",
    "sklearn.utils._param_validation.Options.__str__",
    "sklearn.utils._param_validation._Booleans.__str__",
    "sklearn.utils._param_validation._CVObjects.__str__",
    "sklearn.utils._param_validation._RandomStates.__str__",
    "sklearn.utils._param_validation._VerboseHelper.__str__",
    "sklearn.utils._param_validation.generate_invalid_param_val",
    "sklearn.utils._param_validation.validate_parameter_constraints",
    "sklearn.utils._pprint._safe_repr",
    "sklearn.utils._testing._IgnoreWarnings.__repr__",
    "sklearn.utils._testing._Raises.__exit__",
    "sklearn.utils._testing._get_func_name",
    "sklearn.utils._testing.assert_no_warnings",
    "sklearn.utils._testing.assert_raise_message",
    "sklearn.utils.deprecation._is_deprecated",
    "sklearn.utils.estimator_checks._get_check_estimator_ids",
    "sklearn.utils.estimator_checks.check_classifiers_predictions",
    "sklearn.utils.estimator_checks.check_dont_overwrite_parameters",
    "sklearn.utils.estimator_checks.check_supervised_y_2d",
    "sklearn.utils.resample",
    "sklearn.utils.tests.test_pprint.test_bruteforce_ellipsis",
    "sklearn.utils.validation._check_pos_label_consistency",
    "sklearn.utils.validation._check_response_method",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f",
    "sklearn.utils.validation.check_scalar",
    "traitlets.traitlets.HasTraits.__init__",
    "werkzeug.utils.ImportStringError.__init__"
  ],
  "Ovr{str.lower}": [
    "click.core.Argument._parse_decls",
    "click.termui.confirm",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "flask.helpers.get_load_dotenv",
    "packaging.version._parse_letter_version",
    "pip._vendor.packaging.version._parse_letter_version",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.ensemble._stacking._BaseStacking.get_feature_names_out",
    "sklearn.ensemble._voting.VotingClassifier.get_feature_names_out",
    "sklearn.ensemble._voting.VotingRegressor.get_feature_names_out",
    "sklearn.externals._packaging.version._legacy_cmpkey",
    "sklearn.externals._packaging.version._parse_letter_version",
    "sklearn.impute._base.MissingIndicator.get_feature_names_out",
    "sklearn.isotonic.IsotonicRegression.get_feature_names_out",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out",
    "sklearn.utils.validation._generate_get_feature_names_out"
  ],
  "Ovr{str.lstrip}": [
    "click.core.Context.command_path",
    "click.core.Option._parse_decls",
    "click.formatting.wrap_text",
    "click.utils._detect_program_name",
    "examples.classification.plot_classifier_comparison.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.neural_networks.plot_mlp_alpha.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel"
  ],
  "Ovr{str.partition}": [
    "click.core.Command.format_help_text",
    "click.shell_completion._resolve_incomplete",
    "click.shell_completion.shell_complete",
    "sklearn.base.BaseEstimator.set_params"
  ],
  "Ovr{str.rpartition}": [
    "jinja2.utils.import_string"
  ],
  "Ovr{str.rsplit}": [
    "benchmarks.bench_hist_gradient_boosting_higgsboson.load_data",
    "doc.tutorial.text_analytics.data.movie_reviews.fetch_data.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.$toplevel",
    "werkzeug.utils.import_string"
  ],
  "Ovr{str.rstrip}": [
    "click.core.Command.get_help",
    "click.core.Command.get_usage",
    "click.core.Option._parse_decls",
    "click.termui.confirm",
    "click.termui.prompt.prompt_func",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.runTests",
    "sklearn.model_selection._split._pprint"
  ],
  "Ovr{str.split}": [
    "benchmarks.bench_plot_nmf.run_bench",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "build_tools.azure.get_commit_message.get_commit_message",
    "build_tools.get_comment.get_versions",
    "click.core.Option._parse_decls",
    "click.parser.OptionParser._process_opts",
    "click.types.ParamType.split_envvar_value",
    "click.utils.make_default_short_help",
    "doc.conf.$toplevel",
    "doc.sphinxext.github_link._get_git_revision",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.ParseBaseException.__dir__",
    "doc.tutorial.machine_learning_map.pyparsing._xml_escape",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "examples.applications.plot_topics_extraction_with_nmf_lda.plot_top_words",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "jinja2.debug.get_template_locals",
    "jinja2.lexer.Lexer.wrap",
    "jinja2.utils.import_string",
    "setup.configure_extension_modules",
    "sklearn._build_utils.openmp_helpers.check_openmp_support",
    "sklearn._min_dependencies.$toplevel",
    "sklearn.base.BaseEstimator.__repr__",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.externals._arff.ArffDecoder._decode",
    "sklearn.externals._packaging.version.Version.public",
    "sklearn.feature_selection._from_model._calculate_threshold",
    "sklearn.gaussian_process.kernels.Kernel.set_params",
    "sklearn.model_selection._split._pprint",
    "sklearn.pipeline.Pipeline._check_fit_params",
    "sklearn.tests.random_seed.pytest_configure",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.discovery.all_functions",
    "werkzeug.utils.ImportStringError.__init__"
  ],
  "Ovr{str.splitlines}": [
    "click._textwrap.TextWrapper.indent_only",
    "click.formatting.HelpFormatter.write_dl",
    "click.formatting.wrap_text",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.runTests",
    "sklearn._build_utils.pre_build_helpers.compile_test_program",
    "sklearn.utils._testing.check_docstring_parameters"
  ],
  "Ovr{stripe.api_resources.list_object.ListObject.__getitem__}": [
    "Ovr{stripe.stripe_object.StripeObject.__getitem__}"
  ],
  "Ovr{stripe.api_resources.list_object.ListObject.__iter__}": [
    "Ovr{dict.__iter__}"
  ],
  "Ovr{stripe.api_resources.search_result_object.SearchResultObject.__getitem__}": [
    "Ovr{stripe.stripe_object.StripeObject.__getitem__}"
  ],
  "Ovr{stripe.api_resources.search_result_object.SearchResultObject.__iter__}": [
    "Ovr{dict.__iter__}"
  ],
  "Ovr{stripe.stripe_object.StripeObject.__getitem__}": [
    "Ovr{dict.__getitem__}"
  ],
  "Ovr{stripe.stripe_object.StripeObject.__setitem__}": [
    "Ovr{dict.__setitem__}"
  ],
  "Ovr{tempfile.SpooledTemporaryFile.__iter__}": [
    "Ovr{typing.IO.__iter__}"
  ],
  "Ovr{tempfile.SpooledTemporaryFile.__next__}": [
    "Ovr{typing.IO.__next__}"
  ],
  "Ovr{tempfile.SpooledTemporaryFile.close}": [
    "Ovr{typing.IO.close}"
  ],
  "Ovr{tempfile.SpooledTemporaryFile.flush}": [
    "Ovr{typing.IO.flush}"
  ],
  "Ovr{tempfile.SpooledTemporaryFile.isatty}": [
    "Ovr{typing.IO.isatty}"
  ],
  "Ovr{tempfile.SpooledTemporaryFile.read}": [
    "Ovr{typing.IO.read}"
  ],
  "Ovr{tempfile.SpooledTemporaryFile.write}": [
    "Ovr{typing.IO.write}"
  ],
  "Ovr{tempfile._TemporaryFileWrapper.__iter__}": [
    "Ovr{typing.IO.__iter__}"
  ],
  "Ovr{tempfile._TemporaryFileWrapper.__next__}": [
    "Ovr{typing.IO.__next__}"
  ],
  "Ovr{tempfile._TemporaryFileWrapper.close}": [
    "Ovr{typing.IO.close}"
  ],
  "Ovr{tempfile._TemporaryFileWrapper.flush}": [
    "Ovr{typing.IO.flush}"
  ],
  "Ovr{tempfile._TemporaryFileWrapper.isatty}": [
    "Ovr{typing.IO.isatty}"
  ],
  "Ovr{tempfile._TemporaryFileWrapper.read}": [
    "Ovr{typing.IO.read}"
  ],
  "Ovr{tempfile._TemporaryFileWrapper.write}": [
    "Ovr{typing.IO.write}"
  ],
  "Ovr{testslide.lib.CoroutineValueError.__str__}": [
    "Ovr{BaseException.__str__}"
  ],
  "Ovr{testslide.strict_mock.NonAwaitableReturn.__str__}": [
    "Ovr{BaseException.__str__}"
  ],
  "Ovr{testslide.strict_mock.NonCallableValue.__str__}": [
    "Ovr{BaseException.__str__}"
  ],
  "Ovr{testslide.strict_mock.NonExistentAttribute.__str__}": [
    "Ovr{BaseException.__str__}"
  ],
  "Ovr{testslide.strict_mock.UndefinedAttribute.__str__}": [
    "Ovr{BaseException.__str__}"
  ],
  "Ovr{testslide.strict_mock.UnsupportedMagic.__str__}": [
    "Ovr{BaseException.__str__}"
  ],
  "Ovr{tqdm.notebook.tqdm_notebook.__iter__}": [
    "Ovr{tqdm.std.tqdm.__iter__}"
  ],
  "Ovr{tqdm.std.tqdm.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{traceback.FrameSummary.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{tracemalloc.Traceback.__getitem__}": [
    "Ovr{typing.Sequence.__getitem__}"
  ],
  "Ovr{traitlets.config.loader.Config.__getitem__}": [
    "Ovr{dict.__getitem__}"
  ],
  "Ovr{traitlets.config.loader.Config.__setitem__}": [
    "Ovr{dict.__setitem__}"
  ],
  "Ovr{traitlets.config.loader.Config.copy}": [
    "Ovr{dict.copy}"
  ],
  "Ovr{traitlets.config.loader._DefaultOptionDict.__getitem__}": [
    "Ovr{dict.__getitem__}"
  ],
  "Ovr{traitlets.config.loader._DefaultOptionDict.get}": [
    "Ovr{dict.get}"
  ],
  "Ovr{tuple.__add__}": [
    "click.formatting.iter_rows",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__",
    "sklearn.datasets._base._pkl_filepath",
    "sklearn.feature_extraction.image.PatchExtractor.transform",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.gaussian_process.kernels._approx_fprime",
    "sklearn.linear_model._ridge._RidgeGCV._diag_dot",
    "sklearn.metrics._ranking._multiclass_roc_auc_score",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.utils._encode._unique_np",
    "sklearn.utils._encode._unique_python"
  ],
  "Ovr{tuple.__getitem__}": [
    "Ovr{typing.Sequence.__getitem__}",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "click.core.Command.format_help_text",
    "click.core.MultiCommand.resolve_command",
    "click.core.Option.get_help_record",
    "click.formatting.HelpFormatter.write_dl",
    "click.formatting.join_options",
    "click.types.convert_type",
    "click.utils._detect_program_name",
    "doc.conf.$toplevel",
    "doc.sphinxext.github_link._linkcode_resolve",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.pop",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.__mul__",
    "doc.tutorial.machine_learning_map.pyparsing._trim_arity.wrapper",
    "doc.tutorial.machine_learning_map.pyparsing.traceParseAction.z",
    "doc.tutorial.machine_learning_map.pyparsing.withAttribute",
    "examples.cluster.plot_segmentation_toy.$toplevel",
    "examples.ensemble.plot_voting_decision_regions.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.preprocessing.plot_all_scaling.make_plot",
    "examples.svm.plot_svm_tie_breaking.$toplevel",
    "jinja2.debug.fake_traceback",
    "jinja2.debug.get_template_locals",
    "jinja2.optimizer.Optimizer.generic_visit",
    "packaging.version.Version.dev",
    "packaging.version.Version.post",
    "pip._vendor.distlib.compat.OrderedDict.update",
    "setup.configure_extension_modules",
    "sklearn.__check_build.raise_build_error",
    "sklearn._min_dependencies.$toplevel",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.covariance._robust_covariance.select_candidates",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._arff_parser._sparse_data_to_array",
    "sklearn.datasets._arff_parser._split_sparse_columns",
    "sklearn.datasets._base._pkl_filepath",
    "sklearn.datasets._base.load_files",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.externals._arff.ArffEncoder.iter_encode",
    "sklearn.externals._packaging.version.Version.major",
    "sklearn.externals._packaging.version.Version.micro",
    "sklearn.externals._packaging.version.Version.minor",
    "sklearn.impute._base._most_frequent",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.linear_model._logistic.LogisticRegression.fit",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.manifold._mds.smacof",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics.pairwise._check_chunk_size",
    "sklearn.pipeline.Pipeline._validate_steps",
    "sklearn.utils._available_if._AvailableIfDescriptor.__get__.out",
    "sklearn.utils._encode._unique_np",
    "sklearn.utils._encode._unique_python",
    "sklearn.utils._set_output._wrap_method_output.wrapped",
    "sklearn.utils.estimator_checks._apply_on_subsets",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out_pandas",
    "sklearn.utils.estimator_checks.check_transformer_preserve_dtypes",
    "sklearn.utils.resample",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f",
    "sklearn.utils.validation._ensure_sparse_format",
    "sklearn.utils.validation.check_array",
    "traitlets.traitlets.HasDescriptors.__new__",
    "traitlets.traitlets._deprecated_method",
    "werkzeug.utils.import_string"
  ],
  "Ovr{tuple.__gt__}": [
    "packaging.version._BaseVersion.__gt__",
    "parso.utils.PythonVersionInfo.__gt__",
    "sklearn.externals._packaging.version._BaseVersion.__gt__"
  ],
  "Ovr{tuple.__iter__}": [
    "Ovr{typing.Sequence.__iter__}"
  ],
  "Ovr{tuple.__mul__}": [
    "click.formatting.iter_rows",
    "sklearn.linear_model._ridge._RidgeGCV._diag_dot",
    "sklearn.utils._estimator_html_repr._VisualBlock.__init__"
  ],
  "Ovr{tuple.index}": [
    "Ovr{typing.Sequence.index}"
  ],
  "Ovr{turtle.Vec2D.__add__}": [
    "Ovr{tuple.__add__}"
  ],
  "Ovr{turtle.Vec2D.__mul__}": [
    "Ovr{tuple.__mul__}"
  ],
  "Ovr{types.AsyncGeneratorType.__aiter__}": [
    "Ovr{typing.AsyncIterator.__aiter__}"
  ],
  "Ovr{types.AsyncGeneratorType.__anext__}": [
    "Ovr{typing.AsyncGenerator.__anext__}"
  ],
  "Ovr{types.GeneratorType.__iter__}": [
    "Ovr{typing.Generator.__iter__}"
  ],
  "Ovr{types.GeneratorType.__next__}": [
    "Ovr{typing.Generator.__next__}"
  ],
  "Ovr{types.MappingProxyType.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{types.MappingProxyType.items}": [
    "Ovr{typing.Mapping.items}"
  ],
  "Ovr{types.MappingProxyType.values}": [
    "Ovr{typing.Mapping.values}"
  ],
  "Ovr{typing.AsyncGenerator.__anext__}": [
    "Ovr{typing.AsyncIterator.__anext__}"
  ],
  "Ovr{typing.AsyncIterator.__aiter__}": [
    "jinja2.runtime.AsyncLoopContext.length"
  ],
  "Ovr{typing.AsyncIterator.__anext__}": [
    "jinja2.runtime.AsyncLoopContext.length"
  ],
  "Ovr{typing.Generator.__iter__}": [
    "Ovr{typing.Iterator.__iter__}",
    "asv_benchmarks.benchmarks.common.clear_tmp",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents",
    "sklearn.compose._column_transformer.ColumnTransformer.set_output",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.utils.estimator_checks.check_no_attributes_set_in_init"
  ],
  "Ovr{typing.Generator.__next__}": [
    "Ovr{typing.Iterator.__next__}",
    "asv_benchmarks.benchmarks.common.clear_tmp",
    "examples.applications.plot_out_of_core_classification.stream_reuters_documents",
    "jinja2.lexer.Lexer.tokeniter",
    "sklearn.compose._column_transformer.ColumnTransformer.set_output",
    "sklearn.cross_decomposition._pls._get_first_singular_vectors_power_method",
    "sklearn.utils.estimator_checks.check_no_attributes_set_in_init"
  ],
  "Ovr{typing.IO.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{typing.IO.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{typing.IO.close}": [
    "click.types.File.convert",
    "click.utils.LazyFile.__init__"
  ],
  "Ovr{typing.IO.flush}": [
    "click.types.File.convert"
  ],
  "Ovr{typing.IO.isatty}": [
    "click._compat.isatty"
  ],
  "Ovr{typing.IO.read}": [
    "click._compat._is_binary_reader"
  ],
  "Ovr{typing.IO.write}": [
    "click._compat._is_binary_writer"
  ],
  "Ovr{typing.ItemsView.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{typing.Iterable.__iter__}": [
    "click.core.batch",
    "click.formatting.iter_rows",
    "click.formatting.measure_table",
    "click.utils._expand_args",
    "jinja2.lexer.Lexer.wrap",
    "jinja2.lexer.TokenStream.__init__",
    "jinja2.runtime.LoopContext._to_iterator",
    "prompt_toolkit.layout.utils.explode_text_fragments",
    "sklearn.inspection._partial_dependence._grid_from_X",
    "sklearn.model_selection._search.ParameterGrid.__init__",
    "sklearn.model_selection._search.ParameterSampler.__init__"
  ],
  "Ovr{typing.Iterator.__iter__}": [
    "Ovr{typing.Iterable.__iter__}",
    "click.core.BaseCommand.shell_complete",
    "click.core.MultiCommand.shell_complete",
    "click.core.Parameter.type_cast_value",
    "click.formatting.HelpFormatter.write_dl",
    "jinja2.environment.Environment._tokenize",
    "jinja2.nodes.Node.iter_child_nodes",
    "jinja2.parser.Parser.__init__",
    "jinja2.visitor.NodeTransformer.generic_visit",
    "jinja2.visitor.NodeVisitor.generic_visit",
    "pip._vendor.requests.cookies.RequestsCookieJar._find_no_duplicates",
    "pip._vendor.requests.cookies.RequestsCookieJar.iteritems",
    "pip._vendor.requests.cookies.RequestsCookieJar.itervalues",
    "setup.CleanCommand.run",
    "sklearn.datasets._openml._load_arff_response",
    "sklearn.externals._packaging.version._legacy_cmpkey",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.discovery.all_functions"
  ],
  "Ovr{typing.Iterator.__next__}": [
    "asv_benchmarks.benchmarks.common.Estimator.setup_cache",
    "asv_benchmarks.benchmarks.common.get_from_config",
    "benchmarks.bench_20newsgroups.$toplevel",
    "benchmarks.bench_covertype.$toplevel",
    "benchmarks.bench_feature_expansions.$toplevel",
    "benchmarks.bench_glm.$toplevel",
    "benchmarks.bench_glmnet.$toplevel",
    "benchmarks.bench_hist_gradient_boosting.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_higgsboson.$toplevel",
    "benchmarks.bench_hist_gradient_boosting_threading.$toplevel",
    "benchmarks.bench_isolation_forest.$toplevel",
    "benchmarks.bench_isotonic.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_components.$toplevel",
    "benchmarks.bench_kernel_pca_solvers_time_vs_n_samples.$toplevel",
    "benchmarks.bench_lof.$toplevel",
    "benchmarks.bench_mnist.$toplevel",
    "benchmarks.bench_multilabel_metrics.$toplevel",
    "benchmarks.bench_multilabel_metrics.benchmark",
    "benchmarks.bench_online_ocsvm.$toplevel",
    "benchmarks.bench_plot_fastkmeans.$toplevel",
    "benchmarks.bench_plot_fastkmeans.compute_bench_2",
    "benchmarks.bench_plot_hierarchical.$toplevel",
    "benchmarks.bench_plot_hierarchical.compute_bench",
    "benchmarks.bench_plot_incremental_pca.fixed_batch_size_comparison",
    "benchmarks.bench_plot_incremental_pca.variable_batch_size_comparison",
    "benchmarks.bench_plot_neighbors.barplot_neighbors",
    "benchmarks.bench_plot_nmf._fit_projected_gradient",
    "benchmarks.bench_plot_nmf._nls_subproblem",
    "benchmarks.bench_plot_parallel_pairwise.plot",
    "benchmarks.bench_plot_polynomial_kernel_approximation.$toplevel",
    "benchmarks.bench_plot_randomized_svd.$toplevel",
    "benchmarks.bench_plot_randomized_svd.bench_a",
    "benchmarks.bench_plot_randomized_svd.bench_b",
    "benchmarks.bench_plot_randomized_svd.get_data",
    "benchmarks.bench_plot_randomized_svd.plot_power_iter_vs_s",
    "benchmarks.bench_random_projections.$toplevel",
    "benchmarks.bench_saga.$toplevel",
    "benchmarks.bench_saga.exp",
    "benchmarks.bench_saga.fit_single",
    "benchmarks.bench_sample_without_replacement.$toplevel",
    "benchmarks.bench_sgd_regression.$toplevel",
    "benchmarks.bench_sparsify.benchmark_dense_predict",
    "benchmarks.bench_sparsify.benchmark_sparse_predict",
    "benchmarks.bench_tree.$toplevel",
    "benchmarks.bench_tsne_mnist.$toplevel",
    "build_tools.circle.list_versions.$toplevel",
    "build_tools.circle.list_versions.human_readable_data_quantity",
    "build_tools.generate_authors_table.get",
    "build_tools.generate_authors_table.get_contributors",
    "build_tools.get_comment.get_versions",
    "build_tools.github.check_wheels.$toplevel",
    "build_tools.update_environments_and_lock_files.main",
    "click._compat.open_stream",
    "click.core.BaseCommand.make_context",
    "click.core.BaseCommand.shell_complete",
    "click.core.Command.collect_usage_pieces",
    "click.core.Command.format_options",
    "click.core.Command.get_help_option_names",
    "click.core.Command.make_parser",
    "click.core.Command.parse_args",
    "click.core.Command.shell_complete",
    "click.core.CommandCollection.get_command",
    "click.core.CommandCollection.list_commands",
    "click.core.MultiCommand.format_commands",
    "click.core.MultiCommand.invoke",
    "click.core.MultiCommand.shell_complete",
    "click.core.Option._parse_decls",
    "click.core.Option.get_default",
    "click.core.Option.get_help_record",
    "click.core.Parameter.resolve_envvar_value",
    "click.core.Parameter.shell_complete",
    "click.core.Parameter.type_cast_value",
    "click.core._complete_visible_commands",
    "click.exceptions._join_param_hints",
    "click.formatting.HelpFormatter.write_dl",
    "click.formatting.iter_rows",
    "click.formatting.join_options",
    "click.formatting.measure_table",
    "click.formatting.wrap_text",
    "click.parser.Argument.process",
    "click.parser.Option.__init__",
    "click.parser.OptionParser._match_short_opt",
    "click.parser.OptionParser._process_args_for_args",
    "click.parser.OptionParser.add_option",
    "click.parser._unpack_args",
    "click.shell_completion.ShellComplete.complete",
    "click.shell_completion._resolve_incomplete",
    "click.types.Choice.convert",
    "click.types.Tuple.__init__",
    "click.utils._expand_args",
    "doc.conf.$toplevel",
    "doc.conf.generate_min_dependency_substitutions",
    "doc.conf.generate_min_dependency_table",
    "doc.conf.make_carousel_thumbs",
    "doc.conftest.pytest_runtest_setup",
    "doc.sphinxext.add_toctree_functions.add_toctree_functions.get_nav_object",
    "doc.sphinxext.allow_nan_estimators.AllowNanEstimators.run",
    "doc.tutorial.machine_learning_map.pyparsing.$toplevel",
    "doc.tutorial.machine_learning_map.pyparsing.Each.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.Or.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing.ParseExpression.__init__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__delitem__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.__iadd__",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.dump",
    "doc.tutorial.machine_learning_map.pyparsing.ParseResults.pop",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.addCondition",
    "doc.tutorial.machine_learning_map.pyparsing.ParserElement.transformString",
    "doc.tutorial.machine_learning_map.pyparsing.QuotedString.parseImpl",
    "doc.tutorial.machine_learning_map.pyparsing._escapeRegexRangeChars",
    "doc.tutorial.machine_learning_map.pyparsing._xml_escape",
    "doc.tutorial.machine_learning_map.pyparsing.oneOf",
    "doc.tutorial.machine_learning_map.pyparsing.withAttribute",
    "doc.tutorial.machine_learning_map.svg2imagemap.$toplevel",
    "doc.tutorial.text_analytics.data.languages.fetch_data.$toplevel",
    "doc.tutorial.text_analytics.solutions.exercise_02_sentiment.$toplevel",
    "doc.tutorial.text_analytics.solutions.generate_skeletons.$toplevel",
    "examples.applications.plot_cyclical_feature_engineering.$toplevel",
    "examples.applications.plot_face_recognition.$toplevel",
    "examples.applications.plot_face_recognition.plot_gallery",
    "examples.applications.plot_model_complexity_influence.$toplevel",
    "examples.applications.plot_model_complexity_influence.benchmark_influence",
    "examples.applications.plot_out_of_core_classification.$toplevel",
    "examples.applications.plot_out_of_core_classification.ReutersParser.parse",
    "examples.applications.plot_prediction_latency.atomic_benchmark_estimator",
    "examples.applications.plot_prediction_latency.benchmark",
    "examples.applications.plot_prediction_latency.bulk_benchmark_estimator",
    "examples.applications.plot_species_distribution_modeling.create_species_bunch",
    "examples.applications.plot_stock_market.$toplevel",
    "examples.applications.plot_topics_extraction_with_nmf_lda.plot_top_words",
    "examples.applications.svm_gui.View.update",
    "examples.applications.wikipedia_principal_eigenvector.$toplevel",
    "examples.applications.wikipedia_principal_eigenvector.centrality_scores",
    "examples.applications.wikipedia_principal_eigenvector.get_adjacency_matrix",
    "examples.bicluster.plot_bicluster_newsgroups.$toplevel",
    "examples.calibration.plot_calibration_curve.$toplevel",
    "examples.calibration.plot_calibration_multiclass.$toplevel",
    "examples.classification.plot_classification_probability.$toplevel",
    "examples.classification.plot_digits_classification.$toplevel",
    "examples.classification.plot_lda.$toplevel",
    "examples.cluster.plot_adjusted_for_chance_measures.fixed_classes_uniform_labelings_scores",
    "examples.cluster.plot_adjusted_for_chance_measures.uniform_labelings_scores",
    "examples.cluster.plot_agglomerative_clustering.$toplevel",
    "examples.cluster.plot_agglomerative_clustering_metrics.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_cluster_iris.$toplevel",
    "examples.cluster.plot_coin_segmentation.$toplevel",
    "examples.cluster.plot_coin_ward_segmentation.$toplevel",
    "examples.cluster.plot_dict_face_patches.$toplevel",
    "examples.cluster.plot_digits_agglomeration.$toplevel",
    "examples.cluster.plot_digits_linkage.$toplevel",
    "examples.cluster.plot_hdbscan.plot",
    "examples.cluster.plot_kmeans_digits.bench_k_means",
    "examples.cluster.plot_kmeans_silhouette_analysis.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.$toplevel",
    "examples.cluster.plot_kmeans_stability_low_dim_dense.make_data",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.cluster.plot_mini_batch_kmeans.$toplevel",
    "examples.covariance.plot_lw_vs_oas.$toplevel",
    "examples.covariance.plot_robust_vs_empirical_covariance.$toplevel",
    "examples.decomposition.plot_image_denoising.$toplevel",
    "examples.decomposition.plot_incremental_pca.$toplevel",
    "examples.decomposition.plot_pca_iris.$toplevel",
    "examples.decomposition.plot_pca_vs_fa_model_selection.$toplevel",
    "examples.decomposition.plot_sparse_coding.$toplevel",
    "examples.ensemble.plot_bias_variance.$toplevel",
    "examples.ensemble.plot_bias_variance.generate",
    "examples.ensemble.plot_ensemble_oob.$toplevel",
    "examples.ensemble.plot_feature_transformation.$toplevel",
    "examples.ensemble.plot_forest_hist_grad_boosting_comparison.$toplevel",
    "examples.ensemble.plot_forest_importances.$toplevel",
    "examples.ensemble.plot_forest_iris.$toplevel",
    "examples.ensemble.plot_gradient_boosting_categorical.$toplevel",
    "examples.ensemble.plot_gradient_boosting_categorical.plot_results",
    "examples.ensemble.plot_gradient_boosting_early_stopping.$toplevel",
    "examples.ensemble.plot_gradient_boosting_quantile.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "examples.ensemble.plot_monotonic_constraints.$toplevel",
    "examples.ensemble.plot_stack_predictors.$toplevel",
    "examples.ensemble.plot_voting_probas.$toplevel",
    "examples.exercises.plot_iris_exercise.$toplevel",
    "examples.feature_selection.plot_f_test_vs_mi.$toplevel",
    "examples.gaussian_process.plot_gpc.$toplevel",
    "examples.gaussian_process.plot_gpr_on_structured_data.$toplevel",
    "examples.impute.plot_iterative_imputer_variants_comparison.$toplevel",
    "examples.inspection.plot_linear_model_coefficient_interpretation.$toplevel",
    "examples.inspection.plot_partial_dependence.$toplevel",
    "examples.inspection.plot_permutation_importance_multicollinear.$toplevel",
    "examples.kernel_approximation.plot_scalable_poly_kernels.$toplevel",
    "examples.linear_model.plot_lasso_and_elasticnet.$toplevel",
    "examples.linear_model.plot_lasso_model_selection.$toplevel",
    "examples.linear_model.plot_logistic_multinomial.$toplevel",
    "examples.linear_model.plot_multi_task_lasso_support.$toplevel",
    "examples.linear_model.plot_ols_ridge_variance.$toplevel",
    "examples.linear_model.plot_poisson_regression_non_normal_loss.$toplevel",
    "examples.linear_model.plot_polynomial_interpolation.$toplevel",
    "examples.linear_model.plot_quantile_regression.$toplevel",
    "examples.linear_model.plot_robust_fit.$toplevel",
    "examples.linear_model.plot_sgd_comparison.$toplevel",
    "examples.linear_model.plot_sgd_early_stopping.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_20newsgroups.$toplevel",
    "examples.linear_model.plot_sparse_logistic_regression_mnist.$toplevel",
    "examples.linear_model.plot_theilsen.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.$toplevel",
    "examples.linear_model.plot_tweedie_regression_insurance_claims.score_estimator",
    "examples.manifold.plot_lle_digits.$toplevel",
    "examples.manifold.plot_lle_digits.plot_embedding",
    "examples.manifold.plot_mds.$toplevel",
    "examples.miscellaneous.plot_anomaly_comparison.$toplevel",
    "examples.miscellaneous.plot_isotonic_regression.$toplevel",
    "examples.miscellaneous.plot_kernel_ridge_regression.$toplevel",
    "examples.miscellaneous.plot_metadata_routing.check_metadata",
    "examples.miscellaneous.plot_multioutput_face_completion.$toplevel",
    "examples.mixture.plot_concentration_prior.$toplevel",
    "examples.mixture.plot_concentration_prior.plot_ellipses",
    "examples.mixture.plot_gmm_covariances.$toplevel",
    "examples.mixture.plot_gmm_sin.$toplevel",
    "examples.model_selection.plot_confusion_matrix.$toplevel",
    "examples.model_selection.plot_cv_indices.$toplevel",
    "examples.model_selection.plot_det.$toplevel",
    "examples.model_selection.plot_grid_search_stats.$toplevel",
    "examples.model_selection.plot_grid_search_text_feature_extraction.$toplevel",
    "examples.model_selection.plot_likelihood_ratios.scoring_on_bootstrap",
    "examples.model_selection.plot_multi_metric_evaluation.$toplevel",
    "examples.model_selection.plot_nested_cross_validation_iris.$toplevel",
    "examples.model_selection.plot_precision_recall.$toplevel",
    "examples.model_selection.plot_randomized_search.report",
    "examples.model_selection.plot_roc.$toplevel",
    "examples.model_selection.plot_successive_halving_heatmap.make_heatmap",
    "examples.model_selection.plot_successive_halving_iterations.$toplevel",
    "examples.model_selection.plot_underfitting_overfitting.$toplevel",
    "examples.multioutput.plot_classifier_chain_yeast.$toplevel",
    "examples.neighbors.approximate_nearest_neighbors.$toplevel",
    "examples.neighbors.plot_classification.$toplevel",
    "examples.neighbors.plot_digits_kde_sampling.$toplevel",
    "examples.neighbors.plot_nca_illustration.$toplevel",
    "examples.neighbors.plot_nearest_centroid.$toplevel",
    "examples.neighbors.plot_species_kde.$toplevel",
    "examples.neural_networks.plot_mlp_alpha.$toplevel",
    "examples.neural_networks.plot_rbm_logistic_classification.nudge_dataset",
    "examples.preprocessing.plot_all_scaling.$toplevel",
    "examples.preprocessing.plot_discretization_classification.$toplevel",
    "examples.preprocessing.plot_discretization_strategies.$toplevel",
    "examples.preprocessing.plot_map_data_to_normal.$toplevel",
    "examples.preprocessing.plot_scaling_importance.$toplevel",
    "examples.preprocessing.plot_target_encoder.$toplevel",
    "examples.release_highlights.plot_release_highlights_0_22_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_1_0.$toplevel",
    "examples.release_highlights.plot_release_highlights_1_2_0.$toplevel",
    "examples.semi_supervised.plot_label_propagation_digits_active_learning.$toplevel",
    "examples.svm.plot_iris_svc.$toplevel",
    "examples.svm.plot_rbf_parameters.$toplevel",
    "examples.svm.plot_svm_anova.$toplevel",
    "examples.svm.plot_svm_kernels.$toplevel",
    "examples.svm.plot_svm_margin.$toplevel",
    "examples.svm.plot_svm_tie_breaking.$toplevel",
    "examples.text.plot_document_classification_20newsgroups.$toplevel",
    "examples.text.plot_document_clustering.$toplevel",
    "examples.text.plot_document_clustering.fit_and_evaluate",
    "examples.text.plot_hashing_vs_dict_vectorizer.tokenize",
    "examples.tree.plot_cost_complexity_pruning.$toplevel",
    "examples.tree.plot_unveil_tree_structure.$toplevel",
    "flask.cli.FlaskGroup._load_plugin_commands",
    "flask.cli.SeparatedPathType.convert",
    "flask.cli.load_dotenv",
    "importlib_metadata.Distribution._discover_resolvers",
    "importlib_metadata.EntryPoint.matches",
    "importlib_metadata.EntryPoints.__getitem__",
    "importlib_metadata.EntryPoints.select",
    "jinja2.compiler.has_safe_repr",
    "jinja2.debug.get_template_locals",
    "jinja2.environment.Environment._tokenize",
    "jinja2.environment.load_extensions",
    "jinja2.ext.InternationalizationExtension._make_node",
    "jinja2.ext.InternationalizationExtension.parse",
    "jinja2.lexer.Lexer.__init__",
    "jinja2.lexer.Lexer.tokeniter",
    "jinja2.lexer.Lexer.wrap",
    "jinja2.lexer.compile_rules",
    "jinja2.nodes.Compare.as_const",
    "jinja2.nodes.Concat.as_const",
    "jinja2.nodes.Dict.as_const",
    "jinja2.nodes.List.as_const",
    "jinja2.nodes.Node.__init__",
    "jinja2.nodes.Node.iter_child_nodes",
    "jinja2.nodes.Node.iter_fields",
    "jinja2.nodes.Tuple.as_const",
    "jinja2.nodes.Tuple.can_assign",
    "jinja2.nodes.args_as_const",
    "jinja2.parser.Parser.__init__",
    "jinja2.runtime.Context.__init__",
    "jinja2.runtime.new_context",
    "jinja2.sandbox.modifies_known_mutable",
    "jinja2.visitor.NodeTransformer.generic_visit",
    "jinja2.visitor.NodeVisitor.generic_visit",
    "maint_tools.check_pxd_in_installation.$toplevel",
    "maint_tools.sort_whats_new.$toplevel",
    "maint_tools.update_tracking_issue.$toplevel",
    "markupsafe.Markup.__mod__",
    "packaging.version.Version.__str__",
    "packaging.version.Version.local",
    "packaging.version._cmpkey",
    "pip._vendor.distlib.compat.OrderedDict.update",
    "pip._vendor.html5lib.treebuilders.base.ActiveFormattingElements.append",
    "pip._vendor.packaging.version.Version.__str__",
    "pip._vendor.packaging.version._cmpkey",
    "pip._vendor.pyparsing.ParserElement.setParseAction",
    "pip._vendor.pyparsing.ParserElement.transformString",
    "pip._vendor.pyparsing._MultipleMatch._setResultsName",
    "pip._vendor.requests.cookies.RequestsCookieJar._find_no_duplicates",
    "pip._vendor.requests.cookies.RequestsCookieJar.iteritems",
    "pip._vendor.requests.cookies.RequestsCookieJar.itervalues",
    "pip._vendor.requests.cookies.remove_cookie_by_name",
    "pip._vendor.tenacity._utils.visible_attrs",
    "prompt_toolkit.contrib.regular_languages.compiler.Variables.__repr__",
    "prompt_toolkit.layout.utils.explode_text_fragments",
    "setup.CleanCommand.run",
    "setup.configure_extension_modules",
    "setup.setup_package",
    "sklearn._build_utils.openmp_helpers.check_openmp_support",
    "sklearn._loss.loss.HalfMultinomialLoss.fit_intercept_only",
    "sklearn._min_dependencies.$toplevel",
    "sklearn.base.BaseEstimator._get_param_names",
    "sklearn.base.BaseEstimator.set_params",
    "sklearn.cluster._affinity_propagation._affinity_propagation",
    "sklearn.cluster._agglomerative._hc_cut",
    "sklearn.cluster._agglomerative.linkage_tree",
    "sklearn.cluster._agglomerative.ward_tree",
    "sklearn.cluster._bicluster.SpectralBiclustering._fit",
    "sklearn.cluster._bicluster.SpectralCoclustering._fit",
    "sklearn.cluster._bicluster._bistochastic_normalize",
    "sklearn.cluster._birch._iterate_sparse_X",
    "sklearn.cluster._bisect_k_means.BisectingKMeans._bisect",
    "sklearn.cluster._bisect_k_means.BisectingKMeans._inertia_per_cluster",
    "sklearn.cluster._bisect_k_means.BisectingKMeans.fit",
    "sklearn.cluster._feature_agglomeration.AgglomerationTransform.transform",
    "sklearn.cluster._hdbscan.hdbscan.HDBSCAN._weighted_cluster_center",
    "sklearn.cluster._kmeans.KMeans.fit",
    "sklearn.cluster._kmeans.MiniBatchKMeans.fit",
    "sklearn.cluster._kmeans._kmeans_plusplus",
    "sklearn.cluster._kmeans._kmeans_single_elkan",
    "sklearn.cluster._kmeans._kmeans_single_lloyd",
    "sklearn.cluster._mean_shift.MeanShift.fit",
    "sklearn.cluster._mean_shift.get_bin_seeds",
    "sklearn.cluster._optics._correct_predecessor",
    "sklearn.cluster._optics._update_filter_sdas",
    "sklearn.cluster._optics.compute_optics_graph",
    "sklearn.cluster._spectral.discretize",
    "sklearn.cluster.tests.common.generate_clustered_data",
    "sklearn.compose._column_transformer.ColumnTransformer._add_prefix_for_feature_names_out",
    "sklearn.compose._column_transformer.ColumnTransformer._hstack",
    "sklearn.compose._column_transformer.ColumnTransformer._record_output_indices",
    "sklearn.compose._column_transformer.ColumnTransformer._validate_transformers",
    "sklearn.compose._column_transformer.ColumnTransformer.fit_transform",
    "sklearn.compose._column_transformer.ColumnTransformer.transform",
    "sklearn.conftest.pytest_collection_modifyitems",
    "sklearn.covariance._graph_lasso.GraphicalLassoCV.fit",
    "sklearn.covariance._graph_lasso._graphical_lasso",
    "sklearn.covariance._robust_covariance.fast_mcd",
    "sklearn.covariance._robust_covariance.select_candidates",
    "sklearn.covariance._shrunk_covariance.ledoit_wolf_shrinkage",
    "sklearn.cross_decomposition._pls.CCA.$class_toplevel",
    "sklearn.cross_decomposition._pls.PLSCanonical.$class_toplevel",
    "sklearn.cross_decomposition._pls.PLSRegression.$class_toplevel",
    "sklearn.cross_decomposition._pls._PLS.fit",
    "sklearn.cross_decomposition._pls._get_first_singular_vectors_power_method",
    "sklearn.datasets._arff_parser._liac_arff_parser",
    "sklearn.datasets._arff_parser._pandas_arff_parser",
    "sklearn.datasets._base.load_digits",
    "sklearn.datasets._base.load_files",
    "sklearn.datasets._base.load_sample_images",
    "sklearn.datasets._covtype.$toplevel",
    "sklearn.datasets._kddcup99._fetch_brute_kddcup99",
    "sklearn.datasets._lfw._check_fetch_lfw",
    "sklearn.datasets._lfw._fetch_lfw_pairs",
    "sklearn.datasets._lfw._fetch_lfw_people",
    "sklearn.datasets._olivetti_faces.fetch_olivetti_faces",
    "sklearn.datasets._openml._download_data_to_bunch",
    "sklearn.datasets._openml._get_num_samples",
    "sklearn.datasets._openml._load_arff_response",
    "sklearn.datasets._openml._verify_target_data_type",
    "sklearn.datasets._openml.fetch_openml",
    "sklearn.datasets._rcv1.fetch_rcv1",
    "sklearn.datasets._samples_generator.make_biclusters",
    "sklearn.datasets._samples_generator.make_blobs",
    "sklearn.datasets._samples_generator.make_checkerboard",
    "sklearn.datasets._samples_generator.make_classification",
    "sklearn.datasets._samples_generator.make_multilabel_classification",
    "sklearn.datasets._samples_generator.make_sparse_coded_signal",
    "sklearn.datasets._samples_generator.make_swiss_roll",
    "sklearn.datasets._species_distributions._load_coverage",
    "sklearn.datasets._svmlight_format_io.load_svmlight_files",
    "sklearn.datasets._twenty_newsgroups.fetch_20newsgroups",
    "sklearn.datasets._twenty_newsgroups.strip_newsgroup_footer",
    "sklearn.datasets.tests.test_olivetti_faces.test_olivetti_faces",
    "sklearn.datasets.tests.test_rcv1.test_fetch_rcv1",
    "sklearn.decomposition._dict_learning._dict_learning",
    "sklearn.decomposition._dict_learning._sparse_encode",
    "sklearn.decomposition._dict_learning._update_dict",
    "sklearn.decomposition._dict_learning.dict_learning_online",
    "sklearn.decomposition._factor_analysis.FactorAnalysis.fit",
    "sklearn.decomposition._factor_analysis._ortho_rotation",
    "sklearn.decomposition._fastica._ica_def",
    "sklearn.decomposition._fastica._ica_par",
    "sklearn.decomposition._lda.LatentDirichletAllocation._approx_bound",
    "sklearn.decomposition._lda.LatentDirichletAllocation._e_step",
    "sklearn.decomposition._lda.LatentDirichletAllocation.fit",
    "sklearn.decomposition._lda._update_doc_distribution",
    "sklearn.decomposition._nmf.MiniBatchNMF._solve_W",
    "sklearn.decomposition._nmf._beta_divergence",
    "sklearn.decomposition._nmf._fit_coordinate_descent",
    "sklearn.decomposition._nmf._fit_multiplicative_update",
    "sklearn.decomposition._nmf._initialize_nmf",
    "sklearn.decomposition._nmf._multiplicative_update_h",
    "sklearn.decomposition._nmf._multiplicative_update_w",
    "sklearn.decomposition._nmf._special_sparse_dot",
    "sklearn.decomposition._pca._assess_dimension",
    "sklearn.decomposition._pca._infer_dimension",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis._decision_function",
    "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit",
    "sklearn.discriminant_analysis._class_means",
    "sklearn.dummy.DummyClassifier.fit",
    "sklearn.dummy.DummyClassifier.predict",
    "sklearn.dummy.DummyClassifier.predict_proba",
    "sklearn.dummy.DummyRegressor.fit",
    "sklearn.ensemble._bagging.BaggingClassifier._set_oob_score",
    "sklearn.ensemble._bagging.BaggingClassifier.decision_function",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_log_proba",
    "sklearn.ensemble._bagging.BaggingClassifier.predict_proba",
    "sklearn.ensemble._bagging.BaggingRegressor.predict",
    "sklearn.ensemble._bagging.BaseBagging._fit",
    "sklearn.ensemble._bagging._parallel_build_estimators",
    "sklearn.ensemble._bagging._parallel_predict_proba",
    "sklearn.ensemble._base._BaseHeterogeneousEnsemble._validate_estimators",
    "sklearn.ensemble._base._set_random_states",
    "sklearn.ensemble._forest.BaseForest._compute_oob_predictions",
    "sklearn.ensemble._forest.BaseForest.fit",
    "sklearn.ensemble._forest.ForestClassifier._validate_y_class_weight",
    "sklearn.ensemble._forest.ForestClassifier.predict",
    "sklearn.ensemble._forest.ForestClassifier.predict_log_proba",
    "sklearn.ensemble._forest.ForestClassifier.predict_proba",
    "sklearn.ensemble._forest.RandomTreesEmbedding.$class_toplevel",
    "sklearn.ensemble._forest.RandomTreesEmbedding.get_feature_names_out",
    "sklearn.ensemble._forest._accumulate_prediction",
    "sklearn.ensemble._gb.BaseGradientBoosting._compute_partial_dependence_recursion",
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stage",
    "sklearn.ensemble._gb.BaseGradientBoosting._fit_stages",
    "sklearn.ensemble._gb.BaseGradientBoosting._staged_raw_predict",
    "sklearn.ensemble._gb.BaseGradientBoosting.apply",
    "sklearn.ensemble._gb.BaseGradientBoosting.feature_importances_",
    "sklearn.ensemble._gb_losses.MultinomialDeviance.__call__",
    "sklearn.ensemble._hist_gradient_boosting.binning._BinMapper.fit",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_categories",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._check_interaction_cst",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._clear_state",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._print_iteration_stats",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting._staged_raw_predict",
    "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.BaseHistGradientBoosting.fit",
    "sklearn.ensemble._hist_gradient_boosting.grower.TreeGrower.split_next",
    "sklearn.ensemble._stacking.StackingClassifier._validate_estimators",
    "sklearn.ensemble._stacking.StackingClassifier.fit",
    "sklearn.ensemble._stacking._BaseStacking._concatenate_predictions",
    "sklearn.ensemble._stacking._BaseStacking.get_feature_names_out",
    "sklearn.ensemble._voting.VotingClassifier.get_feature_names_out",
    "sklearn.ensemble._weight_boosting.BaseWeightBoosting.fit",
    "sklearn.externals._arff.$toplevel",
    "sklearn.externals._arff.ArffEncoder._encode_attribute",
    "sklearn.externals._arff.ArffEncoder._encode_relation",
    "sklearn.externals._arff.COOData.encode_data",
    "sklearn.externals._arff.DenseGeneratorData.decode_rows",
    "sklearn.externals._arff.LODGeneratorData.decode_rows",
    "sklearn.externals._arff.LODGeneratorData.encode_data",
    "sklearn.externals._arff._parse_values",
    "sklearn.externals._packaging.version.Version.__str__",
    "sklearn.externals._packaging.version.Version.base_version",
    "sklearn.externals._packaging.version._cmpkey",
    "sklearn.externals._packaging.version._legacy_cmpkey",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.inverse_transform",
    "sklearn.feature_extraction._dict_vectorizer.DictVectorizer.restrict",
    "sklearn.feature_extraction.image.reconstruct_from_patches_2d",
    "sklearn.feature_extraction.text.CountVectorizer._limit_features",
    "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out",
    "sklearn.feature_extraction.text.CountVectorizer.inverse_transform",
    "sklearn.feature_extraction.text._VectorizerMixin._char_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin._char_wb_ngrams",
    "sklearn.feature_extraction.text._VectorizerMixin._check_stop_words_consistency",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.feature_extraction.text._VectorizerMixin._word_ngrams",
    "sklearn.feature_extraction.text.strip_accents_unicode",
    "sklearn.feature_selection._rfe.RFECV.fit",
    "sklearn.feature_selection._sequential.SequentialFeatureSelector.fit",
    "sklearn.feature_selection._univariate_selection.f_oneway",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace._posterior_mode",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.fit",
    "sklearn.gaussian_process._gpc._BinaryGaussianProcessClassifierLaplace.log_marginal_likelihood",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.fit",
    "sklearn.gaussian_process._gpr.GaussianProcessRegressor.sample_y",
    "sklearn.gaussian_process.kernels.CompoundKernel.__eq__",
    "sklearn.gaussian_process.kernels.Kernel.__eq__",
    "sklearn.gaussian_process.kernels.Kernel._check_bounds_params",
    "sklearn.gaussian_process.kernels.Kernel.get_params",
    "sklearn.gaussian_process.kernels.Kernel.hyperparameters",
    "sklearn.gaussian_process.kernels.Kernel.set_params",
    "sklearn.gaussian_process.kernels._approx_fprime",
    "sklearn.impute._base.SimpleImputer._sparse_fit",
    "sklearn.impute._base._most_frequent",
    "sklearn.impute._iterative.IterativeImputer.fit_transform",
    "sklearn.impute._knn.KNNImputer.transform.process_chunk",
    "sklearn.inspection._partial_dependence._grid_from_X",
    "sklearn.inspection._pd_utils._check_feature_names",
    "sklearn.inspection._permutation_importance._calculate_permutation_scores",
    "sklearn.inspection._permutation_importance.permutation_importance",
    "sklearn.inspection._plot.decision_boundary._check_boundary_response_method",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay._plot_two_way_partial_dependence",
    "sklearn.inspection._plot.partial_dependence.PartialDependenceDisplay.from_estimator",
    "sklearn.isotonic.IsotonicRegression._build_y",
    "sklearn.kernel_approximation.AdditiveChi2Sampler._transform_dense",
    "sklearn.kernel_approximation.AdditiveChi2Sampler._transform_sparse",
    "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out",
    "sklearn.kernel_approximation.PolynomialCountSketch.transform",
    "sklearn.linear_model._base.LinearRegression.fit",
    "sklearn.linear_model._base._check_precomputed_gram_matrix",
    "sklearn.linear_model._bayes.ARDRegression.fit",
    "sklearn.linear_model._bayes.BayesianRidge.fit",
    "sklearn.linear_model._coordinate_descent.ElasticNet.fit",
    "sklearn.linear_model._coordinate_descent.LinearModelCV.fit",
    "sklearn.linear_model._coordinate_descent.MultiTaskElasticNet.$class_toplevel",
    "sklearn.linear_model._coordinate_descent._path_residuals",
    "sklearn.linear_model._glm._newton_solver.NewtonSolver.line_search",
    "sklearn.linear_model._least_angle.Lars._fit",
    "sklearn.linear_model._least_angle.LarsCV.$class_toplevel",
    "sklearn.linear_model._least_angle.LassoLarsIC.$class_toplevel",
    "sklearn.linear_model._least_angle._lars_path_solver",
    "sklearn.linear_model._logistic.LogisticRegressionCV.$class_toplevel",
    "sklearn.linear_model._logistic.LogisticRegressionCV.fit",
    "sklearn.linear_model._omp.orthogonal_mp",
    "sklearn.linear_model._omp.orthogonal_mp_gram",
    "sklearn.linear_model._ridge.RidgeClassifierCV.$class_toplevel",
    "sklearn.linear_model._ridge._RidgeGCV._sparse_multidot_diag",
    "sklearn.linear_model._ridge._RidgeGCV.fit",
    "sklearn.linear_model._ridge._solve_lbfgs",
    "sklearn.linear_model._ridge._solve_lsqr",
    "sklearn.linear_model._ridge._solve_sparse_cg",
    "sklearn.linear_model._theil_sen.TheilSenRegressor.fit",
    "sklearn.linear_model._theil_sen._spatial_median",
    "sklearn.linear_model.tests.test_huber.test_huber_gradient",
    "sklearn.manifold._isomap.Isomap.transform",
    "sklearn.manifold._locally_linear.LocallyLinearEmbedding.transform",
    "sklearn.manifold._locally_linear.locally_linear_embedding",
    "sklearn.manifold._mds._smacof_single",
    "sklearn.manifold._mds.smacof",
    "sklearn.manifold._spectral_embedding._graph_connected_component",
    "sklearn.manifold._t_sne._gradient_descent",
    "sklearn.manifold._t_sne._kl_divergence",
    "sklearn.metrics._base._average_binary_score",
    "sklearn.metrics._classification.classification_report",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot",
    "sklearn.metrics._scorer.$toplevel",
    "sklearn.metrics._scorer._BaseScorer.set_score_request",
    "sklearn.metrics._scorer._MultimetricScorer._use_cache",
    "sklearn.metrics._scorer._ThresholdScorer._score",
    "sklearn.metrics._scorer._check_multimetric_scoring",
    "sklearn.metrics.cluster._bicluster._pairwise_similarity",
    "sklearn.metrics.cluster._unsupervised._silhouette_reduce",
    "sklearn.metrics.cluster._unsupervised.calinski_harabasz_score",
    "sklearn.metrics.cluster._unsupervised.davies_bouldin_score",
    "sklearn.metrics.pairwise._pairwise_callable",
    "sklearn.metrics.pairwise.paired_distances",
    "sklearn.metrics.pairwise.pairwise_kernels",
    "sklearn.mixture._base.BaseMixture.fit_predict",
    "sklearn.mixture._bayesian_mixture.BayesianGaussianMixture._estimate_wishart_full",
    "sklearn.mixture._gaussian_mixture._estimate_gaussian_covariances_full",
    "sklearn.model_selection._plot._BaseCurveDisplay._plot_curve",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.model_selection._search.BaseSearchCV._format_results._store",
    "sklearn.model_selection._search.ParameterGrid.__getitem__",
    "sklearn.model_selection._search.ParameterGrid.__init__",
    "sklearn.model_selection._search.ParameterSampler.__init__",
    "sklearn.model_selection._search.ParameterSampler.__iter__",
    "sklearn.model_selection._search_successive_halving.BaseSuccessiveHalving._run_search",
    "sklearn.model_selection._search_successive_halving._top_k",
    "sklearn.model_selection._split.GroupKFold._iter_test_indices",
    "sklearn.model_selection._split.ShuffleSplit._iter_indices",
    "sklearn.model_selection._split.StratifiedGroupKFold._find_best_fold",
    "sklearn.model_selection._split.StratifiedGroupKFold._iter_test_indices",
    "sklearn.model_selection._split.StratifiedKFold._iter_test_masks",
    "sklearn.model_selection._split.StratifiedKFold._make_test_folds",
    "sklearn.model_selection._split.StratifiedShuffleSplit._iter_indices",
    "sklearn.model_selection._split.TimeSeriesSplit.split",
    "sklearn.model_selection._split._RepeatedSplits.__init__",
    "sklearn.model_selection._split._RepeatedSplits.split",
    "sklearn.model_selection._split._build_repr",
    "sklearn.model_selection._split._pprint",
    "sklearn.model_selection._validation._fit_and_predict",
    "sklearn.model_selection._validation._fit_and_score",
    "sklearn.model_selection._validation._insert_error_scores",
    "sklearn.model_selection._validation._score",
    "sklearn.model_selection._validation._warn_or_raise_about_fit_failures",
    "sklearn.model_selection._validation.cross_val_predict",
    "sklearn.model_selection._validation.learning_curve",
    "sklearn.model_selection._validation.permutation_test_score",
    "sklearn.multiclass.OneVsOneClassifier.fit",
    "sklearn.multiclass.OneVsOneClassifier.partial_fit",
    "sklearn.multiclass.OneVsRestClassifier.partial_fit",
    "sklearn.multiclass.OutputCodeClassifier.fit",
    "sklearn.multioutput._BaseChain.fit",
    "sklearn.multioutput._MultiOutputEstimator.fit",
    "sklearn.multioutput._MultiOutputEstimator.partial_fit",
    "sklearn.naive_bayes.CategoricalNB._count",
    "sklearn.naive_bayes.CategoricalNB._count._update_cat_count",
    "sklearn.naive_bayes.CategoricalNB._init_counters",
    "sklearn.naive_bayes.CategoricalNB._joint_log_likelihood",
    "sklearn.naive_bayes.CategoricalNB._update_feature_log_prob",
    "sklearn.naive_bayes.GaussianNB._joint_log_likelihood",
    "sklearn.neighbors._base.NeighborsBase._fit",
    "sklearn.neighbors._base.RadiusNeighborsMixin.radius_neighbors",
    "sklearn.neighbors._kde.KernelDensity.$class_toplevel",
    "sklearn.neighbors._nearest_centroid.NearestCentroid.fit",
    "sklearn.neighbors._regression.KNeighborsRegressor.predict",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_kneighbors_regressor",
    "sklearn.neighbors.tests.test_neighbors_pipeline.test_tsne",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._backprop",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_lbfgs",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._fit_stochastic",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._forward_pass",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._forward_pass_fast",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._initialize",
    "sklearn.neural_network._multilayer_perceptron.BaseMultilayerPerceptron._unpack",
    "sklearn.neural_network._rbm.BernoulliRBM.fit",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_adam_optimizer",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_base_optimizer",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_nesterovs_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_no_momentum",
    "sklearn.neural_network.tests.test_stochastic_optimizers.test_sgd_optimizer_trigger_stopping",
    "sklearn.pipeline.FeatureUnion._validate_transformers",
    "sklearn.pipeline.Pipeline._check_fit_params",
    "sklearn.pipeline.Pipeline._sk_visual_block_",
    "sklearn.pipeline.Pipeline._validate_steps",
    "sklearn.pipeline._name_estimators",
    "sklearn.preprocessing._data.QuantileTransformer._sparse_fit",
    "sklearn.preprocessing._data.QuantileTransformer._transform",
    "sklearn.preprocessing._data.RobustScaler.fit",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.fit",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.inverse_transform",
    "sklearn.preprocessing._discretization.KBinsDiscretizer.transform",
    "sklearn.preprocessing._encoders.OneHotEncoder._set_drop_idx",
    "sklearn.preprocessing._encoders.OneHotEncoder.get_feature_names_out",
    "sklearn.preprocessing._encoders.OneHotEncoder.inverse_transform",
    "sklearn.preprocessing._encoders.OrdinalEncoder.fit",
    "sklearn.preprocessing._encoders.OrdinalEncoder.inverse_transform",
    "sklearn.preprocessing._encoders._BaseEncoder._check_X",
    "sklearn.preprocessing._encoders._BaseEncoder._fit",
    "sklearn.preprocessing._encoders._BaseEncoder._map_infrequent_categories",
    "sklearn.preprocessing._encoders._BaseEncoder._transform",
    "sklearn.preprocessing._label.MultiLabelBinarizer.fit_transform",
    "sklearn.preprocessing._polynomial.PolynomialFeatures._combinations",
    "sklearn.preprocessing._polynomial.PolynomialFeatures._num_combinations",
    "sklearn.preprocessing._polynomial.PolynomialFeatures.transform",
    "sklearn.preprocessing._polynomial.SplineTransformer.fit",
    "sklearn.preprocessing._polynomial.SplineTransformer.get_feature_names_out",
    "sklearn.preprocessing._polynomial.SplineTransformer.transform",
    "sklearn.random_projection._sparse_random_matrix",
    "sklearn.semi_supervised._label_propagation.BaseLabelPropagation.fit",
    "sklearn.svm._base.BaseSVC.$class_toplevel",
    "sklearn.svm._base._one_vs_one_coef",
    "sklearn.svm._classes.NuSVR.$class_toplevel",
    "sklearn.svm._classes.OneClassSVM.$class_toplevel",
    "sklearn.svm._classes.SVR.$class_toplevel",
    "sklearn.tests.test_kernel_ridge.test_kernel_ridge_precomputed",
    "sklearn.tree._classes.BaseDecisionTree._fit",
    "sklearn.tree._classes.BaseDecisionTree.predict",
    "sklearn.tree._classes.DecisionTreeClassifier.predict_log_proba",
    "sklearn.tree._classes.DecisionTreeClassifier.predict_proba",
    "sklearn.tree._export._BaseTreeExporter.get_color",
    "sklearn.tree._export._DOTTreeExporter.tail",
    "sklearn.tree._export._MPLTreeExporter.export",
    "sklearn.utils._array_api._estimator_with_converted_arrays",
    "sklearn.utils._array_api._isdtype_single",
    "sklearn.utils._array_api.isdtype",
    "sklearn.utils._determine_key_type",
    "sklearn.utils._encode._unique_python",
    "sklearn.utils._estimator_html_repr._get_visual_block",
    "sklearn.utils._get_column_indices",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests.MetadataRequest.__init__",
    "sklearn.utils._metadata_requests.MetadataRequest._serialize",
    "sklearn.utils._metadata_requests.MetadataRouter._route_params",
    "sklearn.utils._metadata_requests.MetadataRouter.add",
    "sklearn.utils._metadata_requests.MethodMetadataRequest._check_warnings",
    "sklearn.utils._metadata_requests.MethodMetadataRequest._route_params",
    "sklearn.utils._metadata_requests.RequestMethod.__get__.func",
    "sklearn.utils._metadata_requests._MetadataRequester.__init_subclass__",
    "sklearn.utils._metadata_requests._MetadataRequester._build_request_for_signature",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils._mocking.CheckingClassifier.fit",
    "sklearn.utils._param_validation.MissingValues.__str__",
    "sklearn.utils._param_validation.MissingValues.is_satisfied_by",
    "sklearn.utils._param_validation._Booleans.__str__",
    "sklearn.utils._param_validation._Booleans.is_satisfied_by",
    "sklearn.utils._param_validation._CVObjects.__str__",
    "sklearn.utils._param_validation._CVObjects.is_satisfied_by",
    "sklearn.utils._param_validation._RandomStates.__str__",
    "sklearn.utils._param_validation._RandomStates.is_satisfied_by",
    "sklearn.utils._param_validation._VerboseHelper.__str__",
    "sklearn.utils._param_validation._VerboseHelper.is_satisfied_by",
    "sklearn.utils._param_validation.validate_parameter_constraints",
    "sklearn.utils._param_validation.validate_params.decorator.wrapper",
    "sklearn.utils._pprint._EstimatorPrettyPrinter._pprint_estimator",
    "sklearn.utils._pprint._changed_params",
    "sklearn.utils._pprint._safe_repr",
    "sklearn.utils._set_output._SetOutputMixin.__init_subclass__",
    "sklearn.utils._show_versions._get_deps_info",
    "sklearn.utils._testing.MinimalClassifier.set_params",
    "sklearn.utils._testing.MinimalRegressor.set_params",
    "sklearn.utils._testing.MinimalTransformer.set_params",
    "sklearn.utils._testing._convert_container",
    "sklearn.utils._testing._get_args",
    "sklearn.utils._testing.assert_allclose",
    "sklearn.utils._testing.assert_raise_message",
    "sklearn.utils._testing.check_docstring_parameters",
    "sklearn.utils.class_weight.compute_sample_weight",
    "sklearn.utils.discovery.all_displays",
    "sklearn.utils.discovery.all_estimators",
    "sklearn.utils.discovery.all_functions",
    "sklearn.utils.estimator_checks._apply_on_subsets",
    "sklearn.utils.estimator_checks._check_transformer",
    "sklearn.utils.estimator_checks._generate_sparse_matrix",
    "sklearn.utils.estimator_checks._get_check_estimator_ids",
    "sklearn.utils.estimator_checks._output_from_fit_transform",
    "sklearn.utils.estimator_checks._yield_checks",
    "sklearn.utils.estimator_checks.check_array_api_input",
    "sklearn.utils.estimator_checks.check_class_weight_classifiers",
    "sklearn.utils.estimator_checks.check_classifier_data_not_an_array",
    "sklearn.utils.estimator_checks.check_classifier_multioutput",
    "sklearn.utils.estimator_checks.check_classifiers_classes",
    "sklearn.utils.estimator_checks.check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.estimator_checks.check_classifiers_train",
    "sklearn.utils.estimator_checks.check_dataframe_column_names_consistency",
    "sklearn.utils.estimator_checks.check_dict_unchanged",
    "sklearn.utils.estimator_checks.check_dont_overwrite_parameters",
    "sklearn.utils.estimator_checks.check_estimators_dtypes",
    "sklearn.utils.estimator_checks.check_estimators_nan_inf",
    "sklearn.utils.estimator_checks.check_estimators_pickle",
    "sklearn.utils.estimator_checks.check_estimators_unfitted",
    "sklearn.utils.estimator_checks.check_fit2d_predict1d",
    "sklearn.utils.estimator_checks.check_fit_idempotent",
    "sklearn.utils.estimator_checks.check_fit_score_takes_y",
    "sklearn.utils.estimator_checks.check_global_ouptut_transform_pandas",
    "sklearn.utils.estimator_checks.check_methods_sample_order_invariance",
    "sklearn.utils.estimator_checks.check_methods_subset_invariance",
    "sklearn.utils.estimator_checks.check_n_features_in_after_fitting",
    "sklearn.utils.estimator_checks.check_no_attributes_set_in_init",
    "sklearn.utils.estimator_checks.check_outliers_train",
    "sklearn.utils.estimator_checks.check_param_validation",
    "sklearn.utils.estimator_checks.check_parameters_default_constructible",
    "sklearn.utils.estimator_checks.check_pipeline_consistency",
    "sklearn.utils.estimator_checks.check_regressor_data_not_an_array",
    "sklearn.utils.estimator_checks.check_regressors_no_decision_function",
    "sklearn.utils.estimator_checks.check_requires_y_none",
    "sklearn.utils.estimator_checks.check_sample_weights_invariance",
    "sklearn.utils.estimator_checks.check_set_output_transform",
    "sklearn.utils.estimator_checks.check_set_output_transform_pandas",
    "sklearn.utils.estimator_checks.check_set_params",
    "sklearn.utils.estimator_checks.check_supervised_y_no_nan",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out",
    "sklearn.utils.estimator_checks.check_transformer_get_feature_names_out_pandas",
    "sklearn.utils.extmath.cartesian",
    "sklearn.utils.extmath.randomized_range_finder",
    "sklearn.utils.gen_batches",
    "sklearn.utils.gen_even_slices",
    "sklearn.utils.graph._fix_connected_components",
    "sklearn.utils.graph.single_source_shortest_path_length",
    "sklearn.utils.metaestimators._BaseComposition._set_params",
    "sklearn.utils.multiclass._ovr_decision_function",
    "sklearn.utils.multiclass.class_distribution",
    "sklearn.utils.multiclass.unique_labels",
    "sklearn.utils.random._random_choice_csc",
    "sklearn.utils.resample",
    "sklearn.utils.sparsefuncs.inplace_swap_row_csc",
    "sklearn.utils.sparsefuncs.inplace_swap_row_csr",
    "sklearn.utils.stats._weighted_percentile",
    "sklearn.utils.tests.test_estimator_checks.run_tests_without_pytest",
    "sklearn.utils.tests.test_estimator_checks.test_check_classifiers_multilabel_output_format_predict_proba",
    "sklearn.utils.tests.test_estimator_checks.test_check_estimator_clones",
    "sklearn.utils.tests.test_estimator_checks.test_check_outlier_contamination",
    "sklearn.utils.tests.test_estimator_checks.test_non_deterministic_estimator_skip_tests",
    "sklearn.utils.tests.test_fast_dict.test_int_float_dict",
    "sklearn.utils.tests.test_murmurhash.test_mmhash3_int_array",
    "sklearn.utils.tests.test_murmurhash.test_no_collision_on_byte_range",
    "sklearn.utils.tests.test_murmurhash.test_uniform_distribution",
    "sklearn.utils.tests.test_pprint.test_n_max_elements_to_show",
    "sklearn.utils.tests.test_shortest_path.floyd_warshall_slow",
    "sklearn.utils.tests.test_shortest_path.test_shortest_path",
    "sklearn.utils.validation._check_feature_names_in",
    "sklearn.utils.validation._check_large_sparse",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args",
    "sklearn.utils.validation._generate_get_feature_names_out",
    "sklearn.utils.validation._get_feature_names",
    "sklearn.utils.validation._is_fitted",
    "sklearn.utils.validation.check_array",
    "sklearn.utils.validation.check_consistent_length",
    "sklearn.utils.validation.check_scalar",
    "sklearn.utils.validation.indexable",
    "traitlets.config.loader.Config._ensure_subconfig",
    "traitlets.traitlets.HasTraits.__init__",
    "traitlets.traitlets.HasTraits._notify_observers",
    "traitlets.traitlets.HasTraits.hold_trait_notifications",
    "traitlets.traitlets._deprecated_method",
    "traitlets.utils.getargspec.getargspec",
    "werkzeug.utils.ImportStringError.__init__"
  ],
  "Ovr{typing.KeysView.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{typing.Mapping.get}": [
    "click._winconsole._get_windows_console_stream",
    "click.core.Parameter.consume_value",
    "jinja2.debug.get_template_locals"
  ],
  "Ovr{typing.Mapping.items}": [
    "jinja2.debug.get_template_locals",
    "jinja2.runtime.new_context"
  ],
  "Ovr{typing.Mapping.values}": [
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary"
  ],
  "Ovr{typing.MutableMapping.__setitem__}": [
    "click._compat.auto_wrap_for_ansi",
    "jinja2.environment.Template._from_namespace",
    "jinja2.lexer.get_lexer"
  ],
  "Ovr{typing.MutableSequence.__getitem__}": [
    "Ovr{typing.Sequence.__getitem__}"
  ],
  "Ovr{typing.Sequence.__getitem__}": [
    "click.core.Argument._parse_decls",
    "click.parser.OptionParser._process_args_for_args",
    "jinja2.lexer.Lexer.tokeniter",
    "libcst._flatten_sentinel.FlattenSentinel.__getitem__"
  ],
  "Ovr{typing.Sequence.__iter__}": [
    "Ovr{typing.Iterable.__iter__}",
    "click.core.Option._parse_decls",
    "click.core.Option.get_help_record",
    "click.core.Parameter.resolve_envvar_value",
    "click.exceptions._join_param_hints",
    "click.formatting.join_options",
    "click.parser.Argument.process",
    "click.parser.Option.__init__",
    "click.parser.OptionParser.add_option",
    "click.types.Choice.convert",
    "click.types.Tuple.__init__",
    "flask.cli.SeparatedPathType.convert",
    "jinja2.environment.load_extensions"
  ],
  "Ovr{typing.Sequence.index}": [
    "click.core.iter_params_for_processing.sort_key"
  ],
  "Ovr{typing.TextIO.buffer}": [
    "click._winconsole._get_windows_console_stream"
  ],
  "Ovr{typing.ValuesView.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{typing._TypedDict.items}": [
    "Ovr{typing.Mapping.items}"
  ],
  "Ovr{typing._TypedDict.values}": [
    "Ovr{typing.Mapping.values}"
  ],
  "Ovr{typing_extensions._TypedDict.items}": [
    "Ovr{typing.Mapping.items}"
  ],
  "Ovr{typing_extensions._TypedDict.values}": [
    "Ovr{typing.Mapping.values}"
  ],
  "Ovr{unittest.suite.BaseTestSuite.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{urllib.response.addbase.__iter__}": [
    "Ovr{typing.IO.__iter__}"
  ],
  "Ovr{urllib.response.addbase.__next__}": [
    "Ovr{typing.IO.__next__}"
  ],
  "Ovr{urllib.response.addbase.close}": [
    "Ovr{typing.IO.close}"
  ],
  "Ovr{urllib.response.addbase.flush}": [
    "Ovr{typing.IO.flush}"
  ],
  "Ovr{urllib.response.addbase.isatty}": [
    "Ovr{typing.IO.isatty}"
  ],
  "Ovr{urllib.response.addbase.read}": [
    "Ovr{typing.IO.read}"
  ],
  "Ovr{urllib.response.addbase.write}": [
    "Ovr{typing.IO.write}"
  ],
  "Ovr{urllib3._collections.HTTPHeaderDict.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{urllib3._collections.HTTPHeaderDict.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{urllib3._collections.HTTPHeaderDict.items}": [
    "Ovr{typing.Mapping.items}"
  ],
  "Ovr{urllib3._collections.RecentlyUsedContainer.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{urllib3._collections.RecentlyUsedContainer.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{weakref.WeakKeyDictionary.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{weakref.WeakKeyDictionary.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{weakref.WeakKeyDictionary.items}": [
    "Ovr{typing.Mapping.items}"
  ],
  "Ovr{weakref.WeakKeyDictionary.values}": [
    "Ovr{typing.Mapping.values}"
  ],
  "Ovr{weakref.WeakValueDictionary.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{weakref.WeakValueDictionary.__setitem__}": [
    "Ovr{typing.MutableMapping.__setitem__}"
  ],
  "Ovr{weakref.WeakValueDictionary.items}": [
    "Ovr{typing.Mapping.items}"
  ],
  "Ovr{weakref.WeakValueDictionary.values}": [
    "Ovr{typing.Mapping.values}"
  ],
  "Ovr{werkzeug.datastructures.accept.Accept.__getitem__}": [
    "Ovr{list.__getitem__}"
  ],
  "Ovr{werkzeug.datastructures.accept.Accept.index}": [
    "Ovr{list.index}"
  ],
  "Ovr{werkzeug.datastructures.etag.ETags.__iter__}": [
    "Ovr{typing.Iterable.__iter__}"
  ],
  "Ovr{werkzeug.datastructures.headers.EnvironHeaders.__getitem__}": [
    "Ovr{werkzeug.datastructures.headers.Headers.__getitem__}"
  ],
  "Ovr{werkzeug.datastructures.headers.EnvironHeaders.__iter__}": [
    "Ovr{werkzeug.datastructures.headers.Headers.__iter__}"
  ],
  "Ovr{werkzeug.datastructures.headers.EnvironHeaders.copy}": [
    "Ovr{werkzeug.datastructures.headers.Headers.copy}"
  ],
  "Ovr{werkzeug.datastructures.headers.Headers.__getitem__}": [
    "Ovr{dict.__getitem__}"
  ],
  "Ovr{werkzeug.datastructures.headers.Headers.__iter__}": [
    "Ovr{dict.__iter__}"
  ],
  "Ovr{werkzeug.datastructures.headers.Headers.__setitem__}": [
    "Ovr{dict.__setitem__}"
  ],
  "Ovr{werkzeug.datastructures.headers.Headers.copy}": [
    "Ovr{dict.copy}"
  ],
  "Ovr{werkzeug.datastructures.headers.Headers.get}": [
    "Ovr{dict.get}"
  ],
  "Ovr{werkzeug.datastructures.headers.Headers.items}": [
    "Ovr{dict.items}"
  ],
  "Ovr{werkzeug.datastructures.headers.Headers.keys}": [
    "Ovr{dict.keys}"
  ],
  "Ovr{werkzeug.datastructures.headers.Headers.pop}": [
    "Ovr{dict.pop}"
  ],
  "Ovr{werkzeug.datastructures.headers.Headers.setdefault}": [
    "click.globals.push_context",
    "click.parser.Option.process",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary"
  ],
  "Ovr{werkzeug.datastructures.headers.Headers.update}": [
    "benchmarks.bench_text_vectorizers.$toplevel",
    "importlib_metadata.DistributionFinder.Context.__init__",
    "importlib_metadata.EntryPoint.__init__",
    "jinja2.nodes.args_as_const",
    "pip._vendor.requests.cookies.create_cookie",
    "sklearn.base.BaseEstimator.__setstate__",
    "sklearn.base.BaseEstimator._get_tags",
    "sklearn.base.BaseEstimator.get_params",
    "sklearn.calibration.CalibrationDisplay.plot",
    "sklearn.externals._arff.$toplevel",
    "sklearn.gaussian_process.kernels.Exponentiation.get_params",
    "sklearn.gaussian_process.kernels.KernelOperator.get_params",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.plot",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.plot",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.metrics.pairwise.pairwise_distances_chunked",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f"
  ],
  "Ovr{werkzeug.datastructures.headers.Headers.values}": [
    "Ovr{dict.values}"
  ],
  "Ovr{werkzeug.datastructures.mixins.ImmutableDictMixin.__setitem__}": [
    "Ovr{dict.__setitem__}"
  ],
  "Ovr{werkzeug.datastructures.mixins.ImmutableDictMixin.pop}": [
    "Ovr{dict.pop}"
  ],
  "Ovr{werkzeug.datastructures.mixins.ImmutableHeadersMixin.__setitem__}": [
    "Ovr{werkzeug.datastructures.headers.Headers.__setitem__}"
  ],
  "Ovr{werkzeug.datastructures.mixins.ImmutableHeadersMixin.pop}": [
    "Ovr{werkzeug.datastructures.headers.Headers.pop}"
  ],
  "Ovr{werkzeug.datastructures.mixins.ImmutableHeadersMixin.setdefault}": [
    "Ovr{werkzeug.datastructures.headers.Headers.setdefault}"
  ],
  "Ovr{werkzeug.datastructures.mixins.ImmutableHeadersMixin.update}": [
    "Ovr{werkzeug.datastructures.headers.Headers.update}"
  ],
  "Ovr{werkzeug.datastructures.mixins.ImmutableListMixin.__iadd__}": [
    "Ovr{list.__iadd__}"
  ],
  "Ovr{werkzeug.datastructures.mixins.ImmutableListMixin.__setitem__}": [
    "Ovr{list.__setitem__}"
  ],
  "Ovr{werkzeug.datastructures.mixins.ImmutableListMixin.append}": [
    "Ovr{list.append}"
  ],
  "Ovr{werkzeug.datastructures.mixins.ImmutableListMixin.extend}": [
    "Ovr{list.extend}"
  ],
  "Ovr{werkzeug.datastructures.mixins.ImmutableListMixin.insert}": [
    "Ovr{list.insert}"
  ],
  "Ovr{werkzeug.datastructures.mixins.ImmutableListMixin.pop}": [
    "Ovr{list.pop}"
  ],
  "Ovr{werkzeug.datastructures.mixins.ImmutableListMixin.remove}": [
    "Ovr{list.remove}"
  ],
  "Ovr{werkzeug.datastructures.mixins.ImmutableListMixin.sort}": [
    "Ovr{list.sort}"
  ],
  "Ovr{werkzeug.datastructures.mixins.UpdateDictMixin.__setitem__}": [
    "Ovr{dict.__setitem__}"
  ],
  "Ovr{werkzeug.datastructures.mixins.UpdateDictMixin.pop}": [
    "Ovr{dict.pop}"
  ],
  "Ovr{werkzeug.datastructures.mixins.UpdateDictMixin.setdefault}": [
    "click.globals.push_context",
    "click.parser.Option.process",
    "sklearn.feature_extraction.text._VectorizerMixin._validate_vocabulary",
    "sklearn.linear_model._quantile.QuantileRegressor.fit"
  ],
  "Ovr{werkzeug.datastructures.structures.CombinedMultiDict.__getitem__}": [
    "Ovr{werkzeug.datastructures.structures.MultiDict.__getitem__}"
  ],
  "Ovr{werkzeug.datastructures.structures.CombinedMultiDict.__iter__}": [
    "Ovr{dict.__iter__}"
  ],
  "Ovr{werkzeug.datastructures.structures.CombinedMultiDict.copy}": [
    "Ovr{werkzeug.datastructures.structures.MultiDict.copy}"
  ],
  "Ovr{werkzeug.datastructures.structures.CombinedMultiDict.get}": [
    "Ovr{werkzeug.datastructures.structures.TypeConversionDict.get}"
  ],
  "Ovr{werkzeug.datastructures.structures.CombinedMultiDict.items}": [
    "Ovr{werkzeug.datastructures.structures.MultiDict.items}"
  ],
  "Ovr{werkzeug.datastructures.structures.CombinedMultiDict.keys}": [
    "Ovr{dict.keys}"
  ],
  "Ovr{werkzeug.datastructures.structures.CombinedMultiDict.values}": [
    "Ovr{werkzeug.datastructures.structures.MultiDict.values}"
  ],
  "Ovr{werkzeug.datastructures.structures.HeaderSet.__iter__}": [
    "Ovr{set.__iter__}"
  ],
  "Ovr{werkzeug.datastructures.structures.HeaderSet.add}": [
    "Ovr{set.add}"
  ],
  "Ovr{werkzeug.datastructures.structures.HeaderSet.update}": [
    "Ovr{set.update}"
  ],
  "Ovr{werkzeug.datastructures.structures.ImmutableDict.copy}": [
    "Ovr{dict.copy}"
  ],
  "Ovr{werkzeug.datastructures.structures.ImmutableMultiDict.copy}": [
    "Ovr{werkzeug.datastructures.structures.MultiDict.copy}"
  ],
  "Ovr{werkzeug.datastructures.structures.ImmutableOrderedMultiDict.copy}": [
    "Ovr{werkzeug.datastructures.structures.MultiDict.copy}"
  ],
  "Ovr{werkzeug.datastructures.structures.ImmutableTypeConversionDict.copy}": [
    "Ovr{dict.copy}"
  ],
  "Ovr{werkzeug.datastructures.structures.MultiDict.__getitem__}": [
    "Ovr{dict.__getitem__}"
  ],
  "Ovr{werkzeug.datastructures.structures.MultiDict.__setitem__}": [
    "Ovr{dict.__setitem__}"
  ],
  "Ovr{werkzeug.datastructures.structures.MultiDict.copy}": [
    "Ovr{dict.copy}"
  ],
  "Ovr{werkzeug.datastructures.structures.MultiDict.items}": [
    "Ovr{dict.items}"
  ],
  "Ovr{werkzeug.datastructures.structures.MultiDict.pop}": [
    "Ovr{dict.pop}"
  ],
  "Ovr{werkzeug.datastructures.structures.MultiDict.update}": [
    "benchmarks.bench_text_vectorizers.$toplevel",
    "examples.cluster.plot_cluster_comparison.$toplevel",
    "examples.cluster.plot_linkage_comparison.$toplevel",
    "examples.ensemble.plot_gradient_boosting_regularization.$toplevel",
    "importlib_metadata.DistributionFinder.Context.__init__",
    "importlib_metadata.EntryPoint.__init__",
    "jinja2.nodes.args_as_const",
    "pip._vendor.requests.cookies.create_cookie",
    "sklearn.base.BaseEstimator.__setstate__",
    "sklearn.base.BaseEstimator._get_tags",
    "sklearn.base.BaseEstimator.get_params",
    "sklearn.calibration.CalibrationDisplay.plot",
    "sklearn.externals._arff.$toplevel",
    "sklearn.gaussian_process.kernels.Exponentiation.get_params",
    "sklearn.gaussian_process.kernels.KernelOperator.get_params",
    "sklearn.metrics._plot.det_curve.DetCurveDisplay.plot",
    "sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay.plot",
    "sklearn.metrics._plot.roc_curve.RocCurveDisplay.plot",
    "sklearn.metrics.pairwise.pairwise_distances",
    "sklearn.metrics.pairwise.pairwise_distances_chunked",
    "sklearn.model_selection._search.BaseSearchCV._format_results",
    "sklearn.utils._metadata_requests.MetadataRequest.__getattr__",
    "sklearn.utils._metadata_requests._MetadataRequester._get_default_requests",
    "sklearn.utils.validation._deprecate_positional_args._inner_deprecate_positional_args.inner_f"
  ],
  "Ovr{werkzeug.datastructures.structures.MultiDict.values}": [
    "Ovr{dict.values}"
  ],
  "Ovr{werkzeug.datastructures.structures.OrderedMultiDict.__getitem__}": [
    "Ovr{werkzeug.datastructures.structures.MultiDict.__getitem__}"
  ],
  "Ovr{werkzeug.datastructures.structures.OrderedMultiDict.__iter__}": [
    "Ovr{dict.__iter__}"
  ],
  "Ovr{werkzeug.datastructures.structures.OrderedMultiDict.__setitem__}": [
    "Ovr{werkzeug.datastructures.structures.MultiDict.__setitem__}"
  ],
  "Ovr{werkzeug.datastructures.structures.OrderedMultiDict.items}": [
    "Ovr{werkzeug.datastructures.structures.MultiDict.items}"
  ],
  "Ovr{werkzeug.datastructures.structures.OrderedMultiDict.keys}": [
    "Ovr{dict.keys}"
  ],
  "Ovr{werkzeug.datastructures.structures.OrderedMultiDict.pop}": [
    "Ovr{werkzeug.datastructures.structures.MultiDict.pop}"
  ],
  "Ovr{werkzeug.datastructures.structures.OrderedMultiDict.update}": [
    "Ovr{werkzeug.datastructures.structures.MultiDict.update}"
  ],
  "Ovr{werkzeug.datastructures.structures.OrderedMultiDict.values}": [
    "Ovr{werkzeug.datastructures.structures.MultiDict.values}"
  ],
  "Ovr{werkzeug.datastructures.structures.TypeConversionDict.get}": [
    "Ovr{dict.get}"
  ],
  "Ovr{win32.lib.win32timezone.RangeMap.__getitem__}": [
    "Ovr{dict.__getitem__}"
  ],
  "Ovr{win32.lib.win32timezone.RangeMap.get}": [
    "Ovr{dict.get}"
  ],
  "Ovr{xml.dom.minicompat.EmptyNodeList.__add__}": [
    "Ovr{tuple.__add__}"
  ],
  "Ovr{zip.__iter__}": [
    "Ovr{typing.Iterator.__iter__}"
  ],
  "Ovr{zip.__next__}": [
    "Ovr{typing.Iterator.__next__}"
  ],
  "Ovr{zstandard.ZstdCompressionReader.__iter__}": [
    "Ovr{typing.IO.__iter__}"
  ],
  "Ovr{zstandard.ZstdCompressionReader.__next__}": [
    "Ovr{typing.IO.__next__}"
  ],
  "Ovr{zstandard.ZstdCompressionReader.close}": [
    "Ovr{typing.IO.close}"
  ],
  "Ovr{zstandard.ZstdCompressionReader.flush}": [
    "Ovr{typing.IO.flush}"
  ],
  "Ovr{zstandard.ZstdCompressionReader.isatty}": [
    "Ovr{typing.IO.isatty}"
  ],
  "Ovr{zstandard.ZstdCompressionReader.read}": [
    "Ovr{typing.IO.read}"
  ],
  "Ovr{zstandard.ZstdCompressionReader.write}": [
    "Ovr{typing.IO.write}"
  ],
  "Ovr{zstandard.ZstdCompressionWriter.close}": [
    "Ovr{typing.IO.close}"
  ],
  "Ovr{zstandard.ZstdCompressionWriter.flush}": [
    "Ovr{typing.IO.flush}"
  ],
  "Ovr{zstandard.ZstdCompressionWriter.isatty}": [
    "Ovr{typing.IO.isatty}"
  ],
  "Ovr{zstandard.ZstdCompressionWriter.read}": [
    "Ovr{typing.IO.read}"
  ],
  "Ovr{zstandard.ZstdCompressionWriter.write}": [
    "Ovr{typing.IO.write}"
  ],
  "Ovr{zstandard.ZstdDecompressionReader.__iter__}": [
    "Ovr{typing.IO.__iter__}"
  ],
  "Ovr{zstandard.ZstdDecompressionReader.__next__}": [
    "Ovr{typing.IO.__next__}"
  ],
  "Ovr{zstandard.ZstdDecompressionReader.close}": [
    "Ovr{typing.IO.close}"
  ],
  "Ovr{zstandard.ZstdDecompressionReader.flush}": [
    "Ovr{typing.IO.flush}"
  ],
  "Ovr{zstandard.ZstdDecompressionReader.isatty}": [
    "Ovr{typing.IO.isatty}"
  ],
  "Ovr{zstandard.ZstdDecompressionReader.read}": [
    "Ovr{typing.IO.read}"
  ],
  "Ovr{zstandard.ZstdDecompressionReader.write}": [
    "Ovr{typing.IO.write}"
  ],
  "Ovr{zstandard.ZstdDecompressionWriter.close}": [
    "Ovr{typing.IO.close}"
  ],
  "Ovr{zstandard.ZstdDecompressionWriter.flush}": [
    "Ovr{typing.IO.flush}"
  ],
  "Ovr{zstandard.ZstdDecompressionWriter.isatty}": [
    "Ovr{typing.IO.isatty}"
  ],
  "Ovr{zstandard.ZstdDecompressionWriter.read}": [
    "Ovr{typing.IO.read}"
  ],
  "Ovr{zstandard.ZstdDecompressionWriter.write}": [
    "Ovr{typing.IO.write}"
  ]
}